Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (139778)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 93
% Passive clauses: 1478
% Generated clauses: 16529
% Final active clauses: 82
% Final passive clauses: 1291
% Input formulas: 21
% Initial clauses: 29
% 
% Duplicate literals: 1275
% Trivial inequalities: 280
% Fw subsumption resolutions: 2301
% Fw demodulations: 902
% Bw demodulations: 10
% 
% Simple tautologies: 370
% Equational tautologies: 115
% Forward subsumptions: 7484
% 
% Binary resolution: 19
% Forward superposition: 6149
% Backward superposition: 4693
% Self superposition: 393
% Equality factoring: 338
% Equality resolution: 21
% 
% Split clauses: 802
% Split components: 1624
% SAT solver clauses: 2239
% SAT solver unit clauses: 279
% SAT solver binary clauses: 779
% 
% Sat splits: 802
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2227
% TWLsolver calls for satisfiability: 75
% 
% Memory used [KB]: 6268
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (139835)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 63
% Passive clauses: 145
% Generated clauses: 8158
% Final active clauses: 58
% Final passive clauses: 75
% Input formulas: 21
% Initial clauses: 29
% 
% Duplicate literals: 1107
% Trivial inequalities: 105
% Fw subsumption resolutions: 594
% Fw demodulations: 308
% Bw demodulations: 11
% Condensations: 1978
% 
% Simple tautologies: 158
% Equational tautologies: 74
% Forward subsumptions: 3270
% 
% Binary resolution: 8
% Forward superposition: 1919
% Backward superposition: 1593
% Self superposition: 208
% Equality factoring: 204
% Equality resolution: 13
% 
% Split clauses: 25
% Split components: 50
% SAT solver clauses: 418
% SAT solver unit clauses: 55
% SAT solver binary clauses: 67
% 
% Sat splits: 25
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 418
% TWLsolver calls for satisfiability: 247
% 
% Memory used [KB]: 4733
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% (139881)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 192
% Passive clauses: 936
% Generated clauses: 117190
% Final active clauses: 129
% Final passive clauses: 389
% Input formulas: 21
% Initial clauses: 29
% Discarded non-redundant clauses: 1743
% 
% Duplicate literals: 10097
% Trivial inequalities: 833
% Fw subsumption resolutions: 12302
% Fw demodulations: 8297
% Bw demodulations: 116
% Condensations: 20878
% Global subsumptions: 21
% 
% Simple tautologies: 1038
% Equational tautologies: 1612
% Forward subsumptions: 58478
% Bw demodulations to eq. taut.: 3
% 
% Unit resulting resolution: 4799
% Forward superposition: 28377
% Backward superposition: 29892
% Self superposition: 912
% Equality factoring: 667
% Equality resolution: 40
% 
% Split clauses: 480
% Split components: 969
% SAT solver clauses: 1946
% SAT solver unit clauses: 39
% SAT solver binary clauses: 82
% 
% Sat splits: 480
% Sat splitting refutations: 27
% 
% Memory used [KB]: 43879
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f19913,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f169,f171,f170,f174,f184,f182,f209,f226,f228,f238,f236,f250,f253,f251,f266,f283,f354,f376,f180,f399,f421,f234,f533,f535,f542,f558,f543,f544,f568,f545,f546,f547,f548,f549,f614,f556,f563,f615,f616,f617,f618,f566,f571,f619,f620,f621,f634,f652,f650,f681,f685,f683,f687,f688,f710,f715,f717,f719,f706,f729,f730,f751,f755,f709,f756,f758,f268,f636,f748,f721,f778,f572,f780,f574,f567,f1180,f1182,f1183,f1186,f1187,f1188,f1189,f1190,f1191,f1192,f1193,f1194,f1195,f1197,f1198,f1200,f1201,f1203,f1204,f1206,f1207,f1208,f1209,f1210,f1211,f1212,f1213,f1214,f1215,f1217,f1218,f1220,f1221,f1223,f1224,f1226,f1227,f1228,f1229,f1230,f1231,f1232,f1233,f1234,f1235,f1236,f1237,f1238,f1239,f1240,f1241,f1242,f1243,f1244,f1245,f1246,f1247,f1248,f1249,f1250,f1251,f1252,f1253,f1254,f1255,f1256,f1257,f1258,f1259,f1260,f1261,f1262,f1263,f1264,f1265,f1266,f1267,f826,f562,f1270,f1271,f1272,f1273,f811,f570,f1274,f1275,f794,f1288,f1289,f1290,f1291,f1292,f1293,f1294,f1295,f1296,f1297,f1298,f1299,f1300,f1301,f1302,f1303,f1412,f560,f1420,f8355,f8524,f8525,f8526,f8523,f8529,f8530,f8532,f8533,f8535,f8536,f8537,f8538,f8539,f8540,f8541,f8542,f8543,f8544,f8546,f8547,f8548,f8549,f8550,f8551,f8552,f8553,f8554,f8555,f8556,f8557,f8558,f8559,f8560,f8561,f8562,f8563,f8564,f8565,f8566,f8567,f8568,f8569,f8570,f8571,f8572,f8573,f8574,f8575,f7003,f8583,f5466,f5429,f8588,f5315,f5282,f8589,f5279,f8590,f5156,f5121,f8593,f5017,f4988,f8596,f4606,f8597,f3336,f8598,f8599,f8600,f2451,f8603,f8604,f8605,f8607,f8608,f8609,f8610,f8611,f8612,f8613,f8614,f8616,f8617,f8618,f8619,f8620,f8621,f8624,f8625,f8627,f8628,f8629,f8630,f8631,f8632,f8633,f8634,f8635,f8636,f8637,f8638,f8639,f8640,f8641,f8642,f8643,f8644,f8645,f8646,f8647,f8648,f8649,f8650,f8651,f8652,f8653,f8654,f8655,f8656,f8657,f8658,f8659,f8660,f8661,f8662,f8663,f8664,f8665,f8666,f8667,f8668,f8669,f8670,f8671,f8672,f8673,f8674,f8676,f8677,f8678,f8679,f8680,f8681,f8682,f8683,f8686,f8687,f8688,f8689,f8690,f8691,f8692,f8693,f1400,f8695,f8696,f8697,f8698,f1391,f8699,f8700,f8702,f8703,f8704,f8705,f8707,f8708,f8709,f8710,f8711,f8712,f1360,f8694,f8713,f8714,f1317,f211,f1181,f919,f915,f1184,f557,f795,f564,f8328,f8339,f8486,f8502,f8517,f644,f642,f8430,f640,f638,f798,f1185,f1269,f8739,f8878,f9323,f8358,f9329,f9384,f8359,f9383,f648,f8735,f537,f646,f19912])).
fof(f19912,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f19911,f65])).
fof(f65,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) & s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9])],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) & s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) & s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) & s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X6),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X12)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X9)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X15),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X15))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X6),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X12)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X9)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X15),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X15))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))))),
  file('thm.clos_knownProof.known_correct','thm.clos_knownProof.known_correct')).
fof(f19911,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | $spl2),
  inference(equality_resolution,[],[f2389])).
fof(f2389,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f2388,f78])).
fof(f78,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_knownProof.known_correct',aHL_TRUTH)).
fof(f2388,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(forward_demodulation,[],[f2387,f127])).
fof(f127,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))),
  inference(subsumption_resolution,[],[f125,f77])).
fof(f77,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.known_correct',aHL_FALSITY)).
fof(f125,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))),
  inference(superposition,[],[f59,f80])).
fof(f80,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_knownProof.known_correct',aHL_BOOL_CASES)).
fof(f59,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))))),
  inference(cnf_transformation,[],[f45])).
fof(f2387,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(superposition,[],[f676,f63])).
fof(f63,plain,(
  s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))),
  inference(cnf_transformation,[],[f45])).
fof(f676,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f674,f64])).
fof(f64,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))),
  inference(cnf_transformation,[],[f45])).
fof(f674,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(equality_resolution,[],[f331])).
fof(f331,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(sK0),X2))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(sK0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f328,f78])).
fof(f328,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(sK0),X2))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(sK0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(superposition,[],[f171,f89])).
fof(f89,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))),
  inference(subsumption_resolution,[],[f87,f77])).
fof(f87,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))),
  inference(superposition,[],[f61,f80])).
fof(f61,plain,(
  p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))))),
  inference(cnf_transformation,[],[f45])).
fof(f646,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl60),
  inference(cnf_transformation,[],[f646_D])).
fof(f646_D,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f537,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl26),
  inference(cnf_transformation,[],[f537_D])).
fof(f537_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f8735,plain,(
  ( ! [X2] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,f(s('type.closSem.v',sK30(X2,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X2,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl354),
  inference(cnf_transformation,[],[f8735_D])).
fof(f8735_D,plain,(
  ( ! [X2] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,f(s('type.closSem.v',sK30(X2,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X2,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl354),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl354])])).
fof(f648,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl62),
  inference(cnf_transformation,[],[f648_D])).
fof(f648_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f9383,plain,(
  ( ! [X21] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X21),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X21,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X21,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl48),
  inference(trivial_inequality_removal,[],[f9380])).
fof(f9380,plain,(
  ( ! [X21] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X21),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X21,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X21,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl48),
  inference(superposition,[],[f1867,f633])).
fof(f633,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl48),
  inference(cnf_transformation,[],[f633_D])).
fof(f633_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f1867,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X5,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1117,f79])).
fof(f79,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,X1),X2) = s(fun(X0,X1),X3) | s(X1,f(s(X0,sK30(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK30(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK30(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK30(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK30])],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.clos_knownProof.known_correct',aHL_EXT)).
fof(f1117,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1115])).
fof(f1115,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f460,f80])).
fof(f460,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f272,f80])).
fof(f272,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f155,f79])).
fof(f155,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f103,f80])).
fof(f103,plain,(
  ( ! [X1] : (s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f60,f79])).
fof(f60,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2))))),
  inference(cnf_transformation,[],[f45])).
fof(f8359,plain,(
  ( ! [X2] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v'))))) ) | $spl184),
  inference(cnf_transformation,[],[f8359_D])).
fof(f8359_D,plain,(
  ( ! [X2] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v'))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f9384,plain,(
  ( ! [X20] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X20),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X20,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X20,bool,'type.closSem.v'))))) ) | $spl48),
  inference(trivial_inequality_removal,[],[f9379])).
fof(f9379,plain,(
  ( ! [X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X20),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X20,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X20,bool,'type.closSem.v'))))) ) | $spl48),
  inference(superposition,[],[f1866,f633])).
fof(f1866,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1117,f79])).
fof(f9329,plain,(
  $false | ($spl25 | $spl49)),
  inference(subsumption_resolution,[],[f9328,f634])).
fof(f9328,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl25),
  inference(trivial_inequality_removal,[],[f9327])).
fof(f9327,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl25),
  inference(superposition,[],[f534,f80])).
fof(f534,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl25),
  inference(cnf_transformation,[],[f534_D])).
fof(f534_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f8358,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl182),
  inference(cnf_transformation,[],[f8358_D])).
fof(f8358_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f9323,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | $spl24),
  inference(trivial_inequality_removal,[],[f9318])).
fof(f9318,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1880,f535])).
fof(f1880,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1123,f79])).
fof(f1123,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1121])).
fof(f1121,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f461,f80])).
fof(f461,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f272,f80])).
fof(f8878,plain,(
  $false | ($spl28 | $spl30 | $spl34 | $spl37)),
  inference(subsumption_resolution,[],[f8818,f727])).
fof(f727,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl30 | $spl37)),
  inference(forward_demodulation,[],[f564,f557])).
fof(f8818,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl28 | $spl34)),
  inference(backward_demodulation,[],[f562,f556])).
fof(f8739,plain,(
  $false | $spl0),
  inference(equality_resolution,[],[f170])).
fof(f1269,plain,(
  s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | $spl156),
  inference(cnf_transformation,[],[f1269_D])).
fof(f1269_D,plain,(
  s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f1185,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl81),
  inference(cnf_transformation,[],[f1185_D])).
fof(f1185_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f798,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | ($spl20 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f795,f557])).
fof(f638,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl52),
  inference(cnf_transformation,[],[f638_D])).
fof(f638_D,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f640,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl54),
  inference(cnf_transformation,[],[f640_D])).
fof(f640_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f8430,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl24),
  inference(trivial_inequality_removal,[],[f8425])).
fof(f8425,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1758,f535])).
fof(f1758,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1066,f79])).
fof(f1066,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1064])).
fof(f1064,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f452,f80])).
fof(f452,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f230,f80])).
fof(f230,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f153,f79])).
fof(f153,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f102,f80])).
fof(f102,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f60,f79])).
fof(f642,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl56),
  inference(cnf_transformation,[],[f642_D])).
fof(f642_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f644,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl58),
  inference(cnf_transformation,[],[f644_D])).
fof(f644_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f8517,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | $spl24),
  inference(trivial_inequality_removal,[],[f8512])).
fof(f8512,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1813,f535])).
fof(f1813,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1095,f79])).
fof(f1095,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1094])).
fof(f1094,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f457,f80])).
fof(f457,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f262,f80])).
fof(f262,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f154,f79])).
fof(f154,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f102,f80])).
fof(f8502,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1800,f535])).
fof(f1800,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1089,f79])).
fof(f1089,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1088])).
fof(f1088,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f456,f80])).
fof(f456,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f262,f80])).
fof(f8486,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1799,f535])).
fof(f1799,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1089,f79])).
fof(f8339,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X2,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X2,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1736,f535])).
fof(f1736,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1060,f79])).
fof(f1060,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1058])).
fof(f1058,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f451,f80])).
fof(f451,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f230,f80])).
fof(f8328,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1735,f535])).
fof(f1735,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1060,f79])).
fof(f564,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl37),
  inference(cnf_transformation,[],[f564_D])).
fof(f564_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f795,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | ($spl20 | $spl28)),
  inference(superposition,[],[f760,f556])).
fof(f760,plain,(
  ( ! [X1] : (s(bool,f(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))))) ) | $spl20),
  inference(superposition,[],[f252,f79])).
fof(f252,plain,(
  s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) = s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | $spl20),
  inference(cnf_transformation,[],[f252_D])).
fof(f252_D,plain,(
  s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) = s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f557,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl30),
  inference(cnf_transformation,[],[f557_D])).
fof(f557_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1184,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl80),
  inference(cnf_transformation,[],[f1184_D])).
fof(f1184_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f915,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | ($spl20 | $spl28)),
  inference(superposition,[],[f829,f556])).
fof(f829,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(trivial_inequality_removal,[],[f828])).
fof(f828,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f797,f80])).
fof(f797,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f760,f80])).
fof(f919,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | ($spl20 | $spl28)),
  inference(superposition,[],[f556,f829])).
fof(f1181,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl76),
  inference(cnf_transformation,[],[f1181_D])).
fof(f1181_D,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f211,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl10),
  inference(cnf_transformation,[],[f211_D])).
fof(f211_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1317,plain,(
  ( ! [X6] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X6),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X6,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X6,bool,'type.closLang.exp'))))) ) | $spl8),
  inference(superposition,[],[f974,f183])).
fof(f183,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl8),
  inference(cnf_transformation,[],[f183_D])).
fof(f183_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f974,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f972])).
fof(f972,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f436,f80])).
fof(f436,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f204,f80])).
fof(f204,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f147,f79])).
fof(f147,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f96,f80])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f58,f79])).
fof(f58,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1))))),
  inference(cnf_transformation,[],[f45])).
fof(f8714,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl352),
  inference(cnf_transformation,[],[f8714_D])).
fof(f8714_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl352),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl352])])).
fof(f8713,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1356,f987])).
fof(f987,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f986])).
fof(f986,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f437,f80])).
fof(f437,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f204,f80])).
fof(f1356,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f987,f80])).
fof(f8694,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl334),
  inference(cnf_transformation,[],[f8694_D])).
fof(f8694_D,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f1360,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl8),
  inference(superposition,[],[f992,f183])).
fof(f992,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f990])).
fof(f990,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f438,f80])).
fof(f438,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f205,f80])).
fof(f205,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f147,f79])).
fof(f8712,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) ) | $spl350),
  inference(cnf_transformation,[],[f8712_D])).
fof(f8712_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) ) <=> ~$spl350),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl350])])).
fof(f8711,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1361,f992])).
fof(f1361,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f992,f80])).
fof(f8710,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) | $spl348),
  inference(cnf_transformation,[],[f8710_D])).
fof(f8710_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) <=> ~$spl348),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl348])])).
fof(f8709,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1365,f996])).
fof(f996,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f995])).
fof(f995,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f439,f80])).
fof(f439,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f205,f80])).
fof(f1365,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f996,f80])).
fof(f8708,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl346),
  inference(cnf_transformation,[],[f8708_D])).
fof(f8708_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl346),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl346])])).
fof(f8707,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1371,f1001])).
fof(f1001,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f999])).
fof(f999,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f440,f80])).
fof(f440,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f214,f80])).
fof(f214,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f148,f79])).
fof(f148,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f97,f80])).
fof(f97,plain,(
  ( ! [X1] : (s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f58,f79])).
fof(f1371,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1001,f80])).
fof(f8705,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl344),
  inference(cnf_transformation,[],[f8705_D])).
fof(f8705_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f8704,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1377,f1005])).
fof(f1005,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1003])).
fof(f1003,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f441,f80])).
fof(f441,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f214,f80])).
fof(f1377,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1005,f80])).
fof(f8703,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) ) | $spl342),
  inference(cnf_transformation,[],[f8703_D])).
fof(f8703_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) ) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f8702,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1382,f1016])).
fof(f1016,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1014])).
fof(f1014,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f443,f80])).
fof(f443,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f215,f80])).
fof(f215,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f148,f79])).
fof(f1382,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1016,f80])).
fof(f8700,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) | $spl340),
  inference(cnf_transformation,[],[f8700_D])).
fof(f8700_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f8699,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1388,f1020])).
fof(f1020,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1018])).
fof(f1018,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f444,f80])).
fof(f444,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f215,f80])).
fof(f1388,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1020,f80])).
fof(f1391,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl8),
  inference(superposition,[],[f1024,f183])).
fof(f1024,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1022])).
fof(f1022,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f445,f80])).
fof(f445,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f221,f80])).
fof(f221,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f149,f79])).
fof(f149,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f97,f80])).
fof(f8698,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl338),
  inference(cnf_transformation,[],[f8698_D])).
fof(f8698_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f8697,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1392,f1024])).
fof(f1392,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1024,f80])).
fof(f8696,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl336),
  inference(cnf_transformation,[],[f8696_D])).
fof(f8696_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f8695,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1396,f1028])).
fof(f1028,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1027])).
fof(f1027,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f446,f80])).
fof(f446,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f221,f80])).
fof(f1396,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1028,f80])).
fof(f1400,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl8),
  inference(superposition,[],[f1033,f183])).
fof(f1033,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1031])).
fof(f1031,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f447,f80])).
fof(f447,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f222,f80])).
fof(f222,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f149,f79])).
fof(f8693,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) ) | $spl332),
  inference(cnf_transformation,[],[f8693_D])).
fof(f8693_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f8692,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1401,f1033])).
fof(f1401,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1033,f80])).
fof(f8691,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) | $spl330),
  inference(cnf_transformation,[],[f8691_D])).
fof(f8691_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) <=> ~$spl330),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl330])])).
fof(f8690,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1405,f1042])).
fof(f1042,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f1041])).
fof(f1041,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f448,f80])).
fof(f448,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f222,f80])).
fof(f1405,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f1042,f80])).
fof(f8689,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl328),
  inference(cnf_transformation,[],[f8689_D])).
fof(f8689_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f8688,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1462,f1443])).
fof(f1443,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1422,f80])).
fof(f1422,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl32),
  inference(superposition,[],[f560,f79])).
fof(f1462,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1443,f80])).
fof(f8687,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl326),
  inference(cnf_transformation,[],[f8687_D])).
fof(f8687_D,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) <=> ~$spl326),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl326])])).
fof(f8686,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1464,f1444])).
fof(f1444,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1422,f80])).
fof(f1464,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1444,f80])).
fof(f8683,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl324),
  inference(cnf_transformation,[],[f8683_D])).
fof(f8683_D,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl324])])).
fof(f8682,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1473,f1451])).
fof(f1451,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1423,f80])).
fof(f1423,plain,(
  ( ! [X1] : (s(bool,f(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl32),
  inference(superposition,[],[f560,f79])).
fof(f1473,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1451,f80])).
fof(f8681,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl322),
  inference(cnf_transformation,[],[f8681_D])).
fof(f8681_D,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl322])])).
fof(f8680,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1476,f1452])).
fof(f1452,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1423,f80])).
fof(f1476,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1452,f80])).
fof(f8679,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl320),
  inference(cnf_transformation,[],[f8679_D])).
fof(f8679_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) <=> ~$spl320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl320])])).
fof(f8678,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1543,f1455])).
fof(f1455,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1432,f80])).
fof(f1432,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) ) | $spl32),
  inference(superposition,[],[f1430,f79])).
fof(f1430,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl32),
  inference(subsumption_resolution,[],[f1429,f77])).
fof(f1429,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl32),
  inference(superposition,[],[f560,f80])).
fof(f1543,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1455,f80])).
fof(f8677,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl318),
  inference(cnf_transformation,[],[f8677_D])).
fof(f8677_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f8676,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1545,f1456])).
fof(f1456,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1432,f80])).
fof(f1545,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1456,f80])).
fof(f8674,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl316),
  inference(cnf_transformation,[],[f8674_D])).
fof(f8674_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f8673,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1550,f1459])).
fof(f1459,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1433,f80])).
fof(f1433,plain,(
  ( ! [X1] : (s(bool,f(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) ) | $spl32),
  inference(superposition,[],[f1430,f79])).
fof(f1550,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1459,f80])).
fof(f8672,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl314),
  inference(cnf_transformation,[],[f8672_D])).
fof(f8672_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl314])])).
fof(f8671,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(subsumption_resolution,[],[f1553,f1460])).
fof(f1460,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1433,f80])).
fof(f1553,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl32),
  inference(superposition,[],[f1460,f80])).
fof(f8670,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) ) | $spl312),
  inference(cnf_transformation,[],[f8670_D])).
fof(f8670_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) ) <=> ~$spl312),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl312])])).
fof(f8669,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2165,f467])).
fof(f467,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f333,f80])).
fof(f333,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f295,f79])).
fof(f295,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f293])).
fof(f293,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f157,f80])).
fof(f157,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f115,f80])).
fof(f115,plain,(
  ( ! [X0] : (s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f100,f79])).
fof(f100,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))),
  inference(subsumption_resolution,[],[f99,f77])).
fof(f99,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))),
  inference(superposition,[],[f58,f80])).
fof(f2165,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f467,f80])).
fof(f8668,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl310),
  inference(cnf_transformation,[],[f8668_D])).
fof(f8668_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) <=> ~$spl310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl310])])).
fof(f8667,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2177,f468])).
fof(f468,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f333,f80])).
fof(f2177,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f468,f80])).
fof(f8666,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl308),
  inference(cnf_transformation,[],[f8666_D])).
fof(f8666_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl308])])).
fof(f8665,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2182,f469])).
fof(f469,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f334,f80])).
fof(f334,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f295,f79])).
fof(f2182,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f469,f80])).
fof(f8664,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) | $spl306),
  inference(cnf_transformation,[],[f8664_D])).
fof(f8664_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) <=> ~$spl306),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl306])])).
fof(f8663,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2187,f470])).
fof(f470,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f334,f80])).
fof(f2187,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f470,f80])).
fof(f8662,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) ) | $spl304),
  inference(cnf_transformation,[],[f8662_D])).
fof(f8662_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) ) <=> ~$spl304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl304])])).
fof(f8661,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2192,f471])).
fof(f471,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f343,f80])).
fof(f343,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f299,f79])).
fof(f299,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f298])).
fof(f298,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f158,f80])).
fof(f158,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f115,f80])).
fof(f2192,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f471,f80])).
fof(f8660,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl302),
  inference(cnf_transformation,[],[f8660_D])).
fof(f8660_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) <=> ~$spl302),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl302])])).
fof(f8659,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2196,f472])).
fof(f472,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f343,f80])).
fof(f2196,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f472,f80])).
fof(f8658,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl300),
  inference(cnf_transformation,[],[f8658_D])).
fof(f8658_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl300),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl300])])).
fof(f8657,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2209,f473])).
fof(f473,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f344,f80])).
fof(f344,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f299,f79])).
fof(f2209,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f473,f80])).
fof(f8656,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) | $spl298),
  inference(cnf_transformation,[],[f8656_D])).
fof(f8656_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f8655,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2213,f474])).
fof(f474,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f344,f80])).
fof(f2213,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f474,f80])).
fof(f8654,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl296),
  inference(cnf_transformation,[],[f8654_D])).
fof(f8654_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f8653,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2219,f476])).
fof(f476,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f355,f80])).
fof(f355,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f304,f79])).
fof(f304,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f302])).
fof(f302,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f159,f80])).
fof(f159,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f116,f80])).
fof(f116,plain,(
  ( ! [X1] : (s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f100,f79])).
fof(f2219,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f476,f80])).
fof(f8652,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl294),
  inference(cnf_transformation,[],[f8652_D])).
fof(f8652_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f8651,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2224,f477])).
fof(f477,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f355,f80])).
fof(f2224,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f477,f80])).
fof(f8650,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl292),
  inference(cnf_transformation,[],[f8650_D])).
fof(f8650_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f8649,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2229,f478])).
fof(f478,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f356,f80])).
fof(f356,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f304,f79])).
fof(f2229,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f478,f80])).
fof(f8648,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl290),
  inference(cnf_transformation,[],[f8648_D])).
fof(f8648_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f8647,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2241,f479])).
fof(f479,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f356,f80])).
fof(f2241,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f479,f80])).
fof(f8646,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl288),
  inference(cnf_transformation,[],[f8646_D])).
fof(f8646_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f8645,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2246,f480])).
fof(f480,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f365,f80])).
fof(f365,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f308,f79])).
fof(f308,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f307])).
fof(f307,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f160,f80])).
fof(f160,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f116,f80])).
fof(f2246,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f480,f80])).
fof(f8644,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl286),
  inference(cnf_transformation,[],[f8644_D])).
fof(f8644_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f8643,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2250,f481])).
fof(f481,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f365,f80])).
fof(f2250,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f481,f80])).
fof(f8642,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl284),
  inference(cnf_transformation,[],[f8642_D])).
fof(f8642_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f8641,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2256,f482])).
fof(f482,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f366,f80])).
fof(f366,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) )),
  inference(superposition,[],[f308,f79])).
fof(f2256,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f482,f80])).
fof(f8640,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl282),
  inference(cnf_transformation,[],[f8640_D])).
fof(f8640_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f8639,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f2260,f483])).
fof(f483,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f366,f80])).
fof(f2260,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f483,f80])).
fof(f8638,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) | $spl280),
  inference(cnf_transformation,[],[f8638_D])).
fof(f8638_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f8637,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2276,f484])).
fof(f484,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f378,f80])).
fof(f378,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f313,f79])).
fof(f313,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f311])).
fof(f311,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f161,f80])).
fof(f161,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f129,f80])).
fof(f129,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f106,f79])).
fof(f106,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))),
  inference(subsumption_resolution,[],[f105,f77])).
fof(f105,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))),
  inference(superposition,[],[f60,f80])).
fof(f2276,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f484,f80])).
fof(f8636,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) ) | $spl278),
  inference(cnf_transformation,[],[f8636_D])).
fof(f8636_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f8635,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2285,f485])).
fof(f485,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f378,f80])).
fof(f2285,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f485,f80])).
fof(f8634,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v'))))) ) | $spl276),
  inference(cnf_transformation,[],[f8634_D])).
fof(f8634_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v'))))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f8633,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2295,f487])).
fof(f487,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f379,f80])).
fof(f379,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f313,f79])).
fof(f2295,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f487,f80])).
fof(f8632,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) ) | $spl274),
  inference(cnf_transformation,[],[f8632_D])).
fof(f8632_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f8631,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2305,f488])).
fof(f488,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f379,f80])).
fof(f2305,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f488,f80])).
fof(f8630,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) | $spl272),
  inference(cnf_transformation,[],[f8630_D])).
fof(f8630_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f8629,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2316,f489])).
fof(f489,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f388,f80])).
fof(f388,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f317,f79])).
fof(f317,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f316])).
fof(f316,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f162,f80])).
fof(f162,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f129,f80])).
fof(f2316,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f489,f80])).
fof(f8628,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) ) | $spl270),
  inference(cnf_transformation,[],[f8628_D])).
fof(f8628_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f8627,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2331,f490])).
fof(f490,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f388,f80])).
fof(f2331,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f490,f80])).
fof(f8625,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v'))))) ) | $spl268),
  inference(cnf_transformation,[],[f8625_D])).
fof(f8625_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v'))))) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f8624,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2342,f491])).
fof(f491,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f389,f80])).
fof(f389,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f317,f79])).
fof(f2342,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f491,f80])).
fof(f8621,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) ) | $spl266),
  inference(cnf_transformation,[],[f8621_D])).
fof(f8621_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f8620,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2350,f492])).
fof(f492,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f389,f80])).
fof(f2350,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f492,f80])).
fof(f8619,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl264),
  inference(cnf_transformation,[],[f8619_D])).
fof(f8619_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f8618,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2363,f493])).
fof(f493,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f400,f80])).
fof(f400,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f322,f79])).
fof(f322,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f320])).
fof(f320,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f172,f80])).
fof(f172,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f130,f80])).
fof(f130,plain,(
  ( ! [X1] : (s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f106,f79])).
fof(f2363,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f493,f80])).
fof(f8617,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl262),
  inference(cnf_transformation,[],[f8617_D])).
fof(f8617_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f8616,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2373,f494])).
fof(f494,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f400,f80])).
fof(f2373,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f494,f80])).
fof(f8614,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl260),
  inference(cnf_transformation,[],[f8614_D])).
fof(f8614_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f8613,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2395,f495])).
fof(f495,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f401,f80])).
fof(f401,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f322,f79])).
fof(f2395,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f495,f80])).
fof(f8612,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl258),
  inference(cnf_transformation,[],[f8612_D])).
fof(f8612_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f8611,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2404,f496])).
fof(f496,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f401,f80])).
fof(f2404,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f496,f80])).
fof(f8610,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl256),
  inference(cnf_transformation,[],[f8610_D])).
fof(f8610_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f8609,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2415,f504])).
fof(f504,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f410,f80])).
fof(f410,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f326,f79])).
fof(f326,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f325])).
fof(f325,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f173,f80])).
fof(f173,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f130,f80])).
fof(f2415,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f504,f80])).
fof(f8608,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl254),
  inference(cnf_transformation,[],[f8608_D])).
fof(f8608_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f8607,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2423,f505])).
fof(f505,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f410,f80])).
fof(f2423,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f505,f80])).
fof(f8605,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl252),
  inference(cnf_transformation,[],[f8605_D])).
fof(f8605_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f8604,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2435,f506])).
fof(f506,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f411,f80])).
fof(f411,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f326,f79])).
fof(f2435,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f506,f80])).
fof(f8603,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl250),
  inference(cnf_transformation,[],[f8603_D])).
fof(f8603_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f2451,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(forward_demodulation,[],[f2450,f89])).
fof(f2450,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))) ) | $spl2),
  inference(subsumption_resolution,[],[f2449,f78])).
fof(f2449,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))) ) | $spl2),
  inference(forward_demodulation,[],[f2448,f127])).
fof(f2448,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9),s('type.sptree.spt'('type.clos_known.val_approx'),sK7))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))) ) | $spl2),
  inference(superposition,[],[f825,f63])).
fof(f825,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) ) | $spl2),
  inference(subsumption_resolution,[],[f823,f64])).
fof(f823,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) ) | $spl2),
  inference(equality_resolution,[],[f332])).
fof(f332,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X7),s('type.closSem.state'(sK0),X8))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X7) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X7),s('type.closSem.state'(sK0),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) ) | $spl2),
  inference(subsumption_resolution,[],[f329,f78])).
fof(f329,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X7),s('type.closSem.state'(sK0),X8))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X7) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X7),s('type.closSem.state'(sK0),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) ) | $spl2),
  inference(superposition,[],[f171,f80])).
fof(f8600,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl248),
  inference(cnf_transformation,[],[f8600_D])).
fof(f8600_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f8599,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f2457,f507])).
fof(f507,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f411,f80])).
fof(f2457,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f507,f80])).
fof(f8598,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3))))) ) | $spl246),
  inference(cnf_transformation,[],[f8598_D])).
fof(f8598_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3))))) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f3336,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) )),
  inference(forward_demodulation,[],[f3335,f84])).
fof(f84,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))),
  inference(subsumption_resolution,[],[f83,f77])).
fof(f83,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))),
  inference(superposition,[],[f62,f80])).
fof(f62,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))),
  inference(cnf_transformation,[],[f45])).
fof(f3335,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(subsumption_resolution,[],[f3332,f78])).
fof(f3332,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X4))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(superposition,[],[f954,f89])).
fof(f954,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X6),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X11)))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X12) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X9))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X10),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X10)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X12),s('type.closSem.state'(X6),X13))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X10),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X6),X7))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X12),s('type.closSem.state'(X6),X13))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X6),X7))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7)))) )),
  inference(subsumption_resolution,[],[f951,f78])).
fof(f951,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X9))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X10),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X12) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X6),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X11)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X10)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X12),s('type.closSem.state'(X6),X13))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X10),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X6),X7))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X12),s('type.closSem.state'(X6),X13))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X6),X7))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7)))) )),
  inference(superposition,[],[f424,f80])).
fof(f424,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X6))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X6)))))))) )),
  inference(equality_resolution,[],[f126])).
fof(f126,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))))) )),
  inference(subsumption_resolution,[],[f121,f60])).
fof(f121,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(resolution,[],[f59,f68])).
fof(f68,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4)))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.list.list'('type.closSem.v'),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) & s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.list.list'('type.closSem.v'),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X16,X7,X8,X9,X10,X11,X12,X13,X14,X15] : ((s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),X16) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X6),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X12)))) & p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X9)))) & s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X15),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X15))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))))))),
  file('thm.clos_knownProof.known_correct','thm.clos_knownProof.clos_knownProof_37|49|_prove_ltb|split|0')).
fof(f8597,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.list.list'('type.closSem.v'),X4))))) ) | $spl244),
  inference(cnf_transformation,[],[f8597_D])).
fof(f8597_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.list.list'('type.closSem.v'),X4))))) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f4606,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3)))))))) )),
  inference(forward_demodulation,[],[f4605,f84])).
fof(f4605,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(subsumption_resolution,[],[f4602,f78])).
fof(f4602,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(superposition,[],[f1038,f89])).
fof(f1038,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X12)))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X13) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X14)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X11),s('type.list.list'('type.closSem.v'),X14)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X13),s('type.closSem.state'(X7),X15))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X14),s('type.closSem.state'(X7),X8))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X13),s('type.closSem.state'(X7),X15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X14),s('type.closSem.state'(X7),X8))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) )),
  inference(subsumption_resolution,[],[f1035,f78])).
fof(f1035,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X13) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X12)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X14)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X11),s('type.list.list'('type.closSem.v'),X14)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X13),s('type.closSem.state'(X7),X15))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X14),s('type.closSem.state'(X7),X8))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X13),s('type.closSem.state'(X7),X15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X14),s('type.closSem.state'(X7),X8))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) )),
  inference(superposition,[],[f453,f80])).
fof(f453,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X7)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X3),s('type.list.list'('type.closSem.v'),X7)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X5),X8))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X7),s('type.closSem.state'(X5),X6))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X5),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X7),s('type.closSem.state'(X5),X6)))))))) )),
  inference(equality_resolution,[],[f95])).
fof(f95,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5)))))))) )),
  inference(resolution,[],[f58,f68])).
fof(f8596,plain,(
  ( ! [X16] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X16),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X16,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X16,bool,'type.closSem.v'))))) ) | $spl242),
  inference(cnf_transformation,[],[f8596_D])).
fof(f8596_D,plain,(
  ( ! [X16] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X16),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X16,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X16,bool,'type.closSem.v'))))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f4988,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f2317,f556])).
fof(f2317,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f2315])).
fof(f2315,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f489,f80])).
fof(f5017,plain,(
  ( ! [X16] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X16),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X16,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X16,bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f556,f2317])).
fof(f8593,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X17),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X17,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X17,bool,'type.closSem.v'))))) ) | $spl240),
  inference(cnf_transformation,[],[f8593_D])).
fof(f8593_D,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X17),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X17,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X17,bool,'type.closSem.v'))))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f5121,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f2333,f556])).
fof(f2333,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f2332])).
fof(f2332,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f490,f80])).
fof(f5156,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X17),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X17,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X17,bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f556,f2333])).
fof(f8590,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl238),
  inference(cnf_transformation,[],[f8590_D])).
fof(f8590_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f5279,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) )),
  inference(forward_demodulation,[],[f5278,f84])).
fof(f5278,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(subsumption_resolution,[],[f5275,f78])).
fof(f5275,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(superposition,[],[f1072,f89])).
fof(f1072,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X14) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X11),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X14),s('type.closSem.state'(X7),X15))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X8))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X14),s('type.closSem.state'(X7),X15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X8))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) )),
  inference(subsumption_resolution,[],[f1069,f78])).
fof(f1069,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X11),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X14) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X14),s('type.closSem.state'(X7),X15))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X8))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X14),s('type.closSem.state'(X7),X15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X8))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) )),
  inference(superposition,[],[f464,f80])).
fof(f464,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X6),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X3)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X6),X8))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X3),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X6),X7))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X1))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X6),X7)))))))) )),
  inference(equality_resolution,[],[f101])).
fof(f101,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))))) )),
  inference(resolution,[],[f60,f68])).
fof(f8589,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X18),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X18,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X18,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl236),
  inference(cnf_transformation,[],[f8589_D])).
fof(f8589_D,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X18),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X18,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X18,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f5282,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f2343,f556])).
fof(f2343,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f2341])).
fof(f2341,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f491,f80])).
fof(f5315,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X18),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X18,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X18,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f556,f2343])).
fof(f8588,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X19),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X19,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X19,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl234),
  inference(cnf_transformation,[],[f8588_D])).
fof(f8588_D,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X19),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X19,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X19,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f5429,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f2352,f556])).
fof(f2352,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f2351])).
fof(f2351,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f492,f80])).
fof(f5466,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X19),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X19,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X19,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl28),
  inference(superposition,[],[f556,f2352])).
fof(f8583,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X5),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X5),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))) ) | $spl232),
  inference(cnf_transformation,[],[f8583_D])).
fof(f8583_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X5),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X5),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),sK6)))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f7003,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X5),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X5)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X5),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)) )),
  inference(forward_demodulation,[],[f7002,f84])).
fof(f7002,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X5),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X5)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X5),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(subsumption_resolution,[],[f6999,f78])).
fof(f6999,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X5),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),sK6))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X5)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X5),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) )),
  inference(superposition,[],[f1141,f89])).
fof(f1141,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X8),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X14)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X15),s('type.closSem.state'(X8),X16))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X17),s('type.closSem.state'(X8),X9))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X12),s('type.list.list'('type.clos_known.val_approx'),X13),s('type.sptree.spt'('type.clos_known.val_approx'),X14))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X17)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X13),s('type.list.list'('type.closSem.v'),X17)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X12)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X15),s('type.closSem.state'(X8),X16))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X12),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X17),s('type.closSem.state'(X8),X9))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X15) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X8),X9)))) )),
  inference(subsumption_resolution,[],[f1138,f78])).
fof(f1138,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X12),s('type.list.list'('type.clos_known.val_approx'),X13),s('type.sptree.spt'('type.clos_known.val_approx'),X14))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X15),s('type.closSem.state'(X8),X16))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X17),s('type.closSem.state'(X8),X9))))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X8),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X14)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X17)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X13),s('type.list.list'('type.closSem.v'),X17)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X12)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X15),s('type.closSem.state'(X8),X16))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X8)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X12),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X8)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X17),s('type.closSem.state'(X8),X9))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X15) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X8),X9)))) )),
  inference(superposition,[],[f486,f80])).
fof(f486,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X9))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X9)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1)) )),
  inference(equality_resolution,[],[f135])).
fof(f135,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1))),X10) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X1),X5))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X1)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X1),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X1)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X1),X5))))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X9))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X1),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X9)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X1)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(X1),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X1)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X1)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X1),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)) )),
  inference(superposition,[],[f64,f68])).
fof(f8575,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl230),
  inference(cnf_transformation,[],[f8575_D])).
fof(f8575_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f8574,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7782,f7026])).
fof(f7026,plain,(
  ( ! [X16] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X16),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1719,f80])).
fof(f1719,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(equality_resolution,[],[f422])).
fof(f422,plain,(
  ( ! [X0,X1] : (s(fun('type.closSem.v',bool),X1) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f138,f79])).
fof(f138,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f127,f79])).
fof(f7782,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7026,f80])).
fof(f8573,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl228),
  inference(cnf_transformation,[],[f8573_D])).
fof(f8573_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f8572,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7785,f7027])).
fof(f7027,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1719,f80])).
fof(f7785,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7027,f80])).
fof(f8571,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl226),
  inference(cnf_transformation,[],[f8571_D])).
fof(f8571_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f8570,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7790,f7048])).
fof(f7048,plain,(
  ( ! [X16] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X16),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X16,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1755,f80])).
fof(f1755,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(equality_resolution,[],[f423])).
fof(f423,plain,(
  ( ! [X2,X3] : (s(fun('type.closSem.v',bool),X3) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X2,fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,f(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X2,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X2,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f138,f79])).
fof(f7790,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X1,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7048,f80])).
fof(f8569,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl224),
  inference(cnf_transformation,[],[f8569_D])).
fof(f8569_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f8568,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7792,f7049])).
fof(f7049,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X17,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1755,f80])).
fof(f7792,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7049,f80])).
fof(f8567,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl222),
  inference(cnf_transformation,[],[f8567_D])).
fof(f8567_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f8566,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7797,f7070])).
fof(f7070,plain,(
  ( ! [X16] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X16),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1834,f80])).
fof(f1834,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(equality_resolution,[],[f425])).
fof(f425,plain,(
  ( ! [X0,X1] : (s(fun('type.closSem.v',bool),X1) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f139,f79])).
fof(f139,plain,(
  ( ! [X1] : (s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(superposition,[],[f127,f79])).
fof(f7797,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7070,f80])).
fof(f8565,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl220),
  inference(cnf_transformation,[],[f8565_D])).
fof(f8565_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f8564,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7801,f7071])).
fof(f7071,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1834,f80])).
fof(f7801,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7071,f80])).
fof(f8563,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl218),
  inference(cnf_transformation,[],[f8563_D])).
fof(f8563_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f8562,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7806,f7092])).
fof(f7092,plain,(
  ( ! [X16] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X16),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X16,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1912,f80])).
fof(f1912,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) )),
  inference(equality_resolution,[],[f426])).
fof(f426,plain,(
  ( ! [X2,X3] : (s(fun('type.closSem.v',bool),X3) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30(X2,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,f(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30(X2,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,g(s('type.clos_known.val_approx',sK30(X2,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f139,f79])).
fof(f7806,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X1),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X1,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7092,f80])).
fof(f8561,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl216),
  inference(cnf_transformation,[],[f8561_D])).
fof(f8561_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f8560,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f7808,f7093])).
fof(f7093,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X17,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1912,f80])).
fof(f7808,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30(X0,'const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f7093,f80])).
fof(f8559,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl214),
  inference(cnf_transformation,[],[f8559_D])).
fof(f8559_D,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f8558,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8287,f1410])).
fof(f1410,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1048,f79])).
fof(f1048,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1046])).
fof(f1046,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f449,f80])).
fof(f449,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f229,f80])).
fof(f229,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f153,f79])).
fof(f8287,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1410,f80])).
fof(f8557,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl212),
  inference(cnf_transformation,[],[f8557_D])).
fof(f8557_D,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f8556,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8297,f1411])).
fof(f1411,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1048,f79])).
fof(f8297,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X7,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X8,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1411,f80])).
fof(f8555,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl210),
  inference(cnf_transformation,[],[f8555_D])).
fof(f8555_D,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f8554,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8306,f1721])).
fof(f1721,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1054,f79])).
fof(f1054,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1052])).
fof(f1052,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f450,f80])).
fof(f450,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f229,f80])).
fof(f8306,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1721,f80])).
fof(f8553,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl208),
  inference(cnf_transformation,[],[f8553_D])).
fof(f8553_D,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f8552,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8315,f1722])).
fof(f1722,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1054,f79])).
fof(f8315,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1722,f80])).
fof(f8551,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl206),
  inference(cnf_transformation,[],[f8551_D])).
fof(f8551_D,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f8550,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8331,f1735])).
fof(f8331,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1735,f80])).
fof(f8549,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl204),
  inference(cnf_transformation,[],[f8549_D])).
fof(f8549_D,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f8548,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8342,f1736])).
fof(f8342,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X9),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X7,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X7,X8,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1736,f80])).
fof(f8547,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl202),
  inference(cnf_transformation,[],[f8547_D])).
fof(f8547_D,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f8546,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8352,f1757])).
fof(f1757,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1066,f79])).
fof(f8352,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X6),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1757,f80])).
fof(f8544,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl200),
  inference(cnf_transformation,[],[f8544_D])).
fof(f8544_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f8543,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8427,f1758])).
fof(f8427,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1758,f80])).
fof(f8542,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl198),
  inference(cnf_transformation,[],[f8542_D])).
fof(f8542_D,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f8541,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8445,f1771])).
fof(f1771,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1077,f79])).
fof(f1077,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1076])).
fof(f1076,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f454,f80])).
fof(f454,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f261,f80])).
fof(f261,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f154,f79])).
fof(f8445,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X9,X10,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1771,f80])).
fof(f8540,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl196),
  inference(cnf_transformation,[],[f8540_D])).
fof(f8540_D,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f8539,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8455,f1772])).
fof(f1772,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1077,f79])).
fof(f8455,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X8,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1772,f80])).
fof(f8538,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl194),
  inference(cnf_transformation,[],[f8538_D])).
fof(f8538_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f8537,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8464,f1785])).
fof(f1785,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X0,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1083,f79])).
fof(f1083,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(trivial_inequality_removal,[],[f1082])).
fof(f1082,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f455,f80])).
fof(f455,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f261,f80])).
fof(f8464,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X6,X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1785,f80])).
fof(f8536,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl192),
  inference(cnf_transformation,[],[f8536_D])).
fof(f8536_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f8535,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8476,f1786])).
fof(f1786,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X4,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1083,f79])).
fof(f8476,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X5,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X7,X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1786,f80])).
fof(f8533,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl190),
  inference(cnf_transformation,[],[f8533_D])).
fof(f8533_D,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f8532,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8489,f1799])).
fof(f8489,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X8,X10,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1799,f80])).
fof(f8530,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl188),
  inference(cnf_transformation,[],[f8530_D])).
fof(f8530_D,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f8529,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8505,f1800])).
fof(f8505,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X10),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X9,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X10,X8,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X8,X9,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1800,f80])).
fof(f8523,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | ($spl24 | $spl52)),
  inference(forward_demodulation,[],[f8517,f638])).
fof(f8526,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) | $spl186),
  inference(cnf_transformation,[],[f8526_D])).
fof(f8526_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2))))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f8525,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f8514,f1813])).
fof(f8514,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X7),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X5,X7,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X5,X6,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f1813,f80])).
fof(f8524,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X3,bool,'type.closSem.v'))))) ) | ($spl24 | $spl30 | $spl37 | $spl52)),
  inference(subsumption_resolution,[],[f8523,f727])).
fof(f8355,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v'))))) ) | $spl24),
  inference(trivial_inequality_removal,[],[f8350])).
fof(f8350,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X2,bool,'type.closSem.v'))))) ) | $spl24),
  inference(superposition,[],[f1757,f535])).
fof(f1420,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X6,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X6,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl180),
  inference(cnf_transformation,[],[f1420_D])).
fof(f1420_D,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X6,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X6,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f560,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl32),
  inference(cnf_transformation,[],[f560_D])).
fof(f560_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1412,plain,(
  ( ! [X6] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X6,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X6,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X6,bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f1048,f252])).
fof(f1303,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) | $spl178),
  inference(cnf_transformation,[],[f1303_D])).
fof(f1303_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f1302,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f294,f157])).
fof(f294,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f157,f80])).
fof(f1301,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl176),
  inference(cnf_transformation,[],[f1301_D])).
fof(f1301_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f1300,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f297,f158])).
fof(f297,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f158,f80])).
fof(f1299,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl174),
  inference(cnf_transformation,[],[f1299_D])).
fof(f1299_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f1298,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f303,f159])).
fof(f303,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f159,f80])).
fof(f1297,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl172),
  inference(cnf_transformation,[],[f1297_D])).
fof(f1297_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f1296,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f306,f160])).
fof(f306,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f160,f80])).
fof(f1295,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) ) | $spl170),
  inference(cnf_transformation,[],[f1295_D])).
fof(f1295_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f1294,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f312,f161])).
fof(f312,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f161,f80])).
fof(f1293,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) ) | $spl168),
  inference(cnf_transformation,[],[f1293_D])).
fof(f1293_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f1292,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f315,f162])).
fof(f315,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X0,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f162,f80])).
fof(f1291,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl166),
  inference(cnf_transformation,[],[f1291_D])).
fof(f1291_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f1290,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f321,f172])).
fof(f321,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f172,f80])).
fof(f1289,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl164),
  inference(cnf_transformation,[],[f1289_D])).
fof(f1289_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f1288,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f324,f173])).
fof(f324,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f173,f80])).
fof(f794,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | ($spl20 | $spl38 | $spl40)),
  inference(forward_demodulation,[],[f791,f567])).
fof(f791,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | ($spl20 | $spl38)),
  inference(superposition,[],[f759,f566])).
fof(f759,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))))) ) | $spl20),
  inference(superposition,[],[f252,f79])).
fof(f1275,plain,(
  ( ! [X1] : (s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl162),
  inference(cnf_transformation,[],[f1275_D])).
fof(f1275_D,plain,(
  ( ! [X1] : (s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f1274,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl20),
  inference(subsumption_resolution,[],[f807,f792])).
fof(f792,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f759,f80])).
fof(f807,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f792,f80])).
fof(f570,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl42),
  inference(cnf_transformation,[],[f570_D])).
fof(f570_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f811,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | ($spl20 | $spl40)),
  inference(superposition,[],[f793,f567])).
fof(f793,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f759,f80])).
fof(f1273,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl160),
  inference(cnf_transformation,[],[f1273_D])).
fof(f1273_D,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f1272,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl20),
  inference(subsumption_resolution,[],[f812,f793])).
fof(f812,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f793,f80])).
fof(f1271,plain,(
  ( ! [X1] : (s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl158),
  inference(cnf_transformation,[],[f1271_D])).
fof(f1271_D,plain,(
  ( ! [X1] : (s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f1270,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(subsumption_resolution,[],[f817,f796])).
fof(f796,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f760,f80])).
fof(f817,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X1) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f796,f80])).
fof(f562,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl34),
  inference(cnf_transformation,[],[f562_D])).
fof(f562_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f826,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | ($spl20 | $spl30)),
  inference(superposition,[],[f797,f557])).
fof(f1267,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl154),
  inference(cnf_transformation,[],[f1267_D])).
fof(f1267_D,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f1266,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(subsumption_resolution,[],[f827,f797])).
fof(f827,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(fun('type.closSem.v',bool),X0) = s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl20),
  inference(superposition,[],[f797,f80])).
fof(f1265,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl152),
  inference(cnf_transformation,[],[f1265_D])).
fof(f1265_D,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f1264,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f957,f432])).
fof(f432,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f175,f80])).
fof(f175,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f146,f79])).
fof(f146,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f96,f80])).
fof(f957,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f432,f80])).
fof(f1263,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl150),
  inference(cnf_transformation,[],[f1263_D])).
fof(f1263_D,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f1262,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f961,f433])).
fof(f433,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f175,f80])).
fof(f961,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f433,f80])).
fof(f1261,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl148),
  inference(cnf_transformation,[],[f1261_D])).
fof(f1261_D,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f1260,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f965,f434])).
fof(f434,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f176,f80])).
fof(f176,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) != s(bool,g(s('type.closLang.exp',sK30(X3,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) )),
  inference(superposition,[],[f146,f79])).
fof(f965,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f434,f80])).
fof(f1259,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl146),
  inference(cnf_transformation,[],[f1259_D])).
fof(f1259_D,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f1258,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f969,f435])).
fof(f435,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f176,f80])).
fof(f969,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f435,f80])).
fof(f1257,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) ) | $spl144),
  inference(cnf_transformation,[],[f1257_D])).
fof(f1257_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f1256,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f973,f436])).
fof(f973,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f436,f80])).
fof(f1255,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) | $spl142),
  inference(cnf_transformation,[],[f1255_D])).
fof(f1255_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f1254,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f985,f437])).
fof(f985,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f437,f80])).
fof(f1253,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) | $spl140),
  inference(cnf_transformation,[],[f1253_D])).
fof(f1253_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f1252,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f991,f438])).
fof(f991,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f438,f80])).
fof(f1251,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) | $spl138),
  inference(cnf_transformation,[],[f1251_D])).
fof(f1251_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f1250,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f994,f439])).
fof(f994,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f439,f80])).
fof(f1249,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl136),
  inference(cnf_transformation,[],[f1249_D])).
fof(f1249_D,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f1248,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1000,f440])).
fof(f1000,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f440,f80])).
fof(f1247,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl134),
  inference(cnf_transformation,[],[f1247_D])).
fof(f1247_D,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f1246,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1004,f441])).
fof(f1004,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,X4,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f441,f80])).
fof(f1245,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl132),
  inference(cnf_transformation,[],[f1245_D])).
fof(f1245_D,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f1244,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1015,f443])).
fof(f1015,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f443,f80])).
fof(f1243,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl130),
  inference(cnf_transformation,[],[f1243_D])).
fof(f1243_D,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f1242,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1019,f444])).
fof(f1019,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X4),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X4,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f444,f80])).
fof(f1241,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl128),
  inference(cnf_transformation,[],[f1241_D])).
fof(f1241_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f1240,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1023,f445])).
fof(f1023,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f445,f80])).
fof(f1239,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl126),
  inference(cnf_transformation,[],[f1239_D])).
fof(f1239_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f1238,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1026,f446])).
fof(f1026,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f446,f80])).
fof(f1237,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl124),
  inference(cnf_transformation,[],[f1237_D])).
fof(f1237_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f1236,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1032,f447])).
fof(f1032,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X3,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f447,f80])).
fof(f1235,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl122),
  inference(cnf_transformation,[],[f1235_D])).
fof(f1235_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f1234,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1040,f448])).
fof(f1040,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,'const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f448,f80])).
fof(f1233,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) | $spl120),
  inference(cnf_transformation,[],[f1233_D])).
fof(f1233_D,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f1232,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1047,f449])).
fof(f1047,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f449,f80])).
fof(f1231,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) | $spl118),
  inference(cnf_transformation,[],[f1231_D])).
fof(f1231_D,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f1230,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1053,f450])).
fof(f1053,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f450,f80])).
fof(f1229,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) | $spl116),
  inference(cnf_transformation,[],[f1229_D])).
fof(f1229_D,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f1228,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1059,f451])).
fof(f1059,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f451,f80])).
fof(f1227,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) | $spl114),
  inference(cnf_transformation,[],[f1227_D])).
fof(f1227_D,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f1226,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1065,f452])).
fof(f1065,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X4,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f452,f80])).
fof(f1224,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) | $spl112),
  inference(cnf_transformation,[],[f1224_D])).
fof(f1224_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f1223,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1075,f454])).
fof(f1075,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f454,f80])).
fof(f1221,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) | $spl110),
  inference(cnf_transformation,[],[f1221_D])).
fof(f1221_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f1220,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1081,f455])).
fof(f1081,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f455,f80])).
fof(f1218,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) | $spl108),
  inference(cnf_transformation,[],[f1218_D])).
fof(f1218_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f1217,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1087,f456])).
fof(f1087,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f456,f80])).
fof(f1215,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) | $spl106),
  inference(cnf_transformation,[],[f1215_D])).
fof(f1215_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f1214,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1093,f457])).
fof(f1093,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',X2,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f457,f80])).
fof(f1213,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl104),
  inference(cnf_transformation,[],[f1213_D])).
fof(f1213_D,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f1212,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1100,f458])).
fof(f458,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f271,f80])).
fof(f271,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f155,f79])).
fof(f1100,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f458,f80])).
fof(f1211,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl102),
  inference(cnf_transformation,[],[f1211_D])).
fof(f1211_D,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f1210,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1110,f459])).
fof(f459,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f271,f80])).
fof(f1110,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X4,X5,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f459,f80])).
fof(f1209,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl100),
  inference(cnf_transformation,[],[f1209_D])).
fof(f1209_D,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f1208,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1116,f460])).
fof(f1116,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f460,f80])).
fof(f1207,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl98),
  inference(cnf_transformation,[],[f1207_D])).
fof(f1207_D,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f1206,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1122,f461])).
fof(f1122,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X5),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X5,X4,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(X4,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f461,f80])).
fof(f1204,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl96),
  inference(cnf_transformation,[],[f1204_D])).
fof(f1204_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f1203,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1127,f462])).
fof(f462,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f278,f80])).
fof(f278,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X0,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f156,f79])).
fof(f156,plain,(
  ( ! [X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X1),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f103,f80])).
fof(f1127,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f462,f80])).
fof(f1201,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl94),
  inference(cnf_transformation,[],[f1201_D])).
fof(f1201_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f1200,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1133,f463])).
fof(f463,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f278,f80])).
fof(f1133,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f463,f80])).
fof(f1198,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl92),
  inference(cnf_transformation,[],[f1198_D])).
fof(f1198_D,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f1197,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1144,f465])).
fof(f465,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X1,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X0),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,X1,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f279,f80])).
fof(f279,plain,(
  ( ! [X2,X3] : (s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2))))) )),
  inference(superposition,[],[f156,f79])).
fof(f1144,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f465,f80])).
fof(f1195,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl90),
  inference(cnf_transformation,[],[f1195_D])).
fof(f1195_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f1194,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f1150,f466])).
fof(f466,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X2),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,X3,bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f279,f80])).
fof(f1150,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),X3),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(X3,X2,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X2,'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f466,f80])).
fof(f1193,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl88),
  inference(cnf_transformation,[],[f1193_D])).
fof(f1193_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f1192,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1156,f958])).
fof(f958,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f956])).
fof(f956,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f432,f80])).
fof(f1156,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X3),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X2,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f958,f80])).
fof(f1191,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl86),
  inference(cnf_transformation,[],[f1191_D])).
fof(f1191_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f1190,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1160,f962])).
fof(f962,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f960])).
fof(f960,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f433,f80])).
fof(f1160,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X1),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f962,f80])).
fof(f1189,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) ) | $spl84),
  inference(cnf_transformation,[],[f1189_D])).
fof(f1189_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f1188,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1167,f966])).
fof(f966,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f964])).
fof(f964,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f434,f80])).
fof(f1167,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X3,bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30(X2,X3,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f966,f80])).
fof(f1187,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) | $spl82),
  inference(cnf_transformation,[],[f1187_D])).
fof(f1187_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f1186,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1171,f970])).
fof(f970,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(trivial_inequality_removal,[],[f968])).
fof(f968,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X2,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f435,f80])).
fof(f1171,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X0,X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f970,f80])).
fof(f1183,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))))) ) | $spl78),
  inference(cnf_transformation,[],[f1183_D])).
fof(f1183_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f1182,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f1177,f974])).
fof(f1177,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X2),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30(X1,X2,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X1,bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f974,f80])).
fof(f1180,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl9),
  inference(trivial_inequality_removal,[],[f1176])).
fof(f1176,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),X0),s('type.list.list'('type.closLang.exp'),sK1)))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0',X0,bool,'type.closLang.exp'))))) ) | $spl9),
  inference(superposition,[],[f974,f188])).
fof(f188,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl9),
  inference(trivial_inequality_removal,[],[f186])).
fof(f186,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl9),
  inference(superposition,[],[f184,f80])).
fof(f567,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl40),
  inference(cnf_transformation,[],[f567_D])).
fof(f567_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f574,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl46),
  inference(cnf_transformation,[],[f574_D])).
fof(f574_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f780,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | ($spl9 | $spl20 | $spl38)),
  inference(subsumption_resolution,[],[f779,f189])).
fof(f189,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl9),
  inference(subsumption_resolution,[],[f187,f184])).
fof(f187,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl9),
  inference(superposition,[],[f184,f80])).
fof(f779,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f770,f566])).
fof(f770,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f326,f252])).
fof(f572,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl45),
  inference(cnf_transformation,[],[f572_D])).
fof(f572_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f778,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | ($spl9 | $spl20 | $spl38)),
  inference(subsumption_resolution,[],[f777,f189])).
fof(f777,plain,(
  s(bool,'T_0') = s(bool,'F_0') | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f766,f566])).
fof(f766,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f156,f252])).
fof(f721,plain,(
  s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | $spl74),
  inference(cnf_transformation,[],[f721_D])).
fof(f721_D,plain,(
  s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f748,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | $spl38),
  inference(superposition,[],[f79,f566])).
fof(f636,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl50),
  inference(cnf_transformation,[],[f636_D])).
fof(f636_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f268,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl22),
  inference(cnf_transformation,[],[f268_D])).
fof(f268_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f758,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl17 | $spl38)),
  inference(subsumption_resolution,[],[f746,f238])).
fof(f746,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl38),
  inference(superposition,[],[f411,f566])).
fof(f756,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl17 | $spl38)),
  inference(subsumption_resolution,[],[f742,f238])).
fof(f742,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl38),
  inference(superposition,[],[f389,f566])).
fof(f709,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl72),
  inference(cnf_transformation,[],[f709_D])).
fof(f709_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f755,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | ($spl17 | $spl38)),
  inference(subsumption_resolution,[],[f738,f242])).
fof(f242,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl17),
  inference(trivial_inequality_removal,[],[f240])).
fof(f240,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl17),
  inference(superposition,[],[f238,f80])).
fof(f738,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl38),
  inference(superposition,[],[f279,f566])).
fof(f751,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | ($spl17 | $spl38)),
  inference(subsumption_resolution,[],[f734,f242])).
fof(f734,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl38),
  inference(superposition,[],[f262,f566])).
fof(f730,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl38),
  inference(superposition,[],[f103,f566])).
fof(f729,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl38),
  inference(superposition,[],[f130,f566])).
fof(f706,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0') = s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | $spl28),
  inference(superposition,[],[f79,f556])).
fof(f719,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl17 | $spl28)),
  inference(subsumption_resolution,[],[f703,f238])).
fof(f703,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl28),
  inference(superposition,[],[f410,f556])).
fof(f717,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl17 | $spl28)),
  inference(subsumption_resolution,[],[f699,f238])).
fof(f699,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl28),
  inference(superposition,[],[f388,f556])).
fof(f715,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | ($spl17 | $spl28)),
  inference(subsumption_resolution,[],[f695,f242])).
fof(f695,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl28),
  inference(superposition,[],[f278,f556])).
fof(f710,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | ($spl17 | $spl28)),
  inference(subsumption_resolution,[],[f691,f242])).
fof(f691,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl28),
  inference(superposition,[],[f261,f556])).
fof(f688,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | $spl28),
  inference(superposition,[],[f102,f556])).
fof(f687,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | $spl28),
  inference(superposition,[],[f129,f556])).
fof(f683,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl68),
  inference(cnf_transformation,[],[f683_D])).
fof(f683_D,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f685,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl70),
  inference(cnf_transformation,[],[f685_D])).
fof(f685_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f681,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl21),
  inference(equality_resolution,[],[f667])).
fof(f667,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl21),
  inference(trivial_inequality_removal,[],[f665])).
fof(f665,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl21),
  inference(superposition,[],[f590,f80])).
fof(f590,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(X0,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v'))))) ) | $spl21),
  inference(superposition,[],[f576,f80])).
fof(f576,plain,(
  ( ! [X1] : (s(bool,f(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(X1,g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X1) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))))) ) | $spl21),
  inference(superposition,[],[f253,f79])).
fof(f650,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl64),
  inference(cnf_transformation,[],[f650_D])).
fof(f650_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f652,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl66),
  inference(cnf_transformation,[],[f652_D])).
fof(f652_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f634,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl49),
  inference(cnf_transformation,[],[f634_D])).
fof(f634_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f621,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f411,f603])).
fof(f603,plain,(
  s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | ($spl21 | $spl24)),
  inference(subsumption_resolution,[],[f602,f535])).
fof(f602,plain,(
  s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl21),
  inference(equality_resolution,[],[f589])).
fof(f589,plain,(
  ( ! [X1] : (s(fun('type.closSem.v',bool),X1) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X1,bool,'type.closSem.v'))))) ) | $spl21),
  inference(superposition,[],[f575,f80])).
fof(f575,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))))) ) | $spl21),
  inference(superposition,[],[f253,f79])).
fof(f620,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f410,f603])).
fof(f619,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f401,f603])).
fof(f571,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl44),
  inference(cnf_transformation,[],[f571_D])).
fof(f571_D,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f566,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl38),
  inference(cnf_transformation,[],[f566_D])).
fof(f566_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f618,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f400,f603])).
fof(f617,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f389,f603])).
fof(f616,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f388,f603])).
fof(f615,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f379,f603])).
fof(f563,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl36),
  inference(cnf_transformation,[],[f563_D])).
fof(f563_D,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f556,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl28),
  inference(cnf_transformation,[],[f556_D])).
fof(f556_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f614,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | ($spl21 | $spl24)),
  inference(superposition,[],[f378,f603])).
fof(f549,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f326,f252])).
fof(f548,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f322,f252])).
fof(f547,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f317,f252])).
fof(f546,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f313,f252])).
fof(f545,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f156,f252])).
fof(f568,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl41),
  inference(cnf_transformation,[],[f568_D])).
fof(f568_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f544,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),'const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f155,f252])).
fof(f543,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f154,f252])).
fof(f558,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl31),
  inference(cnf_transformation,[],[f558_D])).
fof(f558_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f542,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))),s('type.list.list'('type.closSem.v'),sK2)))) | s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0',g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl20),
  inference(superposition,[],[f153,f252])).
fof(f535,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl24),
  inference(cnf_transformation,[],[f535_D])).
fof(f535_D,plain,(
  s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f533,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),bool,'type.closSem.v')))) | $spl21),
  inference(equality_resolution,[],[f510])).
fof(f510,plain,(
  ( ! [X0] : (s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl21),
  inference(trivial_inequality_removal,[],[f508])).
fof(f508,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl21),
  inference(superposition,[],[f427,f80])).
fof(f427,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v'))))) ) | $spl21),
  inference(superposition,[],[f258,f80])).
fof(f258,plain,(
  ( ! [X0] : (s(bool,f(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) != s(bool,g(s('type.closSem.v',sK30(g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))),X0,bool,'type.closSem.v')))) | s(fun('type.closSem.v',bool),X0) != s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx'))))) ) | $spl21),
  inference(superposition,[],[f253,f79])).
fof(f234,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) ) | $spl12),
  inference(cnf_transformation,[],[f234_D])).
fof(f234_D,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f421,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X13),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X15))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X11)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X15)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X13)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X13),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),X16) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X13),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl17),
  inference(subsumption_resolution,[],[f420,f238])).
fof(f420,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X13),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X15))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X11)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X15)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X13)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X13),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),X16) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X13),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f417,f78])).
fof(f417,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X13),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X15))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X11)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X15)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X13)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X13),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),X16) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X13),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X7),X11))))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f68,f326])).
fof(f399,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X5,X13,X11,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X11),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X9)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),X14) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) ) | $spl17),
  inference(subsumption_resolution,[],[f398,f238])).
fof(f398,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X5,X13,X11,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X11),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X9)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),X14) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(subsumption_resolution,[],[f395,f78])).
fof(f395,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X5,X13,X11,X9] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X11),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X9)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),X14) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X11),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X5),X9))))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v'))))) )),
  inference(superposition,[],[f68,f317])).
fof(f180,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) ) | $spl4),
  inference(cnf_transformation,[],[f180_D])).
fof(f180_D,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f376,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X15))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X12)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X15)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X11)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),X16) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f375,f184])).
fof(f375,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X15))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X12)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X15)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X11)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),X16) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f372,f78])).
fof(f372,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.sptree.spt'('type.clos_known.val_approx'),X15))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X12)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X7),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X15)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X11)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X14),s('type.list.list'('type.closSem.v'),X11)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X8),s('type.closSem.state'(X7),X9))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X7)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),X16) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X7)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X7),X12))))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f68,f308])).
fof(f354,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X5,X13,X11,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X10)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X9)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),X9)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),X14) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f353,f184])).
fof(f353,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X5,X13,X11,X9] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X10)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X9)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),X9)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),X14) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(subsumption_resolution,[],[f350,f78])).
fof(f350,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X5,X13,X11,X9] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.sptree.spt'('type.clos_known.val_approx'),X13))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X10)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X5),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X9)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X12),s('type.list.list'('type.closSem.v'),X9)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X6),s('type.closSem.state'(X5),X7))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X5)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),X14) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X5)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X5),X10))))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp'))))) )),
  inference(superposition,[],[f68,f299])).
fof(f283,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) ) | $spl17),
  inference(subsumption_resolution,[],[f277,f242])).
fof(f277,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(resolution,[],[f156,f68])).
fof(f266,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) ) | $spl17),
  inference(subsumption_resolution,[],[f260,f242])).
fof(f260,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'F_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'T_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(resolution,[],[f154,f68])).
fof(f251,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) ) | $spl18),
  inference(cnf_transformation,[],[f251_D])).
fof(f251_D,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f253,plain,(
  s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | $spl21),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f250,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(subsumption_resolution,[],[f249,f78])).
fof(f249,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(forward_demodulation,[],[f243,f106])).
fof(f243,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0','const.clos_knownProof.val_approx_val_0',fun('type.closSem.v',bool),'type.clos_known.val_approx')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X8) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(resolution,[],[f122,f68])).
fof(f122,plain,(
  ( ! [X0] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),X0),s('type.list.list'('type.clos_known.val_approx'),sK8),s('type.list.list'('type.closSem.v'),sK2)))) | s(fun('type.closSem.v',bool),f(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx')))) != s(fun('type.closSem.v',bool),g(s('type.clos_known.val_approx',sK30('const.clos_knownProof.val_approx_val_0',X0,fun('type.closSem.v',bool),'type.clos_known.val_approx'))))) )),
  inference(superposition,[],[f59,f79])).
fof(f236,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl14),
  inference(cnf_transformation,[],[f236_D])).
fof(f236_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f238,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | $spl17),
  inference(cnf_transformation,[],[f238_D])).
fof(f238_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f228,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'T_0') != s(bool,f(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s(bool,'F_0') = s(bool,g(s('type.closSem.v',sK30('const.clos_knownProof.vsgc_free_0','const.clos_knownProof.vsgc_free_0',bool,'type.closSem.v')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X6),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(X0),X4)))))) )),
  inference(resolution,[],[f153,f68])).
fof(f226,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f220,f188])).
fof(f220,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5)))))) )),
  inference(resolution,[],[f149,f68])).
fof(f209,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f203,f188])).
fof(f203,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'F_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'T_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5)))))) )),
  inference(resolution,[],[f147,f68])).
fof(f182,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl6),
  inference(cnf_transformation,[],[f182_D])).
fof(f182_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f184,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | $spl9),
  inference(cnf_transformation,[],[f184_D])).
fof(f184_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f174,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'T_0') != s(bool,f(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s(bool,'F_0') = s(bool,g(s('type.closLang.exp',sK30('const.clos_knownProof.esgc_free_0','const.clos_knownProof.esgc_free_0',bool,'type.closLang.exp')))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(X0),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.list.list'('type.closSem.v'),X4)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X1),s('type.closSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5))))))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X9) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X4),s('type.closSem.state'(X0),X5)))))) )),
  inference(resolution,[],[f146,f68])).
fof(f170,plain,(
  ( ! [X6] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) ) | $spl0),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  ( ! [X6] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f171,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) | $spl2),
  inference(cnf_transformation,[],[f171_D])).
fof(f171_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f169,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(subsumption_resolution,[],[f168,f78])).
fof(f168,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(forward_demodulation,[],[f167,f100])).
fof(f167,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(subsumption_resolution,[],[f166,f78])).
fof(f166,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(forward_demodulation,[],[f165,f106])).
fof(f165,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(subsumption_resolution,[],[f164,f78])).
fof(f164,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(forward_demodulation,[],[f163,f84])).
fof(f163,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'type.closLang.exp'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.closSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) | ~p(s(bool,'const.clos_knownProof.state_globals_approx_2'(s('type.closSem.state'(sK0),sK3),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.clos_known.val_approx',fun('type.closSem.v',bool)),'const.clos_knownProof.val_approx_val_0'),s('type.list.list'('type.clos_known.val_approx'),X4),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),X6) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))) )),
  inference(superposition,[],[f68,f57])).
fof(f57,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f45])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 629
% Passive clauses: 1298
% Generated clauses: 19924
% Final active clauses: 584
% Final passive clauses: 554
% Input formulas: 21
% Initial clauses: 24
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Duplicate literals: 2449
% Trivial inequalities: 558
% Fw subsumption resolutions: 441
% Fw demodulations: 269
% Bw demodulations: 9
% 
% Simple tautologies: 5956
% Forward subsumptions: 9136
% 
% Binary resolution: 135
% Forward superposition: 8639
% Backward superposition: 7164
% Self superposition: 48
% Equality factoring: 72
% Equality resolution: 42
% 
% Split clauses: 208
% Split components: 493
% SAT solver clauses: 213
% SAT solver unit clauses: 2
% SAT solver binary clauses: 118
% 
% Sat splits: 208
% Sat splitting refutations: 4
% 
% Memory used [KB]: 10746
% Time elapsed: 0.685 s
% ------------------------------
% ------------------------------
% Success in time 12.43 s
