Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.infer_eComplete
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.infer_eComplete
% SZS output start Proof for thm.infer_eComplete
fof(f221,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f220,f29,f46,f44,f42,f40,f215,f218,f28,f47,f219,f25,f48])).
fof(f48,plain,(
  ( ! [X7] : (s('type.ast.t',X7) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X7)))) ) | $spl10),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  ( ! [X7] : (s('type.ast.t',X7) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X7)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f25,plain,(
  ( ! [X7,X5] : (s('type.ast.t',X5) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X5))) | s('type.ast.t',X7) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X7)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ((! [X7] : s('type.ast.t',X7) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X7))) & ! [X6] : s('type.list.list'('type.ast.t'),X6) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X6)))) | (! [X5] : s('type.ast.t',X5) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X5))) & ! [X4] : s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4))))) & (s('type.ast.t',sK0) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK0))) | s('type.list.list'('type.ast.t'),sK1) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK1))) | s('type.ast.t',sK2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK2))) | s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f21])).
fof(f21,plain,(
  ((! [X7] : s('type.ast.t',X7) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X7))) & ! [X6] : s('type.list.list'('type.ast.t'),X6) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X6)))) | (! [X5] : s('type.ast.t',X5) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X5))) & ! [X4] : s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4))))) & (? [X3] : s('type.ast.t',X3) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) | ? [X2] : s('type.list.list'('type.ast.t'),X2) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2))) | ? [X1] : s('type.ast.t',X1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) | ? [X0] : s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0))))),
  inference(rectify,[],[f20])).
fof(f20,plain,(
  ((! [X1] : s('type.ast.t',X1) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) & ! [X0] : s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | (! [X3] : s('type.ast.t',X3) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) & ! [X2] : s('type.list.list'('type.ast.t'),X2) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2))))) & (? [X1] : s('type.ast.t',X1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) | ? [X0] : s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0))) | ? [X3] : s('type.ast.t',X3) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) | ? [X2] : s('type.list.list'('type.ast.t'),X2) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ((! [X1] : s('type.ast.t',X1) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) & ! [X0] : s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | (! [X3] : s('type.ast.t',X3) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) & ! [X2] : s('type.list.list'('type.ast.t'),X2) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2))))) & ((? [X1] : s('type.ast.t',X1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) | ? [X0] : s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | (? [X3] : s('type.ast.t',X3) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) | ? [X2] : s('type.list.list'('type.ast.t'),X2) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2)))))),
  inference(nnf_transformation,[],[f17])).
fof(f17,plain,(
  (! [X1] : s('type.ast.t',X1) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) & ! [X0] : s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) <~> (! [X3] : s('type.ast.t',X3) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) & ! [X2] : s('type.list.list'('type.ast.t'),X2) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~((! [X1] : s('type.ast.t',X1) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X1))) & ! [X0] : s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) <=> (! [X3] : s('type.ast.t',X3) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X3))) & ! [X2] : s('type.list.list'('type.ast.t'),X2) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~((! [X6] : s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X6))) & ! [X7] : s('type.list.list'('type.ast.t'),X7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X7)))) <=> (! [X6] : s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X6))) & ! [X7] : s('type.list.list'('type.ast.t'),X7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  (! [X6] : s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X6))) & ! [X7] : s('type.list.list'('type.ast.t'),X7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X7)))) <=> (! [X6] : s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',X6))) & ! [X7] : s('type.list.list'('type.ast.t'),X7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X7))))),
  file('thm.infer_eComplete.infer_eComplete_|49|9_prove_ltb','thm.infer_eComplete.infer_eComplete_|49|9_prove_ltb')).
fof(f219,plain,(
  $false | ($spl7 | $spl8)),
  inference(subsumption_resolution,[],[f46,f47])).
fof(f47,plain,(
  ( ! [X6] : (s('type.list.list'('type.ast.t'),X6) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X6)))) ) | $spl8),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  ( ! [X6] : (s('type.list.list'('type.ast.t'),X6) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X6)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f28,plain,(
  ( ! [X6,X4] : (s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4))) | s('type.list.list'('type.ast.t'),X6) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X6)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f218,plain,(
  $false | ($spl3 | $spl8)),
  inference(trivial_inequality_removal,[],[f217])).
fof(f217,plain,(
  s('type.list.list'('type.ast.t'),sK1) != s('type.list.list'('type.ast.t'),sK1) | ($spl3 | $spl8)),
  inference(superposition,[],[f42,f47])).
fof(f215,plain,(
  $false | ($spl1 | $spl10)),
  inference(trivial_inequality_removal,[],[f214])).
fof(f214,plain,(
  s('type.ast.t',sK0) != s('type.ast.t',sK0) | ($spl1 | $spl10)),
  inference(superposition,[],[f40,f48])).
fof(f40,plain,(
  s('type.ast.t',sK0) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK0))) | $spl1),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  s('type.ast.t',sK0) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK0))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f42,plain,(
  s('type.list.list'('type.ast.t'),sK1) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK1))) | $spl3),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  s('type.list.list'('type.ast.t'),sK1) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f44,plain,(
  s('type.ast.t',sK2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK2))) | $spl5),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  s('type.ast.t',sK2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK2))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f46,plain,(
  s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) | $spl7),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f29,plain,(
  s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) | s('type.ast.t',sK2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK2))) | s('type.list.list'('type.ast.t'),sK1) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK1))) | s('type.ast.t',sK0) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.t',sK0)))),
  inference(cnf_transformation,[],[f22])).
fof(f220,plain,(
  $false | ($spl5 | $spl10)),
  inference(subsumption_resolution,[],[f44,f48])).
% SZS output end Proof for thm.infer_eComplete
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 13
% Passive clauses: 25
% Generated clauses: 182
% Final active clauses: 9
% Final passive clauses: 6
% Input formulas: 8
% Initial clauses: 13
% 
% Duplicate literals: 37
% Trivial inequalities: 5
% Fw subsumption resolutions: 2
% 
% Simple tautologies: 16
% Equational tautologies: 15
% Forward subsumptions: 74
% 
% Binary resolution: 4
% Forward superposition: 26
% Backward superposition: 32
% Self superposition: 26
% Equality factoring: 26
% 
% Split clauses: 6
% Split components: 14
% SAT solver clauses: 14
% SAT solver unit clauses: 3
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 1
% 
% Sat splits: 6
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 11
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.009 s
% ------------------------------
% ------------------------------
% Success in time 0.003 s
