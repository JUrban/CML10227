Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 44
dis+11_7_41 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f3640,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2341,f3627,f2507,f3626,f3628,f2359,f3629])).
fof(f3629,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f3629_D])).
fof(f3629_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f2359,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f653])).
fof(f653,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.clos_knownProof_37|49|_prove_ltb|split|1',aHL_FALSITY)).
fof(f3628,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f3628_D])).
fof(f3628_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f3626,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f3626_D])).
fof(f3626_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f2507,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f1858])).
fof(f1858,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f1857])).
fof(f1857,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f1654])).
fof(f1654,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f756])).
fof(f756,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X21] : ((p(s(bool,'F_0')) => p(s(bool,X21))) <=> p(s(bool,'T_0')))),
  file('thm.clos_knownProof.clos_knownProof_37|49|_prove_ltb|split|1','thm.bool.IMP_CLAUSES|split|2')).
fof(f3627,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(cnf_transformation,[],[f3627_D])).
fof(f3627_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f2341,plain,(
  ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1813])).
fof(f1813,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK70)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK75),s('type.closSem.state'(sK70),sK76))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK70)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK71),s('type.closSem.v',sK72),s('type.list.list'('type.closSem.v'),sK73),s('type.closSem.state'(sK70),sK74))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK73)))) & ~p(s(bool,'T_0'))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK70,sK71,sK72,sK73,sK74,sK75,sK76])],[f1638])).
fof(f1638,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) & ~p(s(bool,'T_0')))),
  inference(flattening,[],[f1637])).
fof(f1637,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3))))) & ~p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f650])).
fof(f650,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3))))) => p(s(bool,'T_0')))),
  inference(flattening,[],[f649])).
fof(f649,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3))))) => p(s(bool,'T_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X11),s('type.closSem.state'(X6),X12))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X9))))) => p(s(bool,'T_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X11),s('type.closSem.state'(X6),X12))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X9))))) => p(s(bool,'T_0')))),
  file('thm.clos_knownProof.clos_knownProof_37|49|_prove_ltb|split|1','thm.clos_knownProof.clos_knownProof_37|49|_prove_ltb|split|1')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 1126
% Generated clauses: 1293
% Final passive clauses: 1125
% Input formulas: 647
% Initial clauses: 1275
% 
% Duplicate literals: 11
% Trivial inequalities: 1
% 
% Simple tautologies: 116
% Equational tautologies: 3
% 
% Split clauses: 34
% Split components: 70
% SAT solver clauses: 38
% SAT solver unit clauses: 3
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 1
% 
% Sat splits: 34
% 
% TWLsolver clauses: 37
% TWLsolver calls for satisfiability: 1
% 
% Memory used [KB]: 3965
% Time elapsed: 0.146 s
% ------------------------------
% ------------------------------
% Success in time 0.231 s
