Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvi_to_bvpProof
% (132386)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 207
% Passive clauses: 3637
% Generated clauses: 23147
% Final active clauses: 160
% Final passive clauses: 2753
% Input formulas: 27
% Initial clauses: 57
% 
% Duplicate literals: 634
% Trivial inequalities: 497
% Fw subsumption resolutions: 2581
% Fw demodulations: 4237
% Bw demodulations: 12
% 
% Simple tautologies: 405
% Equational tautologies: 24
% Forward subsumptions: 9774
% 
% Binary resolution: 850
% Forward superposition: 8332
% Backward superposition: 5023
% Self superposition: 97
% Equality factoring: 42
% Equality resolution: 43
% 
% Split clauses: 809
% Split components: 1651
% SAT solver clauses: 1527
% SAT solver unit clauses: 13
% SAT solver binary clauses: 161
% 
% Sat splits: 809
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1522
% TWLsolver calls for satisfiability: 238
% 
% Memory used [KB]: 14072
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvi_to_bvpProof
% (132417)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 125
% Passive clauses: 871
% Generated clauses: 10177
% Final active clauses: 67
% Final passive clauses: 433
% Input formulas: 27
% Initial clauses: 57
% 
% Duplicate literals: 406
% Trivial inequalities: 193
% Fw subsumption resolutions: 652
% Fw demodulations: 1359
% Bw demodulations: 297
% Condensations: 702
% Global subsumptions: 4
% 
% Simple tautologies: 175
% Equational tautologies: 20
% Forward subsumptions: 4693
% Bw demodulations to eq. taut.: 58
% 
% Binary resolution: 258
% Factoring: 1
% Forward superposition: 2954
% Backward superposition: 2209
% Self superposition: 67
% Equality factoring: 28
% Equality resolution: 19
% 
% Split clauses: 66
% Split components: 132
% SAT solver clauses: 1142
% SAT solver unit clauses: 69
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 8
% 
% Sat splits: 66
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 1126
% TWLsolver calls for satisfiability: 286
% 
% Memory used [KB]: 9338
% Time elapsed: 0.731 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvi_to_bvpProof
% (132452)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 617
% Passive clauses: 17027
% Generated clauses: 118587
% Final active clauses: 66
% Final passive clauses: 363
% Input formulas: 27
% Initial clauses: 57
% Discarded non-redundant clauses: 8157
% 
% Duplicate literals: 2629
% Trivial inequalities: 789
% Fw subsumption resolutions: 8836
% Fw demodulations: 21125
% Bw demodulations: 9901
% Condensations: 3372
% Global subsumptions: 1373
% 
% Simple tautologies: 769
% Equational tautologies: 400
% Forward subsumptions: 59829
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 327
% 
% Unit resulting resolution: 4492
% Forward superposition: 30863
% Backward superposition: 22216
% Self superposition: 301
% Equality factoring: 90
% Equality resolution: 35
% 
% Split clauses: 180
% Split components: 379
% SAT solver clauses: 20255
% SAT solver unit clauses: 609
% SAT solver binary clauses: 5419
% 
% Sat splits: 180
% Sat splitting refutations: 1493
% 
% Memory used [KB]: 154922
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvi_to_bvpProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvi_to_bvpProof
% SZS output start Proof for thm.bvi_to_bvpProof
fof(f217,plain,(
  $false),
  inference(subsumption_resolution,[],[f216,f94])).
fof(f94,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',sK4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',sK6))))),s('type.list.list'('type.num.num'),sK2))))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',sK0),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))) = s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',sK4),s('type.list.list'('type.num.num'),sK7),s(bool,sK3),s('type.list.list'('type.num.num'),sK5),s('type.list.list'('type.bvi.exp'),sK1))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',sK4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',sK6))))),s('type.list.list'('type.num.num'),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',X0),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),X2),s('type.num.num',X6))))) = s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X4),s('type.list.list'('type.num.num'),X7),s(bool,X3),s('type.list.list'('type.num.num'),X5),s('type.list.list'('type.bvi.exp'),X1))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X2)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',X0),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),X2),s('type.num.num',X6))))) = s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X4),s('type.list.list'('type.num.num'),X7),s(bool,X3),s('type.list.list'('type.num.num'),X5),s('type.list.list'('type.bvi.exp'),X1))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',X6),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),X8),s('type.num.num',X12))))) = s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X10),s('type.list.list'('type.num.num'),X13),s(bool,X9),s('type.list.list'('type.num.num'),X11),s('type.list.list'('type.bvi.exp'),X7))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X10))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X12))))),s('type.list.list'('type.num.num'),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',X6),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),X8),s('type.num.num',X12))))) = s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X10),s('type.list.list'('type.num.num'),X13),s(bool,X9),s('type.list.list'('type.num.num'),X11),s('type.list.list'('type.bvi.exp'),X7))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X10))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X12))))),s('type.list.list'('type.num.num'),X8)))))),
  file('thm.bvi_to_bvpProof.bvi_to_bvpProof_6_prove_ltb','thm.bvi_to_bvpProof.bvi_to_bvpProof_6_prove_ltb')).
fof(f216,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',sK4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',sK6))))),s('type.list.list'('type.num.num'),sK2))))),
  inference(forward_demodulation,[],[f215,f147])).
fof(f147,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X15,X23] : ! [X16,X17] : s(X23,X17) = s(X23,'const.pair.SND_1'(s('type.pair.prod'(X15,X23),'const.pair.,_2'(s(X15,X16),s(X23,X17)))))),
  file('thm.bvi_to_bvpProof.bvi_to_bvpProof_6_prove_ltb','thm.pair.SND')).
fof(f215,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',sK4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))))))),s('type.list.list'('type.num.num'),sK2))))),
  inference(forward_demodulation,[],[f214,f146])).
fof(f146,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X23,X15] : ! [X16,X17] : s(X15,X16) = s(X15,'const.pair.FST_1'(s('type.pair.prod'(X15,X23),'const.pair.,_2'(s(X15,X16),s(X23,X17)))))),
  file('thm.bvi_to_bvpProof.bvi_to_bvpProof_6_prove_ltb','thm.pair.FST')).
fof(f214,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',sK4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))))))),s('type.list.list'('type.num.num'),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))))))),
  inference(forward_demodulation,[],[f195,f147])).
fof(f195,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',sK4))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',sK0),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))))))))))),s('type.list.list'('type.num.num'),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',sK0),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))))))))))),
  inference(superposition,[],[f135,f93])).
fof(f93,plain,(
  s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.pair.,_2'(s('type.bvp.prog',sK0),s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.,_2'(s('type.list.list'('type.num.num'),sK2),s('type.num.num',sK6))))) = s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',sK4),s('type.list.list'('type.num.num'),sK7),s(bool,sK3),s('type.list.list'('type.num.num'),sK5),s('type.list.list'('type.bvi.exp'),sK1)))),
  inference(cnf_transformation,[],[f71])).
fof(f135,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X0))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1),s(bool,X2),s('type.list.list'('type.num.num'),X3),s('type.list.list'('type.bvi.exp'),X4))))))))))),s('type.list.list'('type.num.num'),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1),s(bool,X2),s('type.list.list'('type.num.num'),X3),s('type.list.list'('type.bvi.exp'),X4))))))))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4] : p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X0))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1),s(bool,X2),s('type.list.list'('type.num.num'),X3),s('type.list.list'('type.bvi.exp'),X4))))))))))),s('type.list.list'('type.num.num'),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1),s(bool,X2),s('type.list.list'('type.num.num'),X3),s('type.list.list'('type.bvi.exp'),X4))))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X10,X13,X9,X11,X7] : p(s(bool,'const.list.EVERY_2'(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num',X10))),s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X10),s('type.list.list'('type.num.num'),X13),s(bool,X9),s('type.list.list'('type.num.num'),X11),s('type.list.list'('type.bvi.exp'),X7))))))))))),s('type.list.list'('type.num.num'),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.num.num'),'const.pair.SND_1'(s('type.pair.prod'('type.bvp.prog','type.pair.prod'('type.list.list'('type.num.num'),'type.num.num')),'const.bvi_to_bvp.compile_5'(s('type.num.num',X10),s('type.list.list'('type.num.num'),X13),s(bool,X9),s('type.list.list'('type.num.num'),X11),s('type.list.list'('type.bvi.exp'),X7))))))))))),
  file('thm.bvi_to_bvpProof.bvi_to_bvpProof_6_prove_ltb','thm.bvi_to_bvpProof.bvi_to_bvpProof_5_prove_ltb')).
% SZS output end Proof for thm.bvi_to_bvpProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 15
% Generated clauses: 57
% Final active clauses: 39
% Final passive clauses: 13
% Input formulas: 27
% Initial clauses: 56
% 
% Selected by SInE selection: 26
% SInE iterations: 1
% 
% Duplicate literals: 1
% Fw subsumption resolutions: 7
% Fw demodulations: 3
% 
% Simple tautologies: 17
% Forward subsumptions: 9
% 
% Binary resolution: 20
% Forward superposition: 12
% Backward superposition: 9
% 
% Split clauses: 14
% Split components: 29
% SAT solver clauses: 15
% SAT solver binary clauses: 13
% 
% Sat splits: 14
% 
% Memory used [KB]: 1023
% Time elapsed: 0.006 s
% ------------------------------
% ------------------------------
% Success in time 11.801 s
