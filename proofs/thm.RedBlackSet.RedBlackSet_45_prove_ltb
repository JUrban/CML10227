Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.RedBlackSet
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.RedBlackSet
% SZS output start Proof for thm.RedBlackSet
fof(f3952,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3951,f217,f393,f391,f389,f218,f388,f3950])).
fof(f3950,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f393,f219])).
fof(f219,plain,(
  ( ! [X6,X7,X5] : (s('type.RedBlackSet.tree'(sK12),sK13) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK13) | s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK14),s(sK12,sK15),s('type.RedBlackSet.tree'(sK12),sK16))) | s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK17),s(sK12,sK18),s('type.RedBlackSet.tree'(sK12),sK19)))) & s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK13) & ! [X5,X6,X7] : s('type.RedBlackSet.tree'(sK12),sK13) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7))) & ! [X2,X3,X4] : s('type.RedBlackSet.tree'(sK12),sK13) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f135])).
fof(f135,plain,(
  ? [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))) & s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) & ! [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4))))),
  inference(rectify,[],[f95])).
fof(f95,plain,(
  ? [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) & s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) & ! [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10))))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ? [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) & (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) & ! [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) => (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) => (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X7) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10)))) => (s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X7) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X7) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10)))) => (s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X7) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10))) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X7) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10)))))),
  file('thm.RedBlackSet.RedBlackSet_45_prove_ltb','thm.RedBlackSet.RedBlackSet_45_prove_ltb')).
fof(f388,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK13) | $spl1),
  inference(cnf_transformation,[],[f388_D])).
fof(f388_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK13) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f218,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK13)),
  inference(cnf_transformation,[],[f136])).
fof(f389,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK13) | $spl0),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK13) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f391,plain,(
  s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK14),s(sK12,sK15),s('type.RedBlackSet.tree'(sK12),sK16))) | $spl2),
  inference(cnf_transformation,[],[f391_D])).
fof(f391_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK14),s(sK12,sK15),s('type.RedBlackSet.tree'(sK12),sK16))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f393,plain,(
  s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK17),s(sK12,sK18),s('type.RedBlackSet.tree'(sK12),sK19))) | $spl4),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK17),s(sK12,sK18),s('type.RedBlackSet.tree'(sK12),sK19))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f217,plain,(
  s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK17),s(sK12,sK18),s('type.RedBlackSet.tree'(sK12),sK19))) | s('type.RedBlackSet.tree'(sK12),sK13) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK14),s(sK12,sK15),s('type.RedBlackSet.tree'(sK12),sK16))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK13)),
  inference(cnf_transformation,[],[f136])).
fof(f3951,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f391,f220])).
fof(f220,plain,(
  ( ! [X4,X2,X3] : (s('type.RedBlackSet.tree'(sK12),sK13) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(cnf_transformation,[],[f136])).
% SZS output end Proof for thm.RedBlackSet
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 302
% Passive clauses: 1161
% Generated clauses: 3727
% Final active clauses: 302
% Final passive clauses: 727
% Input formulas: 36
% Initial clauses: 167
% 
% Duplicate literals: 139
% Trivial inequalities: 13
% Fw subsumption resolutions: 248
% 
% Simple tautologies: 125
% Equational tautologies: 20
% Forward subsumptions: 2005
% 
% Binary resolution: 2249
% Factoring: 706
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 158
% SAT solver clauses: 155
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 154
% TWLsolver calls for satisfiability: 134
% 
% Memory used [KB]: 1791
% Time elapsed: 0.136 s
% ------------------------------
% ------------------------------
% Success in time 0.136 s
