Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f7449,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7448,f65,f93,f91,f7420,f64,f92,f90])).
fof(f90,plain,(
  s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f92,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl2),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f64,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1))) | s('type.num.num',sK0) = s('type.num.num',sK1)) & (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) != s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1))) | s('type.num.num',sK0) != s('type.num.num',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f59])).
fof(f59,plain,(
  ? [X0,X1] : ((s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X0))) != s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ? [X0,X1] : (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))) <~> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X0))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X6))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X6))) = s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.bvp_to_wordProps.tag_|49||49||split|0','thm.bvp_to_wordProps.tag_|49||49||split|0')).
fof(f7420,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f7419,f93])).
fof(f7419,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl0),
  inference(forward_demodulation,[],[f7391,f73])).
fof(f73,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9] : ! [X6,X10] : s(X9,X6) = s(X9,'const.ind_type.FCONS_3'(s(X9,X6),s(fun('type.num.num',X9),X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.bvp_to_wordProps.tag_|49||49||split|0','thm.ind_type.FCONS|split|0')).
fof(f7391,plain,(
  ( ! [X2] : (s('type.num.num',sK1) = s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',sK0),s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.num.|48|_0')))) ) | $spl0),
  inference(superposition,[],[f2954,f73])).
fof(f2954,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',sK0),s(fun('type.num.num','type.num.num'),X4),s('type.num.num',X5))) = s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',sK1),s(fun('type.num.num','type.num.num'),X4),s('type.num.num',X5)))) ) | $spl0),
  inference(forward_demodulation,[],[f2848,f78])).
fof(f78,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X9] : ! [X8,X22,X23] : s(X9,'const.ind_type.FCONS_3'(s(X9,X8),s(fun('type.num.num',X9),X22),s('type.num.num',X23))) = s(X9,happ(s(fun('type.num.num',X9),happ(s(fun(fun('type.num.num',X9),fun('type.num.num',X9)),happ(s(fun(X9,fun(fun('type.num.num',X9),fun('type.num.num',X9))),'const.ind_type.FCONS_0'),s(X9,X8))),s(fun('type.num.num',X9),X22))),s('type.num.num',X23)))),
  file('thm.bvp_to_wordProps.tag_|49||49||split|0','ARITY_0_3_const.ind_type.FCONS')).
fof(f2848,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',sK1),s(fun('type.num.num','type.num.num'),X4),s('type.num.num',X5))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num')),happ(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s('type.num.num',sK0))),s(fun('type.num.num','type.num.num'),X4))),s('type.num.num',X5)))) ) | $spl0),
  inference(superposition,[],[f78,f2269])).
fof(f2269,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK0))) = s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f2112,f79])).
fof(f79,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X1))) = s(X0,'const.bvp_to_wordProps.tag_CASE_6'(s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))),s(fun('type.num.num',X0),X2),s(X0,X3),s(fun('type.num.num',X0),X4),s(fun(bool,X0),X5),s(X0,X6)))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X1))) = s(X0,'const.bvp_to_wordProps.tag_CASE_6'(s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))),s(fun('type.num.num',X0),X2),s(X0,X3),s(fun('type.num.num',X0),X4),s(fun(bool,X0),X5),s(X0,X6)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X1))) = s(X0,'const.bvp_to_wordProps.tag_CASE_6'(s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X1))),s(fun('type.num.num',X0),X2),s(X0,X3),s(fun('type.num.num',X0),X4),s(fun(bool,X0),X5),s(X0,X6)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9] : ! [X6,X10,X11,X12,X13,X14] : s(X9,happ(s(fun('type.num.num',X9),X10),s('type.num.num',X6))) = s(X9,'const.bvp_to_wordProps.tag_CASE_6'(s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',X6))),s(fun('type.num.num',X9),X10),s(X9,X11),s(fun('type.num.num',X9),X12),s(fun(bool,X9),X13),s(X9,X14)))),
  file('thm.bvp_to_wordProps.tag_|49||49||split|0','thm.bvp_to_wordProps.tag_case_def|split|0')).
fof(f2112,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK1))) = s(X0,'const.bvp_to_wordProps.tag_CASE_6'(s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))),s(fun('type.num.num',X0),X1),s(X0,X2),s(fun('type.num.num',X0),X3),s(fun(bool,X0),X4),s(X0,X5)))) ) | $spl0),
  inference(superposition,[],[f79,f90])).
fof(f91,plain,(
  s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) != s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) != s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f93,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | $spl3),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f65,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) != s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f60])).
fof(f7448,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f7447])).
fof(f7447,plain,(
  s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) != s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.BlockTag_1'(s('type.num.num',sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f91,f92])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 77
% Passive clauses: 1474
% Generated clauses: 7245
% Final active clauses: 66
% Final passive clauses: 1236
% Input formulas: 21
% Initial clauses: 26
% 
% Duplicate literals: 321
% Trivial inequalities: 109
% Fw subsumption resolutions: 829
% Fw demodulations: 575
% Bw demodulations: 1
% 
% Simple tautologies: 121
% Equational tautologies: 44
% Forward subsumptions: 3480
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 132
% Factoring: 2
% Forward superposition: 2705
% Backward superposition: 2172
% Self superposition: 174
% Equality factoring: 116
% Equality resolution: 14
% 
% Split clauses: 164
% Split components: 328
% SAT solver clauses: 376
% SAT solver unit clauses: 13
% SAT solver binary clauses: 51
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 164
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 374
% TWLsolver calls for satisfiability: 93
% 
% Memory used [KB]: 7803
% Time elapsed: 0.400 s
% ------------------------------
% ------------------------------
% Success in time 0.41 s
