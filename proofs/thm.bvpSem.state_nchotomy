Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvpSem
% (32806)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 236
% Passive clauses: 5378
% Generated clauses: 28129
% Final active clauses: 165
% Final passive clauses: 4800
% Input formulas: 69
% Initial clauses: 128
% 
% Duplicate literals: 574
% Trivial inequalities: 573
% Fw subsumption resolutions: 3078
% Fw demodulations: 3938
% Bw demodulations: 61
% 
% Simple tautologies: 323
% Equational tautologies: 52
% Forward subsumptions: 14026
% Bw demodulations to eq. taut.: 5
% 
% Binary resolution: 988
% Factoring: 1
% Forward superposition: 11369
% Backward superposition: 7342
% Self superposition: 140
% Equality factoring: 72
% Equality resolution: 35
% 
% Split clauses: 222
% Split components: 445
% SAT solver clauses: 438
% SAT solver unit clauses: 26
% SAT solver binary clauses: 162
% 
% Sat splits: 222
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 433
% TWLsolver calls for satisfiability: 89
% 
% Memory used [KB]: 15095
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvpSem
% (32826)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 135
% Passive clauses: 1318
% Generated clauses: 12208
% Final active clauses: 128
% Final passive clauses: 1148
% Input formulas: 69
% Initial clauses: 128
% 
% Duplicate literals: 44
% Trivial inequalities: 78
% Fw subsumption resolutions: 760
% Fw demodulations: 1533
% Bw demodulations: 34
% Condensations: 23
% Global subsumptions: 4
% 
% Simple tautologies: 46
% Equational tautologies: 20
% Forward subsumptions: 6774
% 
% Binary resolution: 278
% Factoring: 2
% Forward superposition: 4727
% Backward superposition: 3202
% Self superposition: 66
% Equality factoring: 8
% Equality resolution: 20
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 1738
% SAT solver unit clauses: 173
% SAT solver binary clauses: 65
% SAT solver learnt clauses: 8
% 
% Sat splits: 10
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1722
% TWLsolver calls for satisfiability: 1233
% 
% Memory used [KB]: 16630
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvpSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpSem
% SZS output start Proof for thm.bvpSem
fof(f24025,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f230,f298,f299,f300,f304,f302,f301,f303,f306,f305,f281])).
fof(f281,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & ((s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : ! [X40,X39] : (s('type.bvpSem.state'(X6),X39) = s('type.bvpSem.state'(X6),X40) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X39))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X40))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X39))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X40))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X39))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X40))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X39))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X40))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X39))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X40))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X39))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X40))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X39))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X40))) & s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X39))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X40))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X39))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X40)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_component_equality')).
fof(f305,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f130])).
fof(f130,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_code')).
fof(f306,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_refs')).
fof(f303,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.ffi.ffi_state'(X0),X8) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.ffi.ffi_state'(X0),X8) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.ffi.ffi_state'(X0),X8) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.ffi.ffi_state'(X6),X15) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_ffi')).
fof(f301,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.option.option'('type.num.num'),X3) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.option.option'('type.num.num'),X3) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.option.option'('type.num.num'),X3) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.option.option'('type.num.num'),X10) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_global')).
fof(f302,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'('type.bvpSem.stack'),X2) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'('type.bvpSem.stack'),X2) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'('type.bvpSem.stack'),X2) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'('type.bvpSem.stack'),X9) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_stack')).
fof(f304,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.sptree.spt'('type.bvlSem.v'),X1) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.sptree.spt'('type.bvlSem.v'),X1) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.sptree.spt'('type.bvlSem.v'),X1) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.sptree.spt'('type.bvlSem.v'),X8) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_locals')).
fof(f300,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num',X4) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.num.num',X4) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.num.num',X4) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.num.num',X11) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_handler')).
fof(f299,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num',X6) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.num.num',X6) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.num.num',X6) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.num.num',X13) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_clock')).
fof(f298,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num',X9) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.num.num',X9) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : s('type.num.num',X9) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X1),s('type.list.list'('type.bvpSem.stack'),X2),s('type.option.option'('type.num.num'),X3),s('type.num.num',X4),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X5),s('type.num.num',X6),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X7),s('type.ffi.ffi_state'(X0),X8),s('type.num.num',X9)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.num.num',X16) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_space')).
fof(f230,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X9] : (s('type.bvpSem.state'(sK0),sK1) != s('type.bvpSem.state'(sK0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X2),s('type.list.list'('type.bvpSem.stack'),X3),s('type.option.option'('type.num.num'),X4),s('type.num.num',X5),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6),s('type.num.num',X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8),s('type.ffi.ffi_state'(sK0),X9),s('type.num.num',X10)))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.bvpSem.state'(sK0),sK1) != s('type.bvpSem.state'(sK0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X2),s('type.list.list'('type.bvpSem.stack'),X3),s('type.option.option'('type.num.num'),X4),s('type.num.num',X5),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6),s('type.num.num',X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8),s('type.ffi.ffi_state'(sK0),X9),s('type.num.num',X10)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f190])).
fof(f190,plain,(
  ? [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X2),s('type.list.list'('type.bvpSem.stack'),X3),s('type.option.option'('type.num.num'),X4),s('type.num.num',X5),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6),s('type.num.num',X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8),s('type.ffi.ffi_state'(X0),X9),s('type.num.num',X10)))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X2),s('type.list.list'('type.bvpSem.stack'),X3),s('type.option.option'('type.num.num'),X4),s('type.num.num',X5),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6),s('type.num.num',X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8),s('type.ffi.ffi_state'(X0),X9),s('type.num.num',X10)))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1] : ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X2),s('type.list.list'('type.bvpSem.stack'),X3),s('type.option.option'('type.num.num'),X4),s('type.num.num',X5),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6),s('type.num.num',X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8),s('type.ffi.ffi_state'(X0),X9),s('type.num.num',X10)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.bvpSem.state'(X6),X7) = s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.bvpSem.state'(X6),X7) = s('type.bvpSem.state'(X6),'const.bvpSem.recordtype|46|state_9'(s('type.sptree.spt'('type.bvlSem.v'),X8),s('type.list.list'('type.bvpSem.stack'),X9),s('type.option.option'('type.num.num'),X10),s('type.num.num',X11),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12),s('type.num.num',X13),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14),s('type.ffi.ffi_state'(X6),X15),s('type.num.num',X16)))),
  file('thm.bvpSem.state_nchotomy','thm.bvpSem.state_nchotomy')).
% SZS output end Proof for thm.bvpSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 185
% Passive clauses: 1605
% Generated clauses: 23843
% Final active clauses: 181
% Final passive clauses: 1413
% Input formulas: 69
% Initial clauses: 128
% 
% Duplicate literals: 52
% Trivial inequalities: 160
% Fw subsumption resolutions: 858
% Fw demodulations: 3922
% Bw demodulations: 11
% Condensations: 112
% 
% Simple tautologies: 82
% Equational tautologies: 47
% Forward subsumptions: 16594
% Fw demodulations to eq. taut.: 336
% 
% Unit resulting resolution: 2135
% Factoring: 1
% Forward superposition: 10412
% Backward superposition: 5942
% Self superposition: 79
% Equality factoring: 10
% Equality resolution: 29
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 1613
% SAT solver unit clauses: 369
% SAT solver binary clauses: 831
% 
% Sat splits: 3
% 
% Memory used [KB]: 25969
% Time elapsed: 0.919 s
% ------------------------------
% ------------------------------
% Success in time 2.27 s
