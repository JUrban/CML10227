Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% (2600)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 115
% Passive clauses: 3850
% Generated clauses: 20789
% Final active clauses: 103
% Final passive clauses: 3455
% Input formulas: 105
% Initial clauses: 117
% 
% Duplicate literals: 640
% Trivial inequalities: 217
% Fw subsumption resolutions: 1718
% Fw demodulations: 2643
% Bw demodulations: 2
% 
% Simple tautologies: 297
% Equational tautologies: 89
% Forward subsumptions: 10124
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 89
% Factoring: 1
% Forward superposition: 7077
% Backward superposition: 7612
% Self superposition: 331
% Equality factoring: 203
% Equality resolution: 22
% 
% Split clauses: 189
% Split components: 382
% SAT solver clauses: 335
% SAT solver unit clauses: 18
% SAT solver binary clauses: 68
% 
% Sat splits: 189
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 335
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 14328
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closProps
% (2633)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 92
% Passive clauses: 1118
% Generated clauses: 9130
% Final active clauses: 84
% Final passive clauses: 971
% Input formulas: 105
% Initial clauses: 117
% 
% Duplicate literals: 402
% Trivial inequalities: 44
% Fw subsumption resolutions: 107
% Fw demodulations: 511
% Bw demodulations: 53
% Condensations: 736
% 
% Simple tautologies: 112
% Equational tautologies: 58
% Forward subsumptions: 4132
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 62
% Factoring: 1
% Forward superposition: 3269
% Backward superposition: 2662
% Self superposition: 183
% Equality factoring: 108
% Equality resolution: 6
% 
% Split clauses: 50
% Split components: 104
% SAT solver clauses: 2016
% SAT solver unit clauses: 196
% SAT solver binary clauses: 51
% 
% Sat splits: 50
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 2016
% TWLsolver calls for satisfiability: 3547
% 
% Memory used [KB]: 16375
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.closProps
% (2661)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 242
% Passive clauses: 4390
% Generated clauses: 76211
% Final active clauses: 118
% Final passive clauses: 521
% Input formulas: 105
% Initial clauses: 117
% Discarded non-redundant clauses: 88652
% 
% Duplicate literals: 1533
% Trivial inequalities: 265
% Fw subsumption resolutions: 762
% Fw demodulations: 3079
% Bw demodulations: 775
% Condensations: 4755
% Global subsumptions: 46
% 
% Simple tautologies: 450
% Equational tautologies: 322
% Forward subsumptions: 51489
% Fw demodulations to eq. taut.: 13
% Bw demodulations to eq. taut.: 91
% 
% Unit resulting resolution: 1151
% Factoring: 2
% Forward superposition: 38358
% Backward superposition: 23358
% Self superposition: 801
% Equality factoring: 286
% Equality resolution: 23
% 
% Split clauses: 32
% Split components: 70
% SAT solver clauses: 4554
% SAT solver unit clauses: 229
% SAT solver binary clauses: 564
% 
% Sat splits: 32
% Sat splitting refutations: 52
% 
% Memory used [KB]: 145711
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f537,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f129,f137,f128,f138,f136,f127,f126,f142,f125,f140,f124,f146,f144,f135,f182,f199,f207,f220,f221,f230,f269,f319,f327,f368,f370,f379,f381,f388,f397,f399,f408,f410,f452,f454,f463,f465,f328,f536])).
fof(f536,plain,(
  $false | ($spl0 | $spl4 | $spl14)),
  inference(subsumption_resolution,[],[f535,f327])).
fof(f535,plain,(
  s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) | ($spl0 | $spl4 | $spl14)),
  inference(trivial_inequality_removal,[],[f534])).
fof(f534,plain,(
  s(sK0,sK2) != s(sK0,sK2) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) | ($spl0 | $spl4 | $spl14)),
  inference(superposition,[],[f138,f479])).
fof(f479,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK9(sK1)))) | ($spl0 | $spl14)),
  inference(superposition,[],[f362,f135])).
fof(f362,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun('type.closSem.v',X0),X1),s('type.closSem.v',sK9(sK1)))) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',X0),X1),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X2)))) ) | $spl14),
  inference(superposition,[],[f132,f327])).
fof(f132,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.closSem.v',X0),X2),s('type.closSem.v',X1))) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X1))),s(fun('type.closSem.v',X0),X2),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun('type.closSem.v',X0),X2),s('type.closSem.v',X1))) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X1))),s(fun('type.closSem.v',X0),X2),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3)))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,happ(s(fun('type.closSem.v',X0),X2),s('type.closSem.v',X1))) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X1))),s(fun('type.closSem.v',X0),X2),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3)))),
  inference(rectify,[],[f77])).
fof(f77,axiom,(
  ! [X6] : ! [X17,X21,X22] : s(X6,happ(s(fun('type.closSem.v',X6),X21),s('type.closSem.v',X17))) = s(X6,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X17))),s(fun('type.closSem.v',X6),X21),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X22)))),
  file('thm.closProps.eqs|split|8','thm.closSem.app_kind_case_def|split|0')).
fof(f328,plain,(
  ( ! [X0] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | $spl16),
  inference(cnf_transformation,[],[f328_D])).
fof(f328_D,plain,(
  ( ! [X0] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f465,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))))))))) | $spl28),
  inference(cnf_transformation,[],[f465_D])).
fof(f465_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))))))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f463,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))))))))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl2 | $spl26)),
  inference(forward_demodulation,[],[f462,f454])).
fof(f462,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))))))) ) | ($spl2 | $spl26)),
  inference(forward_demodulation,[],[f461,f454])).
fof(f461,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))))))) ) | ($spl2 | $spl26)),
  inference(trivial_inequality_removal,[],[f458])).
fof(f458,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',sK1) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))))))) ) | ($spl2 | $spl26)),
  inference(superposition,[],[f311,f454])).
fof(f311,plain,(
  ( ! [X0,X1] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',X0) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X0),s(fun('type.closSem.v',sK0),X1),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(X0))))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f304])).
fof(f304,plain,(
  ( ! [X0,X1] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X0),s(fun('type.closSem.v',sK0),X1),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',X0) | s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(X0)))) | s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(X0))))) ) | $spl2),
  inference(superposition,[],[f294,f131])).
fof(f131,plain,(
  ( ! [X0] : (s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK10(X0)),s('type.list.list'('type.closSem.v'),sK11(X0)),s('type.list.list'('type.closSem.v'),sK12(X0)))) | s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(X0))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0] : (s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(X0)))) | s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK10(X0)),s('type.list.list'('type.closSem.v'),sK11(X0)),s('type.list.list'('type.closSem.v'),sK12(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12])],[f111])).
fof(f111,plain,(
  ! [X0] : (? [X4] : s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X4))) | ? [X1,X2,X3] : s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3))))),
  inference(rectify,[],[f79])).
fof(f79,axiom,(
  ! [X80] : (? [X8] : s('type.closSem.app_kind',X80) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) | ? [X12,X13,X14] : s('type.closSem.app_kind',X80) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X12),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14))))),
  file('thm.closProps.eqs|split|8','thm.closSem.app_kind_nchotomy')).
fof(f294,plain,(
  ( ! [X0,X1] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK10(X0)),s('type.list.list'('type.closSem.v'),sK11(X0)),s('type.list.list'('type.closSem.v'),sK12(X0)))),s(fun('type.closSem.v',sK0),X1),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',X0) | s('type.closSem.app_kind',X0) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(X0))))) ) | $spl2),
  inference(superposition,[],[f258,f131])).
fof(f258,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X0),s('type.list.list'('type.closSem.v'),X1),s('type.list.list'('type.closSem.v'),X2))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X0),s('type.list.list'('type.closSem.v'),X1),s('type.list.list'('type.closSem.v'),X2))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | $spl2),
  inference(superposition,[],[f137,f130])).
fof(f130,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3))),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X5))) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X5),s('type.closLang.exp',X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3)))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3))),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X5))) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X5),s('type.closLang.exp',X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3)))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3))),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X5))) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X5),s('type.closLang.exp',X1))),s('type.list.list'('type.closSem.v'),X2))),s('type.list.list'('type.closSem.v'),X3)))),
  inference(rectify,[],[f78])).
fof(f78,axiom,(
  ! [X6] : ! [X59,X60,X61,X21,X22] : s(X6,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X59),s('type.list.list'('type.closSem.v'),X60),s('type.list.list'('type.closSem.v'),X61))),s(fun('type.closSem.v',X6),X21),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X22))) = s(X6,happ(s(fun('type.list.list'('type.closSem.v'),X6),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X22),s('type.closLang.exp',X59))),s('type.list.list'('type.closSem.v'),X60))),s('type.list.list'('type.closSem.v'),X61)))),
  file('thm.closProps.eqs|split|8','thm.closSem.app_kind_case_def|split|1')).
fof(f454,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))) | $spl26),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f452,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f451,f410])).
fof(f451,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))))))) ) | ($spl2 | $spl24)),
  inference(forward_demodulation,[],[f450,f410])).
fof(f450,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))))))) ) | ($spl2 | $spl24)),
  inference(trivial_inequality_removal,[],[f447])).
fof(f447,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',sK1) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))))))) ) | ($spl2 | $spl24)),
  inference(superposition,[],[f311,f410])).
fof(f410,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))) | $spl24),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f408,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f407,f399])).
fof(f407,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))) ) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f406,f399])).
fof(f406,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))) ) | ($spl2 | $spl22)),
  inference(trivial_inequality_removal,[],[f403])).
fof(f403,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',sK1) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))))))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f311,f399])).
fof(f399,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))) | $spl22),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f397,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl2 | $spl20)),
  inference(forward_demodulation,[],[f396,f381])).
fof(f396,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))) ) | ($spl2 | $spl20)),
  inference(forward_demodulation,[],[f395,f381])).
fof(f395,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))) ) | ($spl2 | $spl20)),
  inference(trivial_inequality_removal,[],[f392])).
fof(f392,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',sK1) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))))))) ) | ($spl2 | $spl20)),
  inference(superposition,[],[f311,f381])).
fof(f388,plain,(
  $false | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f387])).
fof(f387,plain,(
  s(sK0,sK2) != s(sK0,sK2) | ($spl0 | $spl16)),
  inference(superposition,[],[f328,f135])).
fof(f381,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))) | $spl20),
  inference(cnf_transformation,[],[f381_D])).
fof(f381_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f379,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl2 | $spl18)),
  inference(forward_demodulation,[],[f378,f370])).
fof(f378,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))) ) | ($spl2 | $spl18)),
  inference(forward_demodulation,[],[f377,f370])).
fof(f377,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))) ) | ($spl2 | $spl18)),
  inference(trivial_inequality_removal,[],[f374])).
fof(f374,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',sK1) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))))))) ) | ($spl2 | $spl18)),
  inference(superposition,[],[f311,f370])).
fof(f370,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))) | $spl18),
  inference(cnf_transformation,[],[f370_D])).
fof(f370_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f368,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl2 | $spl14)),
  inference(forward_demodulation,[],[f367,f327])).
fof(f367,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))) ) | ($spl2 | $spl14)),
  inference(forward_demodulation,[],[f366,f327])).
fof(f366,plain,(
  ( ! [X3] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))) ) | ($spl2 | $spl14)),
  inference(trivial_inequality_removal,[],[f363])).
fof(f363,plain,(
  ( ! [X3] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind',sK1) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))),s(fun('type.closSem.v',sK0),X3),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9('const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))))))) ) | ($spl2 | $spl14)),
  inference(superposition,[],[f311,f327])).
fof(f327,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) | $spl14),
  inference(cnf_transformation,[],[f327_D])).
fof(f327_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1)))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f319,plain,(
  ( ! [X0] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK9(sK1))))) ) | $spl2),
  inference(equality_resolution,[],[f311])).
fof(f269,plain,(
  $false | ($spl2 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f259,f146])).
fof(f259,plain,(
  s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | ($spl2 | $spl8)),
  inference(trivial_inequality_removal,[],[f257])).
fof(f257,plain,(
  s(sK0,sK2) != s(sK0,sK2) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | ($spl2 | $spl8)),
  inference(superposition,[],[f137,f142])).
fof(f230,plain,(
  $false | ($spl0 | $spl9 | $spl12)),
  inference(trivial_inequality_removal,[],[f229])).
fof(f229,plain,(
  s(sK0,sK2) != s(sK0,sK2) | ($spl0 | $spl9 | $spl12)),
  inference(superposition,[],[f223,f135])).
fof(f223,plain,(
  ( ! [X0] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl9 | $spl12)),
  inference(forward_demodulation,[],[f222,f146])).
fof(f222,plain,(
  ( ! [X0] : (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | $spl9),
  inference(superposition,[],[f141,f130])).
fof(f141,plain,(
  s(sK0,sK2) != s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))) | $spl9),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  s(sK0,sK2) != s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f221,plain,(
  $false | ($spl0 | $spl7 | $spl10)),
  inference(subsumption_resolution,[],[f219,f139])).
fof(f139,plain,(
  s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | $spl7),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f219,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | ($spl0 | $spl10)),
  inference(superposition,[],[f147,f135])).
fof(f147,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun('type.closSem.v',X0),X1),s('type.closSem.v',sK5))) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',X0),X1),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X2)))) ) | $spl10),
  inference(superposition,[],[f132,f144])).
fof(f220,plain,(
  $false | ($spl0 | $spl7 | $spl10)),
  inference(subsumption_resolution,[],[f218,f139])).
fof(f218,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | ($spl0 | $spl10)),
  inference(superposition,[],[f135,f147])).
fof(f207,plain,(
  $false | ($spl7 | $spl8 | $spl10 | $spl12)),
  inference(trivial_inequality_removal,[],[f206])).
fof(f206,plain,(
  s(sK0,sK2) != s(sK0,sK2) | ($spl7 | $spl8 | $spl10 | $spl12)),
  inference(superposition,[],[f139,f196])).
fof(f196,plain,(
  ( ! [X1] : (s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),X1),s('type.closSem.v',sK5)))) ) | ($spl8 | $spl10 | $spl12)),
  inference(superposition,[],[f188,f147])).
fof(f188,plain,(
  ( ! [X0] : (s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | ($spl8 | $spl12)),
  inference(forward_demodulation,[],[f186,f146])).
fof(f186,plain,(
  ( ! [X0] : (s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))),s(fun('type.closSem.v',sK0),X0),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) ) | $spl8),
  inference(superposition,[],[f142,f130])).
fof(f199,plain,(
  $false | ($spl1 | $spl8 | $spl12)),
  inference(trivial_inequality_removal,[],[f197])).
fof(f197,plain,(
  s(sK0,sK2) != s(sK0,sK2) | ($spl1 | $spl8 | $spl12)),
  inference(superposition,[],[f136,f188])).
fof(f182,plain,(
  $false | ($spl1 | $spl6 | $spl10)),
  inference(subsumption_resolution,[],[f179,f140])).
fof(f179,plain,(
  s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | ($spl1 | $spl10)),
  inference(superposition,[],[f136,f147])).
fof(f135,plain,(
  s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | $spl0),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f144,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK5))) | $spl10),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK5))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f146,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | $spl12),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f124,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK5))) | s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  (s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK5))) & s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5)))) | (s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) & s(sK0,sK2) = s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))))) & (s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | (! [X8] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) | s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',X8)))) & ! [X5,X6,X7] : (s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) | s(sK0,sK2) != s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f121])).
fof(f121,plain,(
  ? [X0,X1,X2,X3,X4] : ((s(X0,X2) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) | ? [X12] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X12))) & s(X0,X2) = s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X12)))) | ? [X9,X10,X11] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X9),s('type.list.list'('type.closSem.v'),X10),s('type.list.list'('type.closSem.v'),X11))) & s(X0,X2) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X9))),s('type.list.list'('type.closSem.v'),X10))),s('type.list.list'('type.closSem.v'),X11))))) & (s(X0,X2) != s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) | (! [X8] : (s('type.closSem.app_kind',X1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) | s(X0,X2) != s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) & ! [X5,X6,X7] : (s('type.closSem.app_kind',X1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) | s(X0,X2) != s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7)))))))),
  inference(rectify,[],[f120])).
fof(f120,plain,(
  ? [X0,X1,X2,X3,X4] : ((s(X0,X2) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) | ? [X8] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) & s(X0,X2) = s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) | ? [X5,X6,X7] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) & s(X0,X2) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))))) & (s(X0,X2) != s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) | (! [X8] : (s('type.closSem.app_kind',X1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) | s(X0,X2) != s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) & ! [X5,X6,X7] : (s('type.closSem.app_kind',X1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) | s(X0,X2) != s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7)))))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ? [X0,X1,X2,X3,X4] : ((s(X0,X2) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) | (? [X8] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) & s(X0,X2) = s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) | ? [X5,X6,X7] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) & s(X0,X2) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7)))))) & (s(X0,X2) != s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) | (! [X8] : (s('type.closSem.app_kind',X1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) | s(X0,X2) != s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) & ! [X5,X6,X7] : (s('type.closSem.app_kind',X1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) | s(X0,X2) != s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7)))))))),
  inference(nnf_transformation,[],[f118])).
fof(f118,plain,(
  ? [X0,X1,X2,X3,X4] : (s(X0,X2) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) <~> (? [X8] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) & s(X0,X2) = s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) | ? [X5,X6,X7] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) & s(X0,X2) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))))))),
  inference(ennf_transformation,[],[f108])).
fof(f108,plain,(
  ~! [X0,X1,X2,X3,X4] : (s(X0,X2) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) <=> (? [X8] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) & s(X0,X2) = s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) | ? [X5,X6,X7] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) & s(X0,X2) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (s(X0,X2) = s(X0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X1),s(fun('type.closSem.v',X0),X4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3))) <=> (? [X8] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) & s(X0,X2) = s(X0,happ(s(fun('type.closSem.v',X0),X4),s('type.closSem.v',X8)))) | ? [X5,X6,X7] : (s('type.closSem.app_kind',X1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) & s(X0,X2) = s(X0,happ(s(fun('type.list.list'('type.closSem.v'),X0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X0))),X3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (s(X6,X8) = s(X6,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X7),s(fun('type.closSem.v',X6),X10),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X9))) <=> (? [X11] : (s('type.closSem.app_kind',X7) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X11))) & s(X6,X8) = s(X6,happ(s(fun('type.closSem.v',X6),X10),s('type.closSem.v',X11)))) | ? [X12,X13,X14] : (s('type.closSem.app_kind',X7) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X12),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14))) & s(X6,X8) = s(X6,happ(s(fun('type.list.list'('type.closSem.v'),X6),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X9),s('type.closLang.exp',X12))),s('type.list.list'('type.closSem.v'),X13))),s('type.list.list'('type.closSem.v'),X14))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (s(X6,X8) = s(X6,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',X7),s(fun('type.closSem.v',X6),X10),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X9))) <=> (? [X11] : (s('type.closSem.app_kind',X7) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X11))) & s(X6,X8) = s(X6,happ(s(fun('type.closSem.v',X6),X10),s('type.closSem.v',X11)))) | ? [X12,X13,X14] : (s('type.closSem.app_kind',X7) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X12),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14))) & s(X6,X8) = s(X6,happ(s(fun('type.list.list'('type.closSem.v'),X6),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),X6))),X9),s('type.closLang.exp',X12))),s('type.list.list'('type.closSem.v'),X13))),s('type.list.list'('type.closSem.v'),X14))))))),
  file('thm.closProps.eqs|split|8','thm.closProps.eqs|split|8')).
fof(f140,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | $spl6),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f125,plain,(
  s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',sK6),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))),
  inference(cnf_transformation,[],[f122])).
fof(f142,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))) | $spl8),
  inference(cnf_transformation,[],[f142_D])).
fof(f142_D,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f126,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))) | s('type.closSem.app_kind',sK1) = s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',sK5))) | s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))),
  inference(cnf_transformation,[],[f122])).
fof(f127,plain,(
  s(sK0,sK2) = s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',sK6))),s('type.list.list'('type.closSem.v'),sK7))),s('type.list.list'('type.closSem.v'),sK8))) | s(sK0,sK2) = s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',sK5))) | s(sK0,sK2) = s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))),
  inference(cnf_transformation,[],[f122])).
fof(f136,plain,(
  s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) | $spl1),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f138,plain,(
  ( ! [X8] : (s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',X8))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8)))) ) | $spl4),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  ( ! [X8] : (s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',X8))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f128,plain,(
  ( ! [X8] : (s(sK0,sK2) != s(sK0,happ(s(fun('type.closSem.v',sK0),sK4),s('type.closSem.v',X8))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Partial_app_1'(s('type.closSem.v',X8))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) )),
  inference(cnf_transformation,[],[f122])).
fof(f137,plain,(
  ( ! [X6,X7,X5] : (s(sK0,sK2) != s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7)))) ) | $spl2),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  ( ! [X6,X7,X5] : (s(sK0,sK2) != s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f129,plain,(
  ( ! [X6,X7,X5] : (s(sK0,sK2) != s(sK0,happ(s(fun('type.list.list'('type.closSem.v'),sK0),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0)),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3),s('type.closLang.exp',X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.list.list'('type.closSem.v'),X7))) | s('type.closSem.app_kind',sK1) != s('type.closSem.app_kind','const.closSem.Full_app_3'(s('type.closLang.exp',X5),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7))) | s(sK0,sK2) != s(sK0,'const.closSem.app_kind_CASE_3'(s('type.closSem.app_kind',sK1),s(fun('type.closSem.v',sK0),sK4),s(fun('type.closLang.exp',fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),sK0))),sK3)))) )),
  inference(cnf_transformation,[],[f122])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 94
% Generated clauses: 417
% Final active clauses: 26
% Final passive clauses: 47
% Input formulas: 105
% Initial clauses: 11
% 
% Selected by SInE selection: 6
% SInE iterations: 1
% 
% Duplicate literals: 1
% Trivial inequalities: 13
% Fw subsumption resolutions: 5
% Fw demodulations: 92
% 
% Forward subsumptions: 195
% 
% Forward superposition: 163
% Backward superposition: 96
% Self superposition: 4
% Equality resolution: 1
% 
% Split clauses: 13
% Split components: 30
% SAT solver clauses: 23
% SAT solver binary clauses: 3
% 
% Sat splits: 13
% Sat splitting refutations: 9
% 
% Memory used [KB]: 2814
% Time elapsed: 0.031 s
% ------------------------------
% ------------------------------
% Success in time 11.8 s
