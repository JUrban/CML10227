Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (117687)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 576
% Passive clauses: 4006
% Generated clauses: 14020
% Final active clauses: 572
% Final passive clauses: 3243
% Input formulas: 132
% Initial clauses: 312
% 
% Duplicate literals: 158
% Trivial inequalities: 11
% Fw subsumption resolutions: 738
% Fw demodulations: 1552
% Bw demodulations: 3
% 
% Simple tautologies: 198
% Equational tautologies: 20
% Forward subsumptions: 6912
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 3862
% Factoring: 791
% Forward superposition: 2424
% Backward superposition: 4006
% Self superposition: 47
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 316
% Split components: 633
% SAT solver clauses: 440
% SAT solver unit clauses: 12
% SAT solver binary clauses: 48
% 
% Sat splits: 316
% 
% TWLsolver clauses: 440
% TWLsolver calls for satisfiability: 246
% 
% Memory used [KB]: 8955
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (117704)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 317
% Passive clauses: 1923
% Generated clauses: 10690
% Final active clauses: 305
% Final passive clauses: 1525
% Input formulas: 132
% Initial clauses: 312
% 
% Duplicate literals: 83
% Trivial inequalities: 4
% Fw subsumption resolutions: 346
% Fw demodulations: 1298
% Bw demodulations: 90
% Condensations: 98
% Global subsumptions: 19
% 
% Simple tautologies: 183
% Equational tautologies: 5
% Forward subsumptions: 4521
% Fw demodulations to eq. taut.: 20
% 
% Binary resolution: 1483
% Factoring: 193
% Forward superposition: 2216
% Backward superposition: 2458
% Self superposition: 76
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 2471
% SAT solver unit clauses: 381
% SAT solver binary clauses: 90
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 12
% 
% Sat splits: 10
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2395
% TWLsolver calls for satisfiability: 4530
% 
% Memory used [KB]: 16886
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f24263,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f695,f512])).
fof(f512,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK18),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),sK20),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK22))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK22))))),s('type.list.list'('type.clos_known.val_approx'),sK19))),s('type.sptree.spt'('type.clos_known.val_approx'),sK21)))) )),
  inference(cnf_transformation,[],[f393])).
fof(f393,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK18),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),sK20),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK22))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK22))))),s('type.list.list'('type.clos_known.val_approx'),sK19))),s('type.sptree.spt'('type.clos_known.val_approx'),sK21)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19,sK20,sK21,sK22])],[f337])).
fof(f337,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(ennf_transformation,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X5),s('type.sptree.spt'('type.clos_known.val_approx'),X6))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X2),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4))))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X8),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10))))),s('type.list.list'('type.clos_known.val_approx'),X7))),s('type.sptree.spt'('type.clos_known.val_approx'),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X12))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.list.GENLIST_2'(s(fun('type.num.num','type.clos_known.val_approx'),'const.option.option_CASE_3'(s('type.option.option'('type.num.num'),X8),s(fun('type.num.num','type.clos_known.val_approx'),'const.combin.K_1'(s('type.clos_known.val_approx','const.clos_known.Other_0'))),s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'_dst_x00x11x01_3'(s(fun('type.num.num',fun('type.num.num','type.clos_known.val_approx')),'const.clos_known.Clos_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s(fun('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'type.pair.prod'('type.num.num','type.closLang.exp'))),'const.list.EL_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10))))),s('type.list.list'('type.clos_known.val_approx'),X7))),s('type.sptree.spt'('type.clos_known.val_approx'),X9)))),
  file('thm.clos_knownProof.clos_knownProof_|49||48|_prove_ltb','thm.clos_knownProof.clos_knownProof_|49||48|_prove_ltb')).
fof(f695,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK79(X2,X1,X0)),s(X1,sK80(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f475])).
fof(f475,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK79(X2,X1,X0)),s(X1,sK80(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK79,sK80])],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f233])).
fof(f233,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X38,X37] : ! [X14] : ? [X63,X62] : s('type.pair.prod'(X38,X37),X14) = s('type.pair.prod'(X38,X37),'const.pair.,_2'(s(X38,X63),s(X37,X62)))),
  file('thm.clos_knownProof.clos_knownProof_|49||48|_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 479
% Passive clauses: 4625
% Generated clauses: 23806
% Final active clauses: 463
% Final passive clauses: 3868
% Input formulas: 132
% Initial clauses: 312
% 
% Duplicate literals: 10
% Trivial inequalities: 2
% Fw subsumption resolutions: 33
% Fw demodulations: 3092
% Bw demodulations: 294
% Condensations: 20
% 
% Simple tautologies: 82
% Equational tautologies: 20
% Forward subsumptions: 15848
% Fw demodulations to eq. taut.: 13
% 
% Unit resulting resolution: 2191
% Factoring: 1
% Forward superposition: 8203
% Backward superposition: 9392
% Self superposition: 251
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 4631
% SAT solver unit clauses: 2337
% SAT solver binary clauses: 1274
% 
% Sat splits: 2
% 
% Memory used [KB]: 70361
% Time elapsed: 2.685 s
% ------------------------------
% ------------------------------
% Success in time 4.05 s
