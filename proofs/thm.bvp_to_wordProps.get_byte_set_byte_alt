Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f18716,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f18711,f114,f117,f76,f120])).
fof(f120,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f76,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.get_byte_set_byte_alt',aHL_FALSITY)).
fof(f117,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f114,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f93])).
fof(f93,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X7] : (s(X6,X7) = s(X6,X7) <=> p(s(bool,'T_0')))),
  file('thm.bvp_to_wordProps.get_byte_set_byte_alt','thm.bool.REFL_CLAUSE')).
fof(f18711,plain,(
  $false | ($spl2 | $spl7)),
  inference(subsumption_resolution,[],[f18705,f72])).
fof(f72,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),sK4),s(bool,sK5)))),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))) & s('type.fcp.cart'(bool,sK0),sK2) != s('type.fcp.cart'(bool,sK0),sK3) & s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK2))) = s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK3))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),sK4),s(bool,sK5))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK1) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK6),s('type.fcp.cart'(bool,sK0),sK4),s(bool,sK5))),s(bool,sK5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & s('type.fcp.cart'(bool,X0),X2) != s('type.fcp.cart'(bool,X0),X3) & s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X2))) = s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X3))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X4),s(bool,X5))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6),s('type.fcp.cart'(bool,X0),X4),s(bool,X5))),s(bool,X5))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & s('type.fcp.cart'(bool,X0),X2) != s('type.fcp.cart'(bool,X0),X3) & s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X2))) = s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X3))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X4),s(bool,X5)))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6),s('type.fcp.cart'(bool,X0),X4),s(bool,X5))),s(bool,X5))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & s('type.fcp.cart'(bool,X0),X2) != s('type.fcp.cart'(bool,X0),X3) & s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X2))) = s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X3))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X4),s(bool,X5)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6),s('type.fcp.cart'(bool,X0),X4),s(bool,X5))),s(bool,X5))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ~s('type.fcp.cart'(bool,X0),X2) = s('type.fcp.cart'(bool,X0),X3) & s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X2))) = s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X3))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X4),s(bool,X5)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X6),s('type.fcp.cart'(bool,X0),X4),s(bool,X5))),s(bool,X5))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))) & ~s('type.fcp.cart'(bool,X6),X8) = s('type.fcp.cart'(bool,X6),X9) & s('type.fcp.cart'(bool,X6),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X6),X8))) = s('type.fcp.cart'(bool,X6),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X6),X9))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X7) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),X10),s(bool,X11)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X7) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X6),X9),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12),s('type.fcp.cart'(bool,X6),X10),s(bool,X11))),s(bool,X11))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))) & ~s('type.fcp.cart'(bool,X6),X8) = s('type.fcp.cart'(bool,X6),X9) & s('type.fcp.cart'(bool,X6),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X6),X8))) = s('type.fcp.cart'(bool,X6),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X6),X9))) & s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X7) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),X10),s(bool,X11)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X7) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X6),X9),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12),s('type.fcp.cart'(bool,X6),X10),s(bool,X11))),s(bool,X11))))),
  file('thm.bvp_to_wordProps.get_byte_set_byte_alt','thm.bvp_to_wordProps.get_byte_set_byte_alt')).
fof(f18705,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK1) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),sK4),s(bool,sK5))) | ($spl2 | $spl7)),
  inference(superposition,[],[f73,f1428])).
fof(f1428,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),X0),s(bool,X1))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2),s('type.fcp.cart'(bool,sK0),X0),s(bool,X1))),s(bool,X1)))) ) | ($spl2 | $spl7)),
  inference(subsumption_resolution,[],[f1425,f70])).
fof(f70,plain,(
  s('type.fcp.cart'(bool,sK0),sK2) != s('type.fcp.cart'(bool,sK0),sK3)),
  inference(cnf_transformation,[],[f51])).
fof(f1425,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),X0),s(bool,X1))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2),s('type.fcp.cart'(bool,sK0),X0),s(bool,X1))),s(bool,X1))) | s('type.fcp.cart'(bool,sK0),sK2) = s('type.fcp.cart'(bool,sK0),sK3)) ) | ($spl2 | $spl7)),
  inference(equality_resolution,[],[f641])).
fof(f641,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK2))) != s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),X0))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),X0),s('type.fcp.cart'(bool,sK0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),X0),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,sK0),X1),s(bool,X2))),s(bool,X2))) | s('type.fcp.cart'(bool,sK0),sK3) = s('type.fcp.cart'(bool,sK0),X0)) ) | ($spl2 | $spl7)),
  inference(subsumption_resolution,[],[f640,f117])).
fof(f640,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK2))) != s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),X0))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),X0),s('type.fcp.cart'(bool,sK0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),X0),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,sK0),X1),s(bool,X2))),s(bool,X2))) | s('type.fcp.cart'(bool,sK0),sK3) = s('type.fcp.cart'(bool,sK0),X0)) ) | $spl7),
  inference(forward_demodulation,[],[f631,f131])).
fof(f131,plain,(
  s(bool,'T_0') = s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))) | $spl7),
  inference(subsumption_resolution,[],[f128,f120])).
fof(f128,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),
  inference(superposition,[],[f69,f77])).
fof(f77,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.get_byte_set_byte_alt',aHL_BOOL_CASES)).
fof(f69,plain,(
  p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),
  inference(cnf_transformation,[],[f51])).
fof(f631,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK2))) != s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),X0))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),X0),s('type.fcp.cart'(bool,sK0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),X0),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,sK0),X1),s(bool,X2))),s(bool,X2))) | s('type.fcp.cart'(bool,sK0),sK3) = s('type.fcp.cart'(bool,sK0),X0) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) )),
  inference(superposition,[],[f97,f71])).
fof(f71,plain,(
  s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK2))) = s('type.fcp.cart'(bool,sK0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,sK0),sK3)))),
  inference(cnf_transformation,[],[f51])).
fof(f97,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X4))) != s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X5))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X4),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))),s(bool,X2))) | s('type.fcp.cart'(bool,X0),X4) = s('type.fcp.cart'(bool,X0),X5) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) | s('type.fcp.cart'(bool,X0),X4) = s('type.fcp.cart'(bool,X0),X5) | s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X4))) != s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X5))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X4),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))),s(bool,X2))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) | s('type.fcp.cart'(bool,X0),X4) = s('type.fcp.cart'(bool,X0),X5) | s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X4))) != s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X5)))) | s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X4),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))),s(bool,X2))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & s('type.fcp.cart'(bool,X0),X4) != s('type.fcp.cart'(bool,X0),X5) & s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X4))) = s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X5)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X4),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))),s(bool,X2))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ~s('type.fcp.cart'(bool,X0),X4) = s('type.fcp.cart'(bool,X0),X5) & s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X4))) = s('type.fcp.cart'(bool,X0),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X0),X5)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X0),X5),s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X4),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X2))),s(bool,X2))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X8,X11,X12,X20,X21] : ((p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))) & ~s('type.fcp.cart'(bool,X6),X20) = s('type.fcp.cart'(bool,X6),X21) & s('type.fcp.cart'(bool,X6),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X6),X20))) = s('type.fcp.cart'(bool,X6),'const.alignment.byte_align_1'(s('type.fcp.cart'(bool,X6),X21)))) => s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X6),X21),s('type.fcp.cart'(bool,X6),X8),s(bool,X11))) = s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,X6),X21),s('type.fcp.cart'(bool,X6),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X6),X20),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X12),s('type.fcp.cart'(bool,X6),X8),s(bool,X11))),s(bool,X11))))),
  file('thm.bvp_to_wordProps.get_byte_set_byte_alt','thm.labProps.get_byte_set_byte_diff')).
fof(f73,plain,(
  s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK1) != s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.wordSem.get_byte_3'(s('type.fcp.cart'(bool,sK0),sK2),s('type.fcp.cart'(bool,sK0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK0),sK3),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK6),s('type.fcp.cart'(bool,sK0),sK4),s(bool,sK5))),s(bool,sK5)))),
  inference(cnf_transformation,[],[f51])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 126
% Passive clauses: 1379
% Generated clauses: 18129
% Final active clauses: 97
% Final passive clauses: 1118
% Input formulas: 16
% Initial clauses: 44
% 
% Duplicate literals: 931
% Trivial inequalities: 392
% Fw subsumption resolutions: 3053
% Fw demodulations: 1855
% Bw demodulations: 27
% 
% Simple tautologies: 476
% Equational tautologies: 60
% Forward subsumptions: 8315
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 98
% Forward superposition: 5676
% Backward superposition: 5441
% Self superposition: 218
% Equality factoring: 166
% Equality resolution: 33
% 
% Split clauses: 1100
% Split components: 2274
% SAT solver clauses: 1803
% SAT solver unit clauses: 20
% SAT solver binary clauses: 142
% SAT solver learnt clauses: 1
% 
% Sat splits: 1100
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1800
% TWLsolver calls for satisfiability: 157
% 
% Memory used [KB]: 8955
% Time elapsed: 0.516 s
% ------------------------------
% ------------------------------
% Success in time 0.52 s
