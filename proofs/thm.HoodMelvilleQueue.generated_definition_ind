Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.HoodMelvilleQueue
% (105850)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1013
% Passive clauses: 7347
% Generated clauses: 37334
% Final active clauses: 983
% Final passive clauses: 5946
% Input formulas: 515
% Initial clauses: 904
% 
% Duplicate literals: 176
% Trivial inequalities: 39
% Fw subsumption resolutions: 1952
% Fw demodulations: 3150
% Bw demodulations: 11
% 
% Simple tautologies: 274
% Equational tautologies: 26
% Forward subsumptions: 24238
% 
% Binary resolution: 6145
% Factoring: 663
% Forward superposition: 10549
% Backward superposition: 13568
% Self superposition: 53
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 236
% Split components: 474
% SAT solver clauses: 436
% SAT solver unit clauses: 17
% SAT solver binary clauses: 69
% 
% Sat splits: 236
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 436
% TWLsolver calls for satisfiability: 329
% 
% Memory used [KB]: 18933
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.HoodMelvilleQueue
% (105873)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 338
% Passive clauses: 1482
% Generated clauses: 8087
% Final active clauses: 318
% Final passive clauses: 808
% Input formulas: 515
% Initial clauses: 904
% 
% Duplicate literals: 81
% Trivial inequalities: 18
% Fw subsumption resolutions: 391
% Fw demodulations: 798
% Bw demodulations: 354
% Condensations: 41
% Global subsumptions: 37
% 
% Simple tautologies: 252
% Equational tautologies: 7
% Forward subsumptions: 3157
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 936
% Factoring: 68
% Forward superposition: 1618
% Backward superposition: 1254
% Self superposition: 30
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 2679
% SAT solver unit clauses: 1265
% SAT solver binary clauses: 234
% SAT solver learnt clauses: 74
% SAT solver learnt literals: 41
% 
% Sat splits: 8
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2532
% TWLsolver calls for satisfiability: 9780
% 
% Memory used [KB]: 51171
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.HoodMelvilleQueue
% (105908)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1256
% Passive clauses: 12326
% Generated clauses: 141603
% Final active clauses: 1071
% Final passive clauses: 5584
% Input formulas: 515
% Initial clauses: 904
% Discarded non-redundant clauses: 8203
% 
% Duplicate literals: 10
% Trivial inequalities: 31
% Fw subsumption resolutions: 1671
% Fw demodulations: 46242
% Bw demodulations: 2074
% Condensations: 116
% Global subsumptions: 1
% 
% Simple tautologies: 168
% Equational tautologies: 50
% Forward subsumptions: 75659
% Fw demodulations to eq. taut.: 1406
% Bw demodulations to eq. taut.: 39
% 
% Unit resulting resolution: 32119
% Factoring: 1
% Forward superposition: 28421
% Backward superposition: 28035
% Self superposition: 187
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 14160
% SAT solver unit clauses: 4862
% SAT solver binary clauses: 6904
% 
% Sat splits: 36
% Sat splitting refutations: 1759
% 
% Memory used [KB]: 239228
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 27 next slice time: 27
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.HoodMelvilleQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.HoodMelvilleQueue
% SZS output start Proof for thm.HoodMelvilleQueue
fof(f4761,plain,(
  $false),
  inference(resolution,[],[f1294,f1109])).
fof(f1109,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one',X0))),s('type.HoodMelvilleQueue.queue'(sK13),sK16))),s(sK13,sK17))))) )),
  inference(superposition,[],[f993,f981])).
fof(f981,plain,(
  ( ! [X0] : (s('type.one.one','const.one.one_0') = s('type.one.one',X0)) )),
  inference(cnf_transformation,[],[f597])).
fof(f597,plain,(
  ! [X0] : s('type.one.one','const.one.one_0') = s('type.one.one',X0)),
  inference(rectify,[],[f181])).
fof(f181,axiom,(
  ! [X129] : s('type.one.one','const.one.one_0') = s('type.one.one',X129)),
  file('thm.HoodMelvilleQueue.generated_definition_ind','thm.inferProps.success_eqns|split|9')).
fof(f993,plain,(
  ~p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(sK13),sK16))),s(sK13,sK17))))),
  inference(forward_demodulation,[],[f775,f981])).
fof(f775,plain,(
  ~p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one',sK15))),s('type.HoodMelvilleQueue.queue'(sK13),sK16))),s(sK13,sK17))))),
  inference(cnf_transformation,[],[f655])).
fof(f655,plain,(
  ! [X5,X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(sK13),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X5),s('type.list.list'(sK13),X6),s('type.HoodMelvilleQueue.status'(sK13),X7),s('type.num.num',X8),s('type.list.list'(sK13),X9))))),s(sK13,X10)))) & ~p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one',sK15))),s('type.HoodMelvilleQueue.queue'(sK13),sK16))),s(sK13,sK17))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17])],[f654])).
fof(f654,plain,(
  ? [X0,X1] : (! [X5,X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X5),s('type.list.list'(X0),X6),s('type.HoodMelvilleQueue.status'(X0),X7),s('type.num.num',X8),s('type.list.list'(X0),X9))))),s(X0,X10)))) & ? [X2,X3,X4] : ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one',X2))),s('type.HoodMelvilleQueue.queue'(X0),X3))),s(X0,X4)))))),
  inference(rectify,[],[f602])).
fof(f602,plain,(
  ? [X0,X1] : (! [X2,X3,X4,X5,X6,X7] : p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),X3),s('type.HoodMelvilleQueue.status'(X0),X4),s('type.num.num',X5),s('type.list.list'(X0),X6))))),s(X0,X7)))) & ? [X8,X9,X10] : ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one',X8))),s('type.HoodMelvilleQueue.queue'(X0),X9))),s(X0,X10)))))),
  inference(ennf_transformation,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1] : (! [X2,X3,X4,X5,X6,X7] : p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),X3),s('type.HoodMelvilleQueue.status'(X0),X4),s('type.num.num',X5),s('type.list.list'(X0),X6))))),s(X0,X7)))) => ! [X8,X9,X10] : p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one',X8))),s('type.HoodMelvilleQueue.queue'(X0),X9))),s(X0,X10)))))),
  inference(flattening,[],[f517])).
fof(f517,plain,(
  ~! [X0] : ! [X1] : (! [X2,X3,X4,X5,X6,X7] : p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),X3),s('type.HoodMelvilleQueue.status'(X0),X4),s('type.num.num',X5),s('type.list.list'(X0),X6))))),s(X0,X7)))) => ! [X8,X9,X10] : p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X0),fun(X0,bool))),X1),s('type.one.one',X8))),s('type.HoodMelvilleQueue.queue'(X0),X9))),s(X0,X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (! [X8,X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun(X6,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool))),X7),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.HoodMelvilleQueue.status'(X6),X10),s('type.num.num',X11),s('type.list.list'(X6),X12))))),s(X6,X13)))) => ! [X14,X15,X16] : p(s(bool,happ(s(fun(X6,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool))),X7),s('type.one.one',X14))),s('type.HoodMelvilleQueue.queue'(X6),X15))),s(X6,X16)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (! [X8,X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun(X6,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool))),X7),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.HoodMelvilleQueue.status'(X6),X10),s('type.num.num',X11),s('type.list.list'(X6),X12))))),s(X6,X13)))) => ! [X14,X15,X16] : p(s(bool,happ(s(fun(X6,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(X6),fun(X6,bool))),X7),s('type.one.one',X14))),s('type.HoodMelvilleQueue.queue'(X6),X15))),s(X6,X16)))))),
  file('thm.HoodMelvilleQueue.generated_definition_ind','thm.HoodMelvilleQueue.generated_definition_ind')).
fof(f1294,plain,(
  ( ! [X23,X22] : (p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(sK13),X22))),s(sK13,X23))))) )),
  inference(superposition,[],[f774,f970])).
fof(f970,plain,(
  ( ! [X0,X1] : (s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK37(X1,X0)),s('type.list.list'(X0),sK38(X1,X0)),s('type.HoodMelvilleQueue.status'(X0),sK39(X1,X0)),s('type.num.num',sK40(X1,X0)),s('type.list.list'(X0),sK41(X1,X0))))) )),
  inference(cnf_transformation,[],[f762])).
fof(f762,plain,(
  ! [X0,X1] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK37(X1,X0)),s('type.list.list'(X0),sK38(X1,X0)),s('type.HoodMelvilleQueue.status'(X0),sK39(X1,X0)),s('type.num.num',sK40(X1,X0)),s('type.list.list'(X0),sK41(X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK37,sK38,sK39,sK40,sK41])],[f580])).
fof(f580,plain,(
  ! [X0,X1] : ? [X2,X3,X4,X5,X6] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),X3),s('type.HoodMelvilleQueue.status'(X0),X4),s('type.num.num',X5),s('type.list.list'(X0),X6)))),
  inference(flattening,[],[f579])).
fof(f579,plain,(
  ! [X0] : ! [X1] : ? [X2,X3,X4,X5,X6] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),X3),s('type.HoodMelvilleQueue.status'(X0),X4),s('type.num.num',X5),s('type.list.list'(X0),X6)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X67] : ? [X27,X28,X29,X30,X31] : s('type.HoodMelvilleQueue.queue'(X6),X67) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X27),s('type.list.list'(X6),X28),s('type.HoodMelvilleQueue.status'(X6),X29),s('type.num.num',X30),s('type.list.list'(X6),X31)))),
  file('thm.HoodMelvilleQueue.generated_definition_ind','thm.HoodMelvilleQueue.queue_nchotomy')).
fof(f774,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(sK13,bool),happ(s(fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool)),happ(s(fun('type.one.one',fun('type.HoodMelvilleQueue.queue'(sK13),fun(sK13,bool))),sK14),s('type.one.one','const.one.one_0'))),s('type.HoodMelvilleQueue.queue'(sK13),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X5),s('type.list.list'(sK13),X6),s('type.HoodMelvilleQueue.status'(sK13),X7),s('type.num.num',X8),s('type.list.list'(sK13),X9))))),s(sK13,X10))))) )),
  inference(cnf_transformation,[],[f655])).
% SZS output end Proof for thm.HoodMelvilleQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 218
% Passive clauses: 2073
% Generated clauses: 3921
% Final active clauses: 212
% Final passive clauses: 1989
% Input formulas: 515
% Initial clauses: 211
% 
% Selected by SInE selection: 50
% SInE iterations: 1
% 
% Duplicate literals: 147
% Fw subsumption resolutions: 314
% Fw demodulations: 47
% 
% Simple tautologies: 210
% Equational tautologies: 2
% Forward subsumptions: 730
% 
% Binary resolution: 2569
% Factoring: 2
% Forward superposition: 809
% Equality resolution: 9
% 
% Split clauses: 115
% Split components: 275
% SAT solver clauses: 131
% SAT solver unit clauses: 4
% SAT solver binary clauses: 81
% 
% Sat splits: 115
% Sat splitting refutations: 4
% 
% Memory used [KB]: 4477
% Time elapsed: 0.114 s
% ------------------------------
% ------------------------------
% Success in time 12.407 s
