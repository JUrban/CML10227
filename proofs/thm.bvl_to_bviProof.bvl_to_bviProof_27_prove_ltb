Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvl_to_bviProof
% (45064)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 85
% Passive clauses: 2356
% Generated clauses: 14557
% Final active clauses: 79
% Final passive clauses: 2163
% Input formulas: 9
% Initial clauses: 15
% 
% Duplicate literals: 953
% Trivial inequalities: 168
% Fw subsumption resolutions: 1857
% Fw demodulations: 1068
% Bw demodulations: 3
% 
% Simple tautologies: 282
% Equational tautologies: 89
% Forward subsumptions: 6021
% 
% Binary resolution: 77
% Forward superposition: 6049
% Backward superposition: 3689
% Self superposition: 294
% Equality factoring: 234
% Equality resolution: 13
% 
% Split clauses: 712
% Split components: 1431
% SAT solver clauses: 1801
% SAT solver unit clauses: 282
% SAT solver binary clauses: 534
% 
% Sat splits: 712
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1795
% TWLsolver calls for satisfiability: 101
% 
% Memory used [KB]: 6012
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvl_to_bviProof
% (45089)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 71
% Passive clauses: 210
% Generated clauses: 8863
% Final active clauses: 56
% Final passive clauses: 115
% Input formulas: 9
% Initial clauses: 15
% 
% Duplicate literals: 1217
% Trivial inequalities: 77
% Fw subsumption resolutions: 456
% Fw demodulations: 353
% Bw demodulations: 32
% Condensations: 2019
% 
% Simple tautologies: 109
% Equational tautologies: 42
% Forward subsumptions: 3617
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 28
% Forward superposition: 2287
% Backward superposition: 1831
% Self superposition: 184
% Equality factoring: 143
% Equality resolution: 4
% 
% Split clauses: 116
% Split components: 233
% SAT solver clauses: 799
% SAT solver unit clauses: 16
% SAT solver binary clauses: 82
% 
% Sat splits: 116
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 799
% TWLsolver calls for satisfiability: 134
% 
% Memory used [KB]: 5756
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 134 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvl_to_bviProof
% (45142)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 422
% Passive clauses: 4975
% Generated clauses: 139082
% Final active clauses: 52
% Final passive clauses: 518
% Input formulas: 9
% Initial clauses: 15
% 
% Duplicate literals: 9607
% Trivial inequalities: 1163
% Fw subsumption resolutions: 11656
% Fw demodulations: 15362
% Bw demodulations: 3135
% Condensations: 14501
% Global subsumptions: 170
% 
% Simple tautologies: 1176
% Equational tautologies: 1446
% Forward subsumptions: 78113
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 157
% 
% Unit resulting resolution: 4665
% Forward superposition: 35391
% Backward superposition: 27046
% Self superposition: 764
% Equality factoring: 422
% Equality resolution: 52
% 
% Split clauses: 820
% Split components: 1675
% SAT solver clauses: 7001
% SAT solver unit clauses: 25
% SAT solver binary clauses: 228
% 
% Sat splits: 820
% Sat splitting refutations: 214
% 
% Memory used [KB]: 57696
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 30 next slice time: 30
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvl_to_bviProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_to_bviProof
% SZS output start Proof for thm.bvl_to_bviProof
fof(f417,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f50,f55,f52,f58,f54,f61,f57,f60,f288,f297,f295,f300,f347,f354,f352,f400,f412,f415])).
fof(f415,plain,(
  $false | ($spl1 | $spl6)),
  inference(subsumption_resolution,[],[f414,f45])).
fof(f45,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb',aHL_FALSITY)).
fof(f414,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f413,f127])).
fof(f127,plain,(
  s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | $spl1),
  inference(subsumption_resolution,[],[f125,f46])).
fof(f46,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb',aHL_TRUTH)).
fof(f125,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | $spl1),
  inference(superposition,[],[f96,f48])).
fof(f48,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb',aHL_BOOL_CASES)).
fof(f96,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | $spl1),
  inference(forward_demodulation,[],[f91,f47])).
fof(f47,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',X2))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.bvlSem.v',X2)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',X2))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.bvlSem.v',X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',X2))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.bvlSem.v',X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X21,X22] : s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X6),X21),s('type.bvlSem.v',X22))) = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X6),X21))),s('type.bvlSem.v',X22)))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb','ARITY_1_2_const.bvl_to_bviProof.bv_ok')).
fof(f91,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | $spl1),
  inference(resolution,[],[f52,f42])).
fof(f42,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) | ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))))) & ((p(s(bool,'const.bool.IN_2'(s(X0,sK8(X2,X1,X0)),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X2,X1,X0)))))) | p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) | ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))))) & (? [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) | ! [X3] : (~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))) & (? [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))))))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) <=> ! [X3] : (~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) <=> ! [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) <=> ! [X3] : (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X18,X19] : (p(s(bool,'const.list.EVERY_2'(s(fun(X6,bool),X18),s('type.list.list'(X6),X19)))) <=> ! [X20] : (p(s(bool,'const.bool.IN_2'(s(X6,X20),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X19)))))) => p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X20))))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb','thm.list.EVERY_MEM')).
fof(f413,plain,(
  p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | ($spl1 | $spl6)),
  inference(subsumption_resolution,[],[f406,f46])).
fof(f406,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | ($spl1 | $spl6)),
  inference(superposition,[],[f392,f319])).
fof(f319,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | ($spl1 | $spl6)),
  inference(resolution,[],[f60,f211])).
fof(f211,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X2),X3))),s('type.list.list'('type.bvlSem.v'),sK6)))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X2),X3),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f208,f45])).
fof(f208,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X2),X3))),s('type.list.list'('type.bvlSem.v'),sK6)))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X2),X3),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) ) | $spl1),
  inference(superposition,[],[f182,f48])).
fof(f182,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s('type.list.list'('type.bvlSem.v'),sK6))))) ) | $spl1),
  inference(superposition,[],[f113,f47])).
fof(f113,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),X0),s('type.list.list'('type.bvlSem.v'),sK6))))) ) | $spl1),
  inference(resolution,[],[f90,f40])).
fof(f40,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f90,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK6)))))) | $spl1),
  inference(resolution,[],[f52,f41])).
fof(f41,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) | p(s(bool,'const.bool.IN_2'(s(X0,sK8(X2,X1,X0)),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f392,plain,(
  ( ! [X0] : (~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',X0)))) | p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',X0))))) )),
  inference(resolution,[],[f298,f43])).
fof(f43,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X1),X4),s('type.bvlSem.v',X3)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X0),X2))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X1),X4)))))) | ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X2),s('type.bvlSem.v',X3))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X2),s('type.bvlSem.v',X3)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X0),X2))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X1),X4)))))) | p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X1),X4),s('type.bvlSem.v',X3)))))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X2),s('type.bvlSem.v',X3)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X0),X2))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X1),X4))))))) | p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X1),X4),s('type.bvlSem.v',X3)))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X2),s('type.bvlSem.v',X3)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X0),X2))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X1),X4))))))) => p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X1),X4),s('type.bvlSem.v',X3)))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : ((p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X2),s('type.bvlSem.v',X3)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X0),X2))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X1),X4))))))) => p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X1),X4),s('type.bvlSem.v',X3)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X14] : ! [X15,X16,X17] : ((p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X6),X15),s('type.bvlSem.v',X16)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X6),X15))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X14),X17))))))) => p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X14),X17),s('type.bvlSem.v',X16)))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb','thm.bvl_to_bviProof.bvl_to_bviProof_2|49|_prove_ltb')).
fof(f298,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))))),
  inference(equality_resolution,[],[f119])).
fof(f119,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bvlSem.state'(sK0),X1))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),X1))))))))) )),
  inference(superposition,[],[f44,f35])).
fof(f35,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3))))))) & ((p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.bvlSem.v',sK7)))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK7))))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) & ((p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s('type.bvlSem.v',X7)))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))),s('type.bvlSem.v',X7))))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s('type.list.list'('type.bvlSem.v'),X6)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))),s('type.list.list'('type.bvlSem.v'),X6)))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) => ((p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s('type.bvlSem.v',X7)))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))),s('type.bvlSem.v',X7))))) & (p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s('type.list.list'('type.bvlSem.v'),X6)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))),s('type.list.list'('type.bvlSem.v'),X6)))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) => ((p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s('type.bvlSem.v',X7)))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))),s('type.bvlSem.v',X7))))) & (p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s('type.list.list'('type.bvlSem.v'),X6)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))),s('type.list.list'('type.bvlSem.v'),X6)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) => ((p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s('type.bvlSem.v',X13)))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))),s('type.bvlSem.v',X13))))) & (p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s('type.list.list'('type.bvlSem.v'),X12)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))),s('type.list.list'('type.bvlSem.v'),X12)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) => ((p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s('type.bvlSem.v',X13)))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))),s('type.bvlSem.v',X13))))) & (p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s('type.list.list'('type.bvlSem.v'),X12)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))),s('type.list.list'('type.bvlSem.v'),X12)))))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb','thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb')).
fof(f44,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3)))))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))))),
  inference(ennf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8)))))))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb','thm.bvlProps.evaluate_refs_SUBSET')).
fof(f412,plain,(
  $false | ($spl1 | $spl6)),
  inference(subsumption_resolution,[],[f411,f46])).
fof(f411,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f410,f327])).
fof(f327,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6))) | $spl6),
  inference(subsumption_resolution,[],[f325,f45])).
fof(f325,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6))) | $spl6),
  inference(superposition,[],[f60,f48])).
fof(f410,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | $spl1),
  inference(subsumption_resolution,[],[f409,f45])).
fof(f409,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | $spl1),
  inference(forward_demodulation,[],[f404,f127])).
fof(f404,plain,(
  p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | $spl1),
  inference(resolution,[],[f392,f182])).
fof(f400,plain,(
  $false | $spl13),
  inference(subsumption_resolution,[],[f352,f298])).
fof(f352,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))))))) | $spl13),
  inference(cnf_transformation,[],[f352_D])).
fof(f352_D,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))))))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f354,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK7),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK6)))))) | $spl15),
  inference(cnf_transformation,[],[f354_D])).
fof(f354_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK7),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK6)))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f347,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK7),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK6)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))))))) | ($spl3 | $spl6)),
  inference(resolution,[],[f326,f62])).
fof(f62,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',X0),X1),s('type.bvlSem.v',sK7)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',X0),X1))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))))) ) | $spl3),
  inference(resolution,[],[f54,f43])).
fof(f326,plain,(
  ( ! [X0] : (p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X0),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK6))))))) ) | $spl6),
  inference(forward_demodulation,[],[f321,f47])).
fof(f321,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X0),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK6))))))) ) | $spl6),
  inference(resolution,[],[f60,f40])).
fof(f300,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f299,f45])).
fof(f299,plain,(
  p(s(bool,'F_0')) | ($spl3 | $spl4)),
  inference(forward_demodulation,[],[f298,f164])).
fof(f164,plain,(
  s(bool,'F_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))) | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f162,f46])).
fof(f162,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))) | ($spl3 | $spl4)),
  inference(superposition,[],[f155,f48])).
fof(f155,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))))))) | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f152,f46])).
fof(f152,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))))))) | ($spl3 | $spl4)),
  inference(superposition,[],[f62,f69])).
fof(f69,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK7))) | $spl4),
  inference(subsumption_resolution,[],[f68,f45])).
fof(f68,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK7))) | $spl4),
  inference(superposition,[],[f57,f48])).
fof(f295,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | $spl8),
  inference(cnf_transformation,[],[f295_D])).
fof(f295_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f297,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f297_D])).
fof(f297_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f288,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | $spl1),
  inference(equality_factoring,[],[f220])).
fof(f220,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X2),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X2),s('type.bvlSem.v',sK8(sK6,X2,'type.bvlSem.v'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f217,f46])).
fof(f217,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X2),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v')))) | s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X2),s('type.bvlSem.v',sK8(sK6,X2,'type.bvlSem.v'))))) ) | $spl1),
  inference(superposition,[],[f198,f48])).
fof(f198,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X1),s('type.bvlSem.v',sK8(sK6,X1,'type.bvlSem.v'))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X1),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) ) | $spl1),
  inference(resolution,[],[f185,f42])).
fof(f185,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),X3),s('type.list.list'('type.bvlSem.v'),sK6)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X3),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f184,f45])).
fof(f184,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),X3),s('type.list.list'('type.bvlSem.v'),sK6)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),X3),s('type.bvlSem.v',sK8(sK6,'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2)))),'type.bvlSem.v'))))) ) | $spl1),
  inference(superposition,[],[f113,f48])).
fof(f60,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | $spl6),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f57,plain,(
  p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK7)))) | $spl4),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK7)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f61,plain,(
  p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK7)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6))))),
  inference(forward_demodulation,[],[f36,f47])).
fof(f36,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.bvlSem.v',sK7))))),
  inference(cnf_transformation,[],[f30])).
fof(f54,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK7)))) | $spl3),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK7)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f58,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK7)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6))))),
  inference(forward_demodulation,[],[f37,f47])).
fof(f37,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK7))))),
  inference(cnf_transformation,[],[f30])).
fof(f52,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | $spl1),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f55,plain,(
  p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))),s('type.bvlSem.v',sK7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6))))),
  inference(forward_demodulation,[],[f38,f47])).
fof(f38,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s('type.bvlSem.v',sK7))))),
  inference(cnf_transformation,[],[f30])).
fof(f50,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))),s('type.bvlSem.v',sK7)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6))))),
  inference(forward_demodulation,[],[f39,f47])).
fof(f39,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.list.list'('type.bvlSem.v'),sK6)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))),s('type.bvlSem.v',sK7))))),
  inference(cnf_transformation,[],[f30])).
% SZS output end Proof for thm.bvl_to_bviProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 49
% Passive clauses: 142
% Generated clauses: 365
% Final active clauses: 36
% Final passive clauses: 77
% Input formulas: 9
% Initial clauses: 15
% 
% Selected by SInE selection: 9
% SInE iterations: 1
% 
% Duplicate literals: 1
% Fw subsumption resolutions: 46
% Fw demodulations: 40
% Bw demodulations: 9
% 
% Simple tautologies: 3
% Forward subsumptions: 130
% 
% Binary resolution: 33
% Forward superposition: 133
% Backward superposition: 84
% Self superposition: 2
% Equality factoring: 1
% Equality resolution: 1
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 11
% SAT solver unit clauses: 1
% SAT solver binary clauses: 7
% 
% Sat splits: 6
% Sat splitting refutations: 4
% 
% Memory used [KB]: 1279
% Time elapsed: 0.018 s
% ------------------------------
% ------------------------------
% Success in time 11.978 s
