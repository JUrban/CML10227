Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.reg_allocProof
% (126990)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 126
% Passive clauses: 1258
% Generated clauses: 12839
% Final active clauses: 118
% Final passive clauses: 1009
% Input formulas: 26
% Initial clauses: 70
% 
% Duplicate literals: 721
% Trivial inequalities: 265
% Fw subsumption resolutions: 2095
% Fw demodulations: 1537
% Bw demodulations: 8
% 
% Simple tautologies: 341
% Equational tautologies: 45
% Forward subsumptions: 5200
% 
% Binary resolution: 297
% Forward superposition: 3109
% Backward superposition: 4320
% Self superposition: 161
% Equality factoring: 133
% Equality resolution: 30
% 
% Split clauses: 1022
% Split components: 2143
% SAT solver clauses: 1501
% SAT solver unit clauses: 40
% SAT solver binary clauses: 170
% 
% Sat splits: 1022
% 
% TWLsolver clauses: 1500
% TWLsolver calls for satisfiability: 159
% 
% Memory used [KB]: 6012
% Time elapsed: 0.620 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.reg_allocProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.reg_allocProof
% SZS output start Proof for thm.reg_allocProof
fof(f2415,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2408,f111,f203,f113,f205,f161,f220,f227,f231,f108,f201,f116,f207,f244,f249,f110,f197,f120,f209,f765,f767,f756,f758,f159,f222,f226,f229,f109,f199,f759,f761,f1679,f1680,f160,f221,f1589,f1591,f1552,f1565,f1045,f1055,f1042,f1044,f901,f906,f162,f219])).
fof(f219,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) | $spl20),
  inference(cnf_transformation,[],[f219_D])).
fof(f219_D,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f162,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) & ! [X4,X5] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f101])).
fof(f101,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) & ! [X4,X5] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ? [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(rectify,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) & ! [X2,X3] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ? [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) & ! [X2,X3] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & ((s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ? [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : (p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) <=> (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) & ! [X2,X3] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))))),
  inference(ennf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) <=> (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) & ! [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) => p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X17,X18] : (p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X17),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X18)))) <=> (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X17))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X18))) & ! [X10,X11] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X17)))) => p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X10),s('type.num.num',X11),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X18)))))))),
  file('thm.reg_allocProof.reg_allocProof_58_prove_ltb','thm.reg_allocProof.is_subgraph_edges_def')).
fof(f906,plain,(
  ( ! [X1] : (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,sK2)),s('type.num.num',sK4(X1,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) | $spl114),
  inference(cnf_transformation,[],[f906_D])).
fof(f906_D,plain,(
  ( ! [X1] : (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,sK2)),s('type.num.num',sK4(X1,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f901,plain,(
  ( ! [X1] : (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,sK2)),s('type.num.num',sK4(X1,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) | ($spl20 | $spl106)),
  inference(superposition,[],[f219,f767])).
fof(f1044,plain,(
  ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | $spl139),
  inference(cnf_transformation,[],[f1044_D])).
fof(f1044_D,plain,(
  ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) <=> ~$spl139),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl139])])).
fof(f1042,plain,(
  ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | ($spl9 | $spl36 | $spl114)),
  inference(subsumption_resolution,[],[f1041,f205])).
fof(f1041,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | ($spl36 | $spl114)),
  inference(forward_demodulation,[],[f1037,f249])).
fof(f1037,plain,(
  ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | $spl114),
  inference(equality_resolution,[],[f906])).
fof(f1055,plain,(
  ( ! [X0] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))) ) | $spl140),
  inference(cnf_transformation,[],[f1055_D])).
fof(f1055_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f1045,plain,(
  ( ! [X0] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))) ) | ($spl24 | $spl139)),
  inference(resolution,[],[f1044,f221])).
fof(f1565,plain,(
  ( ! [X4] : (~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X4),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X4)))) ) | $spl212),
  inference(cnf_transformation,[],[f1565_D])).
fof(f1565_D,plain,(
  ( ! [X4] : (~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X4),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X4)))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f1552,plain,(
  ( ! [X4] : (~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X4),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X4)))) ) | ($spl16 | $spl140)),
  inference(resolution,[],[f1055,f209])).
fof(f1591,plain,(
  s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | $spl222),
  inference(cnf_transformation,[],[f1591_D])).
fof(f1591_D,plain,(
  s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f1589,plain,(
  s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | ($spl6 | $spl32 | $spl212)),
  inference(subsumption_resolution,[],[f1575,f203])).
fof(f1575,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | ($spl32 | $spl212)),
  inference(superposition,[],[f1565,f229])).
fof(f221,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) | $spl24),
  inference(cnf_transformation,[],[f221_D])).
fof(f221_D,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f160,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) )),
  inference(cnf_transformation,[],[f102])).
fof(f1680,plain,(
  ( ! [X1] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))))) ) | $spl248),
  inference(cnf_transformation,[],[f1680_D])).
fof(f1680_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f1679,plain,(
  ( ! [X1] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))))) ) | ($spl9 | $spl24 | $spl222)),
  inference(subsumption_resolution,[],[f1657,f205])).
fof(f1657,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(sK0,sK2)),s('type.num.num',sK4(sK0,sK2)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))))) ) | ($spl24 | $spl222)),
  inference(superposition,[],[f221,f1591])).
fof(f761,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) | $spl102),
  inference(cnf_transformation,[],[f761_D])).
fof(f761_D,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f759,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) | ($spl6 | $spl26 | $spl34)),
  inference(subsumption_resolution,[],[f747,f203])).
fof(f747,plain,(
  ~p(s(bool,'T_0')) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) | ($spl26 | $spl34)),
  inference(superposition,[],[f222,f231])).
fof(f199,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | $spl2),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f109,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1)))) & p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) & ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f58])).
fof(f58,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) & p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) & p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) & ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) & p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) => p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ((p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X8),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X7)))) & p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X7),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6))))) => p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X8),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ((p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X8),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X7)))) & p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X7),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6))))) => p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X8),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6)))))),
  file('thm.reg_allocProof.reg_allocProof_58_prove_ltb','thm.reg_allocProof.reg_allocProof_58_prove_ltb')).
fof(f229,plain,(
  s(bool,'T_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | $spl32),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s(bool,'T_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f226,plain,(
  s(bool,'T_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | ($spl2 | $spl12)),
  inference(resolution,[],[f207,f199])).
fof(f222,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) ) | $spl26),
  inference(cnf_transformation,[],[f222_D])).
fof(f222_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f159,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))) | ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) )),
  inference(cnf_transformation,[],[f102])).
fof(f758,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | $spl100),
  inference(cnf_transformation,[],[f758_D])).
fof(f758_D,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f756,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | ($spl6 | $spl26 | $spl32)),
  inference(subsumption_resolution,[],[f746,f203])).
fof(f746,plain,(
  ~p(s(bool,'T_0')) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | ($spl26 | $spl32)),
  inference(superposition,[],[f222,f229])).
fof(f767,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) | $spl106),
  inference(cnf_transformation,[],[f767_D])).
fof(f767_D,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f765,plain,(
  s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) = s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) | ($spl100 | $spl102)),
  inference(backward_demodulation,[],[f758,f761])).
fof(f209,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f209_D])).
fof(f209_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f120,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.reg_allocProof.reg_allocProof_58_prove_ltb','thm.bool.EQ_CLAUSES|split|3')).
fof(f197,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | $spl1),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f110,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))),
  inference(cnf_transformation,[],[f70])).
fof(f249,plain,(
  s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | $spl36),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f244,plain,(
  s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | ($spl1 | $spl16)),
  inference(resolution,[],[f209,f197])).
fof(f207,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f116,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.reg_allocProof.reg_allocProof_58_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f201,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1)))) | $spl4),
  inference(cnf_transformation,[],[f201_D])).
fof(f201_D,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f108,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))))),
  inference(cnf_transformation,[],[f70])).
fof(f231,plain,(
  s(bool,'T_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | $spl34),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  s(bool,'T_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f227,plain,(
  s(bool,'T_0') = s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1))) | ($spl4 | $spl12)),
  inference(resolution,[],[f207,f201])).
fof(f220,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) ) | $spl22),
  inference(cnf_transformation,[],[f220_D])).
fof(f220_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f161,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK3(X1,X0)),s('type.num.num',sK4(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) )),
  inference(cnf_transformation,[],[f102])).
fof(f205,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f205_D])).
fof(f205_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f113,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.reg_allocProof.reg_allocProof_58_prove_ltb',aHL_FALSITY)).
fof(f203,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f203_D])).
fof(f203_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f111,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.reg_allocProof.reg_allocProof_58_prove_ltb',aHL_TRUTH)).
fof(f2408,plain,(
  $false | ($spl6 | $spl9 | $spl22 | $spl34 | $spl36 | $spl106 | $spl248)),
  inference(subsumption_resolution,[],[f2407,f205])).
fof(f2407,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl22 | $spl34 | $spl36 | $spl106 | $spl248)),
  inference(forward_demodulation,[],[f2406,f249])).
fof(f2406,plain,(
  p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | ($spl6 | $spl22 | $spl34 | $spl106 | $spl248)),
  inference(subsumption_resolution,[],[f2405,f203])).
fof(f2405,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | ($spl22 | $spl34 | $spl106 | $spl248)),
  inference(forward_demodulation,[],[f2404,f231])).
fof(f2404,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | ($spl22 | $spl106 | $spl248)),
  inference(subsumption_resolution,[],[f2386,f767])).
fof(f2386,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_edges_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) | s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) != s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK2))) | ($spl22 | $spl248)),
  inference(resolution,[],[f1680,f220])).
% SZS output end Proof for thm.reg_allocProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 69
% Passive clauses: 157
% Generated clauses: 2272
% Final active clauses: 54
% Final passive clauses: 66
% Input formulas: 26
% Initial clauses: 70
% 
% Duplicate literals: 157
% Trivial inequalities: 39
% Fw subsumption resolutions: 221
% Fw demodulations: 196
% Bw demodulations: 28
% Condensations: 190
% Global subsumptions: 8
% 
% Simple tautologies: 87
% Equational tautologies: 22
% Forward subsumptions: 852
% 
% Binary resolution: 83
% Forward superposition: 512
% Backward superposition: 514
% Self superposition: 34
% Equality factoring: 34
% Equality resolution: 12
% 
% Split clauses: 55
% Split components: 118
% SAT solver clauses: 409
% SAT solver unit clauses: 74
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 17
% 
% Sat splits: 55
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 376
% TWLsolver calls for satisfiability: 279
% 
% Memory used [KB]: 2174
% Time elapsed: 0.068 s
% ------------------------------
% ------------------------------
% Success in time 0.702 s
