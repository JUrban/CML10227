Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% (127486)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 95
% Passive clauses: 1665
% Generated clauses: 10895
% Final active clauses: 88
% Final passive clauses: 1486
% Input formulas: 32
% Initial clauses: 36
% 
% Duplicate literals: 551
% Trivial inequalities: 160
% Fw subsumption resolutions: 989
% Fw demodulations: 814
% Bw demodulations: 6
% 
% Simple tautologies: 250
% Equational tautologies: 24
% Forward subsumptions: 6162
% 
% Binary resolution: 16
% Forward superposition: 4724
% Backward superposition: 3222
% Self superposition: 200
% Equality factoring: 63
% Equality resolution: 33
% 
% Split clauses: 163
% Split components: 327
% SAT solver clauses: 338
% SAT solver unit clauses: 54
% SAT solver binary clauses: 154
% 
% Sat splits: 163
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 338
% TWLsolver calls for satisfiability: 53
% 
% Memory used [KB]: 11769
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f10294,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f10293,f94,f131,f6315,f6316,f98,f136,f99,f137,f116,f150,f4115,f4116,f164,f165,f122,f156,f125,f159,f3835,f4052,f118,f152])).
fof(f152,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) ) | $spl38),
  inference(cnf_transformation,[],[f152_D])).
fof(f152_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f118,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X13,X11] : ! [X21,X22] : s('type.list.list'(X13),'const.list.MAP_2'(s(fun(X11,X13),X21),s('type.list.list'(X11),X22))) = s('type.list.list'(X13),happ(s(fun('type.list.list'(X11),'type.list.list'(X13)),happ(s(fun(fun(X11,X13),fun('type.list.list'(X11),'type.list.list'(X13))),'const.list.MAP_0'),s(fun(X11,X13),X21))),s('type.list.list'(X11),X22)))),
  file('thm.evalProps.build_tdefs_cons|split|1','ARITY_0_2_const.list.MAP')).
fof(f4052,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (s('type.list.list'(X111),'const.list.MAP_2'(s(fun(X112,X111),happ(s(fun(X113,fun(X112,X111)),X114),s(X113,X115))),s('type.list.list'(X112),X116))) = s('type.list.list'(X111),happ(s(fun(X113,'type.list.list'(X111)),'_dst_x0x1x0_3'(s(fun(fun(X112,X111),fun('type.list.list'(X112),'type.list.list'(X111))),'const.list.MAP_0'),s(fun(X113,fun(X112,X111)),X114),s('type.list.list'(X112),X116))),s(X113,X115)))) ) | $spl664),
  inference(cnf_transformation,[],[f4052_D])).
fof(f4052_D,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (s('type.list.list'(X111),'const.list.MAP_2'(s(fun(X112,X111),happ(s(fun(X113,fun(X112,X111)),X114),s(X113,X115))),s('type.list.list'(X112),X116))) = s('type.list.list'(X111),happ(s(fun(X113,'type.list.list'(X111)),'_dst_x0x1x0_3'(s(fun(fun(X112,X111),fun('type.list.list'(X112),'type.list.list'(X111))),'const.list.MAP_0'),s(fun(X113,fun(X112,X111)),X114),s('type.list.list'(X112),X116))),s(X113,X115)))) ) <=> ~$spl664),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl664])])).
fof(f3835,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (s('type.list.list'(X111),'const.list.MAP_2'(s(fun(X112,X111),happ(s(fun(X113,fun(X112,X111)),X114),s(X113,X115))),s('type.list.list'(X112),X116))) = s('type.list.list'(X111),happ(s(fun(X113,'type.list.list'(X111)),'_dst_x0x1x0_3'(s(fun(fun(X112,X111),fun('type.list.list'(X112),'type.list.list'(X111))),'const.list.MAP_0'),s(fun(X113,fun(X112,X111)),X114),s('type.list.list'(X112),X116))),s(X113,X115)))) ) | ($spl38 | $spl52)),
  inference(superposition,[],[f159,f152])).
fof(f159,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),'_dst_x0x1x0_3'(s(fun(X1,fun(X3,X0)),X4),s(fun(X2,X1),X5),s(X3,X6))),s(X2,X7))) = s(X0,happ(s(fun(X3,X0),happ(s(fun(X1,fun(X3,X0)),X4),s(X1,happ(s(fun(X2,X1),X5),s(X2,X7))))),s(X3,X6)))) ) | $spl52),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),'_dst_x0x1x0_3'(s(fun(X1,fun(X3,X0)),X4),s(fun(X2,X1),X5),s(X3,X6))),s(X2,X7))) = s(X0,happ(s(fun(X3,X0),happ(s(fun(X1,fun(X3,X0)),X4),s(X1,happ(s(fun(X2,X1),X5),s(X2,X7))))),s(X3,X6)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f125,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),'_dst_x0x1x0_3'(s(fun(X1,fun(X3,X0)),X4),s(fun(X2,X1),X5),s(X3,X6))),s(X2,X7))) = s(X0,happ(s(fun(X3,X0),happ(s(fun(X1,fun(X3,X0)),X4),s(X1,happ(s(fun(X2,X1),X5),s(X2,X7))))),s(X3,X6)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun(X2,X0),'_dst_x0x1x0_3'(s(fun(X1,fun(X3,X0)),X4),s(fun(X2,X1),X5),s(X3,X6))),s(X2,X7))) = s(X0,happ(s(fun(X3,X0),happ(s(fun(X1,fun(X3,X0)),X4),s(X1,happ(s(fun(X2,X1),X5),s(X2,X7))))),s(X3,X6)))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(X0,happ(s(fun(X2,X0),'_dst_x0x1x0_3'(s(fun(X1,fun(X3,X0)),X4),s(fun(X2,X1),X5),s(X3,X6))),s(X2,X7))) = s(X0,happ(s(fun(X3,X0),happ(s(fun(X1,fun(X3,X0)),X4),s(X1,happ(s(fun(X2,X1),X5),s(X2,X7))))),s(X3,X6)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X25,X26,X23,X27] : ! [X28,X24,X29,X30] : s(X25,happ(s(fun(X23,X25),'_dst_x0x1x0_3'(s(fun(X26,fun(X27,X25)),X28),s(fun(X23,X26),X24),s(X27,X29))),s(X23,X30))) = s(X25,happ(s(fun(X27,X25),happ(s(fun(X26,fun(X27,X25)),X28),s(X26,happ(s(fun(X23,X26),X24),s(X23,X30))))),s(X27,X29)))),
  file('thm.evalProps.build_tdefs_cons|split|1','_dst_x0x1x0_ax')).
fof(f156,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),happ(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))) ) | $spl46),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),happ(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f122,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),happ(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),happ(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),happ(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X13,X11,X17] : ! [X9,X20] : s('type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))))),X20))) = s('type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun('type.list.list'('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))))),'type.list.list'('type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),happ(s(fun(fun('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17))))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))))),'type.list.list'('type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17))))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X13,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17))))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X13,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X11,'type.list.list'(X17))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X11,'type.list.list'(X17))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X11,'type.list.list'(X17)),'type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X11,'type.list.list'(X17))),'type.list.list'('type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X11,'type.list.list'(X17)),'type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X11,fun('type.list.list'(X17),'type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X11,'type.list.list'(X17)),'type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X11,fun('type.list.list'(X17),'type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X11,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X11,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X11,X11),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X17),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X17),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X9))))))))))))))))))))),s('type.list.list'('type.pair.prod'(X13,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,'type.list.list'(X17)))))),X20)))))))),
  file('thm.evalProps.build_tdefs_cons|split|1','thm.semanticPrimitives.build_tdefs_def')).
fof(f165,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1x0_3'(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3)))))))))))))))))))))))) ) | $spl62),
  inference(cnf_transformation,[],[f165_D])).
fof(f165_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1x0_3'(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3)))))))))))))))))))))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f164,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1x0_3'(s(fun(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),'type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))))),'const.list.MAP_0'),s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3)))))))))))))))))))))))) ) | ($spl46 | $spl52)),
  inference(forward_demodulation,[],[f156,f159])).
fof(f4116,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))) ) | $spl778),
  inference(cnf_transformation,[],[f4116_D])).
fof(f4116_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))) ) <=> ~$spl778),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl778])])).
fof(f4115,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4))) = s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),fun('type.list.list'('type.pair.prod'(X1,'type.list.list'(X2))),'type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.list.MAP_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.pair.prod'(X1,'type.list.list'(X2)),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X1,fun('type.list.list'(X2),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'_dst_x000x010x101_3'(s(fun(X1,fun('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'type.pair.prod'(X1,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.pair.,_0'),s(fun(X1,X1),'_i_0_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'(X2),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'_dst_x00x01x10_3'(s(fun('type.num.num',fun('type.semanticPrimitives.tid_or_exn','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.pair.,_0'),s(fun('type.list.list'(X2),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'_dst_x0x1_2'(s(fun('type.ast.id'('type.list.list'('type.string.char')),'type.semanticPrimitives.tid_or_exn'),'const.semanticPrimitives.TypeId_0'),s(fun('type.list.list'('type.string.char'),'type.ast.id'('type.list.list'('type.string.char'))),'const.ast.mk_id_1'(s('type.option.option'('type.list.list'('type.string.char')),X3))))))))))))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X1,'type.list.list'(X2)))))),X4)))))))) ) | ($spl62 | $spl664)),
  inference(backward_demodulation,[],[f4052,f165])).
fof(f150,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl34),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f116,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X11,X13] : ! [X14] : s('type.list.list'(X13),'const.list.NIL_0') = s('type.list.list'(X13),'const.list.MAP_2'(s(fun(X11,X13),X14),s('type.list.list'(X11),'const.list.NIL_0')))),
  file('thm.evalProps.build_tdefs_cons|split|1','thm.list.MAP|split|0')).
fof(f137,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))) ) | $spl8),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f99,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X11] : s('type.list.list'(X11),'const.list.NIL_0') = s('type.list.list'(X11),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X11)),'const.list.NIL_0')))),
  file('thm.evalProps.build_tdefs_cons|split|1','thm.list.FLAT|split|0')).
fof(f136,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl6),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f98,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11] : s('type.list.list'(X11),'const.list.NIL_0') = s('type.list.list'(X11),'const.list.REVERSE_1'(s('type.list.list'(X11),'const.list.NIL_0')))),
  file('thm.evalProps.build_tdefs_cons|split|1','thm.list.REVERSE_DEF|split|0')).
fof(f6316,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'(X2)))))),'const.list.NIL_0')))) ) | $spl1356),
  inference(cnf_transformation,[],[f6316_D])).
fof(f6316_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'(X2)))))),'const.list.NIL_0')))) ) <=> ~$spl1356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1356])])).
fof(f6315,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'(X2)))))),'const.list.NIL_0')))) ) | ($spl6 | $spl8 | $spl34 | $spl778)),
  inference(forward_demodulation,[],[f6314,f136])).
fof(f6314,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0'))) = s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'(X2)))))),'const.list.NIL_0')))) ) | ($spl8 | $spl34 | $spl778)),
  inference(forward_demodulation,[],[f6283,f137])).
fof(f6283,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.list.NIL_0'))))) = s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'(X2)))))),'const.list.NIL_0')))) ) | ($spl34 | $spl778)),
  inference(superposition,[],[f4116,f150])).
fof(f131,plain,(
  s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK2,'type.list.list'(sK1)))))),'const.list.NIL_0'))) | $spl1),
  inference(cnf_transformation,[],[f131_D])).
fof(f131_D,plain,(
  s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK2,'type.list.list'(sK1)))))),'const.list.NIL_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f94,plain,(
  s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK2,'type.list.list'(sK1)))))),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK2,'type.list.list'(sK1)))))),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f86])).
fof(f86,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X2,'type.list.list'(X1)))))),'const.list.NIL_0')))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X2,'type.list.list'(X1)))))),'const.list.NIL_0')))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ~! [X0,X1,X2] : ! [X3] : s('type.list.list'('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X2,'type.list.list'(X1)))))),'const.list.NIL_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9] : s('type.list.list'('type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X8,'type.list.list'(X7)))))),'const.list.NIL_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9] : s('type.list.list'('type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.semanticPrimitives.build_tdefs_2'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X8,'type.list.list'(X7)))))),'const.list.NIL_0')))),
  file('thm.evalProps.build_tdefs_cons|split|1','thm.evalProps.build_tdefs_cons|split|1')).
fof(f10293,plain,(
  $false | ($spl1 | $spl1356)),
  inference(trivial_inequality_removal,[],[f10259])).
fof(f10259,plain,(
  s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'const.list.NIL_0') | ($spl1 | $spl1356)),
  inference(superposition,[],[f131,f6316])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 86
% Passive clauses: 844
% Generated clauses: 10061
% Final active clauses: 79
% Final passive clauses: 723
% Input formulas: 32
% Initial clauses: 36
% 
% Duplicate literals: 500
% Trivial inequalities: 112
% Fw subsumption resolutions: 473
% Fw demodulations: 592
% Bw demodulations: 36
% Condensations: 1042
% 
% Simple tautologies: 156
% Equational tautologies: 24
% Forward subsumptions: 5071
% 
% Binary resolution: 15
% Forward superposition: 3224
% Backward superposition: 2897
% Self superposition: 191
% Equality factoring: 63
% Equality resolution: 23
% 
% Split clauses: 81
% Split components: 173
% SAT solver clauses: 1286
% SAT solver unit clauses: 62
% SAT solver binary clauses: 54
% SAT solver learnt clauses: 1
% 
% Sat splits: 81
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1285
% TWLsolver calls for satisfiability: 146
% 
% Memory used [KB]: 16886
% Time elapsed: 0.663 s
% ------------------------------
% ------------------------------
% Success in time 1.3 s
