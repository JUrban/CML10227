Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f689,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f676,f673,f324,f638,f323,f442,f325,f326,f444,f448,f440,f678,f446,f688,f327,f449,f447,f328,f445,f443,f441])).
fof(f441,plain,(
  s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2))) | $spl1),
  inference(cnf_transformation,[],[f441_D])).
fof(f441_D,plain,(
  s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f443,plain,(
  s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',sK1) | $spl3),
  inference(cnf_transformation,[],[f443_D])).
fof(f443_D,plain,(
  s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f445,plain,(
  s(sK0,sK2) != s(sK0,sK4) | $spl5),
  inference(cnf_transformation,[],[f445_D])).
fof(f445_D,plain,(
  s(sK0,sK2) != s(sK0,sK4) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f328,plain,(
  s(sK0,sK2) != s(sK0,sK4) | s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',sK1) | s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2)))),
  inference(cnf_transformation,[],[f308])).
fof(f308,plain,(
  (s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2))) | (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) & s(sK0,sK3) = s(sK0,sK4)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK1) & s(sK0,sK2) = s(sK0,sK4))) & (s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2))) | ((s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK1) | s(sK0,sK3) != s(sK0,sK4)) & (s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',sK1) | s(sK0,sK2) != s(sK0,sK4))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f307])).
fof(f307,plain,(
  ? [X0,X1,X2,X3,X4] : ((s(X0,X4) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) | (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) & s(X0,X3) = s(X0,X4)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X1) & s(X0,X2) = s(X0,X4))) & (s(X0,X4) != s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) | ((s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',X1) | s(X0,X3) != s(X0,X4)) & (s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',X1) | s(X0,X2) != s(X0,X4)))))),
  inference(flattening,[],[f306])).
fof(f306,plain,(
  ? [X0,X1,X2,X3,X4] : ((s(X0,X4) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) | ((s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) & s(X0,X3) = s(X0,X4)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X1) & s(X0,X2) = s(X0,X4)))) & (s(X0,X4) != s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) | ((s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',X1) | s(X0,X3) != s(X0,X4)) & (s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size',X1) | s(X0,X2) != s(X0,X4)))))),
  inference(nnf_transformation,[],[f302])).
fof(f302,plain,(
  ? [X0,X1,X2,X3,X4] : (s(X0,X4) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) <~> ((s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) & s(X0,X3) = s(X0,X4)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X1) & s(X0,X2) = s(X0,X4))))),
  inference(ennf_transformation,[],[f108])).
fof(f108,plain,(
  ~! [X0,X1,X2,X3,X4] : (s(X0,X4) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) <=> ((s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) & s(X0,X3) = s(X0,X4)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X1) & s(X0,X2) = s(X0,X4))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (s(X0,X4) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X1),s(X0,X3),s(X0,X2))) <=> ((s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) & s(X0,X3) = s(X0,X4)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X1) & s(X0,X2) = s(X0,X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (s(X6,X10) = s(X6,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X7),s(X6,X9),s(X6,X8))) <=> ((s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X7) & s(X6,X9) = s(X6,X10)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X7) & s(X6,X8) = s(X6,X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (s(X6,X10) = s(X6,'const.ast.word_size_CASE_3'(s('type.ast.word_size',X7),s(X6,X9),s(X6,X8))) <=> ((s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X7) & s(X6,X9) = s(X6,X10)) | (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X7) & s(X6,X8) = s(X6,X10))))),
  file('thm.closProps.eqs|split|9','thm.closProps.eqs|split|9')).
fof(f447,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK1) | $spl7),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK1) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f449,plain,(
  s(sK0,sK3) != s(sK0,sK4) | $spl9),
  inference(cnf_transformation,[],[f449_D])).
fof(f449_D,plain,(
  s(sK0,sK3) != s(sK0,sK4) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f327,plain,(
  s(sK0,sK3) != s(sK0,sK4) | s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK1) | s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2)))),
  inference(cnf_transformation,[],[f308])).
fof(f688,plain,(
  $false | ($spl0 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f687,f449])).
fof(f687,plain,(
  s(sK0,sK3) = s(sK0,sK4) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f686,f351])).
fof(f351,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9,X8] : s(X6,X9) = s(X6,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(X6,X9),s(X6,X8)))),
  file('thm.closProps.eqs|split|9','thm.ast.word_size_case_def|split|0')).
fof(f686,plain,(
  s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(sK0,sK3),s(sK0,sK2))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f440,f446])).
fof(f446,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) | $spl6),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f678,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) | $spl3),
  inference(trivial_inequality_removal,[],[f677])).
fof(f677,plain,(
  s('type.ast.word_size','const.ast.W64_0') != s('type.ast.word_size','const.ast.W64_0') | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) | $spl3),
  inference(superposition,[],[f443,f333])).
fof(f333,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X11] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X11) | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X11))),
  file('thm.closProps.eqs|split|9','thm.ast.word_size_nchotomy')).
fof(f440,plain,(
  s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2))) | $spl0),
  inference(cnf_transformation,[],[f440_D])).
fof(f440_D,plain,(
  s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f448,plain,(
  s(sK0,sK3) = s(sK0,sK4) | $spl8),
  inference(cnf_transformation,[],[f448_D])).
fof(f448_D,plain,(
  s(sK0,sK3) = s(sK0,sK4) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f444,plain,(
  s(sK0,sK2) = s(sK0,sK4) | $spl4),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  s(sK0,sK2) = s(sK0,sK4) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f326,plain,(
  s(sK0,sK2) = s(sK0,sK4) | s(sK0,sK3) = s(sK0,sK4) | s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2)))),
  inference(cnf_transformation,[],[f308])).
fof(f325,plain,(
  s(sK0,sK2) = s(sK0,sK4) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) | s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2)))),
  inference(cnf_transformation,[],[f308])).
fof(f442,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK1) | $spl2),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f323,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK1) | s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2)))),
  inference(cnf_transformation,[],[f308])).
fof(f638,plain,(
  $false | ($spl1 | $spl6 | $spl8)),
  inference(trivial_inequality_removal,[],[f637])).
fof(f637,plain,(
  s(sK0,sK3) != s(sK0,sK3) | ($spl1 | $spl6 | $spl8)),
  inference(superposition,[],[f537,f351])).
fof(f537,plain,(
  s(sK0,sK3) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(sK0,sK3),s(sK0,sK2))) | ($spl1 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f536,f448])).
fof(f536,plain,(
  s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W8_0'),s(sK0,sK3),s(sK0,sK2))) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f441,f446])).
fof(f324,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK1) | s(sK0,sK3) = s(sK0,sK4) | s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size',sK1),s(sK0,sK3),s(sK0,sK2)))),
  inference(cnf_transformation,[],[f308])).
fof(f673,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f672,f444])).
fof(f672,plain,(
  s(sK0,sK2) != s(sK0,sK4) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f671,f350])).
fof(f350,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W64_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W64_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f129])).
fof(f129,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W64_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X9,X8] : s(X6,X8) = s(X6,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W64_0'),s(X6,X9),s(X6,X8)))),
  file('thm.closProps.eqs|split|9','thm.ast.word_size_case_def|split|1')).
fof(f671,plain,(
  s(sK0,sK4) != s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W64_0'),s(sK0,sK3),s(sK0,sK2))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f441,f442])).
fof(f676,plain,(
  s(sK0,sK2) = s(sK0,sK4) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f675,f350])).
fof(f675,plain,(
  s(sK0,sK4) = s(sK0,'const.ast.word_size_CASE_3'(s('type.ast.word_size','const.ast.W64_0'),s(sK0,sK3),s(sK0,sK2))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f440,f442])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 27
% Passive clauses: 160
% Generated clauses: 386
% Final active clauses: 17
% Final passive clauses: 114
% Input formulas: 105
% Initial clauses: 117
% 
% Duplicate literals: 1
% Trivial inequalities: 4
% Fw subsumption resolutions: 7
% Fw demodulations: 28
% Bw demodulations: 2
% 
% Simple tautologies: 8
% Equational tautologies: 5
% Forward subsumptions: 167
% 
% Binary resolution: 14
% Factoring: 1
% Forward superposition: 88
% Backward superposition: 71
% Self superposition: 14
% Equality factoring: 4
% Equality resolution: 1
% 
% Split clauses: 7
% Split components: 20
% SAT solver clauses: 21
% SAT solver unit clauses: 2
% SAT solver binary clauses: 5
% SAT solver learnt clauses: 4
% SAT solver learnt literals: 4
% 
% Sat splits: 7
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 17
% TWLsolver calls for satisfiability: 10
% 
% Memory used [KB]: 1151
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.05 s
