Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f816,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f814,f150,f52,f81,f77,f53,f79,f78])).
fof(f78,plain,(
  s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | $spl1),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f79,plain,(
  ( ! [X4] : (s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,X4)))) ) | $spl2),
  inference(cnf_transformation,[],[f79_D])).
fof(f79_D,plain,(
  ( ! [X4] : (s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,X4)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f53,plain,(
  ( ! [X4] : (s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,X4))) | s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  (s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK4)))) & (s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | ! [X4] : s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,X4))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3] : ((s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) | ? [X5] : s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X5)))) & (s(X0,X2) != s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) | ! [X4] : s('type.pair.prod'(X0,X1),X3) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X4)))))),
  inference(rectify,[],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3] : ((s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) | ? [X4] : s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X4)))) & (s(X0,X2) != s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) | ! [X4] : s('type.pair.prod'(X0,X1),X3) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X4)))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ? [X0,X1,X2,X3] : (s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) <~> ? [X4] : s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X4))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1,X2,X3] : (s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) <=> ? [X4] : s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X4))))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))) <=> ? [X4] : s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s(X6,X8) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X9))) <=> ? [X10] : s('type.pair.prod'(X6,X7),X9) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X8),s(X7,X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s(X6,X8) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X9))) <=> ? [X10] : s('type.pair.prod'(X6,X7),X9) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X8),s(X7,X10))))),
  file('thm.misc.FST_EQ_EQUIV','thm.misc.FST_EQ_EQUIV')).
fof(f77,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | $spl0),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f81,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK4))) | $spl4),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK4))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f52,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK4))) | s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3)))),
  inference(cnf_transformation,[],[f42])).
fof(f150,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f142,f78])).
fof(f142,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | $spl4),
  inference(superposition,[],[f71,f81])).
fof(f71,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X6] : ! [X9,X8] : s(X6,X9) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X9),s(X7,X8)))))),
  file('thm.misc.FST_EQ_EQUIV','thm.pair.FST')).
fof(f814,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f810,f79])).
fof(f810,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK7(sK3,sK1,sK0)))) | $spl0),
  inference(superposition,[],[f70,f772])).
fof(f772,plain,(
  s(sK0,sK2) = s(sK0,sK6(sK3,sK1,sK0)) | $spl0),
  inference(superposition,[],[f754,f77])).
fof(f754,plain,(
  ( ! [X2,X0,X1] : (s(X0,sK6(X2,X1,X0)) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2)))) )),
  inference(superposition,[],[f71,f70])).
fof(f70,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK6(X2,X1,X0)),s(X1,sK7(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK6(X2,X1,X0)),s(X1,sK7(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X9] : ? [X16,X17] : s('type.pair.prod'(X6,X7),X9) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X16),s(X7,X17)))),
  file('thm.misc.FST_EQ_EQUIV','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 199
% Generated clauses: 730
% Final active clauses: 21
% Final passive clauses: 160
% Input formulas: 14
% Initial clauses: 24
% 
% Duplicate literals: 79
% Trivial inequalities: 8
% Fw subsumption resolutions: 57
% Fw demodulations: 24
% 
% Simple tautologies: 35
% Equational tautologies: 29
% Forward subsumptions: 294
% 
% Binary resolution: 29
% Factoring: 1
% Forward superposition: 166
% Backward superposition: 233
% Self superposition: 47
% Equality factoring: 50
% Equality resolution: 1
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 18
% SAT solver unit clauses: 4
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 9
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 16
% TWLsolver calls for satisfiability: 11
% 
% Memory used [KB]: 895
% Time elapsed: 0.029 s
% ------------------------------
% ------------------------------
% Success in time 0.06 s
