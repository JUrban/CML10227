Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f5052,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5051,f224,f416,f414,f412,f410,f408,f406,f404,f4922,f4921,f4634,f4067,f3973,f4923])).
fof(f4923,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f412,f226])).
fof(f226,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X21),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25)))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK14),s('type.asm.inst'(sK12),'const.asm.Skip_0'))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK15),s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK16),s('type.fcp.cart'(bool,sK12),sK17))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK18),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK19),s('type.num.num',sK20),s('type.num.num',sK21),s('type.asm.reg_imm'(sK12),'const.asm.Reg_1'(s('type.num.num',sK22))))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK23),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.asm.reg_imm'(sK12),'const.asm.Imm_1'(s('type.fcp.cart'(bool,sK12),sK27))))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK28),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK29),s('type.num.num',sK30),s('type.num.num',sK31),s('type.num.num',sK32))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK33),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK34),s('type.num.num',sK35),s('type.num.num',sK36),s('type.num.num',sK37))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK38),s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK39),s('type.num.num',sK40),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK41),s('type.fcp.cart'(bool,sK12),sK42)))))))) & ! [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X26),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X27),s('type.num.num',X28),s('type.num.num',X29),s('type.asm.reg_imm'(sK12),'const.asm.Imm_1'(s('type.fcp.cart'(bool,sK12),X30))))))))) & ! [X21,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X21),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))))) & ! [X16,X17,X18,X19,X20] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X16),s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',X17),s('type.num.num',X18),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',X19),s('type.fcp.cart'(bool,sK12),X20))))))) & ! [X15] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X15),s('type.asm.inst'(sK12),'const.asm.Skip_0'))) & ! [X12,X13,X14] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X12),s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',X13),s('type.fcp.cart'(bool,sK12),X14))))) & ! [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X7),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.asm.reg_imm'(sK12),'const.asm.Reg_1'(s('type.num.num',X11))))))))) & ! [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X2),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',X3),s('type.num.num',X4),s('type.num.num',X5),s('type.num.num',X6)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38,sK39,sK40,sK41,sK42])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X59] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X59),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X56,X57,X58] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X56),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X57),s('type.fcp.cart'(bool,X0),X58))))) | ? [X51,X52,X53,X54,X55] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X51),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X52),s('type.num.num',X53),s('type.num.num',X54),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X55))))))))) | ? [X46,X47,X48,X49,X50] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X46),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X47),s('type.num.num',X48),s('type.num.num',X49),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X50))))))))) | ? [X41,X42,X43,X44,X45] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X41),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X42),s('type.num.num',X43),s('type.num.num',X44),s('type.num.num',X45))))))) | ? [X36,X37,X38,X39,X40] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X36),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40))))))) | ? [X31,X32,X33,X34,X35] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X31),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X32),s('type.num.num',X33),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X34),s('type.fcp.cart'(bool,X0),X35)))))))) & ! [X26,X27,X28,X29,X30] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X26),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X27),s('type.num.num',X28),s('type.num.num',X29),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X30))))))))) & ! [X21,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X21),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))))) & ! [X16,X17,X18,X19,X20] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X16),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X17),s('type.num.num',X18),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X19),s('type.fcp.cart'(bool,X0),X20))))))) & ! [X15] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X15),s('type.asm.inst'(X0),'const.asm.Skip_0'))) & ! [X12,X13,X14] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X12),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X13),s('type.fcp.cart'(bool,X0),X14))))) & ! [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X7),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X11))))))))) & ! [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X2),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X3),s('type.num.num',X4),s('type.num.num',X5),s('type.num.num',X6))))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X30] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X30),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X27,X28,X29] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X27),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X0),X29))))) | ? [X22,X23,X24,X25,X26] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X22),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X23),s('type.num.num',X24),s('type.num.num',X25),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X26))))))))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X17),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X18),s('type.num.num',X19),s('type.num.num',X20),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X21))))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X12),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X7),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X2),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X3),s('type.num.num',X4),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X5),s('type.fcp.cart'(bool,X0),X6)))))))) & ! [X55,X56,X57,X58,X59] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X55),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X56),s('type.num.num',X57),s('type.num.num',X58),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X59))))))))) & ! [X50,X51,X52,X53,X54] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X50),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X51),s('type.num.num',X52),s('type.num.num',X53),s('type.num.num',X54))))))) & ! [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X45),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X46),s('type.num.num',X47),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X48),s('type.fcp.cart'(bool,X0),X49))))))) & ! [X44] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X44),s('type.asm.inst'(X0),'const.asm.Skip_0'))) & ! [X41,X42,X43] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X41),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))))) & ! [X36,X37,X38,X39,X40] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X36),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X40))))))))) & ! [X31,X32,X33,X34,X35] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X31),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35))))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X30] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X30),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X27,X28,X29] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X27),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X0),X29))))) | ? [X22,X23,X24,X25,X26] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X22),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X23),s('type.num.num',X24),s('type.num.num',X25),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X26))))))))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X17),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X18),s('type.num.num',X19),s('type.num.num',X20),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X21))))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X12),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X7),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X2),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X3),s('type.num.num',X4),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X5),s('type.fcp.cart'(bool,X0),X6)))))))) & (! [X55,X56,X57,X58,X59] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X55),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X56),s('type.num.num',X57),s('type.num.num',X58),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X59))))))))) & ! [X50,X51,X52,X53,X54] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X50),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X51),s('type.num.num',X52),s('type.num.num',X53),s('type.num.num',X54))))))) & ! [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X45),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X46),s('type.num.num',X47),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X48),s('type.fcp.cart'(bool,X0),X49))))))) & ! [X44] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X44),s('type.asm.inst'(X0),'const.asm.Skip_0'))) & ! [X41,X42,X43] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X41),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))))) & ! [X36,X37,X38,X39,X40] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X36),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X40))))))))) & ! [X31,X32,X33,X34,X35] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) != s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X31),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35)))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X30] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X30),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X27,X28,X29] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X27),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X0),X29))))) | ? [X22,X23,X24,X25,X26] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X22),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X23),s('type.num.num',X24),s('type.num.num',X25),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X26))))))))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X17),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X18),s('type.num.num',X19),s('type.num.num',X20),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X21))))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X12),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X7),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X2),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X3),s('type.num.num',X4),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X5),s('type.fcp.cart'(bool,X0),X6)))))))) => (? [X55,X56,X57,X58,X59] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X55),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X56),s('type.num.num',X57),s('type.num.num',X58),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X59))))))))) | ? [X50,X51,X52,X53,X54] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X50),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X51),s('type.num.num',X52),s('type.num.num',X53),s('type.num.num',X54))))))) | ? [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X45),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X46),s('type.num.num',X47),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X48),s('type.fcp.cart'(bool,X0),X49))))))) | ? [X44] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X44),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X41,X42,X43] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X41),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))))) | ? [X36,X37,X38,X39,X40] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X36),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X40))))))))) | ? [X31,X32,X33,X34,X35] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X31),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35)))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X30] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X30),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X27,X28,X29] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X27),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X0),X29))))) | ? [X22,X23,X24,X25,X26] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X22),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X23),s('type.num.num',X24),s('type.num.num',X25),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X26))))))))) | ? [X17,X18,X19,X20,X21] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X17),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X18),s('type.num.num',X19),s('type.num.num',X20),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X21))))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X12),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X13),s('type.num.num',X14),s('type.num.num',X15),s('type.num.num',X16))))))) | ? [X7,X8,X9,X10,X11] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X7),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.num.num',X11))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X2),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X3),s('type.num.num',X4),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X5),s('type.fcp.cart'(bool,X0),X6)))))))) => (? [X55,X56,X57,X58,X59] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X55),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X56),s('type.num.num',X57),s('type.num.num',X58),s('type.asm.reg_imm'(X0),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X0),X59))))))))) | ? [X50,X51,X52,X53,X54] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X50),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Shift_4'(s('type.asm.shift',X51),s('type.num.num',X52),s('type.num.num',X53),s('type.num.num',X54))))))) | ? [X45,X46,X47,X48,X49] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X45),s('type.asm.inst'(X0),'const.asm.Mem_3'(s('type.asm.mem_op',X46),s('type.num.num',X47),s('type.asm.addr'(X0),'const.asm.Addr_2'(s('type.num.num',X48),s('type.fcp.cart'(bool,X0),X49))))))) | ? [X44] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X44),s('type.asm.inst'(X0),'const.asm.Skip_0'))) | ? [X41,X42,X43] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X41),s('type.asm.inst'(X0),'const.asm.Const_2'(s('type.num.num',X42),s('type.fcp.cart'(bool,X0),X43))))) | ? [X36,X37,X38,X39,X40] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X36),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.Binop_4'(s('type.asm.binop',X37),s('type.num.num',X38),s('type.num.num',X39),s('type.asm.reg_imm'(X0),'const.asm.Reg_1'(s('type.num.num',X40))))))))) | ? [X31,X32,X33,X34,X35] : s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),X1) = s('type.pair.prod'('type.asm.asm_config'(X0),'type.asm.inst'(X0)),'const.pair.,_2'(s('type.asm.asm_config'(X0),X31),s('type.asm.inst'(X0),'const.asm.Arith_1'(s('type.asm.arith'(X0),'const.asm.AddCarry_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Skip_0'))) | ? [X8,X9,X10] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))))) | ? [X8,X11,X12,X13,X14] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.asm.reg_imm'(X6),'const.asm.Reg_1'(s('type.num.num',X14))))))))) | ? [X15,X16,X17,X18,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.asm.reg_imm'(X6),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X6),X19))))))))) | ? [X15,X20,X17,X18,X21] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X20),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X21))))))) | ? [X8,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))))) | ? [X15,X26,X27,X28,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X26),s('type.num.num',X27),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X6),X19)))))))) => (? [X15,X16,X17,X18,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.asm.reg_imm'(X6),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X6),X19))))))))) | ? [X15,X20,X17,X18,X21] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X20),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X21))))))) | ? [X15,X26,X27,X28,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X26),s('type.num.num',X27),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X6),X19))))))) | ? [X8] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Skip_0'))) | ? [X8,X9,X10] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))))) | ? [X8,X11,X12,X13,X14] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.asm.reg_imm'(X6),'const.asm.Reg_1'(s('type.num.num',X14))))))))) | ? [X8,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Skip_0'))) | ? [X8,X9,X10] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))))) | ? [X8,X11,X12,X13,X14] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.asm.reg_imm'(X6),'const.asm.Reg_1'(s('type.num.num',X14))))))))) | ? [X15,X16,X17,X18,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.asm.reg_imm'(X6),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X6),X19))))))))) | ? [X15,X20,X17,X18,X21] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X20),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X21))))))) | ? [X8,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25))))))) | ? [X15,X26,X27,X28,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X26),s('type.num.num',X27),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X6),X19)))))))) => (? [X15,X16,X17,X18,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.asm.reg_imm'(X6),'const.asm.Imm_1'(s('type.fcp.cart'(bool,X6),X19))))))))) | ? [X15,X20,X17,X18,X21] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Shift_4'(s('type.asm.shift',X20),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X21))))))) | ? [X15,X26,X27,X28,X19] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X15),s('type.asm.inst'(X6),'const.asm.Mem_3'(s('type.asm.mem_op',X26),s('type.num.num',X27),s('type.asm.addr'(X6),'const.asm.Addr_2'(s('type.num.num',X28),s('type.fcp.cart'(bool,X6),X19))))))) | ? [X8] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Skip_0'))) | ? [X8,X9,X10] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Const_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))))) | ? [X8,X11,X12,X13,X14] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.Binop_4'(s('type.asm.binop',X11),s('type.num.num',X12),s('type.num.num',X13),s('type.asm.reg_imm'(X6),'const.asm.Reg_1'(s('type.num.num',X14))))))))) | ? [X8,X22,X23,X24,X25] : s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),X7) = s('type.pair.prod'('type.asm.asm_config'(X6),'type.asm.inst'(X6)),'const.pair.,_2'(s('type.asm.asm_config'(X6),X8),s('type.asm.inst'(X6),'const.asm.Arith_1'(s('type.asm.arith'(X6),'const.asm.AddCarry_4'(s('type.num.num',X22),s('type.num.num',X23),s('type.num.num',X24),s('type.num.num',X25)))))))))),
  file('thm.wordProps.wordProps_22|48|_prove_ltb','thm.wordProps.wordProps_22|48|_prove_ltb')).
fof(f3973,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f404,f228])).
fof(f228,plain,(
  ( ! [X15] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X15),s('type.asm.inst'(sK12),'const.asm.Skip_0')))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4067,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f406,f229])).
fof(f229,plain,(
  ( ! [X14,X12,X13] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X12),s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',X13),s('type.fcp.cart'(bool,sK12),X14)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4634,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f416,f227])).
fof(f227,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X16),s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',X17),s('type.num.num',X18),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',X19),s('type.fcp.cart'(bool,sK12),X20)))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4921,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f408,f230])).
fof(f230,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X7),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X8),s('type.num.num',X9),s('type.num.num',X10),s('type.asm.reg_imm'(sK12),'const.asm.Reg_1'(s('type.num.num',X11)))))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4922,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f414,f231])).
fof(f231,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X2),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',X3),s('type.num.num',X4),s('type.num.num',X5),s('type.num.num',X6)))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f404,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK14),s('type.asm.inst'(sK12),'const.asm.Skip_0'))) | $spl0),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK14),s('type.asm.inst'(sK12),'const.asm.Skip_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f406,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK15),s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK16),s('type.fcp.cart'(bool,sK12),sK17))))) | $spl2),
  inference(cnf_transformation,[],[f406_D])).
fof(f406_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK15),s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK16),s('type.fcp.cart'(bool,sK12),sK17))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f408,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK18),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK19),s('type.num.num',sK20),s('type.num.num',sK21),s('type.asm.reg_imm'(sK12),'const.asm.Reg_1'(s('type.num.num',sK22))))))))) | $spl4),
  inference(cnf_transformation,[],[f408_D])).
fof(f408_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK18),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK19),s('type.num.num',sK20),s('type.num.num',sK21),s('type.asm.reg_imm'(sK12),'const.asm.Reg_1'(s('type.num.num',sK22))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f410,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK23),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.asm.reg_imm'(sK12),'const.asm.Imm_1'(s('type.fcp.cart'(bool,sK12),sK27))))))))) | $spl6),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK23),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.asm.reg_imm'(sK12),'const.asm.Imm_1'(s('type.fcp.cart'(bool,sK12),sK27))))))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f412,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK28),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK29),s('type.num.num',sK30),s('type.num.num',sK31),s('type.num.num',sK32))))))) | $spl8),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK28),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK29),s('type.num.num',sK30),s('type.num.num',sK31),s('type.num.num',sK32))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f414,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK33),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK34),s('type.num.num',sK35),s('type.num.num',sK36),s('type.num.num',sK37))))))) | $spl10),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK33),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK34),s('type.num.num',sK35),s('type.num.num',sK36),s('type.num.num',sK37))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f416,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK38),s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK39),s('type.num.num',sK40),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK41),s('type.fcp.cart'(bool,sK12),sK42))))))) | $spl12),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK38),s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK39),s('type.num.num',sK40),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK41),s('type.fcp.cart'(bool,sK12),sK42))))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f224,plain,(
  s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK38),s('type.asm.inst'(sK12),'const.asm.Mem_3'(s('type.asm.mem_op',sK39),s('type.num.num',sK40),s('type.asm.addr'(sK12),'const.asm.Addr_2'(s('type.num.num',sK41),s('type.fcp.cart'(bool,sK12),sK42))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK33),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.AddCarry_4'(s('type.num.num',sK34),s('type.num.num',sK35),s('type.num.num',sK36),s('type.num.num',sK37))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK28),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Shift_4'(s('type.asm.shift',sK29),s('type.num.num',sK30),s('type.num.num',sK31),s('type.num.num',sK32))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK23),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK24),s('type.num.num',sK25),s('type.num.num',sK26),s('type.asm.reg_imm'(sK12),'const.asm.Imm_1'(s('type.fcp.cart'(bool,sK12),sK27))))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK18),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',sK19),s('type.num.num',sK20),s('type.num.num',sK21),s('type.asm.reg_imm'(sK12),'const.asm.Reg_1'(s('type.num.num',sK22))))))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK15),s('type.asm.inst'(sK12),'const.asm.Const_2'(s('type.num.num',sK16),s('type.fcp.cart'(bool,sK12),sK17))))) | s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) = s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),sK14),s('type.asm.inst'(sK12),'const.asm.Skip_0')))),
  inference(cnf_transformation,[],[f139])).
fof(f5051,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f410,f225])).
fof(f225,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),sK13) != s('type.pair.prod'('type.asm.asm_config'(sK12),'type.asm.inst'(sK12)),'const.pair.,_2'(s('type.asm.asm_config'(sK12),X26),s('type.asm.inst'(sK12),'const.asm.Arith_1'(s('type.asm.arith'(sK12),'const.asm.Binop_4'(s('type.asm.binop',X27),s('type.num.num',X28),s('type.num.num',X29),s('type.asm.reg_imm'(sK12),'const.asm.Imm_1'(s('type.fcp.cart'(bool,sK12),X30)))))))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 410
% Passive clauses: 1565
% Generated clauses: 4821
% Final active clauses: 410
% Final passive clauses: 955
% Input formulas: 37
% Initial clauses: 175
% 
% Duplicate literals: 156
% Trivial inequalities: 29
% Fw subsumption resolutions: 333
% 
% Simple tautologies: 145
% Equational tautologies: 41
% Forward subsumptions: 2510
% 
% Binary resolution: 2984
% Factoring: 832
% Forward superposition: 174
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 119
% Split components: 244
% SAT solver clauses: 252
% SAT solver unit clauses: 13
% SAT solver binary clauses: 45
% SAT solver learnt clauses: 1
% 
% Sat splits: 119
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 251
% TWLsolver calls for satisfiability: 201
% 
% Memory used [KB]: 2686
% Time elapsed: 0.114 s
% ------------------------------
% ------------------------------
% Success in time 0.116 s
