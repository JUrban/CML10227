Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f910,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f816,f829,f43,f786,f41,f73,f42,f72,f903,f44,f70,f45,f68,f66])).
fof(f66,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK5),s(sK0,sK4),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3)))))) | $spl1),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK5),s(sK0,sK4),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f68,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK0,sK7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | $spl3),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK0,sK7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f45,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK0,sK7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK5),s(sK0,sK4),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3))))))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  (! [X12] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12)))) | ! [X13,X14] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(sK0,X13),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12))))))) | ! [X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X9)))) | ! [X10,X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(sK0,X10),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X9)))))))) & ((p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3)))) & ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK5),s(sK0,sK4),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) & ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK0,sK7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f32])).
fof(f32,plain,(
  ? [X0,X1,X2] : ((! [X12] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X12)))) | ! [X13,X14] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(X0,X13),s('type.list.list'('type.BinomialHeap.tree'(X0)),X12))))))) | ! [X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))) | ! [X10,X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X0,X10),s('type.list.list'('type.BinomialHeap.tree'(X0)),X9)))))))) & (? [X6] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) & ? [X7,X8] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))) | ? [X3] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) & ? [X4,X5] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))))))))),
  inference(rectify,[],[f31])).
fof(f31,plain,(
  ? [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) | ! [X4,X5] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))) | ! [X6] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) | ! [X7,X8] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))))))) & (? [X3] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) & ? [X4,X5] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))) | ? [X6] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) & ? [X7,X8] : ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))))))))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2] : (! [X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) | ! [X4,X5] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))) <~> ! [X6] : (~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) | ! [X7,X8] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) => ! [X4,X5] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))) <=> ! [X6] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) => ! [X7,X8] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3)))) => ! [X4,X5] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X0,X4),s('type.list.list'('type.BinomialHeap.tree'(X0)),X3))))))) <=> ! [X6] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) => ! [X7,X8] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X0,X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (! [X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9)))) => ! [X10,X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X6,X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9))))))) <=> ! [X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9)))) => ! [X10,X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X6,X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (! [X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9)))) => ! [X10,X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X6,X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9))))))) <=> ! [X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9)))) => ! [X10,X11] : p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X6,X10),s('type.list.list'('type.BinomialHeap.tree'(X6)),X9))))))))),
  file('thm.BinomialHeap.BinomialHeap_46_prove_ltb','thm.BinomialHeap.BinomialHeap_46_prove_ltb')).
fof(f70,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3)))) | $spl4),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f44,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK8),s(sK0,sK7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3))))),
  inference(cnf_transformation,[],[f33])).
fof(f903,plain,(
  $false | ($spl3 | $spl8 | $spl24)),
  inference(subsumption_resolution,[],[f902,f46])).
fof(f46,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.BinomialHeap.BinomialHeap_46_prove_ltb',aHL_TRUTH)).
fof(f902,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl8 | $spl24)),
  inference(forward_demodulation,[],[f887,f829])).
fof(f887,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | ($spl3 | $spl8)),
  inference(resolution,[],[f68,f73])).
fof(f72,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | $spl6),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f42,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3))))),
  inference(cnf_transformation,[],[f33])).
fof(f73,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(sK0,X13),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12))))) ) | $spl8),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(sK0,X13),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f41,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(sK0,X10),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X9)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(sK0,X13),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X12))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f786,plain,(
  $false | ($spl1 | $spl4 | $spl8)),
  inference(subsumption_resolution,[],[f785,f46])).
fof(f785,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl4 | $spl8)),
  inference(forward_demodulation,[],[f772,f120])).
fof(f120,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3))) | $spl4),
  inference(resolution,[],[f70,f51])).
fof(f51,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.BinomialHeap.BinomialHeap_46_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f772,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3)))) | ($spl1 | $spl8)),
  inference(resolution,[],[f73,f66])).
fof(f43,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),'const.BinomialHeap.Node_3'(s('type.num.num',sK5),s(sK0,sK4),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK3))))))),
  inference(cnf_transformation,[],[f33])).
fof(f829,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6))) | $spl24),
  inference(cnf_transformation,[],[f829_D])).
fof(f829_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f816,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6))) | $spl6),
  inference(resolution,[],[f72,f51])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 173
% Generated clauses: 822
% Final active clauses: 23
% Final passive clauses: 124
% Input formulas: 12
% Initial clauses: 24
% 
% Duplicate literals: 89
% Trivial inequalities: 18
% Fw subsumption resolutions: 115
% Fw demodulations: 6
% Bw demodulations: 2
% 
% Simple tautologies: 47
% Equational tautologies: 28
% Forward subsumptions: 331
% 
% Binary resolution: 49
% Factoring: 1
% Forward superposition: 121
% Backward superposition: 289
% Self superposition: 42
% Equality factoring: 50
% Equality resolution: 3
% 
% Split clauses: 21
% Split components: 42
% SAT solver clauses: 34
% SAT solver unit clauses: 6
% SAT solver binary clauses: 12
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 21
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 31
% TWLsolver calls for satisfiability: 12
% 
% Memory used [KB]: 895
% Time elapsed: 0.024 s
% ------------------------------
% ------------------------------
% Success in time 0.014 s
