Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_numberProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_numberProof
% SZS output start Proof for thm.clos_numberProof
fof(f2187,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2186,f199,f317])).
fof(f317,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f199,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_numberProof.renumber_code_locs_imp_inc|split|0',aHL_FALSITY)).
fof(f2186,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f2185,f317])).
fof(f2185,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f2176,f333])).
fof(f333,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num',sK9)))),
  inference(resolution,[],[f212,f192])).
fof(f192,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num',sK9))))),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',sK8),s('type.list.list'('type.closLang.exp'),sK10))) = s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.num.num',sK9),s('type.list.list'('type.closLang.exp'),sK7))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num',sK9))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9,sK10])],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2,X3] : (s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X1),s('type.list.list'('type.closLang.exp'),X3))) = s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.closLang.exp'),X0))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3] : (s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X1),s('type.list.list'('type.closLang.exp'),X3))) = s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.closLang.exp'),X0))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X7),s('type.list.list'('type.closLang.exp'),X9))) = s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.closLang.exp'),X6))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X7),s('type.list.list'('type.closLang.exp'),X9))) = s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.closLang.exp'),X6))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X8)))))),
  file('thm.clos_numberProof.renumber_code_locs_imp_inc|split|0','thm.clos_numberProof.renumber_code_locs_imp_inc|split|0')).
fof(f212,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.clos_numberProof.renumber_code_locs_imp_inc|split|0','thm.bool.EQ_CLAUSES|split|2')).
fof(f2176,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num',sK9))))),
  inference(superposition,[],[f249,f1112])).
fof(f1112,plain,(
  s('type.num.num',sK9) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',sK8),s('type.list.list'('type.closLang.exp'),sK10)))))),
  inference(superposition,[],[f270,f191])).
fof(f191,plain,(
  s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',sK8),s('type.list.list'('type.closLang.exp'),sK10))) = s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.num.num',sK9),s('type.list.list'('type.closLang.exp'),sK7)))),
  inference(cnf_transformation,[],[f132])).
fof(f270,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X17,X11] : ! [X12,X13] : s(X11,X12) = s(X11,'const.pair.FST_1'(s('type.pair.prod'(X11,X17),'const.pair.,_2'(s(X11,X12),s(X17,X13)))))),
  file('thm.clos_numberProof.renumber_code_locs_imp_inc|split|0','thm.pair.FST')).
fof(f249,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X0),s('type.list.list'('type.closLang.exp'),X1))))))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X7,X9] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X7),s('type.list.list'('type.closLang.exp'),X9))))))))),
  file('thm.clos_numberProof.renumber_code_locs_imp_inc|split|0','thm.clos_numberProof.renumber_code_locs_inc|split|0')).
% SZS output end Proof for thm.clos_numberProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 180
% Passive clauses: 600
% Generated clauses: 1989
% Final active clauses: 179
% Final passive clauses: 358
% Input formulas: 38
% Initial clauses: 121
% 
% Duplicate literals: 64
% Trivial inequalities: 4
% Fw subsumption resolutions: 86
% Fw demodulations: 94
% Bw demodulations: 1
% 
% Simple tautologies: 108
% Equational tautologies: 14
% Forward subsumptions: 1027
% 
% Binary resolution: 1287
% Factoring: 13
% Forward superposition: 191
% Backward superposition: 105
% Self superposition: 5
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 35
% Split components: 71
% SAT solver clauses: 58
% SAT solver unit clauses: 5
% SAT solver binary clauses: 28
% SAT solver learnt clauses: 1
% 
% Sat splits: 35
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 57
% TWLsolver calls for satisfiability: 38
% 
% Memory used [KB]: 1791
% Time elapsed: 0.136 s
% ------------------------------
% ------------------------------
% Success in time 0.16 s
