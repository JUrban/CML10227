Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% (14891)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 83
% Passive clauses: 2497
% Generated clauses: 13041
% Final active clauses: 79
% Final passive clauses: 2340
% Input formulas: 29
% Initial clauses: 31
% 
% Duplicate literals: 649
% Trivial inequalities: 112
% Fw subsumption resolutions: 972
% Fw demodulations: 1355
% Bw demodulations: 2
% 
% Simple tautologies: 174
% Equational tautologies: 25
% Forward subsumptions: 6865
% 
% Binary resolution: 20
% Forward superposition: 5551
% Backward superposition: 4365
% Self superposition: 250
% Equality factoring: 67
% Equality resolution: 18
% 
% Split clauses: 258
% Split components: 529
% SAT solver clauses: 467
% SAT solver unit clauses: 41
% SAT solver binary clauses: 159
% 
% Sat splits: 258
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 465
% TWLsolver calls for satisfiability: 57
% 
% Memory used [KB]: 18933
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f159,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f158,f91,f123,f99,f133])).
fof(f133,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) ) | $spl16),
  inference(cnf_transformation,[],[f133_D])).
fof(f133_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f99,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3,X4] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7,X8,X9,X10] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X6),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  file('thm.closProps.evaluate_LENGTH|split|1','thm.closProps.closProps_52_prove_ltb|split|1')).
fof(f123,plain,(
  ~p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK1),s('type.closSem.v',sK2),s('type.list.list'('type.closSem.v'),sK3),s('type.closSem.state'(sK0),sK4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(sK0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | $spl1),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  ~p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK1),s('type.closSem.v',sK2),s('type.list.list'('type.closSem.v'),sK3),s('type.closSem.state'(sK0),sK4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(sK0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0')))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f91,plain,(
  ~p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK1),s('type.closSem.v',sK2),s('type.list.list'('type.closSem.v'),sK3),s('type.closSem.state'(sK0),sK4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(sK0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ~p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK1),s('type.closSem.v',sK2),s('type.list.list'('type.closSem.v'),sK3),s('type.closSem.state'(sK0),sK4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(sK0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f83])).
fof(f83,plain,(
  ? [X0,X1,X2,X3,X4] : ~p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1,X2,X3,X4] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X0),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X6),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : p(s(bool,'const.pair.pair_CASE_2'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun('type.closSem.state'(X6),bool)),'_dst_x00x10x00x00_4'(s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),fun(fun('type.list.list'('type.closSem.v'),bool),fun(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),bool))),'const.semanticPrimitives.result_CASE_0'),s(fun('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v')),'_i_0_0'),s(fun('type.list.list'('type.closSem.v'),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.list.list'('type.closSem.v'),'type.num.num'),'const.list.LENGTH_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.semanticPrimitives.error_result'('type.closSem.v'),bool),'_dst_x0_1'(s(bool,'T_0'))))))))),
  file('thm.closProps.evaluate_LENGTH|split|1','thm.closProps.evaluate_LENGTH|split|1')).
fof(f158,plain,(
  $false | ($spl1 | $spl16)),
  inference(subsumption_resolution,[],[f123,f133])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 29
% Generated clauses: 64
% Final passive clauses: 29
% Input formulas: 29
% Initial clauses: 31
% 
% Fw subsumption resolutions: 1
% Fw demodulations: 1
% 
% SAT solver clauses: 65
% SAT solver unit clauses: 56
% SAT solver binary clauses: 7
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 64
% TWLsolver calls for satisfiability: 56
% 
% Memory used [KB]: 1151
% Time elapsed: 0.006 s
% ------------------------------
% ------------------------------
% Success in time 0.633 s
