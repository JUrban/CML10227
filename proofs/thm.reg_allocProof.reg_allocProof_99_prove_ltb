Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.reg_allocProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.reg_allocProof
% SZS output start Proof for thm.reg_allocProof
fof(f1187,plain,(
  $false),
  inference(subsumption_resolution,[],[f1172,f990])).
fof(f990,plain,(
  ~p(s(bool,'const.pred_set.INJ_3'(s(fun(sK7,sK8),sK12),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK10))),s(fun(sK8,bool),'const.pred_set.UNIV_0'))))),
  inference(forward_demodulation,[],[f989,f166])).
fof(f166,plain,(
  s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK10))) = s(fun(sK7,bool),'const.pred_set.UNION_2'(s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK9))),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK11)))))),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK8),'const.list.MAP_2'(s(fun(sK7,sK8),sK12),s('type.list.list'(sK7),sK10)))))) & s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK10))) = s(fun(sK7,bool),'const.pred_set.UNION_2'(s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK9))),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK11))))) & ~p(s(bool,'const.pred_set.INJ_3'(s(fun(sK7,sK8),sK12),s(fun(sK7,bool),'const.pred_set.UNION_2'(s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK11))),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK9))))),s(fun(sK8,bool),'const.pred_set.UNIV_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9,sK10,sK11,sK12])],[f83])).
fof(f83,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X5),s('type.list.list'(X0),X3)))))) & s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4))))) & ~p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X5),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X5),s('type.list.list'(X0),X3)))))) & s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4)))))) & ~p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X5),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X5),s('type.list.list'(X0),X3)))))) & s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X5),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X5),s('type.list.list'(X0),X3)))))) & s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X3))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X5),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X4))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X11),s('type.list.list'(X6),X9)))))) & s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X9))) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X10)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X6,X7),X11),s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X10))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))),s(fun(X7,bool),'const.pred_set.UNIV_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X11),s('type.list.list'(X6),X9)))))) & s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X9))) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X10)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X6,X7),X11),s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X10))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))),s(fun(X7,bool),'const.pred_set.UNIV_0')))))),
  file('thm.reg_allocProof.reg_allocProof_99_prove_ltb','thm.reg_allocProof.reg_allocProof_99_prove_ltb')).
fof(f989,plain,(
  ~p(s(bool,'const.pred_set.INJ_3'(s(fun(sK7,sK8),sK12),s(fun(sK7,bool),'const.pred_set.UNION_2'(s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK9))),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK11))))),s(fun(sK8,bool),'const.pred_set.UNIV_0'))))),
  inference(forward_demodulation,[],[f167,f209])).
fof(f209,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X1)))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2] : s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X1)))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1,X2] : s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X1)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X7] : ! [X13,X12] : s(fun(X7,bool),'const.pred_set.UNION_2'(s(fun(X7,bool),X12),s(fun(X7,bool),X13))) = s(fun(X7,bool),'const.pred_set.UNION_2'(s(fun(X7,bool),X13),s(fun(X7,bool),X12)))),
  file('thm.reg_allocProof.reg_allocProof_99_prove_ltb','thm.pred_set.UNION_COMM')).
fof(f167,plain,(
  ~p(s(bool,'const.pred_set.INJ_3'(s(fun(sK7,sK8),sK12),s(fun(sK7,bool),'const.pred_set.UNION_2'(s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK11))),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK9))))),s(fun(sK8,bool),'const.pred_set.UNIV_0'))))),
  inference(cnf_transformation,[],[f119])).
fof(f1172,plain,(
  p(s(bool,'const.pred_set.INJ_3'(s(fun(sK7,sK8),sK12),s(fun(sK7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK7),sK10))),s(fun(sK8,bool),'const.pred_set.UNIV_0'))))),
  inference(resolution,[],[f229,f165])).
fof(f165,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK8),'const.list.MAP_2'(s(fun(sK7,sK8),sK12),s('type.list.list'(sK7),sK10))))))),
  inference(cnf_transformation,[],[f119])).
fof(f229,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X1,bool),'const.pred_set.UNIV_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(ennf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))),s(fun(X1,bool),'const.pred_set.UNIV_0')))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X7,X6] : ! [X14,X11] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X11),s('type.list.list'(X7),X14)))))) => p(s(bool,'const.pred_set.INJ_3'(s(fun(X7,X6),X11),s(fun(X7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X7),X14))),s(fun(X6,bool),'const.pred_set.UNIV_0')))))),
  file('thm.reg_allocProof.reg_allocProof_99_prove_ltb','thm.reg_allocProof.reg_allocProof_98_prove_ltb')).
% SZS output end Proof for thm.reg_allocProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 147
% Passive clauses: 379
% Generated clauses: 1016
% Final active clauses: 147
% Final passive clauses: 193
% Input formulas: 32
% Initial clauses: 106
% 
% Duplicate literals: 33
% Trivial inequalities: 3
% Fw subsumption resolutions: 44
% Fw demodulations: 2
% 
% Simple tautologies: 87
% Equational tautologies: 11
% Forward subsumptions: 432
% 
% Binary resolution: 712
% Factoring: 8
% Forward superposition: 59
% Backward superposition: 25
% Self superposition: 6
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 35
% Split components: 71
% SAT solver clauses: 52
% SAT solver unit clauses: 4
% SAT solver binary clauses: 25
% 
% Sat splits: 35
% 
% TWLsolver clauses: 52
% TWLsolver calls for satisfiability: 34
% 
% Memory used [KB]: 1151
% Time elapsed: 0.033 s
% ------------------------------
% ------------------------------
% Success in time 0.04 s
