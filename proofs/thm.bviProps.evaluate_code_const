Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bviProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviProps
% SZS output start Proof for thm.bviProps
fof(f571,plain,(
  $false),
  inference(subsumption_resolution,[],[f570,f70])).
fof(f70,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5)))),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK3))))))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X5))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X5))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X5))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9))))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X9))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X11))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9))))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X9))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X11))))),
  file('thm.bviProps.evaluate_code_const','thm.bviProps.evaluate_code_const')).
fof(f570,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5)))),
  inference(forward_demodulation,[],[f566,f95])).
fof(f95,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6,X19] : ! [X12,X13] : s(X19,X13) = s(X19,'const.pair.SND_1'(s('type.pair.prod'(X6,X19),'const.pair.,_2'(s(X6,X12),s(X19,X13)))))),
  file('thm.bviProps.evaluate_code_const','thm.pair.SND')).
fof(f566,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5)))))))),
  inference(superposition,[],[f94,f69])).
fof(f69,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f51])).
fof(f94,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X3))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X7,X8,X9] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X9))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9)))))))))))),
  file('thm.bviProps.evaluate_code_const','thm.bviProps.bviProps_46_prove_ltb')).
% SZS output end Proof for thm.bviProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 23
% Passive clauses: 87
% Generated clauses: 474
% Final active clauses: 22
% Final passive clauses: 50
% Input formulas: 17
% Initial clauses: 42
% 
% Duplicate literals: 51
% Trivial inequalities: 15
% Fw subsumption resolutions: 34
% Fw demodulations: 9
% 
% Simple tautologies: 52
% Equational tautologies: 15
% Forward subsumptions: 179
% 
% Binary resolution: 17
% Forward superposition: 141
% Backward superposition: 97
% Self superposition: 28
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 24
% Split components: 50
% SAT solver clauses: 39
% SAT solver unit clauses: 4
% SAT solver binary clauses: 15
% 
% Sat splits: 24
% 
% TWLsolver clauses: 39
% TWLsolver calls for satisfiability: 16
% 
% Memory used [KB]: 1023
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 0.03 s
