Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvpSem
% (72090)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 171
% Passive clauses: 986
% Generated clauses: 18447
% Final active clauses: 160
% Final passive clauses: 659
% Input formulas: 89
% Initial clauses: 107
% 
% Duplicate literals: 625
% Trivial inequalities: 154
% Fw subsumption resolutions: 1512
% Fw demodulations: 1882
% 
% Simple tautologies: 168
% Equational tautologies: 32
% Forward subsumptions: 12618
% 
% Binary resolution: 4
% Forward superposition: 7798
% Backward superposition: 5971
% Self superposition: 219
% Equality factoring: 65
% Equality resolution: 25
% 
% Split clauses: 190
% Split components: 388
% SAT solver clauses: 545
% SAT solver unit clauses: 39
% SAT solver binary clauses: 139
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 190
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 544
% TWLsolver calls for satisfiability: 110
% 
% Memory used [KB]: 15095
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvpSem
% (72156)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 159
% Passive clauses: 411
% Generated clauses: 16583
% Final active clauses: 156
% Final passive clauses: 248
% Input formulas: 89
% Initial clauses: 107
% 
% Duplicate literals: 680
% Trivial inequalities: 166
% Fw subsumption resolutions: 880
% Fw demodulations: 810
% Bw demodulations: 2
% Condensations: 1967
% 
% Simple tautologies: 156
% Equational tautologies: 31
% Forward subsumptions: 10859
% 
% Binary resolution: 4
% Forward superposition: 6740
% Backward superposition: 4518
% Self superposition: 199
% Equality factoring: 64
% Equality resolution: 25
% 
% Split clauses: 42
% Split components: 92
% SAT solver clauses: 725
% SAT solver unit clauses: 183
% SAT solver binary clauses: 65
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 42
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 724
% TWLsolver calls for satisfiability: 606
% 
% Memory used [KB]: 14456
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvpSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpSem
% SZS output start Proof for thm.bvpSem
fof(f29364,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f281,f398,f396,f394,f392,f390,f388,f386,f384,f382,f380,f280,f397,f279,f395,f278,f393,f277,f391,f276,f389,f275,f387,f274,f385,f273,f383,f272,f381,f379,f409,f447,f450,f448,f1251,f1252,f1463,f1253,f1462,f3170,f3172,f12879,f12898,f12899,f12901,f12906,f3171,f12773,f12907,f12908,f12880,f12909,f13030,f13035,f13036,f13037,f13038,f13042,f13043,f13044,f13045,f13046,f13049,f13050,f13051,f1688,f1464,f13055,f13057,f13058,f13059,f13062,f13063,f13064,f13065,f13067,f13070,f13071,f13072,f13075,f13076,f13077,f13081,f13082,f13083,f13084,f13085,f13088,f13089,f13090,f13093,f13094,f13095,f13096,f13097,f13098,f13099,f13100,f13101,f13102,f13103,f13104,f13107,f13110,f13113,f13115,f13119,f13128,f13132,f13133,f13134,f13136,f13137,f13138,f13140,f13141,f13142,f13144,f13145,f13148,f13149,f13150,f13151,f13156,f13158,f13159,f13160,f13162,f13164,f13165,f13166,f13167,f13168,f13169,f13172,f13175,f13178,f13181,f13186,f13188,f13191,f13193,f13196,f13199,f13202,f13205,f13208,f13213,f13215,f13218,f13221,f13222,f13223,f13225,f13227,f13230,f13233,f13234,f13235,f13236,f13237,f13239,f13240,f13243,f13247,f13251,f13257,f13258,f13261,f13263,f13267,f13270,f13273,f13277,f13281,f13286,f13294,f13297,f13298,f13300,f13301,f13304,f13307,f13310,f13311,f13314,f13320,f13322,f13323,f13324,f13325,f13331,f13333,f13335,f13337,f13338,f13346,f13348,f13350,f13352,f13353,f13356,f13357,f13358,f13359,f13361,f13363,f13365,f13367,f13368,f13371,f13372,f13379,f13380,f13381,f13384,f13389,f13393,f13396,f13399,f13402,f13405,f13406,f13407,f13411,f13412,f13413,f13417,f13418,f13419,f13420,f13421,f13422,f13423,f13424,f13425,f13426,f13427,f13428,f13429,f13430,f13431,f13432,f13433,f13434,f13435,f13436,f13437,f13438,f13439,f13440,f13441,f13442,f13443,f13444,f13445,f13446,f13447,f13448,f13449,f13450,f13451,f13452,f13453,f13454,f13455,f13456,f13457,f13458,f13459,f13460,f13461,f13462,f13463,f13464,f13465,f13466,f13467,f13468,f13469,f13470,f13471,f13472,f13473,f13474,f13475,f13476,f13477,f13478,f13479,f13480,f13481,f13482,f13483,f13484,f13485,f13486,f13487,f13488,f13489,f13490,f13491,f13492,f13493,f13494,f13495,f13496,f13497,f13498,f13499,f16628,f16695,f16738,f17553,f17646,f17714,f19741,f19897,f20001,f20803,f20980,f21094,f21920,f22114,f22241,f23029,f23229,f23362,f23956,f24161,f24294,f25679,f25885,f26019,f28735,f28947,f29086,f29360,f29361,f29362,f29363])).
fof(f29363,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f382,f28833])).
fof(f28833,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK2) = s('type.sptree.spt'('type.bvlSem.v'),sK11) | $spl0),
  inference(forward_demodulation,[],[f28832,f12218])).
fof(f12218,plain,(
  ( ! [X4,X5,X3] : (s('type.sptree.spt'('type.bvlSem.v'),X3) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X3))),s('type.bvpSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f352,f399])).
fof(f399,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f368,f367])).
fof(f367,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f240])).
fof(f240,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f89])).
fof(f89,axiom,(
  ! [X30,X31] : ! [X32,X33] : s(X31,X32) = s(X31,'const.combin.K_2'(s(X31,X32),s(X30,X33)))),
  file('thm.bvpSem.state_literal_|49||49|','thm.combin.K_THM')).
fof(f368,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f242])).
fof(f242,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X31,X30] : ! [X34,X35] : s(X31,'const.combin.K_2'(s(X31,X34),s(X30,X35))) = s(X31,happ(s(fun(X30,X31),'const.combin.K_1'(s(X31,X34))),s(X30,X35)))),
  file('thm.bvpSem.state_literal_|49||49|','ARITY_1_2_const.combin.K')).
fof(f352,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f229])).
fof(f229,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f228])).
fof(f228,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f79])).
fof(f79,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|3_prove_ltb')).
fof(f28832,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK11) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28831,f12218])).
fof(f28831,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28830,f352])).
fof(f28830,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28829,f352])).
fof(f28829,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28828,f12209])).
fof(f12209,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X3),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X3),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvpSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f352,f292])).
fof(f292,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_48_prove_ltb')).
fof(f28828,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28827,f12209])).
fof(f28827,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28826,f352])).
fof(f28826,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28825,f352])).
fof(f28825,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28824,f12210])).
fof(f12210,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X8),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X5),X7))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X8),s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),X6),s('type.bvpSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f352,f374])).
fof(f374,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X1),X2))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f255])).
fof(f255,plain,(
  ! [X0,X1,X2,X3] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X1),X2))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f254])).
fof(f254,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X1),X2))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_47_prove_ltb')).
fof(f28824,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28823,f12210])).
fof(f28823,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28822,f352])).
fof(f28822,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28821,f352])).
fof(f28821,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28820,f12211])).
fof(f12211,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X12),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X9),X11))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X12),s('type.bvpSem.state'(X9),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X10),s('type.bvpSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f352,f339])).
fof(f339,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f202])).
fof(f202,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_46_prove_ltb')).
fof(f28820,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28819,f12211])).
fof(f28819,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28818,f352])).
fof(f28818,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28817,f352])).
fof(f28817,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28816,f12212])).
fof(f12212,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X16),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X13),X15))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X13),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X16),s('type.bvpSem.state'(X13),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvpSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f352,f293])).
fof(f293,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_45_prove_ltb')).
fof(f28816,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28815,f12212])).
fof(f28815,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28814,f352])).
fof(f28814,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28813,f352])).
fof(f28813,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28812,f12213])).
fof(f12213,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X20),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X17),X19))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X17),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X20),s('type.bvpSem.state'(X17),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X18),s('type.bvpSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f352,f338])).
fof(f338,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_44_prove_ltb')).
fof(f28812,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28811,f12213])).
fof(f28811,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28810,f352])).
fof(f28810,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28809,f352])).
fof(f28809,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28808,f12214])).
fof(f12214,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X24),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X21),X23))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X21),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X24),s('type.bvpSem.state'(X21),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.bvpSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f352,f294])).
fof(f294,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_43_prove_ltb')).
fof(f28808,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28807,f12214])).
fof(f28807,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28806,f352])).
fof(f28806,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28805,f352])).
fof(f28805,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28804,f12215])).
fof(f12215,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X28),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X25),X27))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X25),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X28),s('type.bvpSem.state'(X25),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X26),s('type.bvpSem.state'(X25),X27)))))))) )),
  inference(superposition,[],[f352,f314])).
fof(f314,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_42_prove_ltb')).
fof(f28804,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28803,f12215])).
fof(f28803,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28802,f352])).
fof(f28802,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28801,f352])).
fof(f28801,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28800,f12216])).
fof(f12216,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X32),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X29),X31))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X29),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X32),s('type.bvpSem.state'(X29),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X30),s('type.bvpSem.state'(X29),X31)))))))) )),
  inference(superposition,[],[f352,f312])).
fof(f312,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_4|49|_prove_ltb')).
fof(f28800,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28459,f12216])).
fof(f28459,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f357])).
fof(f357,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f269])).
fof(f269,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & ((s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f239])).
fof(f239,plain,(
  ! [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f238])).
fof(f238,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(rectify,[],[f88])).
fof(f88,axiom,(
  ! [X6] : ! [X28,X29] : (s('type.bvpSem.state'(X6),X28) = s('type.bvpSem.state'(X6),X29) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X28))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X29))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X28))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X29))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X28))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X29))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X28))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X29))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X28))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X29))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X28))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X29))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X28))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X29))) & s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X28))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X29))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X28))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X29)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.state_component_equality')).
fof(f29362,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f505,f905,f6347,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f5466,f5422,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f13370,f10101,f10185,f10198,f13383,f12061,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f3089,f9778,f9292,f10100,f9906,f9775,f9305,f9304,f9303,f9300,f9299,f12845,f12843,f12778,f12052,f9976,f9973,f9957,f9956,f9316,f9315,f9313,f9312,f9298,f9286,f7902,f7901,f4880,f4879,f3684,f3683,f3152,f2909,f2823,f1845,f1844,f913,f613,f475,f438,f283,f9964,f9958,f9306,f6782,f6781,f4779,f4660,f4659,f4595,f4591,f2826,f1846,f1319,f1270,f904,f504,f11911,f13392,f10196,f10284,f10306,f5424,f12059,f12057,f11977,f11775,f9961,f5912,f5911,f13518,f13519,f13520,f13521,f13522,f13523,f13524,f13525,f13526,f13527,f13888,f13889,f13890,f13891,f13892,f13893,f13894,f13895,f13896,f13897,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14887,f14888,f14973,f14974,f14975,f14976,f14977,f14978,f14979,f14980,f14981,f14982,f15809,f15810,f15811,f15812,f15813,f15814,f15815,f15816,f15817,f15818,f15867,f15868,f16838,f16839,f22728,f23597,f23647,f24549,f379,f27399,f27400,f27401,f28637,f28638,f28658,f28659,f28681,f28682,f28696,f28697,f28723,f28724,f28765,f28766,f28798,f28799,f28833,f28834,f29213,f29085,f28946,f28734])).
fof(f28734,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | $spl0),
  inference(forward_demodulation,[],[f28733,f399])).
fof(f28733,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28732,f399])).
fof(f28732,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28731,f337])).
fof(f28731,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28730,f337])).
fof(f28730,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28729,f302])).
fof(f28729,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28728,f302])).
fof(f28728,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28727,f311])).
fof(f28727,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28726,f311])).
fof(f28726,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28725,f310])).
fof(f28725,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28462,f310])).
fof(f28462,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f360])).
fof(f28946,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | $spl0),
  inference(forward_demodulation,[],[f28945,f399])).
fof(f28945,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28944,f399])).
fof(f28944,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28943,f337])).
fof(f28943,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28942,f337])).
fof(f28942,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28941,f302])).
fof(f28941,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28940,f302])).
fof(f28940,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28939,f311])).
fof(f28939,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28938,f311])).
fof(f28938,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28937,f310])).
fof(f28937,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28453,f310])).
fof(f28453,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f360])).
fof(f29085,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | $spl0),
  inference(forward_demodulation,[],[f29084,f399])).
fof(f29084,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29083,f399])).
fof(f29083,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29082,f337])).
fof(f29082,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29081,f337])).
fof(f29081,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29080,f302])).
fof(f29080,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29079,f302])).
fof(f29079,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29078,f311])).
fof(f29078,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f29077,f311])).
fof(f29077,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28471,f310])).
fof(f28471,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(superposition,[],[f310,f379])).
fof(f29213,plain,(
  ( ! [X72] : (s('type.sptree.spt'('type.bvlSem.v'),sK2) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),X72))) | s('type.bvpSem.state'(sK1),X72) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f29212,f28833])).
fof(f29212,plain,(
  ( ! [X72] : (s('type.sptree.spt'('type.bvlSem.v'),sK11) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),X72))) | s('type.bvpSem.state'(sK1),X72) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f28549,f12218])).
fof(f28549,plain,(
  ( ! [X72] : (s('type.bvpSem.state'(sK1),X72) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),X72))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))))) ) | $spl0),
  inference(superposition,[],[f357,f379])).
fof(f28834,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28833,f28799])).
fof(f28799,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28798,f28766])).
fof(f28798,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK3) = s('type.list.list'('type.bvpSem.stack'),sK12) | $spl0),
  inference(forward_demodulation,[],[f28797,f13897])).
fof(f28797,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK12) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28796,f13897])).
fof(f28796,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28795,f354])).
fof(f28795,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28794,f354])).
fof(f28794,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28793,f13888])).
fof(f28793,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28792,f13888])).
fof(f28792,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28791,f354])).
fof(f28791,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28790,f354])).
fof(f28790,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28789,f13889])).
fof(f28789,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28788,f13889])).
fof(f28788,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28787,f354])).
fof(f28787,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28786,f354])).
fof(f28786,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28785,f13890])).
fof(f28785,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28784,f13890])).
fof(f28784,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28783,f354])).
fof(f28783,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28782,f354])).
fof(f28782,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28781,f13891])).
fof(f28781,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28780,f13891])).
fof(f28780,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28779,f354])).
fof(f28779,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28778,f354])).
fof(f28778,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28777,f13892])).
fof(f28777,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28776,f13892])).
fof(f28776,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28775,f354])).
fof(f28775,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28774,f354])).
fof(f28774,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28773,f13893])).
fof(f28773,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28772,f13893])).
fof(f28772,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28771,f354])).
fof(f28771,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28770,f354])).
fof(f28770,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28769,f13894])).
fof(f28769,plain,(
  s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28768,f13894])).
fof(f28768,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28767,f320])).
fof(f28767,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28460,f320])).
fof(f28460,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f358])).
fof(f28766,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28765,f28724])).
fof(f28765,plain,(
  s('type.option.option'('type.num.num'),sK4) = s('type.option.option'('type.num.num'),sK13) | $spl0),
  inference(forward_demodulation,[],[f28764,f13527])).
fof(f28764,plain,(
  s('type.option.option'('type.num.num'),sK13) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28763,f13527])).
fof(f28763,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28762,f353])).
fof(f28762,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28761,f353])).
fof(f28761,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28760,f13518])).
fof(f28760,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28759,f13518])).
fof(f28759,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28758,f353])).
fof(f28758,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28757,f353])).
fof(f28757,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28756,f13519])).
fof(f28756,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28755,f13519])).
fof(f28755,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28754,f353])).
fof(f28754,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28753,f353])).
fof(f28753,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28752,f13520])).
fof(f28752,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28751,f13520])).
fof(f28751,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28750,f353])).
fof(f28750,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28749,f353])).
fof(f28749,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28748,f13521])).
fof(f28748,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28747,f13521])).
fof(f28747,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28746,f353])).
fof(f28746,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28745,f353])).
fof(f28745,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28744,f13522])).
fof(f28744,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28743,f13522])).
fof(f28743,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28742,f353])).
fof(f28742,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28741,f353])).
fof(f28741,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28740,f13523])).
fof(f28740,plain,(
  s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28739,f13523])).
fof(f28739,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28738,f313])).
fof(f28738,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28737,f313])).
fof(f28737,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28736,f316])).
fof(f28736,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28461,f316])).
fof(f28461,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f359])).
fof(f28724,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28723,f28697])).
fof(f28723,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) | $spl0),
  inference(forward_demodulation,[],[f28722,f14982])).
fof(f28722,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28721,f14982])).
fof(f28721,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28720,f355])).
fof(f28720,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28719,f355])).
fof(f28719,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28718,f14973])).
fof(f28718,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28717,f14973])).
fof(f28717,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28716,f355])).
fof(f28716,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28715,f355])).
fof(f28715,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28714,f14974])).
fof(f28714,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28713,f14974])).
fof(f28713,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28712,f355])).
fof(f28712,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28711,f355])).
fof(f28711,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28710,f14975])).
fof(f28710,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28709,f14975])).
fof(f28709,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28708,f355])).
fof(f28708,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28707,f355])).
fof(f28707,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28706,f14976])).
fof(f28706,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28705,f14976])).
fof(f28705,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28704,f322])).
fof(f28704,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28703,f322])).
fof(f28703,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28702,f341])).
fof(f28702,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28701,f341])).
fof(f28701,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28700,f342])).
fof(f28700,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28699,f342])).
fof(f28699,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28698,f343])).
fof(f28698,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28463,f343])).
fof(f28463,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f361])).
fof(f28697,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28696,f28682])).
fof(f28696,plain,(
  s('type.num.num',sK7) = s('type.num.num',sK16) | $spl0),
  inference(forward_demodulation,[],[f28695,f399])).
fof(f28695,plain,(
  s('type.num.num',sK16) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28694,f399])).
fof(f28694,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28693,f333])).
fof(f28693,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28692,f333])).
fof(f28692,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28691,f332])).
fof(f28691,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28690,f332])).
fof(f28690,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28689,f285])).
fof(f28689,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28688,f285])).
fof(f28688,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28687,f304])).
fof(f28687,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28686,f304])).
fof(f28686,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28685,f301])).
fof(f28685,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28684,f301])).
fof(f28684,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28683,f291])).
fof(f28683,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28464,f291])).
fof(f28464,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f362])).
fof(f28682,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28681,f28659])).
fof(f28681,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) | $spl0),
  inference(forward_demodulation,[],[f28680,f15818])).
fof(f28680,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28679,f15818])).
fof(f28679,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28678,f356])).
fof(f28678,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28677,f356])).
fof(f28677,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28676,f15809])).
fof(f28676,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28675,f15809])).
fof(f28675,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28674,f356])).
fof(f28674,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28673,f356])).
fof(f28673,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28672,f15810])).
fof(f28672,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28671,f15810])).
fof(f28671,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28670,f324])).
fof(f28670,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28669,f324])).
fof(f28669,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28668,f351])).
fof(f28668,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28667,f351])).
fof(f28667,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28666,f325])).
fof(f28666,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28665,f325])).
fof(f28665,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28664,f336])).
fof(f28664,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28663,f336])).
fof(f28663,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28662,f335])).
fof(f28662,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28661,f335])).
fof(f28661,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28660,f334])).
fof(f28660,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28465,f334])).
fof(f28465,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f363])).
fof(f28659,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28658,f28638])).
fof(f28658,plain,(
  s('type.ffi.ffi_state'(sK1),sK9) = s('type.ffi.ffi_state'(sK1),sK18) | $spl0),
  inference(forward_demodulation,[],[f28657,f14551])).
fof(f28657,plain,(
  s('type.ffi.ffi_state'(sK1),sK18) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28656,f14551])).
fof(f28656,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28655,f377])).
fof(f28655,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28654,f377])).
fof(f28654,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28653,f14542])).
fof(f28653,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28652,f14542])).
fof(f28652,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28651,f347])).
fof(f28651,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28650,f347])).
fof(f28650,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28649,f307])).
fof(f28649,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28648,f307])).
fof(f28648,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28647,f345])).
fof(f28647,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28646,f345])).
fof(f28646,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28645,f308])).
fof(f28645,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28644,f308])).
fof(f28644,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28643,f315])).
fof(f28643,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28642,f315])).
fof(f28642,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28641,f317])).
fof(f28641,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28640,f317])).
fof(f28640,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28639,f318])).
fof(f28639,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28466,f318])).
fof(f28466,plain,(
  s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f364])).
fof(f28638,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f28637,f379])).
fof(f28637,plain,(
  s('type.num.num',sK10) = s('type.num.num',sK19) | $spl0),
  inference(forward_demodulation,[],[f28636,f399])).
fof(f28636,plain,(
  s('type.num.num',sK19) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28635,f399])).
fof(f28635,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28634,f340])).
fof(f28634,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28633,f340])).
fof(f28633,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f28632,f371])).
fof(f28632,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28631,f371])).
fof(f28631,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f28630,f328])).
fof(f28630,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28629,f328])).
fof(f28629,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f28628,f288])).
fof(f28628,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28627,f288])).
fof(f28627,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28626,f326])).
fof(f28626,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28625,f326])).
fof(f28625,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28624,f290])).
fof(f28624,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28623,f290])).
fof(f28623,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28622,f296])).
fof(f28622,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28621,f296])).
fof(f28621,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28620,f298])).
fof(f28620,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28619,f298])).
fof(f28619,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28618,f299])).
fof(f28618,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f28467,f299])).
fof(f28467,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f379,f365])).
fof(f27401,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s(bool,X144) = s(bool,'const.combin.K_2'(s(bool,X145),s(bool,X144))) | s(bool,X145) = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X146,X147))) | s(bool,X144) = s(bool,X148) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f12845,f436])).
fof(f27400,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (s(bool,X137) = s(bool,'const.combin.K_2'(s(bool,X138),s(bool,X137))) | s(bool,X138) = s(bool,happ(s(fun(X139,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X139,X140))) | s(bool,X137) = s(bool,X141) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143)))) )),
  inference(superposition,[],[f12845,f543])).
fof(f27399,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131] : (s(bool,X130) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X130))) | s(bool,X131) = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X132,X133))) | s(bool,X130) = s(bool,X134) | s(bool,'T_0') = s(bool,happ(s(fun(X135,bool),'const.combin.K_1'(s(bool,X134))),s(X135,X136)))) )),
  inference(superposition,[],[f12845,f544])).
fof(f24549,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.ffi.ffi_state'(X8),happ(s(fun('type.ffi.ffi_state'(X4),'type.ffi.ffi_state'(X8)),X9),s('type.ffi.ffi_state'(X4),X6))) = s('type.ffi.ffi_state'(X8),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X8),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X4),'type.ffi.ffi_state'(X8)),X9),s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X6))),s('type.bvpSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f377,f14551])).
fof(f23647,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X6),s('type.list.list'('type.bvpSem.stack'),X4))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X3),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X6),s('type.bvpSem.state'(X3),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X4))),s('type.bvpSem.state'(X3),X5)))))))) )),
  inference(superposition,[],[f354,f13897])).
fof(f23597,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X6),s('type.option.option'('type.num.num'),X4))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X3),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X6),s('type.bvpSem.state'(X3),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X3),X5)))))))) )),
  inference(superposition,[],[f353,f13527])).
fof(f22728,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X6),s('type.sptree.spt'('type.bvlSem.v'),X4))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X3),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X6),s('type.bvpSem.state'(X3),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X4))),s('type.bvpSem.state'(X3),X5)))))))) )),
  inference(superposition,[],[f352,f12218])).
fof(f16839,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X77) != s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X78))),s(bool,X77))) | s(bool,'T_0') = s(bool,X78) | s(bool,X77) = s(bool,X79) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X79),s(X80,X81)))) )),
  inference(superposition,[],[f12125,f543])).
fof(f16838,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,X72) != s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X73))),s(bool,X72))) | s(bool,'T_0') = s(bool,X73) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,happ(s(fun(X75,bool),'const.combin.K_1'(s(bool,X74))),s(X75,X76)))) )),
  inference(superposition,[],[f12125,f544])).
fof(f15868,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X7) != s(bool,X8) | s(bool,'T_0') = s(bool,happ(s(fun(X9,bool),'const.combin.K_1'(s(bool,X8))),s(X9,X10))) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f10196,f543])).
fof(f15867,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X1))),s(X2,X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.combin.K_1'(s(bool,X4))),s(X5,X6)))) )),
  inference(superposition,[],[f10196,f544])).
fof(f15818,plain,(
  ( ! [X4,X5,X3] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X3) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X3))),s('type.bvpSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f356,f399])).
fof(f15817,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X36),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X33),X35))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X33),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X36),s('type.bvpSem.state'(X33),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X34),s('type.bvpSem.state'(X33),X35)))))))) )),
  inference(superposition,[],[f356,f334])).
fof(f15816,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X32),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X29),X31))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X29),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X32),s('type.bvpSem.state'(X29),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X30),s('type.bvpSem.state'(X29),X31)))))))) )),
  inference(superposition,[],[f356,f335])).
fof(f15815,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X28),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X25),X27))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X25),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X28),s('type.bvpSem.state'(X25),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X26),s('type.bvpSem.state'(X25),X27)))))))) )),
  inference(superposition,[],[f356,f336])).
fof(f15814,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X24),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X21),X23))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X21),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X24),s('type.bvpSem.state'(X21),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.bvpSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f356,f325])).
fof(f15813,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X20),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X17),X19))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X17),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X20),s('type.bvpSem.state'(X17),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X18),s('type.bvpSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f356,f351])).
fof(f15812,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X16),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X13),X15))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X13),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X16),s('type.bvpSem.state'(X13),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvpSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f356,f324])).
fof(f15811,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X12),s('type.bvpSem.state'(X9),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X10),s('type.bvpSem.state'(X9),X11))))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X12),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X10),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f356,f356])).
fof(f15810,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X8),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X5),X7))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X8),s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),X6),s('type.bvpSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f356,f376])).
fof(f15809,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X3),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvpSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f356,f321])).
fof(f14982,plain,(
  ( ! [X4,X5,X3] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X3))),s('type.bvpSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f355,f399])).
fof(f14981,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X36),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X33),X35))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X33),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X36),s('type.bvpSem.state'(X33),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X34),s('type.bvpSem.state'(X33),X35)))))))) )),
  inference(superposition,[],[f355,f343])).
fof(f14980,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X32),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X29),X31))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X29),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X32),s('type.bvpSem.state'(X29),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X30),s('type.bvpSem.state'(X29),X31)))))))) )),
  inference(superposition,[],[f355,f342])).
fof(f14979,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X28),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X25),X27))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X25),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X28),s('type.bvpSem.state'(X25),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X26),s('type.bvpSem.state'(X25),X27)))))))) )),
  inference(superposition,[],[f355,f341])).
fof(f14978,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X24),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X21),X23))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X21),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X24),s('type.bvpSem.state'(X21),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.bvpSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f355,f322])).
fof(f14977,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X17),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X20),s('type.bvpSem.state'(X17),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X18),s('type.bvpSem.state'(X17),X19))))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X20),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X18),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f355,f355])).
fof(f14976,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X13),X15))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X13),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.bvpSem.state'(X13),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvpSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f355,f323])).
fof(f14975,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X12),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X9),X11))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X12),s('type.bvpSem.state'(X9),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X10),s('type.bvpSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f355,f350])).
fof(f14974,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X5),X7))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X8),s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),X6),s('type.bvpSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f355,f375])).
fof(f14973,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvpSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f355,f330])).
fof(f14888,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X7) != s(bool,X8) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X8),s(X9,X10))) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f1917,f543])).
fof(f14887,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.combin.K_1'(s(bool,X4))),s(X5,X6)))) )),
  inference(superposition,[],[f1917,f544])).
fof(f14551,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ffi.ffi_state'(X4),X6) = s('type.ffi.ffi_state'(X4),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X6))),s('type.bvpSem.state'(X5),X7)))))) )),
  inference(superposition,[],[f377,f399])).
fof(f14550,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.ffi.ffi_state'(X44),happ(s(fun('type.ffi.ffi_state'(X41),'type.ffi.ffi_state'(X44)),X45),s('type.ffi.ffi_state'(X41),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X41),X43))))) = s('type.ffi.ffi_state'(X44),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X44),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X41),'type.ffi.ffi_state'(X44)),X45),s('type.bvpSem.state'(X41),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X42),s('type.bvpSem.state'(X41),X43)))))))) )),
  inference(superposition,[],[f377,f318])).
fof(f14549,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.ffi.ffi_state'(X39),happ(s(fun('type.ffi.ffi_state'(X36),'type.ffi.ffi_state'(X39)),X40),s('type.ffi.ffi_state'(X36),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X36),X38))))) = s('type.ffi.ffi_state'(X39),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X39),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X36),'type.ffi.ffi_state'(X39)),X40),s('type.bvpSem.state'(X36),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X37),s('type.bvpSem.state'(X36),X38)))))))) )),
  inference(superposition,[],[f377,f317])).
fof(f14548,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s('type.ffi.ffi_state'(X34),happ(s(fun('type.ffi.ffi_state'(X31),'type.ffi.ffi_state'(X34)),X35),s('type.ffi.ffi_state'(X31),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X31),X33))))) = s('type.ffi.ffi_state'(X34),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X34),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X31),'type.ffi.ffi_state'(X34)),X35),s('type.bvpSem.state'(X31),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X32),s('type.bvpSem.state'(X31),X33)))))))) )),
  inference(superposition,[],[f377,f315])).
fof(f14547,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.ffi.ffi_state'(X29),happ(s(fun('type.ffi.ffi_state'(X26),'type.ffi.ffi_state'(X29)),X30),s('type.ffi.ffi_state'(X26),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X26),X28))))) = s('type.ffi.ffi_state'(X29),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X29),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X26),'type.ffi.ffi_state'(X29)),X30),s('type.bvpSem.state'(X26),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X26),X28)))))))) )),
  inference(superposition,[],[f377,f308])).
fof(f14546,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.ffi.ffi_state'(X24),happ(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X24)),X25),s('type.ffi.ffi_state'(X21),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X21),X23))))) = s('type.ffi.ffi_state'(X24),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X24),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X24)),X25),s('type.bvpSem.state'(X21),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X22),s('type.bvpSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f377,f345])).
fof(f14545,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.ffi.ffi_state'(X19),happ(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X19)),X20),s('type.ffi.ffi_state'(X16),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X16),X18))))) = s('type.ffi.ffi_state'(X19),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X19),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X19)),X20),s('type.bvpSem.state'(X16),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X17),s('type.bvpSem.state'(X16),X18)))))))) )),
  inference(superposition,[],[f377,f307])).
fof(f14544,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.ffi.ffi_state'(X14),happ(s(fun('type.ffi.ffi_state'(X11),'type.ffi.ffi_state'(X14)),X15),s('type.ffi.ffi_state'(X11),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X11),X13))))) = s('type.ffi.ffi_state'(X14),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X14),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X11),'type.ffi.ffi_state'(X14)),X15),s('type.bvpSem.state'(X11),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X12),s('type.bvpSem.state'(X11),X13)))))))) )),
  inference(superposition,[],[f377,f347])).
fof(f14543,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.ffi.ffi_state'(X9),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X9)),X10),s('type.bvpSem.state'(X5),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X5)),X7),s('type.bvpSem.state'(X6),X8))))))) = s('type.ffi.ffi_state'(X9),happ(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X9)),X10),s('type.ffi.ffi_state'(X5),happ(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X5)),X7),s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X8)))))))) )),
  inference(superposition,[],[f377,f377])).
fof(f14542,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X3),happ(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X3)),X4),s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))))) = s('type.ffi.ffi_state'(X3),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X3),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X3)),X4),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvpSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f377,f305])).
fof(f13897,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.bvpSem.stack'),X3) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f354,f399])).
fof(f13896,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X36),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X33),X35))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X33),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X36),s('type.bvpSem.state'(X33),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X34),s('type.bvpSem.state'(X33),X35)))))))) )),
  inference(superposition,[],[f354,f320])).
fof(f13895,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X32),s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X30),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X29),X31))))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X29),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X32),s('type.bvpSem.state'(X29),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X30),s('type.bvpSem.state'(X29),X31)))))))) )),
  inference(superposition,[],[f354,f354])).
fof(f13894,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X28),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X25),X27))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X25),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X28),s('type.bvpSem.state'(X25),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X26),s('type.bvpSem.state'(X25),X27)))))))) )),
  inference(superposition,[],[f354,f319])).
fof(f13893,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X24),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X21),X23))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X21),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X24),s('type.bvpSem.state'(X21),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.bvpSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f354,f295])).
fof(f13892,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X20),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X17),X19))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X17),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X20),s('type.bvpSem.state'(X17),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X18),s('type.bvpSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f354,f344])).
fof(f13891,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X16),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X13),X15))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X13),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X16),s('type.bvpSem.state'(X13),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvpSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f354,f297])).
fof(f13890,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X12),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X9),X11))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X12),s('type.bvpSem.state'(X9),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X10),s('type.bvpSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f354,f346])).
fof(f13889,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X8),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X5),X7))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X8),s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),X6),s('type.bvpSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f354,f373])).
fof(f13888,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X3),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X3),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvpSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f354,f300])).
fof(f13527,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'('type.num.num'),X3) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X3))),s('type.bvpSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f353,f399])).
fof(f13526,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X36),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X33),X35))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X33),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X36),s('type.bvpSem.state'(X33),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X34),s('type.bvpSem.state'(X33),X35)))))))) )),
  inference(superposition,[],[f353,f316])).
fof(f13525,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X32),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X29),X31))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X29),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X32),s('type.bvpSem.state'(X29),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X30),s('type.bvpSem.state'(X29),X31)))))))) )),
  inference(superposition,[],[f353,f313])).
fof(f13524,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X28),s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X26),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X25),X27))))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X25),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X28),s('type.bvpSem.state'(X25),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X26),s('type.bvpSem.state'(X25),X27)))))))) )),
  inference(superposition,[],[f353,f353])).
fof(f13523,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X24),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X21),X23))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X21),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X24),s('type.bvpSem.state'(X21),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.bvpSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f353,f303])).
fof(f13522,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X20),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X17),X19))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X17),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X20),s('type.bvpSem.state'(X17),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X18),s('type.bvpSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f353,f349])).
fof(f13521,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X16),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X13),X15))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X13),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X16),s('type.bvpSem.state'(X13),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bvpSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f353,f306])).
fof(f13520,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X12),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X9),X11))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X12),s('type.bvpSem.state'(X9),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X10),s('type.bvpSem.state'(X9),X11)))))))) )),
  inference(superposition,[],[f353,f348])).
fof(f13519,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X8),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X5),X7))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X4),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X8),s('type.bvpSem.state'(X4),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),X6),s('type.bvpSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f353,f372])).
fof(f13518,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvpSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f353,f309])).
fof(f5911,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X81),s(bool,X80))) | s(bool,'F_0') = s(bool,happ(s(fun(X82,bool),'const.combin.K_1'(s(bool,X81))),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f505,f543])).
fof(f5912,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,'F_0') = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X88))),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f505,f436])).
fof(f9961,plain,(
  ( ! [X356,X358,X354,X357,X359,X353,X355] : (s(bool,X353) = s(bool,'const.combin.K_2'(s(bool,X354),s(bool,X353))) | s(bool,'F_0') = s(bool,happ(s(fun(X355,bool),'const.combin.K_1'(s(bool,X354))),s(X355,X356))) | s(bool,X353) = s(bool,X357) | s(bool,'T_0') = s(bool,happ(s(fun(X358,bool),'const.combin.K_1'(s(bool,X357))),s(X358,X359)))) )),
  inference(superposition,[],[f505,f544])).
fof(f11775,plain,(
  ( ! [X883,X881,X882,X880,X884,X879] : (s(bool,f(s(X879,sK20(X880,X881,bool,X879)))) != s(bool,happ(s(fun(X882,bool),'const.combin.K_1'(s(bool,X883))),s(X882,X884))) | s(fun(X879,bool),X880) = s(fun(X879,bool),X881) | s(bool,'T_0') = s(bool,X883) | s(bool,'T_0') = s(bool,g(s(X879,sK20(X880,X881,bool,X879))))) )),
  inference(superposition,[],[f378,f567])).
fof(f11977,plain,(
  ( ! [X175,X173,X171,X169,X174,X172,X170] : (s(bool,'const.combin.K_2'(s(bool,X173),s(X174,X175))) != s(bool,happ(s(fun(X170,bool),'const.combin.K_1'(s(bool,X171))),s(X170,X172))) | s(bool,X169) = s(bool,X173) | s(bool,'T_0') = s(bool,X169) | s(bool,'T_0') = s(bool,X171)) )),
  inference(duplicate_literal_removal,[],[f11683])).
fof(f11683,plain,(
  ( ! [X175,X173,X171,X169,X174,X172,X170] : (s(bool,'const.combin.K_2'(s(bool,X173),s(X174,X175))) != s(bool,happ(s(fun(X170,bool),'const.combin.K_1'(s(bool,X171))),s(X170,X172))) | s(bool,X169) = s(bool,X173) | s(bool,'T_0') = s(bool,X169) | s(bool,'T_0') = s(bool,X171) | s(bool,'T_0') = s(bool,X169)) )),
  inference(superposition,[],[f1908,f567])).
fof(f12057,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X2))),s(X1,X3))) = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X0))),s(X4,X5))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(condensation,[],[f12056])).
fof(f12056,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X78))),s(X77,X79))) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75)) )),
  inference(duplicate_literal_removal,[],[f11441])).
fof(f11441,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (s(bool,happ(s(fun(X74,bool),'const.combin.K_1'(s(bool,X75))),s(X74,X76))) = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X78))),s(X77,X79))) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f567,f567])).
fof(f12059,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X0))),s(X4,X5))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f12058])).
fof(f12058,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67)) )),
  inference(duplicate_literal_removal,[],[f11440])).
fof(f11440,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69))) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f567,f566])).
fof(f5424,plain,(
  ( ! [X127,X130,X128,X131,X129] : (s(bool,X127) != s(bool,X130) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X127),s(X128,X129)))) )),
  inference(superposition,[],[f4848,f367])).
fof(f10306,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5))) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f10305])).
fof(f10305,plain,(
  ( ! [X269,X271,X273,X268,X270,X272,X274] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X268),s(X269,X270))) | s(bool,'T_0') = s(bool,X271) | s(bool,X268) = s(bool,X272) | s(bool,'T_0') = s(bool,happ(s(fun(X273,bool),'const.combin.K_1'(s(bool,X272))),s(X273,X274)))) )),
  inference(duplicate_literal_removal,[],[f9947])).
fof(f9947,plain,(
  ( ! [X269,X271,X273,X268,X270,X272,X274] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X268),s(X269,X270))) | s(bool,'T_0') = s(bool,X271) | s(bool,'T_0') = s(bool,X271) | s(bool,X268) = s(bool,X272) | s(bool,'T_0') = s(bool,happ(s(fun(X273,bool),'const.combin.K_1'(s(bool,X272))),s(X273,X274)))) )),
  inference(superposition,[],[f4595,f544])).
fof(f10284,plain,(
  ( ! [X509,X511,X516,X512,X514,X510,X513,X515] : (s(bool,'T_0') = s(bool,happ(s(fun(X512,bool),'const.combin.K_1'(s(bool,X509))),s(X512,X513))) | s(bool,X514) = s(bool,'const.combin.K_2'(s(bool,X509),s(X510,X511))) | s(bool,'T_0') = s(bool,happ(s(fun(X515,bool),'const.combin.K_1'(s(bool,X514))),s(X515,X516)))) )),
  inference(trivial_inequality_removal,[],[f10056])).
fof(f10056,plain,(
  ( ! [X509,X511,X516,X512,X514,X510,X513,X515] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,happ(s(fun(X512,bool),'const.combin.K_1'(s(bool,X509))),s(X512,X513))) | s(bool,X514) = s(bool,'const.combin.K_2'(s(bool,X509),s(X510,X511))) | s(bool,'T_0') = s(bool,happ(s(fun(X515,bool),'const.combin.K_1'(s(bool,X514))),s(X515,X516)))) )),
  inference(superposition,[],[f3381,f544])).
fof(f10196,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2)))) )),
  inference(duplicate_literal_removal,[],[f10193])).
fof(f10193,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2)))) )),
  inference(equality_factoring,[],[f544])).
fof(f13392,plain,(
  ( ! [X4,X0,X3] : (s(bool,'F_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13391,f367])).
fof(f13391,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4)))) )),
  inference(condensation,[],[f13390])).
fof(f13390,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X87,X88))) = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X90))),s(X89,X91))) | s(bool,'T_0') = s(bool,X90) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f11443,f12125])).
fof(f11443,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X87,X88))) = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X90))),s(X89,X91))) | s(bool,'T_0') = s(bool,X90) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,happ(s(fun(X92,bool),'const.combin.K_1'(s(bool,X86))),s(X92,X93)))) )),
  inference(superposition,[],[f567,f2909])).
fof(f11911,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X1) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X4))),s(X3,X5))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f11910])).
fof(f11910,plain,(
  ( ! [X167,X165,X163,X166,X164,X162,X168] : (s(bool,'T_0') = s(bool,X165) | s(bool,X166) = s(bool,happ(s(fun(X162,bool),'const.combin.K_1'(s(bool,X163))),s(X162,X164))) | s(bool,'T_0') = s(bool,happ(s(fun(X167,bool),'const.combin.K_1'(s(bool,X166))),s(X167,X168))) | s(bool,'T_0') = s(bool,X163)) )),
  inference(duplicate_literal_removal,[],[f11806])).
fof(f11806,plain,(
  ( ! [X167,X165,X163,X166,X164,X162,X168] : (s(bool,'T_0') = s(bool,X165) | s(bool,X166) = s(bool,happ(s(fun(X162,bool),'const.combin.K_1'(s(bool,X163))),s(X162,X164))) | s(bool,'T_0') = s(bool,happ(s(fun(X167,bool),'const.combin.K_1'(s(bool,X166))),s(X167,X168))) | s(bool,'T_0') = s(bool,X163) | s(bool,'T_0') = s(bool,X165)) )),
  inference(superposition,[],[f544,f567])).
fof(f504,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X14,X15))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f438,f367])).
fof(f904,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X40),s(X41,X42)))) )),
  inference(superposition,[],[f475,f367])).
fof(f1270,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(bool,X38) = s(bool,'const.combin.K_2'(s(bool,X39),s(bool,X38))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X39),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f504,f436])).
fof(f1319,plain,(
  ( ! [X39,X36,X40] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X36),s(X39,X40))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f504,f367])).
fof(f1846,plain,(
  ( ! [X101,X99,X97,X95,X100,X98,X96] : (s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X96),s(bool,X95))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101)))) )),
  inference(superposition,[],[f504,f543])).
fof(f2826,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,X0),s(X4,X5))) = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f2825])).
fof(f2825,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) )),
  inference(duplicate_literal_removal,[],[f2538])).
fof(f2538,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f566,f566])).
fof(f4591,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) != s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,X45) = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) )),
  inference(duplicate_literal_removal,[],[f4430])).
fof(f4430,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) != s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,X45) = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f1908,f566])).
fof(f4595,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f4422])).
fof(f4422,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1908,f284])).
fof(f4659,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X157),s(X160,X161))) | s(bool,X162) = s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f4595,f367])).
fof(f4660,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X164),s(X166,X167))) | s(bool,X168) = s(bool,happ(s(fun(X163,bool),'const.combin.K_1'(s(bool,X164))),s(X163,X165))) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f4595,f399])).
fof(f4779,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5))) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f4778])).
fof(f4778,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X66),s(X67,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X66) = s(bool,X70) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72)))) )),
  inference(duplicate_literal_removal,[],[f4645])).
fof(f4645,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X66),s(X67,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,X66) = s(bool,X70) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72)))) )),
  inference(superposition,[],[f4595,f543])).
fof(f6781,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X81))),s(bool,X80))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X81),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f904,f543])).
fof(f6782,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X88))),s(bool,X87))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X88),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f904,f436])).
fof(f9306,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'const.combin.K_2'(s(bool,X40),s(X41,X42))) != s(bool,f(s(X37,sK20(X38,X39,bool,X37)))) | s(fun(X37,bool),X38) = s(fun(X37,bool),X39) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,g(s(X37,sK20(X38,X39,bool,X37))))) )),
  inference(superposition,[],[f378,f566])).
fof(f9958,plain,(
  ( ! [X333,X335,X337,X332,X334,X336,X338] : (s(bool,X332) = s(bool,'const.combin.K_2'(s(bool,X333),s(bool,X332))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X333),s(X334,X335))) | s(bool,X332) = s(bool,X336) | s(bool,'T_0') = s(bool,happ(s(fun(X337,bool),'const.combin.K_1'(s(bool,X336))),s(X337,X338)))) )),
  inference(superposition,[],[f504,f544])).
fof(f9964,plain,(
  ( ! [X377,X372,X374,X376,X378,X373,X375] : (s(bool,X372) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X373))),s(bool,X372))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X373),s(X374,X375))) | s(bool,X372) = s(bool,X376) | s(bool,'T_0') = s(bool,happ(s(fun(X377,bool),'const.combin.K_1'(s(bool,X376))),s(X377,X378)))) )),
  inference(superposition,[],[f904,f544])).
fof(f283,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvpSem.state_literal_|49||49|',aHL_FALSITY)).
fof(f438,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f284,f367])).
fof(f475,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X5))),s(X4,X6))) | s(bool,'F_0') = s(bool,X5)) )),
  inference(superposition,[],[f399,f284])).
fof(f613,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) = s(bool,'const.combin.K_2'(s(bool,X10),s(bool,X9))) | s(bool,'F_0') = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f438,f436])).
fof(f913,plain,(
  ( ! [X26,X24,X25] : (s(bool,X24) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X25))),s(bool,X24))) | s(bool,'F_0') = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f475,f436])).
fof(f1844,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X86),s(bool,X85))) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,X87) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X87),s(X88,X89)))) )),
  inference(superposition,[],[f438,f543])).
fof(f1845,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(bool,X90) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X91))),s(bool,X90))) | s(bool,'F_0') = s(bool,X91) | s(bool,X90) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f475,f543])).
fof(f2823,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f2822])).
fof(f2822,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f2548])).
fof(f2548,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f566,f284])).
fof(f2909,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,X112) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X114,X115))) | s(bool,'T_0') = s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113)))) )),
  inference(superposition,[],[f2823,f399])).
fof(f3152,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f3151])).
fof(f3151,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(duplicate_literal_removal,[],[f2894])).
fof(f2894,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(superposition,[],[f2823,f543])).
fof(f3683,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X81),s(bool,X80))) | s(bool,X81) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f3152,f543])).
fof(f3684,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f3152,f436])).
fof(f4879,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'F_0') != s(bool,X99) | s(bool,X102) = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f4753,f367])).
fof(f4880,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'F_0') != s(bool,X104) | s(bool,X106) = s(bool,happ(s(fun(X103,bool),'const.combin.K_1'(s(bool,X104))),s(X103,X105))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f4753,f399])).
fof(f7901,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s(bool,X88) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X89))),s(bool,X88))) | s(bool,X89) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X90,X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f2909,f543])).
fof(f7902,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X96))),s(bool,X95))) | s(bool,X96) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f2909,f436])).
fof(f9286,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK20(X0,X1,X2,bool))) )),
  inference(superposition,[],[f378,f284])).
fof(f9298,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK20(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK20(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f378,f284])).
fof(f9312,plain,(
  ( ! [X54,X50,X48,X53,X49] : (s(X50,f(s(bool,'F_0'))) != s(X50,g(s(bool,'F_0'))) | s(fun(bool,X50),X48) = s(fun(bool,X50),X49) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,sK20(X48,X49,X50,bool)))),s(X53,X54)))) )),
  inference(forward_demodulation,[],[f9296,f367])).
fof(f9296,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(X50,f(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))))) != s(X50,g(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))))) | s(fun(bool,X50),X48) = s(fun(bool,X50),X49) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,sK20(X48,X49,X50,bool)))),s(X53,X54)))) )),
  inference(superposition,[],[f378,f2909])).
fof(f9313,plain,(
  ( ! [X61,X57,X60,X56,X55] : (s(X57,f(s(bool,'F_0'))) != s(X57,g(s(bool,'F_0'))) | s(fun(bool,X57),X55) = s(fun(bool,X57),X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK20(X55,X56,X57,bool)),s(X60,X61)))) )),
  inference(forward_demodulation,[],[f9297,f367])).
fof(f9297,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(X57,f(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))))) != s(X57,g(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))))) | s(fun(bool,X57),X55) = s(fun(bool,X57),X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK20(X55,X56,X57,bool)),s(X60,X61)))) )),
  inference(superposition,[],[f378,f3152])).
fof(f9315,plain,(
  ( ! [X54,X50,X48,X53,X49] : (s(bool,'F_0') != s(bool,f(s(X48,sK20(X49,X50,bool,X48)))) | s(fun(X48,bool),X49) = s(fun(X48,bool),X50) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,g(s(X48,sK20(X49,X50,bool,X48)))))),s(X53,X54)))) )),
  inference(forward_demodulation,[],[f9308,f367])).
fof(f9308,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))) != s(bool,f(s(X48,sK20(X49,X50,bool,X48)))) | s(fun(X48,bool),X49) = s(fun(X48,bool),X50) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,g(s(X48,sK20(X49,X50,bool,X48)))))),s(X53,X54)))) )),
  inference(superposition,[],[f378,f2909])).
fof(f9316,plain,(
  ( ! [X61,X57,X60,X56,X55] : (s(bool,'F_0') != s(bool,f(s(X55,sK20(X56,X57,bool,X55)))) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X55,sK20(X56,X57,bool,X55)))),s(X60,X61)))) )),
  inference(forward_demodulation,[],[f9309,f367])).
fof(f9309,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))) != s(bool,f(s(X55,sK20(X56,X57,bool,X55)))) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X55,sK20(X56,X57,bool,X55)))),s(X60,X61)))) )),
  inference(superposition,[],[f378,f3152])).
fof(f9956,plain,(
  ( ! [X325,X323,X324,X326,X322] : (s(bool,X322) = s(bool,'const.combin.K_2'(s(bool,X323),s(bool,X322))) | s(bool,'F_0') = s(bool,X323) | s(bool,X322) = s(bool,X324) | s(bool,'T_0') = s(bool,happ(s(fun(X325,bool),'const.combin.K_1'(s(bool,X324))),s(X325,X326)))) )),
  inference(superposition,[],[f438,f544])).
fof(f9957,plain,(
  ( ! [X327,X329,X331,X328,X330] : (s(bool,X327) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X328))),s(bool,X327))) | s(bool,'F_0') = s(bool,X328) | s(bool,X327) = s(bool,X329) | s(bool,'T_0') = s(bool,happ(s(fun(X330,bool),'const.combin.K_1'(s(bool,X329))),s(X330,X331)))) )),
  inference(superposition,[],[f475,f544])).
fof(f9973,plain,(
  ( ! [X428,X430,X426,X432,X429,X431,X427] : (s(bool,X426) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X427))),s(bool,X426))) | s(bool,X427) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X428,X429))) | s(bool,X426) = s(bool,X430) | s(bool,'T_0') = s(bool,happ(s(fun(X431,bool),'const.combin.K_1'(s(bool,X430))),s(X431,X432)))) )),
  inference(superposition,[],[f2909,f544])).
fof(f9976,plain,(
  ( ! [X445,X447,X449,X451,X446,X448,X450] : (s(bool,X445) = s(bool,'const.combin.K_2'(s(bool,X446),s(bool,X445))) | s(bool,X446) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X447,X448))) | s(bool,X445) = s(bool,X449) | s(bool,'T_0') = s(bool,happ(s(fun(X450,bool),'const.combin.K_1'(s(bool,X449))),s(X450,X451)))) )),
  inference(superposition,[],[f3152,f544])).
fof(f12052,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f12051])).
fof(f12051,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f11466])).
fof(f11466,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f567,f284])).
fof(f12778,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f12777])).
fof(f12777,plain,(
  ( ! [X261,X257,X259,X260,X258] : (s(bool,X260) != s(bool,happ(s(fun(X258,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X258,X259))) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,'T_0') = s(bool,X257)) )),
  inference(duplicate_literal_removal,[],[f12550])).
fof(f12550,plain,(
  ( ! [X261,X257,X259,X260,X258] : (s(bool,X260) != s(bool,happ(s(fun(X258,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X258,X259))) | s(bool,X260) = s(bool,X261) | s(bool,'T_0') = s(bool,X261) | s(bool,'T_0') = s(bool,X257) | s(bool,'T_0') = s(bool,X257)) )),
  inference(superposition,[],[f4848,f12052])).
fof(f12843,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X1) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X3,X4)))) )),
  inference(condensation,[],[f12842])).
fof(f12842,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(duplicate_literal_removal,[],[f12307])).
fof(f12307,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(superposition,[],[f12052,f544])).
fof(f12845,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X3,X4)))) )),
  inference(condensation,[],[f12844])).
fof(f12844,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) = s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(duplicate_literal_removal,[],[f12303])).
fof(f12303,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) = s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(superposition,[],[f12052,f543])).
fof(f9299,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK20(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK20(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f378,f436])).
fof(f9300,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK20(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK20(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f378,f436])).
fof(f9303,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,f(s(X19,sK20(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,g(s(X19,sK20(X20,X21,bool,X19)))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X22),s(X23,X24)))) )),
  inference(superposition,[],[f378,f543])).
fof(f9304,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X28) != s(bool,f(s(X25,sK20(X26,X27,bool,X25)))) | s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X25,sK20(X26,X27,bool,X25)))),s(X29,X30)))) )),
  inference(superposition,[],[f378,f543])).
fof(f9305,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(bool,'T_0') != s(bool,f(s(X31,sK20(X32,X33,bool,X31)))) | s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,X34) = s(bool,g(s(X31,sK20(X32,X33,bool,X31)))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X34),s(X35,X36)))) )),
  inference(superposition,[],[f378,f543])).
fof(f9775,plain,(
  ( ! [X850,X848,X852,X847,X851,X849] : (s(bool,X850) != s(bool,f(s(X847,sK20(X848,X849,bool,X847)))) | s(fun(X847,bool),X848) = s(fun(X847,bool),X849) | s(bool,'T_0') = s(bool,X850) | s(bool,'T_0') = s(bool,happ(s(fun(X851,bool),'const.combin.K_1'(s(bool,g(s(X847,sK20(X848,X849,bool,X847)))))),s(X851,X852)))) )),
  inference(superposition,[],[f378,f544])).
fof(f9906,plain,(
  ( ! [X831,X829,X833,X830,X834,X832] : (s(bool,X832) != s(bool,f(s(X829,sK20(X830,X831,bool,X829)))) | s(fun(X829,bool),X830) = s(fun(X829,bool),X831) | s(bool,'T_0') = s(bool,g(s(X829,sK20(X830,X831,bool,X829)))) | s(bool,'T_0') = s(bool,happ(s(fun(X833,bool),'const.combin.K_1'(s(bool,X832))),s(X833,X834)))) )),
  inference(superposition,[],[f378,f544])).
fof(f10100,plain,(
  ( ! [X790,X795,X793,X791,X794,X792] : (s(bool,'T_0') != s(bool,f(s(X790,sK20(X791,X792,bool,X790)))) | s(fun(X790,bool),X791) = s(fun(X790,bool),X792) | s(bool,X793) = s(bool,g(s(X790,sK20(X791,X792,bool,X790)))) | s(bool,'T_0') = s(bool,happ(s(fun(X794,bool),'const.combin.K_1'(s(bool,X793))),s(X794,X795)))) )),
  inference(superposition,[],[f378,f544])).
fof(f9292,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(X27,f(s(bool,X28))) != s(X27,g(s(bool,X28))) | s(fun(bool,X27),X25) = s(fun(bool,X27),X26) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK20(X25,X26,X27,bool)),s(X29,X30)))) )),
  inference(superposition,[],[f378,f543])).
fof(f9778,plain,(
  ( ! [X866,X870,X868,X867,X865,X869] : (s(X867,f(s(bool,X868))) != s(X867,g(s(bool,X868))) | s(fun(bool,X867),X865) = s(fun(bool,X867),X866) | s(bool,'T_0') = s(bool,X868) | s(bool,'T_0') = s(bool,happ(s(fun(X869,bool),'const.combin.K_1'(s(bool,sK20(X865,X866,X867,bool)))),s(X869,X870)))) )),
  inference(superposition,[],[f378,f544])).
fof(f3089,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2)))) )),
  inference(equality_factoring,[],[f2823])).
fof(f12586,plain,(
  ( ! [X540,X542,X538,X541,X543,X539,X544] : (s(bool,X542) = s(bool,happ(s(fun(X540,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X540,X541))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X542),s(X543,X544))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X538,X539)))) )),
  inference(superposition,[],[f3152,f12052])).
fof(f12584,plain,(
  ( ! [X528,X530,X526,X529,X531,X525,X527] : (s(bool,X529) = s(bool,happ(s(fun(X527,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X527,X528))) | s(bool,'T_0') = s(bool,happ(s(fun(X530,bool),'const.combin.K_1'(s(bool,X529))),s(X530,X531))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X525,X526)))) )),
  inference(superposition,[],[f2909,f12052])).
fof(f12577,plain,(
  ( ! [X484,X480,X482,X479,X485,X481,X483] : (s(bool,'T_0') = s(bool,happ(s(fun(X482,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X482,X483))) | s(bool,X479) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X484,X485))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X479),s(X480,X481)))) )),
  inference(superposition,[],[f3152,f12052])).
fof(f12570,plain,(
  ( ! [X441,X443,X438,X440,X442,X437,X439] : (s(bool,'T_0') = s(bool,happ(s(fun(X440,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X440,X441))) | s(bool,'F_0') = s(bool,happ(s(fun(X442,bool),'const.combin.K_1'(s(bool,X437))),s(X442,X443))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X437),s(X438,X439)))) )),
  inference(superposition,[],[f505,f12052])).
fof(f12568,plain,(
  ( ! [X428,X424,X426,X423,X429,X425,X427] : (s(bool,'T_0') = s(bool,happ(s(fun(X426,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X426,X427))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X423),s(X428,X429))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X423),s(X424,X425)))) )),
  inference(superposition,[],[f504,f12052])).
fof(f12563,plain,(
  ( ! [X397,X399,X395,X396,X398,X394,X400] : (s(bool,'T_0') = s(bool,happ(s(fun(X397,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X397,X398))) | s(bool,X395) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X399,X400))) | s(bool,'T_0') = s(bool,happ(s(fun(X394,bool),'const.combin.K_1'(s(bool,X395))),s(X394,X396)))) )),
  inference(superposition,[],[f2909,f12052])).
fof(f12334,plain,(
  ( ! [X218,X222,X220,X219,X223,X221,X224] : (s(bool,X220) = s(bool,happ(s(fun(X221,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X221,X222))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X218,X219))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X220),s(X223,X224)))) )),
  inference(superposition,[],[f12052,f3152])).
fof(f12333,plain,(
  ( ! [X212,X216,X215,X213,X211,X217,X214] : (s(bool,X213) = s(bool,happ(s(fun(X214,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X214,X215))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X211,X212))) | s(bool,'T_0') = s(bool,happ(s(fun(X216,bool),'const.combin.K_1'(s(bool,X213))),s(X216,X217)))) )),
  inference(superposition,[],[f12052,f2909])).
fof(f12332,plain,(
  ( ! [X210,X208,X206,X204,X209,X207,X205] : (s(bool,'T_0') = s(bool,happ(s(fun(X207,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X207,X208))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X204),s(X205,X206))) | s(bool,X204) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X209,X210)))) )),
  inference(superposition,[],[f12052,f3152])).
fof(f12327,plain,(
  ( ! [X177,X175,X173,X178,X176,X174,X179] : (s(bool,'T_0') = s(bool,happ(s(fun(X176,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X176,X177))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X173),s(X174,X175))) | s(bool,'F_0') = s(bool,happ(s(fun(X178,bool),'const.combin.K_1'(s(bool,X173))),s(X178,X179)))) )),
  inference(superposition,[],[f12052,f505])).
fof(f12325,plain,(
  ( ! [X165,X163,X161,X159,X164,X162,X160] : (s(bool,'T_0') = s(bool,happ(s(fun(X162,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X162,X163))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X159),s(X160,X161))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X159),s(X164,X165)))) )),
  inference(superposition,[],[f12052,f504])).
fof(f12321,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (s(bool,'T_0') = s(bool,happ(s(fun(X140,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X140,X141))) | s(bool,'T_0') = s(bool,happ(s(fun(X137,bool),'const.combin.K_1'(s(bool,X138))),s(X137,X139))) | s(bool,X138) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X142,X143)))) )),
  inference(superposition,[],[f12052,f2909])).
fof(f11776,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(bool,X886) = s(bool,happ(s(fun(X888,bool),'const.combin.K_1'(s(bool,X889))),s(X888,X890))) | s(bool,'T_0') = s(bool,X889) | s(bool,'T_0') = s(bool,happ(s(fun(X885,bool),'const.combin.K_1'(s(bool,X886))),s(X885,X887)))) )),
  inference(superposition,[],[f399,f567])).
fof(f11733,plain,(
  ( ! [X621,X617,X619,X615,X620,X616,X618,X614] : (s(bool,X619) = s(bool,happ(s(fun(X616,bool),'const.combin.K_1'(s(bool,X617))),s(X616,X618))) | s(bool,'T_0') = s(bool,happ(s(fun(X620,bool),'const.combin.K_1'(s(bool,X619))),s(X620,X621))) | s(bool,'T_0') = s(bool,X617) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X614,X615)))) )),
  inference(superposition,[],[f2909,f567])).
fof(f13416,plain,(
  ( ! [X4,X0,X3] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13415,f399])).
fof(f13415,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X0))),s(X1,X2))),s(X3,X4)))) )),
  inference(condensation,[],[f13414])).
fof(f13414,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X156,bool),'const.combin.K_1'(s(bool,X157))),s(X156,X158))),s(X159,X160))) | s(bool,'T_0') = s(bool,X157) | s(bool,'T_0') = s(bool,X155)) )),
  inference(subsumption_resolution,[],[f11681,f12125])).
fof(f11681,plain,(
  ( ! [X158,X156,X161,X159,X157,X155,X162,X160] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X156,bool),'const.combin.K_1'(s(bool,X157))),s(X156,X158))),s(X159,X160))) | s(bool,'T_0') = s(bool,happ(s(fun(X161,bool),'const.combin.K_1'(s(bool,X155))),s(X161,X162))) | s(bool,'T_0') = s(bool,X157) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f904,f567])).
fof(f11985,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X1) = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X4))),s(X3,X5))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f11984])).
fof(f11984,plain,(
  ( ! [X118,X116,X114,X120,X119,X117,X115] : (s(bool,X118) = s(bool,happ(s(fun(X115,bool),'const.combin.K_1'(s(bool,X116))),s(X115,X117))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,happ(s(fun(X119,bool),'const.combin.K_1'(s(bool,X118))),s(X119,X120))) | s(bool,'T_0') = s(bool,X116)) )),
  inference(duplicate_literal_removal,[],[f11675])).
fof(f11675,plain,(
  ( ! [X118,X116,X114,X120,X119,X117,X115] : (s(bool,X118) = s(bool,happ(s(fun(X115,bool),'const.combin.K_1'(s(bool,X116))),s(X115,X117))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,happ(s(fun(X119,bool),'const.combin.K_1'(s(bool,X118))),s(X119,X120))) | s(bool,'T_0') = s(bool,X116) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f544,f567])).
fof(f11997,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X0))),s(X2,X3))) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X1))),s(X4,X5)))) )),
  inference(condensation,[],[f11996])).
fof(f11996,plain,(
  ( ! [X101,X99,X97,X95,X100,X98,X96] : (s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,X96) | s(bool,X99) = s(bool,happ(s(fun(X95,bool),'const.combin.K_1'(s(bool,X96))),s(X95,X97))) | s(bool,'T_0') = s(bool,happ(s(fun(X100,bool),'const.combin.K_1'(s(bool,X99))),s(X100,X101)))) )),
  inference(duplicate_literal_removal,[],[f11650])).
fof(f11650,plain,(
  ( ! [X101,X99,X97,X95,X100,X98,X96] : (s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X98) | s(bool,X99) = s(bool,happ(s(fun(X95,bool),'const.combin.K_1'(s(bool,X96))),s(X95,X97))) | s(bool,'T_0') = s(bool,happ(s(fun(X100,bool),'const.combin.K_1'(s(bool,X99))),s(X100,X101)))) )),
  inference(superposition,[],[f567,f544])).
fof(f13410,plain,(
  ( ! [X4,X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X1,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13409,f367])).
fof(f13409,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))))),s(X1,X4)))) )),
  inference(condensation,[],[f13408])).
fof(f13408,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (s(bool,X89) = s(bool,happ(s(fun(X90,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X87,X88))))),s(X90,X91))) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f11480,f12125])).
fof(f11480,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s(bool,X89) = s(bool,happ(s(fun(X90,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X87,X88))))),s(X90,X91))) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X89) | s(bool,'T_0') = s(bool,happ(s(fun(X92,bool),'const.combin.K_1'(s(bool,X86))),s(X92,X93)))) )),
  inference(superposition,[],[f567,f2909])).
fof(f11465,plain,(
  ( ! [X269,X271,X267,X268,X270,X266] : (s(bool,X267) = s(bool,happ(s(fun(X269,bool),'const.combin.K_1'(s(bool,X270))),s(X269,X271))) | s(bool,'T_0') = s(bool,X270) | s(bool,'T_0') = s(bool,happ(s(fun(X266,bool),'const.combin.K_1'(s(bool,X267))),s(X266,X268)))) )),
  inference(superposition,[],[f567,f399])).
fof(f11461,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (s(bool,X240) = s(bool,happ(s(fun(X241,bool),'const.combin.K_1'(s(bool,X242))),s(X241,X243))) | s(bool,'T_0') = s(bool,X242) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X238,X239))) | s(bool,'T_0') = s(bool,happ(s(fun(X244,bool),'const.combin.K_1'(s(bool,X240))),s(X244,X245)))) )),
  inference(superposition,[],[f567,f2909])).
fof(f13404,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f13403])).
fof(f13403,plain,(
  ( ! [X231,X237,X230,X236,X234,X232] : (s(bool,'T_0') = s(bool,X234) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X230),s(X231,X232))) | s(bool,X230) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X236,X237)))) )),
  inference(subsumption_resolution,[],[f11460,f12125])).
fof(f11460,plain,(
  ( ! [X231,X237,X235,X233,X230,X236,X234,X232] : (s(bool,'T_0') = s(bool,happ(s(fun(X233,bool),'const.combin.K_1'(s(bool,X234))),s(X233,X235))) | s(bool,'T_0') = s(bool,X234) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X230),s(X231,X232))) | s(bool,X230) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X236,X237)))) )),
  inference(superposition,[],[f567,f3152])).
fof(f13401,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'F_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4)))) )),
  inference(condensation,[],[f13400])).
fof(f13400,plain,(
  ( ! [X198,X196,X194,X200,X195,X201] : (s(bool,'T_0') = s(bool,X198) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X194),s(X195,X196))) | s(bool,'F_0') = s(bool,happ(s(fun(X200,bool),'const.combin.K_1'(s(bool,X194))),s(X200,X201)))) )),
  inference(subsumption_resolution,[],[f11455,f12125])).
fof(f11455,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195,X201] : (s(bool,'T_0') = s(bool,happ(s(fun(X197,bool),'const.combin.K_1'(s(bool,X198))),s(X197,X199))) | s(bool,'T_0') = s(bool,X198) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X194),s(X195,X196))) | s(bool,'F_0') = s(bool,happ(s(fun(X200,bool),'const.combin.K_1'(s(bool,X194))),s(X200,X201)))) )),
  inference(superposition,[],[f567,f505])).
fof(f13398,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f13397])).
fof(f13397,plain,(
  ( ! [X185,X182,X180,X178,X184,X179] : (s(bool,'T_0') = s(bool,X182) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X178),s(X179,X180))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X178),s(X184,X185)))) )),
  inference(subsumption_resolution,[],[f11453,f12125])).
fof(f11453,plain,(
  ( ! [X185,X182,X180,X178,X184,X183,X181,X179] : (s(bool,'T_0') = s(bool,happ(s(fun(X181,bool),'const.combin.K_1'(s(bool,X182))),s(X181,X183))) | s(bool,'T_0') = s(bool,X182) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X178),s(X179,X180))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X178),s(X184,X185)))) )),
  inference(superposition,[],[f567,f504])).
fof(f13395,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(condensation,[],[f13394])).
fof(f13394,plain,(
  ( ! [X173,X176,X174,X172] : (s(bool,'T_0') = s(bool,X176) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X172),s(X173,X174))) | s(bool,'F_0') = s(bool,X172)) )),
  inference(subsumption_resolution,[],[f11452,f12125])).
fof(f11452,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (s(bool,'T_0') = s(bool,happ(s(fun(X175,bool),'const.combin.K_1'(s(bool,X176))),s(X175,X177))) | s(bool,'T_0') = s(bool,X176) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X172),s(X173,X174))) | s(bool,'F_0') = s(bool,X172)) )),
  inference(superposition,[],[f567,f438])).
fof(f12061,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X0))),s(X2,X3))) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X1))),s(X4,X5)))) )),
  inference(condensation,[],[f12060])).
fof(f12060,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,X53) = s(bool,happ(s(fun(X54,bool),'const.combin.K_1'(s(bool,X55))),s(X54,X56))) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X57,bool),'const.combin.K_1'(s(bool,X53))),s(X57,X58)))) )),
  inference(duplicate_literal_removal,[],[f11438])).
fof(f11438,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,X53) = s(bool,happ(s(fun(X54,bool),'const.combin.K_1'(s(bool,X55))),s(X54,X56))) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X57,bool),'const.combin.K_1'(s(bool,X53))),s(X57,X58)))) )),
  inference(superposition,[],[f567,f544])).
fof(f13383,plain,(
  ( ! [X68,X66,X67] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X67,X68))) | s(bool,'T_0') = s(bool,X66)) )),
  inference(forward_demodulation,[],[f13382,f399])).
fof(f13382,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X67,X68))) != s(bool,happ(s(fun(X69,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X69,X70))) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f10796,f12125])).
fof(f10796,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X67,X68))) != s(bool,happ(s(fun(X69,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X69,X70))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,happ(s(fun(X71,bool),'const.combin.K_1'(s(bool,X66))),s(X71,X72)))) )),
  inference(superposition,[],[f10201,f2909])).
fof(f10198,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f10191])).
fof(f10191,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X1))),s(X2,X3)))) )),
  inference(equality_factoring,[],[f544])).
fof(f10185,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X1))),s(X2,X3)))) )),
  inference(equality_factoring,[],[f544])).
fof(f10101,plain,(
  ( ! [X798,X796,X800,X799,X797,X801] : (s(bool,'T_0') = s(bool,X797) | s(bool,X799) = s(bool,happ(s(fun(X796,bool),'const.combin.K_1'(s(bool,X797))),s(X796,X798))) | s(bool,'T_0') = s(bool,happ(s(fun(X800,bool),'const.combin.K_1'(s(bool,X799))),s(X800,X801)))) )),
  inference(superposition,[],[f399,f544])).
fof(f13370,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f13369])).
fof(f13369,plain,(
  ( ! [X528,X530,X526,X529,X531,X527] : (s(bool,'T_0') != s(bool,X526) | s(bool,'T_0') = s(bool,happ(s(fun(X527,bool),'const.combin.K_1'(s(bool,X526))),s(X527,X528))) | s(bool,'T_0') = s(bool,happ(s(fun(X530,bool),'const.combin.K_1'(s(bool,X529))),s(X530,X531)))) )),
  inference(subsumption_resolution,[],[f10058,f2143])).
fof(f10058,plain,(
  ( ! [X528,X530,X524,X526,X529,X531,X525,X527] : (s(bool,'T_0') != s(bool,X526) | s(bool,'T_0') = s(bool,happ(s(fun(X527,bool),'const.combin.K_1'(s(bool,X526))),s(X527,X528))) | s(bool,X529) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X524,X525))) | s(bool,'T_0') = s(bool,happ(s(fun(X530,bool),'const.combin.K_1'(s(bool,X529))),s(X530,X531)))) )),
  inference(superposition,[],[f2143,f544])).
fof(f10346,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X0,X1))) | s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) )),
  inference(condensation,[],[f9870])).
fof(f9870,plain,(
  ( ! [X609,X611,X607,X612,X608,X610] : (s(bool,'T_0') != s(bool,X609) | s(bool,X610) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X607,X608))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X607,X608))) | s(bool,'T_0') = s(bool,happ(s(fun(X611,bool),'const.combin.K_1'(s(bool,X609))),s(X611,X612)))) )),
  inference(superposition,[],[f3089,f544])).
fof(f13355,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f13354])).
fof(f13354,plain,(
  ( ! [X553,X551,X547,X552,X554,X550] : (s(bool,'T_0') != s(bool,X550) | s(bool,'T_0') = s(bool,happ(s(fun(X551,bool),'const.combin.K_1'(s(bool,X547))),s(X551,X552))) | s(bool,'T_0') = s(bool,happ(s(fun(X553,bool),'const.combin.K_1'(s(bool,X550))),s(X553,X554)))) )),
  inference(subsumption_resolution,[],[f9862,f3381])).
fof(f9862,plain,(
  ( ! [X553,X549,X551,X547,X552,X554,X548,X550] : (s(bool,'T_0') != s(bool,X550) | s(bool,'T_0') = s(bool,happ(s(fun(X551,bool),'const.combin.K_1'(s(bool,X547))),s(X551,X552))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X547),s(X548,X549))) | s(bool,'T_0') = s(bool,happ(s(fun(X553,bool),'const.combin.K_1'(s(bool,X550))),s(X553,X554)))) )),
  inference(superposition,[],[f3381,f544])).
fof(f10703,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f10702])).
fof(f10702,plain,(
  ( ! [X528,X530,X529,X525] : (s(bool,'T_0') != s(bool,X528) | s(bool,'T_0') = s(bool,X525) | s(bool,'T_0') = s(bool,happ(s(fun(X529,bool),'const.combin.K_1'(s(bool,X528))),s(X529,X530)))) )),
  inference(subsumption_resolution,[],[f9859,f2851])).
fof(f9859,plain,(
  ( ! [X528,X530,X526,X529,X525,X527] : (s(bool,'T_0') != s(bool,X528) | s(bool,'T_0') = s(bool,X525) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X525),s(X526,X527))) | s(bool,'T_0') = s(bool,happ(s(fun(X529,bool),'const.combin.K_1'(s(bool,X528))),s(X529,X530)))) )),
  inference(superposition,[],[f2851,f544])).
fof(f9471,plain,(
  ( ! [X185,X182,X186,X184,X183,X181] : (s(bool,'T_0') = s(bool,X182) | s(bool,X184) = s(bool,happ(s(fun(X181,bool),'const.combin.K_1'(s(bool,X182))),s(X181,X183))) | s(bool,'T_0') = s(bool,happ(s(fun(X185,bool),'const.combin.K_1'(s(bool,X184))),s(X185,X186)))) )),
  inference(superposition,[],[f544,f399])).
fof(f8691,plain,(
  ( ! [X165,X166,X162] : (s(bool,'T_0') != s(bool,X162) | s(bool,'T_0') = s(bool,happ(s(fun(X165,bool),'const.combin.K_1'(s(bool,X162))),s(X165,X166)))) )),
  inference(superposition,[],[f3381,f367])).
fof(f8692,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122] : (s(bool,'T_0') = s(bool,happ(s(fun(X124,bool),'const.combin.K_1'(s(bool,X121))),s(X124,X125))) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X121),s(X122,X123))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128)))) )),
  inference(trivial_inequality_removal,[],[f8686])).
fof(f8686,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,happ(s(fun(X124,bool),'const.combin.K_1'(s(bool,X121))),s(X124,X125))) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X121),s(X122,X123))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128)))) )),
  inference(superposition,[],[f3381,f543])).
fof(f8676,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') != s(bool,X59) | s(bool,'T_0') = s(bool,happ(s(fun(X60,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X60,X61))) | s(bool,'T_0') = s(bool,happ(s(fun(X62,bool),'const.combin.K_1'(s(bool,X59))),s(X62,X63)))) )),
  inference(superposition,[],[f3381,f2909])).
fof(f13321,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238] : (s(bool,'T_0') = s(bool,happ(s(fun(X241,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X241,X242))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X238),s(X239,X240))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X238),s(X243,X244)))) )),
  inference(forward_demodulation,[],[f8562,f367])).
fof(f8562,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X236] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X238),s(X239,X240))) | s(bool,'T_0') = s(bool,happ(s(fun(X241,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X236,X237))))),s(X241,X242))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X238),s(X243,X244)))) )),
  inference(superposition,[],[f3381,f3152])).
fof(f13319,plain,(
  ( ! [X61,X64,X65] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X64,X65))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(forward_demodulation,[],[f13318,f367])).
fof(f13318,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X62,X63))),s(X64,X65))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f8540,f12125])).
fof(f8540,plain,(
  ( ! [X61,X66,X64,X62,X67,X65,X63] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X62,X63))),s(X64,X65))) | s(bool,'T_0') = s(bool,happ(s(fun(X66,bool),'const.combin.K_1'(s(bool,X61))),s(X66,X67))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3381,f2823])).
fof(f13313,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f13312])).
fof(f13312,plain,(
  ( ! [X30,X35,X31,X29,X36,X32] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X30),s(X31,X32))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X30),s(X35,X36)))) )),
  inference(subsumption_resolution,[],[f8536,f12125])).
fof(f8536,plain,(
  ( ! [X30,X35,X33,X31,X29,X36,X34,X32] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X30),s(X31,X32))) | s(bool,'T_0') = s(bool,happ(s(fun(X33,bool),'const.combin.K_1'(s(bool,X29))),s(X33,X34))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X30),s(X35,X36)))) )),
  inference(superposition,[],[f3381,f543])).
fof(f8216,plain,(
  ( ! [X218,X222,X220,X219,X223,X221,X224] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X221,X222))) | s(bool,'T_0') = s(bool,happ(s(fun(X218,bool),'const.combin.K_1'(s(bool,X219))),s(X218,X220))) | s(bool,X219) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X223,X224)))) )),
  inference(superposition,[],[f2823,f2909])).
fof(f8145,plain,(
  ( ! [X327,X333,X329,X331,X332,X328,X330] : (s(bool,X329) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X330,X331))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X327,X328))) | s(bool,'T_0') = s(bool,happ(s(fun(X332,bool),'const.combin.K_1'(s(bool,X329))),s(X332,X333)))) )),
  inference(superposition,[],[f2823,f2909])).
fof(f8100,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') != s(bool,X17) | s(bool,X18) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X15,X16))) | s(bool,'T_0') = s(bool,happ(s(fun(X19,bool),'const.combin.K_1'(s(bool,X17))),s(X19,X20)))) )),
  inference(superposition,[],[f3089,f2909])).
fof(f13293,plain,(
  ( ! [X218,X222,X221] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X221,X222))) | s(bool,'T_0') = s(bool,X218)) )),
  inference(forward_demodulation,[],[f13292,f367])).
fof(f13292,plain,(
  ( ! [X218,X222,X220,X219,X221] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X219,X220))),s(X221,X222))) | s(bool,'T_0') = s(bool,X218)) )),
  inference(subsumption_resolution,[],[f8028,f12125])).
fof(f8028,plain,(
  ( ! [X218,X222,X220,X219,X223,X221,X224] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X219,X220))),s(X221,X222))) | s(bool,'T_0') = s(bool,X218) | s(bool,'T_0') = s(bool,happ(s(fun(X223,bool),'const.combin.K_1'(s(bool,X218))),s(X223,X224)))) )),
  inference(superposition,[],[f2851,f2909])).
fof(f13285,plain,(
  ( ! [X167,X163,X166,X168] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X166),s(X167,X168))) | s(bool,X163) = s(bool,X166) | s(bool,'T_0') = s(bool,X163)) )),
  inference(forward_demodulation,[],[f13284,f367])).
fof(f13284,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X164,X165))) != s(bool,'const.combin.K_2'(s(bool,X166),s(X167,X168))) | s(bool,X163) = s(bool,X166) | s(bool,'T_0') = s(bool,X163)) )),
  inference(subsumption_resolution,[],[f8021,f12125])).
fof(f8021,plain,(
  ( ! [X167,X165,X163,X169,X166,X164,X170,X168] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X164,X165))) != s(bool,'const.combin.K_2'(s(bool,X166),s(X167,X168))) | s(bool,X163) = s(bool,X166) | s(bool,'T_0') = s(bool,X163) | s(bool,'T_0') = s(bool,happ(s(fun(X169,bool),'const.combin.K_1'(s(bool,X163))),s(X169,X170)))) )),
  inference(superposition,[],[f1908,f2909])).
fof(f13280,plain,(
  ( ! [X4,X0,X3] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13279,f367])).
fof(f13279,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f13278])).
fof(f13278,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X125,X126))) = s(bool,'const.combin.K_2'(s(bool,X127),s(X128,X129))) | s(bool,'T_0') = s(bool,X127) | s(bool,'T_0') = s(bool,X124)) )),
  inference(subsumption_resolution,[],[f8016,f12125])).
fof(f8016,plain,(
  ( ! [X127,X125,X130,X128,X126,X124,X131,X129] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X125,X126))) = s(bool,'const.combin.K_2'(s(bool,X127),s(X128,X129))) | s(bool,'T_0') = s(bool,X127) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,happ(s(fun(X130,bool),'const.combin.K_1'(s(bool,X124))),s(X130,X131)))) )),
  inference(superposition,[],[f566,f2909])).
fof(f13276,plain,(
  ( ! [X4,X0,X3] : (s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13275,f367])).
fof(f13275,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))),s(X3,X4)))) )),
  inference(condensation,[],[f13274])).
fof(f13274,plain,(
  ( ! [X121,X118,X116,X120,X119,X117] : (s(bool,X119) = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X117,X118))),s(X120,X121))) | s(bool,'T_0') = s(bool,X116) | s(bool,'T_0') = s(bool,X119)) )),
  inference(subsumption_resolution,[],[f8015,f12125])).
fof(f8015,plain,(
  ( ! [X123,X121,X118,X116,X122,X120,X119,X117] : (s(bool,X119) = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X117,X118))),s(X120,X121))) | s(bool,'T_0') = s(bool,X116) | s(bool,'T_0') = s(bool,X119) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X116))),s(X122,X123)))) )),
  inference(superposition,[],[f566,f2909])).
fof(f13272,plain,(
  ( ! [X36] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X36)) )),
  inference(forward_demodulation,[],[f13271,f367])).
fof(f13271,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X37,X38)))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f8005,f12125])).
fof(f8005,plain,(
  ( ! [X39,X37,X38,X36,X40] : (~p(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X37,X38)))) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,happ(s(fun(X39,bool),'const.combin.K_1'(s(bool,X36))),s(X39,X40)))) )),
  inference(superposition,[],[f439,f2909])).
fof(f7995,plain,(
  ( ! [X76,X74,X72,X71,X77,X75,X73] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X74,X75))) | s(bool,X72) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X76,X77))) | s(bool,'T_0') = s(bool,happ(s(fun(X71,bool),'const.combin.K_1'(s(bool,X72))),s(X71,X73)))) )),
  inference(superposition,[],[f2909,f2823])).
fof(f13266,plain,(
  ( ! [X4,X0,X3] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13265,f367])).
fof(f13265,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f13264])).
fof(f13264,plain,(
  ( ! [X196,X194,X200,X197,X195,X201] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X200,X201))) = s(bool,'const.combin.K_2'(s(bool,X194),s(X195,X196))) | s(bool,'T_0') = s(bool,X194) | s(bool,'T_0') = s(bool,X197)) )),
  inference(subsumption_resolution,[],[f7878,f12125])).
fof(f7878,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195,X201] : (s(bool,'T_0') = s(bool,happ(s(fun(X198,bool),'const.combin.K_1'(s(bool,X197))),s(X198,X199))) | s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X200,X201))) = s(bool,'const.combin.K_2'(s(bool,X194),s(X195,X196))) | s(bool,'T_0') = s(bool,X194) | s(bool,'T_0') = s(bool,X197)) )),
  inference(superposition,[],[f2909,f566])).
fof(f8368,plain,(
  ( ! [X175,X171,X169,X176,X172,X170,X168] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X168),s(X169,X170))) | s(bool,'T_0') = s(bool,happ(s(fun(X171,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X171,X172))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X168),s(X175,X176)))) )),
  inference(forward_demodulation,[],[f7875,f367])).
fof(f7875,plain,(
  ( ! [X175,X173,X171,X169,X176,X174,X172,X170,X168] : (s(bool,'T_0') = s(bool,happ(s(fun(X171,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X171,X172))) | s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X173,X174))) = s(bool,'const.combin.K_2'(s(bool,X168),s(X169,X170))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X168),s(X175,X176)))) )),
  inference(superposition,[],[f2909,f504])).
fof(f13260,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f13259])).
fof(f13259,plain,(
  ( ! [X37,X43,X41,X38,X44,X42] : (s(bool,X37) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X41,X42))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X37),s(X43,X44)))) )),
  inference(subsumption_resolution,[],[f7858,f12125])).
fof(f7858,plain,(
  ( ! [X39,X37,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,happ(s(fun(X39,bool),'const.combin.K_1'(s(bool,X38))),s(X39,X40))) | s(bool,X37) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X41,X42))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X37),s(X43,X44)))) )),
  inference(superposition,[],[f2909,f543])).
fof(f7848,plain,(
  ( ! [X146,X144,X142,X140,X145,X143,X141] : (s(bool,X144) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X142,X143))) | s(bool,'T_0') = s(bool,happ(s(fun(X145,bool),'const.combin.K_1'(s(bool,X144))),s(X145,X146))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X140,X141)))) )),
  inference(superposition,[],[f2909,f2823])).
fof(f13256,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f13255])).
fof(f13255,plain,(
  ( ! [X125,X130,X126,X124,X131,X129] : (s(bool,'T_0') = s(bool,X126) | s(bool,X129) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X124,X125))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X129),s(X130,X131)))) )),
  inference(subsumption_resolution,[],[f7846,f12125])).
fof(f7846,plain,(
  ( ! [X127,X125,X130,X128,X126,X124,X131,X129] : (s(bool,'T_0') = s(bool,X126) | s(bool,'T_0') = s(bool,happ(s(fun(X127,bool),'const.combin.K_1'(s(bool,X126))),s(X127,X128))) | s(bool,X129) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X124,X125))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X129),s(X130,X131)))) )),
  inference(superposition,[],[f2909,f543])).
fof(f13246,plain,(
  ( ! [X4,X0,X3] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13245,f367])).
fof(f13245,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f13244])).
fof(f13244,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X57,X58))) = s(bool,'const.combin.K_2'(s(bool,X54),s(X55,X56))) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f7694,f12125])).
fof(f7694,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55,X53] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X57,X58))) = s(bool,'const.combin.K_2'(s(bool,X54),s(X55,X56))) | s(bool,'T_0') = s(bool,happ(s(fun(X59,bool),'const.combin.K_1'(s(bool,X53))),s(X59,X60))) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f2909,f566])).
fof(f13242,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f13241])).
fof(f13241,plain,(
  ( ! [X30,X35,X31,X29,X36,X32] : (s(bool,X30) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X31,X32))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X30),s(X35,X36)))) )),
  inference(subsumption_resolution,[],[f7691,f12125])).
fof(f7691,plain,(
  ( ! [X30,X35,X33,X31,X29,X36,X34,X32] : (s(bool,X30) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X31,X32))) | s(bool,'T_0') = s(bool,happ(s(fun(X33,bool),'const.combin.K_1'(s(bool,X29))),s(X33,X34))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X30),s(X35,X36)))) )),
  inference(superposition,[],[f2909,f543])).
fof(f7490,plain,(
  ( ! [X138,X136,X137] : (s(bool,'T_0') != s(bool,X136) | s(bool,'T_0') = s(bool,happ(s(fun(X137,bool),'const.combin.K_1'(s(bool,X136))),s(X137,X138)))) )),
  inference(superposition,[],[f2143,f367])).
fof(f13238,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (s(bool,'T_0') != s(bool,X104) | s(bool,'T_0') = s(bool,happ(s(fun(X105,bool),'const.combin.K_1'(s(bool,X104))),s(X105,X106))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109)))) )),
  inference(subsumption_resolution,[],[f7486,f2247])).
fof(f7486,plain,(
  ( ! [X103,X109,X107,X105,X102,X108,X106,X104] : (s(bool,'T_0') != s(bool,X104) | s(bool,'T_0') = s(bool,happ(s(fun(X105,bool),'const.combin.K_1'(s(bool,X104))),s(X105,X106))) | s(bool,X107) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X102,X103))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109)))) )),
  inference(superposition,[],[f2143,f543])).
fof(f7560,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f7559])).
fof(f7559,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,'T_0') != s(bool,X82) | s(bool,'T_0') = s(bool,happ(s(fun(X83,bool),'const.combin.K_1'(s(bool,X82))),s(X83,X84))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f7483,f1920])).
fof(f7483,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (s(bool,'T_0') != s(bool,X82) | s(bool,'T_0') = s(bool,happ(s(fun(X83,bool),'const.combin.K_1'(s(bool,X82))),s(X83,X84))) | s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X80,X81))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f2143,f436])).
fof(f7554,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f7553])).
fof(f7553,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'T_0') != s(bool,X64) | s(bool,'T_0') = s(bool,happ(s(fun(X65,bool),'const.combin.K_1'(s(bool,X64))),s(X65,X66))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f7480,f1920])).
fof(f7480,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s(bool,'T_0') != s(bool,X64) | s(bool,'T_0') = s(bool,happ(s(fun(X65,bool),'const.combin.K_1'(s(bool,X64))),s(X65,X66))) | s(bool,X67) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X62,X63))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f2143,f436])).
fof(f7478,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,'T_0') != s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,X52))),s(X53,X54))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X55,X56)))) )),
  inference(superposition,[],[f2143,f3152])).
fof(f7493,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,X1)) )),
  inference(condensation,[],[f7492])).
fof(f7492,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') != s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(X29,bool),'const.combin.K_1'(s(bool,X28))),s(X29,X30))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(duplicate_literal_removal,[],[f7474])).
fof(f7474,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') != s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(X29,bool),'const.combin.K_1'(s(bool,X28))),s(X29,X30))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f2143,f543])).
fof(f7108,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X141,X142))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X138),s(X139,X140))) | s(bool,'T_0') = s(bool,happ(s(fun(X143,bool),'const.combin.K_1'(s(bool,X138))),s(X143,X144)))) )),
  inference(superposition,[],[f438,f904])).
fof(f7046,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X193] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X191,X192))) | s(bool,'T_0') = s(bool,happ(s(fun(X188,bool),'const.combin.K_1'(s(bool,X189))),s(X188,X190))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X189),s(X193,X194)))) )),
  inference(superposition,[],[f2823,f904])).
fof(f5422,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s(bool,X117) != s(bool,X118) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X115,X116))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X117),s(X120,X121)))) )),
  inference(superposition,[],[f4848,f3152])).
fof(f5466,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X3,X4)))) )),
  inference(condensation,[],[f5465])).
fof(f5465,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(duplicate_literal_removal,[],[f5404])).
fof(f5404,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(superposition,[],[f4848,f543])).
fof(f4014,plain,(
  ( ! [X218,X216,X215,X213,X219,X217,X214] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X215),s(X216,X217))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X213,X214))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X215),s(X218,X219)))) )),
  inference(superposition,[],[f2851,f3152])).
fof(f4013,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (s(bool,X208) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X209,X210))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X206,X207))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X208),s(X211,X212)))) )),
  inference(superposition,[],[f2823,f3152])).
fof(f3907,plain,(
  ( ! [X198,X202,X200,X199,X197,X203,X201] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X200,X201))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X197),s(X198,X199))) | s(bool,X197) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X202,X203)))) )),
  inference(superposition,[],[f2823,f3152])).
fof(f3877,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(bool,X122) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X120,X121))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X122),s(X123,X124))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X118,X119)))) )),
  inference(superposition,[],[f3152,f2823])).
fof(f3752,plain,(
  ( ! [X94,X92,X97,X95,X93,X98,X96] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X95,X96))) | s(bool,X92) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f3152,f2823])).
fof(f3606,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X0,X1))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3)))) )),
  inference(condensation,[],[f3604])).
fof(f3604,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X73,X74))) | s(bool,X75) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X71,X72))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X71,X72)))) )),
  inference(superposition,[],[f3089,f2823])).
fof(f3380,plain,(
  ( ! [X109,X107,X110,X108,X106] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X106),s(X109,X110))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X106),s(X107,X108)))) )),
  inference(superposition,[],[f2851,f367])).
fof(f3494,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f3493])).
fof(f3493,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X20),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(duplicate_literal_removal,[],[f3363])).
fof(f3363,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X20),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(superposition,[],[f2851,f543])).
fof(f3029,plain,(
  ( ! [X165,X163,X161,X159,X164,X162,X160] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X162,X163))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X159),s(X164,X165))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X159),s(X160,X161)))) )),
  inference(superposition,[],[f504,f2823])).
fof(f2905,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X89] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X92,X93))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X89),s(X90,X91))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X89),s(X94,X95)))) )),
  inference(superposition,[],[f2823,f504])).
fof(f13131,plain,(
  ( ! [X4,X0,X3] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f13130,f367])).
fof(f13130,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))),s(X3,X4)))) )),
  inference(condensation,[],[f13129])).
fof(f13129,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))),s(X52,X53))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f2658,f2851])).
fof(f2658,plain,(
  ( ! [X54,X52,X50,X48,X55,X53,X51,X49] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))),s(X52,X53))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X48),s(X54,X55))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f504,f566])).
fof(f13127,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(condensation,[],[f13126])).
fof(f13126,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,happ(s(fun(X68,bool),'const.combin.K_1'(s(bool,X69))),s(X68,X70))) | s(bool,'F_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f2539,f2851])).
fof(f2539,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X71),s(X72,X73))) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,happ(s(fun(X68,bool),'const.combin.K_1'(s(bool,X69))),s(X68,X70))) | s(bool,'F_0') = s(bool,X69)) )),
  inference(superposition,[],[f566,f475])).
fof(f6347,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X0))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f6346])).
fof(f6346,plain,(
  ( ! [X12,X15,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),'const.combin.K_1'(s(bool,X11))),s(X15,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f5871,f2851])).
fof(f5871,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X13,X14))) | s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),'const.combin.K_1'(s(bool,X11))),s(X15,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f505,f436])).
fof(f905,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(X48,bool),'const.combin.K_1'(s(bool,X46))),s(X48,X49))) | s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,X46))),s(X45,X47)))) )),
  inference(superposition,[],[f475,f399])).
fof(f505,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X19,X20))) | s(bool,'F_0') = s(bool,happ(s(fun(X16,bool),'const.combin.K_1'(s(bool,X17))),s(X16,X18)))) )),
  inference(superposition,[],[f438,f399])).
fof(f1917,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f1910])).
fof(f1910,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3)))) )),
  inference(equality_factoring,[],[f543])).
fof(f1904,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3)))) )),
  inference(equality_factoring,[],[f543])).
fof(f1691,plain,(
  ( ! [X111,X109,X107,X112,X110,X108] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X107),s(X110,X111))) | s(bool,X112) = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f543,f367])).
fof(f1671,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,'T_0') = s(bool,X64) | s(bool,X67) = s(bool,'const.combin.K_2'(s(bool,X64),s(X65,X66))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X67),s(X68,X69)))) )),
  inference(superposition,[],[f543,f367])).
fof(f12217,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X36),s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X34),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X33),X35))))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X33),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X36),s('type.bvpSem.state'(X33),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X34),s('type.bvpSem.state'(X33),X35)))))))) )),
  inference(superposition,[],[f352,f352])).
fof(f11970,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X3))),s(X2,X4))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f11969])).
fof(f11969,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (s(bool,X292) != s(bool,happ(s(fun(X289,bool),'const.combin.K_1'(s(bool,X290))),s(X289,X291))) | s(bool,X292) = s(bool,X293) | s(bool,'T_0') = s(bool,X293) | s(bool,'T_0') = s(bool,X288) | s(bool,'T_0') = s(bool,X290)) )),
  inference(duplicate_literal_removal,[],[f11700])).
fof(f11700,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (s(bool,X292) != s(bool,happ(s(fun(X289,bool),'const.combin.K_1'(s(bool,X290))),s(X289,X291))) | s(bool,X292) = s(bool,X293) | s(bool,'T_0') = s(bool,X293) | s(bool,'T_0') = s(bool,X288) | s(bool,'T_0') = s(bool,X290) | s(bool,'T_0') = s(bool,X288)) )),
  inference(superposition,[],[f4848,f567])).
fof(f12125,plain,(
  ( ! [X4,X0,X3] : (s(bool,'T_0') != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f11976,f367])).
fof(f11976,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X0))),s(X3,X4)))) )),
  inference(condensation,[],[f11975])).
fof(f11975,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X187,X188))) != s(bool,happ(s(fun(X184,bool),'const.combin.K_1'(s(bool,X185))),s(X184,X186))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X185)) )),
  inference(duplicate_literal_removal,[],[f11685])).
fof(f11685,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X187,X188))) != s(bool,happ(s(fun(X184,bool),'const.combin.K_1'(s(bool,X185))),s(X184,X186))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X185) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f1920,f567])).
fof(f11158,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X19) != s(bool,happ(s(fun(X20,bool),'const.combin.K_1'(s(bool,X18))),s(X20,X21))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X19),s(X22,X23))) | s(bool,X18) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f11011,f436])).
fof(f11157,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (s(bool,X10) != s(bool,happ(s(fun(X11,bool),'const.combin.K_1'(s(bool,X9))),s(X11,X12))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X15),s(X16,X17)))) )),
  inference(superposition,[],[f11011,f543])).
fof(f11156,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X0))),s(X2,X3))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,happ(s(fun(X7,bool),'const.combin.K_1'(s(bool,X6))),s(X7,X8)))) )),
  inference(superposition,[],[f11011,f544])).
fof(f10824,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,X15) != s(bool,happ(s(fun(X16,bool),'const.combin.K_1'(s(bool,X14))),s(X16,X17))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f10201,f436])).
fof(f10823,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s(bool,X8) != s(bool,happ(s(fun(X9,bool),'const.combin.K_1'(s(bool,X7))),s(X9,X10))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f10201,f543])).
fof(f10822,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X1) != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X0))),s(X2,X3))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.combin.K_1'(s(bool,X4))),s(X5,X6)))) )),
  inference(superposition,[],[f10201,f544])).
fof(f11009,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X1) != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X3,X4)))) )),
  inference(condensation,[],[f11008])).
fof(f11008,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) != s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(duplicate_literal_removal,[],[f10792])).
fof(f10792,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X44) != s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X45,X46))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),'const.combin.K_1'(s(bool,X44))),s(X47,X48)))) )),
  inference(superposition,[],[f10201,f544])).
fof(f11011,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X3,X4))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f11010])).
fof(f11010,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) != s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(duplicate_literal_removal,[],[f10788])).
fof(f10788,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) != s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(superposition,[],[f10201,f543])).
fof(f10189,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X2))),s(X1,X3))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f544])).
fof(f10201,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f10183])).
fof(f10183,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f544])).
fof(f10103,plain,(
  ( ! [X810,X808,X812,X811,X809,X813] : (s(X810,f(s(bool,'T_0'))) != s(X810,g(s(bool,'T_0'))) | s(fun(bool,X810),X808) = s(fun(bool,X810),X809) | s(bool,X811) = s(bool,sK20(X808,X809,X810,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X812,bool),'const.combin.K_1'(s(bool,X811))),s(X812,X813)))) )),
  inference(superposition,[],[f378,f544])).
fof(f9980,plain,(
  ( ! [X476,X472,X474,X471,X475,X473,X470] : (s(bool,X470) != s(bool,'const.combin.K_2'(s(bool,X471),s(bool,X470))) | s(bool,'T_0') = s(bool,happ(s(fun(X472,bool),'const.combin.K_1'(s(bool,X471))),s(X472,X473))) | s(bool,X470) = s(bool,X474) | s(bool,'T_0') = s(bool,happ(s(fun(X475,bool),'const.combin.K_1'(s(bool,X474))),s(X475,X476)))) )),
  inference(superposition,[],[f3381,f544])).
fof(f9972,plain,(
  ( ! [X422,X424,X421,X423,X425] : (s(bool,X421) != s(bool,'const.combin.K_2'(s(bool,X422),s(bool,X421))) | s(bool,'T_0') = s(bool,X422) | s(bool,X421) = s(bool,X423) | s(bool,'T_0') = s(bool,happ(s(fun(X424,bool),'const.combin.K_1'(s(bool,X423))),s(X424,X425)))) )),
  inference(superposition,[],[f2851,f544])).
fof(f9962,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s(bool,X360) = s(bool,'const.combin.K_2'(s(bool,X361),s(bool,X360))) | s(bool,X361) = s(bool,X362) | s(bool,'T_0') = s(bool,X362) | s(bool,X360) = s(bool,X363) | s(bool,'T_0') = s(bool,happ(s(fun(X364,bool),'const.combin.K_1'(s(bool,X363))),s(X364,X365)))) )),
  inference(superposition,[],[f543,f544])).
fof(f10304,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) )),
  inference(condensation,[],[f10303])).
fof(f10303,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (s(bool,X279) != s(bool,X280) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X280) | s(bool,X279) = s(bool,X282) | s(bool,'T_0') = s(bool,happ(s(fun(X283,bool),'const.combin.K_1'(s(bool,X282))),s(X283,X284)))) )),
  inference(duplicate_literal_removal,[],[f9949])).
fof(f9949,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (s(bool,X279) != s(bool,X280) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X280) | s(bool,X279) = s(bool,X282) | s(bool,'T_0') = s(bool,happ(s(fun(X283,bool),'const.combin.K_1'(s(bool,X282))),s(X283,X284)))) )),
  inference(superposition,[],[f4848,f544])).
fof(f9917,plain,(
  ( ! [X54,X52,X50,X48,X56,X55,X53,X51,X49] : (s(bool,X49) != s(bool,'const.combin.K_2'(s(bool,X48),s(X50,X51))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X49),s(X52,X53))) | s(bool,X48) = s(bool,X54) | s(bool,'T_0') = s(bool,happ(s(fun(X55,bool),'const.combin.K_1'(s(bool,X54))),s(X55,X56)))) )),
  inference(superposition,[],[f2247,f544])).
fof(f9916,plain,(
  ( ! [X39,X47,X45,X43,X41,X46,X44,X42,X40] : (s(bool,X40) != s(bool,'const.combin.K_2'(s(bool,X39),s(X41,X42))) | s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44))) | s(bool,X39) = s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(X46,bool),'const.combin.K_1'(s(bool,X45))),s(X46,X47)))) )),
  inference(superposition,[],[f2143,f544])).
fof(f9914,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s(bool,X26) != s(bool,'const.combin.K_2'(s(bool,X25),s(X27,X28))) | s(bool,'T_0') = s(bool,X26) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),'const.combin.K_1'(s(bool,X29))),s(X30,X31)))) )),
  inference(superposition,[],[f1920,f544])).
fof(f9909,plain,(
  ( ! [X850,X848,X852,X847,X851,X849] : (s(X849,f(s(bool,X850))) != s(X849,g(s(bool,X850))) | s(fun(bool,X849),X847) = s(fun(bool,X849),X848) | s(bool,'T_0') = s(bool,sK20(X847,X848,X849,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X851,bool),'const.combin.K_1'(s(bool,X850))),s(X851,X852)))) )),
  inference(superposition,[],[f378,f544])).
fof(f9531,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,X104) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X105))),s(bool,X104))) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X106) | s(bool,X104) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f544,f436])).
fof(f9530,plain,(
  ( ! [X103,X101,X99,X102,X100,X98] : (s(bool,X98) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X99))),s(bool,X98))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X101),s(X102,X103)))) )),
  inference(superposition,[],[f544,f543])).
fof(f9529,plain,(
  ( ! [X94,X92,X97,X95,X93,X96] : (s(bool,X92) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X93))),s(bool,X92))) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94) | s(bool,X92) = s(bool,X95) | s(bool,'T_0') = s(bool,happ(s(fun(X96,bool),'const.combin.K_1'(s(bool,X95))),s(X96,X97)))) )),
  inference(superposition,[],[f544,f544])).
fof(f9511,plain,(
  ( ! [X261,X263,X265,X260,X262,X264] : (s(bool,'T_0') = s(bool,happ(s(fun(X263,bool),'const.combin.K_1'(s(bool,X261))),s(X263,X264))) | s(bool,X265) = s(bool,happ(s(fun(X260,bool),'const.combin.K_1'(s(bool,X261))),s(X260,X262))) | s(bool,'T_0') = s(bool,X265)) )),
  inference(superposition,[],[f544,f399])).
fof(f9437,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,happ(s(fun(X19,bool),'const.combin.K_1'(s(bool,X18))),s(X19,X20))) | s(bool,X16) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f544,f436])).
fof(f9436,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),'const.combin.K_1'(s(bool,X10))),s(X11,X12))) | s(bool,X8) = s(bool,X13) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15)))) )),
  inference(superposition,[],[f544,f543])).
fof(f9435,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),'const.combin.K_1'(s(bool,X5))),s(X6,X7)))) )),
  inference(superposition,[],[f544,f544])).
fof(f9293,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(X33,f(s(bool,'T_0'))) != s(X33,g(s(bool,'T_0'))) | s(fun(bool,X33),X31) = s(fun(bool,X33),X32) | s(bool,X34) = s(bool,sK20(X31,X32,X33,bool)) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X34),s(X35,X36)))) )),
  inference(superposition,[],[f378,f543])).
fof(f9291,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(X21,f(s(bool,X22))) != s(X21,g(s(bool,X22))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'T_0') = s(bool,sK20(X19,X20,X21,bool)) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X22),s(X23,X24)))) )),
  inference(superposition,[],[f378,f543])).
fof(f9288,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK20(X7,X8,X9,bool))) )),
  inference(superposition,[],[f378,f436])).
fof(f9287,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK20(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f378,f436])).
fof(f8581,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,X96),s(bool,X95))) | s(bool,'T_0') = s(bool,happ(s(fun(X97,bool),'const.combin.K_1'(s(bool,X96))),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f3381,f436])).
fof(f8580,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s(bool,X88) != s(bool,'const.combin.K_2'(s(bool,X89),s(bool,X88))) | s(bool,'T_0') = s(bool,happ(s(fun(X90,bool),'const.combin.K_1'(s(bool,X89))),s(X90,X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f3381,f543])).
fof(f7827,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X3))),s(X4,X5))) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),'const.combin.K_1'(s(bool,X2))),s(X6,X7)))) )),
  inference(superposition,[],[f2909,f2909])).
fof(f7365,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,X10) != s(bool,'const.combin.K_2'(s(bool,X9),s(X11,X12))) | s(bool,'T_0') = s(bool,happ(s(fun(X13,bool),'const.combin.K_1'(s(bool,X10))),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2143,f436])).
fof(f7364,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X1))),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X6),s(X7,X8)))) )),
  inference(superposition,[],[f2143,f543])).
fof(f5452,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,X138) != s(bool,X140) | s(bool,X141) = s(bool,happ(s(fun(X137,bool),'const.combin.K_1'(s(bool,X138))),s(X137,X139))) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f4848,f399])).
fof(f5459,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4)))) )),
  inference(condensation,[],[f5458])).
fof(f5458,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X58),s(X59,X60)))) )),
  inference(duplicate_literal_removal,[],[f5437])).
fof(f5437,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X58),s(X59,X60)))) )),
  inference(superposition,[],[f4848,f543])).
fof(f5425,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,X133) != s(bool,X135) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,X133))),s(X132,X134)))) )),
  inference(superposition,[],[f4848,f399])).
fof(f5025,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X1),s(X3,X4))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4879,f284])).
fof(f4848,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4753,f284])).
fof(f4753,plain,(
  ( ! [X112,X115] : (s(bool,'F_0') != s(bool,X112) | s(bool,X112) = s(bool,X115) | s(bool,'T_0') = s(bool,X115)) )),
  inference(superposition,[],[f4595,f367])).
fof(f4471,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,X166) != s(bool,'const.combin.K_2'(s(bool,X164),s(X167,X168))) | s(bool,X166) = s(bool,happ(s(fun(X163,bool),'const.combin.K_1'(s(bool,X164))),s(X163,X165))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f1908,f399])).
fof(f4470,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,X160) != s(bool,'const.combin.K_2'(s(bool,X157),s(X161,X162))) | s(bool,X160) = s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f1908,f367])).
fof(f4444,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (s(bool,X159) != s(bool,'const.combin.K_2'(s(bool,X161),s(X162,X163))) | s(bool,X161) = s(bool,happ(s(fun(X158,bool),'const.combin.K_1'(s(bool,X159))),s(X158,X160))) | s(bool,'T_0') = s(bool,happ(s(fun(X158,bool),'const.combin.K_1'(s(bool,X159))),s(X158,X160)))) )),
  inference(superposition,[],[f1908,f399])).
fof(f4443,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(bool,X152) != s(bool,'const.combin.K_2'(s(bool,X155),s(X156,X157))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,X152),s(X153,X154))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X152),s(X153,X154)))) )),
  inference(superposition,[],[f1908,f367])).
fof(f3395,plain,(
  ( ! [X54,X55,X53] : (s(bool,X53) != s(bool,'const.combin.K_2'(s(bool,X54),s(bool,X53))) | s(bool,'T_0') = s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f2851,f436])).
fof(f3394,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X48) != s(bool,'const.combin.K_2'(s(bool,X49),s(bool,X48))) | s(bool,'T_0') = s(bool,X49) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X51,X52)))) )),
  inference(superposition,[],[f2851,f543])).
fof(f3381,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X112),s(X114,X115))) | s(bool,'T_0') = s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113)))) )),
  inference(superposition,[],[f2851,f399])).
fof(f2851,plain,(
  ( ! [X4,X0,X3] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2771,f367])).
fof(f2771,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f2770])).
fof(f2770,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X99,X100))) != s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96)) )),
  inference(duplicate_literal_removal,[],[f2665])).
fof(f2665,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X99,X100))) != s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f1920,f566])).
fof(f2569,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X125) = s(bool,'const.combin.K_2'(s(bool,X123),s(X126,X127))) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X123))),s(X122,X124))) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f566,f399])).
fof(f2547,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X123) = s(bool,'const.combin.K_2'(s(bool,X125),s(X126,X127))) | s(bool,'T_0') = s(bool,X125) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X123))),s(X122,X124)))) )),
  inference(superposition,[],[f566,f399])).
fof(f2384,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,X10) != s(bool,'const.combin.K_2'(s(bool,X9),s(X11,X12))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2247,f436])).
fof(f2383,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X6),s(X7,X8)))) )),
  inference(superposition,[],[f2247,f543])).
fof(f2145,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,X8) != s(bool,'const.combin.K_2'(s(bool,X7),s(X9,X10))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1920,f436])).
fof(f2144,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X4),s(X5,X6)))) )),
  inference(superposition,[],[f1920,f543])).
fof(f2143,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X90) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X92,X93))) | s(bool,'T_0') = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X90))),s(X89,X91)))) )),
  inference(superposition,[],[f1920,f399])).
fof(f2247,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X3,X4))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f2246])).
fof(f2246,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(duplicate_literal_removal,[],[f2130])).
fof(f2130,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X20) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X21,X22))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X20),s(X23,X24)))) )),
  inference(superposition,[],[f1920,f543])).
fof(f1908,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f543])).
fof(f1920,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f1902])).
fof(f1902,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f543])).
fof(f1704,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,X55) = s(bool,'const.combin.K_2'(s(bool,X56),s(bool,X55))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f543,f436])).
fof(f1703,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X49) = s(bool,'const.combin.K_2'(s(bool,X50),s(bool,X49))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X52),s(X53,X54)))) )),
  inference(superposition,[],[f543,f543])).
fof(f1692,plain,(
  ( ! [X118,X116,X114,X117,X115,X113] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X114),s(X116,X117))) | s(bool,X118) = s(bool,happ(s(fun(X113,bool),'const.combin.K_1'(s(bool,X114))),s(X113,X115))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f543,f399])).
fof(f1672,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,'T_0') = s(bool,X71) | s(bool,X73) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X73),s(X74,X75)))) )),
  inference(superposition,[],[f543,f399])).
fof(f1654,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12))) | s(bool,X8) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f543,f436])).
fof(f1653,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X5),s(X6,X7)))) )),
  inference(superposition,[],[f543,f543])).
fof(f1652,plain,(
  ( ! [X103,X107,X105,X102,X106,X104] : (s(bool,X103) = s(bool,X105) | s(bool,'T_0') = s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X103))),s(X102,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X105),s(X106,X107)))) )),
  inference(superposition,[],[f543,f399])).
fof(f2074,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5)))) )),
  inference(condensation,[],[f2073])).
fof(f2073,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X38),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X43,X44)))) )),
  inference(duplicate_literal_removal,[],[f1620])).
fof(f1620,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X38),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X43,X44)))) )),
  inference(superposition,[],[f543,f543])).
fof(f1343,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X48) = s(bool,'const.combin.K_2'(s(bool,X49),s(bool,X48))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f504,f284])).
fof(f610,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f282,f436])).
fof(f567,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X24) = s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,X22))),s(X21,X23))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f436,f399])).
fof(f566,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,X17),s(X18,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f436,f367])).
fof(f556,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f436,f436])).
fof(f544,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,happ(s(fun(X28,bool),'const.combin.K_1'(s(bool,X29))),s(X28,X30)))) )),
  inference(superposition,[],[f436,f399])).
fof(f543,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X24),s(X25,X26)))) )),
  inference(superposition,[],[f436,f367])).
fof(f439,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f283,f284])).
fof(f436,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f284,f284])).
fof(f378,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f271])).
fof(f271,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f265])).
fof(f265,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.bvpSem.state_literal_|49||49|',aHL_EXT)).
fof(f377,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f261])).
fof(f261,plain,(
  ! [X0,X1,X2,X3] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f260])).
fof(f260,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f86])).
fof(f86,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X7),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26))))) = s('type.ffi.ffi_state'(X7),happ(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49|2|48|_prove_ltb')).
fof(f376,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f259])).
fof(f259,plain,(
  ! [X0,X1,X2,X3] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f258])).
fof(f258,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_95_prove_ltb')).
fof(f375,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f257])).
fof(f257,plain,(
  ! [X0,X1,X2,X3] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f256])).
fof(f256,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_79_prove_ltb')).
fof(f373,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X1),X2))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f253])).
fof(f253,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X1),X2))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f252])).
fof(f252,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X1),X2))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_55_prove_ltb')).
fof(f372,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X1),X2))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f251])).
fof(f251,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X1),X2))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f250])).
fof(f250,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X1),X2))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_63_prove_ltb')).
fof(f371,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f249])).
fof(f249,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f248])).
fof(f248,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f78])).
fof(f78,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|2_prove_ltb')).
fof(f370,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f247])).
fof(f247,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f246])).
fof(f246,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_87_prove_ltb')).
fof(f369,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(flattening,[],[f244])).
fof(f244,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X1),X2))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.bvpSem.state'(X1),X2)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_7|49|_prove_ltb')).
fof(f358,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f359,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f360,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f361,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f362,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f363,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f364,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f365,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f366,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f356,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f237])).
fof(f237,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f236])).
fof(f236,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|9_prove_ltb')).
fof(f355,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f234])).
fof(f234,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f83])).
fof(f83,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|7_prove_ltb')).
fof(f354,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f233])).
fof(f233,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f232])).
fof(f232,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f80])).
fof(f80,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),happ(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|4_prove_ltb')).
fof(f353,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f230])).
fof(f230,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f81])).
fof(f81,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),happ(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|5_prove_ltb')).
fof(f351,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f226])).
fof(f226,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_93_prove_ltb')).
fof(f350,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f225])).
fof(f225,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f224])).
fof(f224,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_78_prove_ltb')).
fof(f349,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f222])).
fof(f222,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_6|48|_prove_ltb')).
fof(f348,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f220])).
fof(f220,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_62_prove_ltb')).
fof(f347,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f218])).
fof(f218,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|3_prove_ltb')).
fof(f346,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f217])).
fof(f217,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f216])).
fof(f216,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_54_prove_ltb')).
fof(f345,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f214])).
fof(f214,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48||49|_prove_ltb')).
fof(f344,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f212])).
fof(f212,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_52_prove_ltb')).
fof(f343,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f211])).
fof(f211,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f210])).
fof(f210,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_73_prove_ltb')).
fof(f342,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f209])).
fof(f209,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f208])).
fof(f208,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_74_prove_ltb')).
fof(f341,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f207])).
fof(f207,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f206])).
fof(f206,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_75_prove_ltb')).
fof(f340,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f204])).
fof(f204,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f87])).
fof(f87,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X27),s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49|2|49|_prove_ltb')).
fof(f337,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X27),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|6_prove_ltb')).
fof(f336,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f196])).
fof(f196,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_9|49|_prove_ltb')).
fof(f335,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_9|48|_prove_ltb')).
fof(f334,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f192])).
fof(f192,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_89_prove_ltb')).
fof(f333,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f190])).
fof(f190,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X27),s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49|8_prove_ltb')).
fof(f332,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f188])).
fof(f188,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_85_prove_ltb')).
fof(f331,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f186])).
fof(f186,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_86_prove_ltb')).
fof(f330,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f184])).
fof(f184,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_8|48|_prove_ltb')).
fof(f329,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f182])).
fof(f182,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_68_prove_ltb')).
fof(f328,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f180])).
fof(f180,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f77])).
fof(f77,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49||49|_prove_ltb')).
fof(f327,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f178])).
fof(f178,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_7|48|_prove_ltb')).
fof(f326,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f176])).
fof(f176,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f75])).
fof(f75,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|9_prove_ltb')).
fof(f325,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f174])).
fof(f174,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_92_prove_ltb')).
fof(f324,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f172])).
fof(f172,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_94_prove_ltb')).
fof(f323,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f170])).
fof(f170,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_77_prove_ltb')).
fof(f322,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : ! [X26,X27] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X26))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_76_prove_ltb')).
fof(f321,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f166])).
fof(f166,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X6] : ! [X26,X27] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X26))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_96_prove_ltb')).
fof(f320,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f164])).
fof(f164,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_49_prove_ltb')).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_5|48|_prove_ltb')).
fof(f318,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_97_prove_ltb')).
fof(f317,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_98_prove_ltb')).
fof(f316,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_57_prove_ltb')).
fof(f315,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_99_prove_ltb')).
fof(f313,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_58_prove_ltb')).
fof(f311,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_66_prove_ltb')).
fof(f310,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_65_prove_ltb')).
fof(f309,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_64_prove_ltb')).
fof(f308,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48||48|_prove_ltb')).
fof(f307,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|2_prove_ltb')).
fof(f306,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_6|49|_prove_ltb')).
fof(f305,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X6] : ! [X26,X27] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|4_prove_ltb')).
fof(f304,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_83_prove_ltb')).
fof(f303,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f130])).
fof(f130,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X26,X27] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X26))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_59_prove_ltb')).
fof(f302,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_67_prove_ltb')).
fof(f301,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_82_prove_ltb')).
fof(f300,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_56_prove_ltb')).
fof(f299,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f71])).
fof(f71,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|5_prove_ltb')).
fof(f298,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f72])).
fof(f72,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|6_prove_ltb')).
fof(f297,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_53_prove_ltb')).
fof(f296,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f73])).
fof(f73,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|7_prove_ltb')).
fof(f295,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X26,X27] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X26))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_5|49|_prove_ltb')).
fof(f291,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_8|49|_prove_ltb')).
fof(f290,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f74])).
fof(f74,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||48|8_prove_ltb')).
fof(f289,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_72_prove_ltb')).
fof(f288,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_|49||49||48|_prove_ltb')).
fof(f287,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_88_prove_ltb')).
fof(f286,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_69_prove_ltb')).
fof(f285,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6] : ! [X26,X27] : s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X26))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.bvpSem.state'(X6),X26)))))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.bvpSem_84_prove_ltb')).
fof(f284,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvpSem.state_literal_|49||49|',aHL_BOOL_CASES)).
fof(f282,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvpSem.state_literal_|49||49|',aHL_TRUTH)).
fof(f29361,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f505,f905,f6347,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f5466,f5422,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f13370,f10101,f10185,f10198,f13383,f12061,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f3089,f9778,f9292,f10100,f9906,f9775,f9305,f9304,f9303,f9300,f9299,f12845,f12843,f12778,f12052,f9976,f9973,f9957,f9956,f9316,f9315,f9313,f9312,f9298,f9286,f7902,f7901,f4880,f4879,f3684,f3683,f3152,f2909,f2823,f1845,f1844,f913,f613,f475,f438,f283,f9964,f9958,f9306,f6782,f6781,f4779,f4660,f4659,f4595,f4591,f2826,f1846,f1319,f1270,f904,f504,f11911,f13392,f10196,f10284,f10306,f5424,f12059,f12057,f11977,f11775,f9961,f5912,f5911,f13518,f13519,f13520,f13521,f13522,f13523,f13524,f13525,f13526,f13527,f13888,f13889,f13890,f13891,f13892,f13893,f13894,f13895,f13896,f13897,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14887,f14888,f14973,f14974,f14975,f14976,f14977,f14978,f14979,f14980,f14981,f14982,f15809,f15810,f15811,f15812,f15813,f15814,f15815,f15816,f15817,f15818,f15867,f15868,f16838,f16839,f22728,f23597,f23647,f24549,f379,f27399,f27400,f27401,f28637,f28638,f28658,f28659,f28681,f28682,f28696,f28697,f28723,f28724,f28765,f28766,f28798,f28799,f28833,f28834,f29213,f29085,f28946])).
fof(f29360,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f505,f905,f6347,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f5466,f5422,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f13370,f10101,f10185,f10198,f13383,f12061,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f3089,f9778,f9292,f10100,f9906,f9775,f9305,f9304,f9303,f9300,f9299,f12845,f12843,f12778,f12052,f9976,f9973,f9957,f9956,f9316,f9315,f9313,f9312,f9298,f9286,f7902,f7901,f4880,f4879,f3684,f3683,f3152,f2909,f2823,f1845,f1844,f913,f613,f475,f438,f283,f9964,f9958,f9306,f6782,f6781,f4779,f4660,f4659,f4595,f4591,f2826,f1846,f1319,f1270,f904,f504,f11911,f13392,f10196,f10284,f10306,f5424,f12059,f12057,f11977,f11775,f9961,f5912,f5911,f13518,f13519,f13520,f13521,f13522,f13523,f13524,f13525,f13526,f13527,f13888,f13889,f13890,f13891,f13892,f13893,f13894,f13895,f13896,f13897,f14542,f14543,f14544,f14545,f14546,f14547,f14548,f14549,f14550,f14551,f14887,f14888,f14973,f14974,f14975,f14976,f14977,f14978,f14979,f14980,f14981,f14982,f15809,f15810,f15811,f15812,f15813,f15814,f15815,f15816,f15817,f15818,f15867,f15868,f16838,f16839,f22728,f23597,f23647,f24549,f379,f27399,f27400,f27401,f28637,f28638,f28658,f28659,f28681,f28682,f28696,f28697,f28723,f28724,f28765,f28766,f28798,f28799,f28833,f28834,f29213,f29085])).
fof(f29086,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f29085,f388])).
fof(f28947,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f28946,f388])).
fof(f28735,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f28734,f388])).
fof(f26019,plain,(
  $false | ($spl0 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f26018,f388])).
fof(f26018,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26017,f399])).
fof(f26017,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26016,f399])).
fof(f26016,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26015,f337])).
fof(f26015,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26014,f337])).
fof(f26014,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26013,f302])).
fof(f26013,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26012,f302])).
fof(f26012,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26011,f311])).
fof(f26011,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f26010,f311])).
fof(f26010,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25419,f310])).
fof(f25419,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6)),
  inference(superposition,[],[f310,f24531])).
fof(f24531,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f379,f385])).
fof(f25885,plain,(
  $false | ($spl0 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f25884,f388])).
fof(f25884,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25883,f399])).
fof(f25883,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25882,f399])).
fof(f25882,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25881,f337])).
fof(f25881,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25880,f337])).
fof(f25880,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25879,f302])).
fof(f25879,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25878,f302])).
fof(f25878,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25877,f311])).
fof(f25877,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25876,f311])).
fof(f25876,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25875,f310])).
fof(f25875,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25401,f310])).
fof(f25401,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6)),
  inference(unit_resulting_resolution,[],[f24531,f360])).
fof(f25679,plain,(
  $false | ($spl0 | $spl6 | $spl9)),
  inference(subsumption_resolution,[],[f25678,f388])).
fof(f25678,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25677,f399])).
fof(f25677,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25676,f399])).
fof(f25676,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25675,f337])).
fof(f25675,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25674,f337])).
fof(f25674,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25673,f302])).
fof(f25673,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25672,f302])).
fof(f25672,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25671,f311])).
fof(f25671,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25670,f311])).
fof(f25670,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25669,f310])).
fof(f25669,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f25410,f310])).
fof(f25410,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6)),
  inference(unit_resulting_resolution,[],[f24531,f360])).
fof(f24294,plain,(
  $false | ($spl0 | $spl6 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f24293,f388])).
fof(f24293,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24292,f399])).
fof(f24292,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24291,f399])).
fof(f24291,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24290,f337])).
fof(f24290,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24289,f337])).
fof(f24289,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24288,f302])).
fof(f24288,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24287,f302])).
fof(f24287,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24286,f311])).
fof(f24286,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24285,f311])).
fof(f24285,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23701,f310])).
fof(f23701,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(superposition,[],[f310,f23578])).
fof(f23578,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f21268,f385])).
fof(f21268,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f379,f391])).
fof(f24161,plain,(
  $false | ($spl0 | $spl6 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f24160,f388])).
fof(f24160,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24159,f399])).
fof(f24159,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24158,f399])).
fof(f24158,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24157,f337])).
fof(f24157,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24156,f337])).
fof(f24156,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24155,f302])).
fof(f24155,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24154,f302])).
fof(f24154,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24153,f311])).
fof(f24153,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24152,f311])).
fof(f24152,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f24151,f310])).
fof(f24151,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23683,f310])).
fof(f23683,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(unit_resulting_resolution,[],[f23578,f360])).
fof(f23956,plain,(
  $false | ($spl0 | $spl6 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f23955,f388])).
fof(f23955,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23954,f399])).
fof(f23954,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23953,f399])).
fof(f23953,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23952,f337])).
fof(f23952,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23951,f337])).
fof(f23951,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23950,f302])).
fof(f23950,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23949,f302])).
fof(f23949,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23948,f311])).
fof(f23948,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23947,f311])).
fof(f23947,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23946,f310])).
fof(f23946,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f23692,f310])).
fof(f23692,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl12)),
  inference(unit_resulting_resolution,[],[f23578,f360])).
fof(f23362,plain,(
  $false | ($spl0 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f23361,f388])).
fof(f23361,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23360,f399])).
fof(f23360,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23359,f399])).
fof(f23359,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23358,f337])).
fof(f23358,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23357,f337])).
fof(f23357,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23356,f302])).
fof(f23356,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23355,f302])).
fof(f23355,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23354,f311])).
fof(f23354,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23353,f311])).
fof(f23353,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22782,f310])).
fof(f22782,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(superposition,[],[f310,f21270])).
fof(f21270,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21269,f385])).
fof(f21269,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21268,f389])).
fof(f23229,plain,(
  $false | ($spl0 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f23228,f388])).
fof(f23228,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23227,f399])).
fof(f23227,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23226,f399])).
fof(f23226,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23225,f337])).
fof(f23225,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23224,f337])).
fof(f23224,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23223,f302])).
fof(f23223,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23222,f302])).
fof(f23222,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23221,f311])).
fof(f23221,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23220,f311])).
fof(f23220,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23219,f310])).
fof(f23219,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22764,f310])).
fof(f22764,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f21270,f360])).
fof(f23029,plain,(
  $false | ($spl0 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f23028,f388])).
fof(f23028,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23027,f399])).
fof(f23027,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23026,f399])).
fof(f23026,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23025,f337])).
fof(f23025,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23024,f337])).
fof(f23024,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23023,f302])).
fof(f23023,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23022,f302])).
fof(f23022,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23021,f311])).
fof(f23021,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23020,f311])).
fof(f23020,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f23019,f310])).
fof(f23019,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22773,f310])).
fof(f22773,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f21270,f360])).
fof(f22241,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f22240,f388])).
fof(f22240,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22239,f399])).
fof(f22239,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22238,f399])).
fof(f22238,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22237,f337])).
fof(f22237,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22236,f337])).
fof(f22236,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22235,f302])).
fof(f22235,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22234,f302])).
fof(f22234,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22233,f311])).
fof(f22233,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22232,f311])).
fof(f22232,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21675,f310])).
fof(f21675,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(superposition,[],[f310,f21271])).
fof(f21271,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21270,f381])).
fof(f22114,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f22113,f388])).
fof(f22113,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22112,f399])).
fof(f22112,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22111,f399])).
fof(f22111,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22110,f337])).
fof(f22110,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22109,f337])).
fof(f22109,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22108,f302])).
fof(f22108,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22107,f302])).
fof(f22107,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22106,f311])).
fof(f22106,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22105,f311])).
fof(f22105,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f22104,f310])).
fof(f22104,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21658,f310])).
fof(f21658,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f21271,f360])).
fof(f21920,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f21919,f388])).
fof(f21919,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21918,f399])).
fof(f21918,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21917,f399])).
fof(f21917,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21916,f337])).
fof(f21916,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21915,f337])).
fof(f21915,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21914,f302])).
fof(f21914,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21913,f302])).
fof(f21913,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21912,f311])).
fof(f21912,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21911,f311])).
fof(f21911,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21910,f310])).
fof(f21910,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f21667,f310])).
fof(f21667,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f21271,f360])).
fof(f21094,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl18)),
  inference(subsumption_resolution,[],[f21093,f388])).
fof(f21093,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21092,f399])).
fof(f21092,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21091,f399])).
fof(f21091,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21090,f337])).
fof(f21090,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21089,f337])).
fof(f21089,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21088,f302])).
fof(f21088,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21087,f302])).
fof(f21087,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21086,f311])).
fof(f21086,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f21085,f311])).
fof(f21085,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20569,f310])).
fof(f20569,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(superposition,[],[f310,f20147])).
fof(f20147,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20146,f381])).
fof(f20146,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20145,f385])).
fof(f20145,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20144,f389])).
fof(f20144,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f410,f391])).
fof(f410,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f379,f397])).
fof(f20980,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl18)),
  inference(subsumption_resolution,[],[f20979,f388])).
fof(f20979,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20978,f399])).
fof(f20978,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20977,f399])).
fof(f20977,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20976,f337])).
fof(f20976,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20975,f337])).
fof(f20975,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20974,f302])).
fof(f20974,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20973,f302])).
fof(f20973,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20972,f311])).
fof(f20972,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20971,f311])).
fof(f20971,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20970,f310])).
fof(f20970,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20552,f310])).
fof(f20552,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(unit_resulting_resolution,[],[f20147,f360])).
fof(f20803,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl18)),
  inference(subsumption_resolution,[],[f20802,f388])).
fof(f20802,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20801,f399])).
fof(f20801,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20800,f399])).
fof(f20800,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20799,f337])).
fof(f20799,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20798,f337])).
fof(f20798,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20797,f302])).
fof(f20797,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20796,f302])).
fof(f20796,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20795,f311])).
fof(f20795,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20794,f311])).
fof(f20794,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20793,f310])).
fof(f20793,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(forward_demodulation,[],[f20561,f310])).
fof(f20561,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl18)),
  inference(unit_resulting_resolution,[],[f20147,f360])).
fof(f20001,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f20000,f388])).
fof(f20000,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19999,f399])).
fof(f19999,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19998,f399])).
fof(f19998,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19997,f337])).
fof(f19997,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19996,f337])).
fof(f19996,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19995,f302])).
fof(f19995,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19994,f302])).
fof(f19994,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19993,f311])).
fof(f19993,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19992,f311])).
fof(f19992,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19522,f310])).
fof(f19522,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(superposition,[],[f310,f17805])).
fof(f17805,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17804,f381])).
fof(f17804,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17803,f385])).
fof(f17803,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17802,f389])).
fof(f17802,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f411,f391])).
fof(f411,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f410,f395])).
fof(f19897,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f19896,f388])).
fof(f19896,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19895,f399])).
fof(f19895,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19894,f399])).
fof(f19894,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19893,f337])).
fof(f19893,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19892,f337])).
fof(f19892,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19891,f302])).
fof(f19891,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19890,f302])).
fof(f19890,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19889,f311])).
fof(f19889,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19888,f311])).
fof(f19888,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19887,f310])).
fof(f19887,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19505,f310])).
fof(f19505,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f17805,f360])).
fof(f19741,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f19740,f388])).
fof(f19740,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19739,f399])).
fof(f19739,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19738,f399])).
fof(f19738,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19737,f337])).
fof(f19737,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19736,f337])).
fof(f19736,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19735,f302])).
fof(f19735,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19734,f302])).
fof(f19734,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19733,f311])).
fof(f19733,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19732,f311])).
fof(f19732,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19731,f310])).
fof(f19731,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f19514,f310])).
fof(f19514,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f17805,f360])).
fof(f17714,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f17713,f388])).
fof(f17713,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17712,f399])).
fof(f17712,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17711,f399])).
fof(f17711,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17710,f337])).
fof(f17710,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17709,f337])).
fof(f17709,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17708,f302])).
fof(f17708,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17707,f302])).
fof(f17707,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17706,f311])).
fof(f17706,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17705,f311])).
fof(f17705,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17378,f310])).
fof(f17378,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(superposition,[],[f310,f16785])).
fof(f16785,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f415,f381])).
fof(f415,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f414,f385])).
fof(f414,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f413,f389])).
fof(f413,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f412,f391])).
fof(f412,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f411,f393])).
fof(f17646,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f17645,f388])).
fof(f17645,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17644,f399])).
fof(f17644,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17643,f399])).
fof(f17643,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17642,f337])).
fof(f17642,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17641,f337])).
fof(f17641,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17640,f302])).
fof(f17640,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17639,f302])).
fof(f17639,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17638,f311])).
fof(f17638,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17637,f311])).
fof(f17637,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17636,f310])).
fof(f17636,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17361,f310])).
fof(f17361,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f16785,f360])).
fof(f17553,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f17552,f388])).
fof(f17552,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17551,f399])).
fof(f17551,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17550,f399])).
fof(f17550,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17549,f337])).
fof(f17549,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17548,f337])).
fof(f17548,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17547,f302])).
fof(f17547,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17546,f302])).
fof(f17546,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17545,f311])).
fof(f17545,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17544,f311])).
fof(f17544,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17543,f310])).
fof(f17543,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f17370,f310])).
fof(f17370,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f16785,f360])).
fof(f16738,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f16737,f388])).
fof(f16737,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16736,f399])).
fof(f16736,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16735,f399])).
fof(f16735,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16734,f337])).
fof(f16734,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16733,f337])).
fof(f16733,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16732,f302])).
fof(f16732,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16731,f302])).
fof(f16731,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16730,f311])).
fof(f16730,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16729,f311])).
fof(f16729,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16455,f310])).
fof(f16455,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(superposition,[],[f310,f417])).
fof(f417,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f416,f381])).
fof(f416,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f415,f383])).
fof(f16695,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f16694,f388])).
fof(f16694,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16693,f399])).
fof(f16693,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16692,f399])).
fof(f16692,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16691,f337])).
fof(f16691,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16690,f337])).
fof(f16690,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16689,f302])).
fof(f16689,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16688,f302])).
fof(f16688,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16687,f311])).
fof(f16687,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16686,f311])).
fof(f16686,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16685,f310])).
fof(f16685,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16438,f310])).
fof(f16438,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f417,f360])).
fof(f16628,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f16627,f388])).
fof(f16627,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16626,f399])).
fof(f16626,plain,(
  s('type.num.num',sK14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16625,f399])).
fof(f16625,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16624,f337])).
fof(f16624,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16623,f337])).
fof(f16623,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16622,f302])).
fof(f16622,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16621,f302])).
fof(f16621,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16620,f311])).
fof(f16620,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16619,f311])).
fof(f16619,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16618,f310])).
fof(f16618,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f16447,f310])).
fof(f16447,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f417,f360])).
fof(f13499,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305,f9775,f9906,f10100,f9292,f9778])).
fof(f12915,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3)))) ) | $spl32),
  inference(subsumption_resolution,[],[f12772,f3172])).
fof(f12772,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X0,X1))) | s(bool,'T_0') != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X2,X3)))) )),
  inference(condensation,[],[f12587])).
fof(f12587,plain,(
  ( ! [X546,X549,X545,X547,X548] : (s(bool,'T_0') != s(bool,happ(s(fun(X547,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X547,X548))) | s(bool,X549) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X545,X546))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X545,X546)))) )),
  inference(superposition,[],[f3089,f12052])).
fof(f10308,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,X3) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X3))) | s(bool,X1) = s(bool,X3)) ) | $spl32),
  inference(condensation,[],[f10307])).
fof(f10307,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s(bool,X247) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X247))) | s(bool,'T_0') = s(bool,X248) | s(bool,X247) = s(bool,X249) | s(bool,'T_0') = s(bool,happ(s(fun(X250,bool),'const.combin.K_1'(s(bool,X249))),s(X250,X251)))) ) | $spl32),
  inference(duplicate_literal_removal,[],[f9944])).
fof(f9944,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s(bool,X247) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X247))) | s(bool,'T_0') = s(bool,X248) | s(bool,'T_0') = s(bool,X248) | s(bool,X247) = s(bool,X249) | s(bool,'T_0') = s(bool,happ(s(fun(X250,bool),'const.combin.K_1'(s(bool,X249))),s(X250,X251)))) ) | $spl32),
  inference(superposition,[],[f3237,f544])).
fof(f5120,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (s(bool,X156) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X158,X159))) | s(bool,X160) = s(bool,happ(s(fun(X155,bool),'const.combin.K_1'(s(bool,X156))),s(X155,X157))) | s(bool,'T_0') = s(bool,X160)) ) | $spl32),
  inference(superposition,[],[f4994,f399])).
fof(f5119,plain,(
  ( ! [X154,X152,X151,X149,X153,X150] : (s(bool,X149) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X152,X153))) | s(bool,X154) = s(bool,'const.combin.K_2'(s(bool,X149),s(X150,X151))) | s(bool,'T_0') = s(bool,X154)) ) | $spl32),
  inference(superposition,[],[f4994,f367])).
fof(f4994,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,X64) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X65,X66))) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) ) | $spl32),
  inference(subsumption_resolution,[],[f4965,f3172])).
fof(f4965,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,X64) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X65,X66))) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X64)))) ) | $spl32),
  inference(superposition,[],[f3237,f2823])).
fof(f4945,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,X107) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X107))) | s(bool,X110) = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109))) | s(bool,'T_0') = s(bool,X110)) ) | $spl32),
  inference(superposition,[],[f3237,f367])).
fof(f3237,plain,(
  ( ! [X41,X40] : (s(bool,X40) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X40))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl32),
  inference(superposition,[],[f3172,f436])).
fof(f3236,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X36) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X36))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X37),s(X38,X39)))) ) | $spl32),
  inference(superposition,[],[f3172,f543])).
fof(f9871,plain,(
  ( ! [X617,X613,X615,X616,X614] : (s(bool,'T_0') != s(bool,X615) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X613,X614))) | s(bool,'T_0') = s(bool,happ(s(fun(X616,bool),'const.combin.K_1'(s(bool,X615))),s(X616,X617)))) ) | $spl32),
  inference(superposition,[],[f3172,f544])).
fof(f8101,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') != s(bool,X23) | s(bool,'T_0') = s(bool,happ(s(fun(X24,bool),'const.combin.K_1'(s(bool,X23))),s(X24,X25)))) ) | $spl32),
  inference(superposition,[],[f3172,f2909])).
fof(f5218,plain,(
  ( ! [X78,X76,X74,X72,X77,X75,X73] : (s(bool,X74) != s(bool,X75) | s(bool,X75) = s(bool,X76) | s(bool,'T_0') = s(bool,X76) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X72,X73))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X74),s(X77,X78)))) ) | $spl32),
  inference(superposition,[],[f4994,f543])).
fof(f5204,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s(bool,X2) != s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X5,X6)))) ) | $spl32),
  inference(superposition,[],[f4994,f3152])).
fof(f4961,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,X44) != s(bool,X45) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X44))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X45),s(X47,X48)))) ) | $spl32),
  inference(superposition,[],[f3237,f543])).
fof(f4947,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X3,X4)))) ) | $spl32),
  inference(superposition,[],[f3237,f3152])).
fof(f4993,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,X59) != s(bool,'const.combin.K_2'(s(bool,X60),s(X61,X62))) | s(bool,X59) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X60)) ) | $spl32),
  inference(subsumption_resolution,[],[f4964,f3172])).
fof(f4964,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,X59) != s(bool,'const.combin.K_2'(s(bool,X60),s(X61,X62))) | s(bool,X59) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X60) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X59)))) ) | $spl32),
  inference(superposition,[],[f3237,f566])).
fof(f13498,plain,(
  $false | ($spl28 | $spl32 | $spl34)),
  inference(global_subsumption,[],[f12880,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305,f9775,f9906,f10100,f9292])).
fof(f13497,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305,f9775,f9906,f10100,f9292])).
fof(f13496,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305,f9775,f9906,f10100])).
fof(f13495,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305,f9775,f9906])).
fof(f13494,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305,f9775])).
fof(f13493,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304,f9305])).
fof(f13492,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303,f9304])).
fof(f13491,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300,f9303])).
fof(f13490,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299,f9300])).
fof(f13489,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915,f9299])).
fof(f13488,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845,f12915])).
fof(f13487,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843,f12845])).
fof(f13486,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778,f12843])).
fof(f13485,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052,f12778])).
fof(f13484,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308,f12052])).
fof(f13483,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976,f10308])).
fof(f13482,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9962,f9972,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973,f9976])).
fof(f13481,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9962,f9972,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957,f9973])).
fof(f13480,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956,f9957])).
fof(f13479,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316,f9956])).
fof(f13478,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315,f9316])).
fof(f13477,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313,f9315])).
fof(f13476,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312,f9313])).
fof(f13475,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9313,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298,f9312])).
fof(f13474,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286,f9298])).
fof(f13473,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902,f9286])).
fof(f13472,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901,f7902])).
fof(f13471,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120,f7901])).
fof(f13470,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119,f5120])).
fof(f13469,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994,f5119])).
fof(f13468,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945,f4994])).
fof(f13467,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880,f4945])).
fof(f13466,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879,f4880])).
fof(f13465,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684,f4879])).
fof(f13464,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683,f3684])).
fof(f13463,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237,f3683])).
fof(f13462,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236,f3237])).
fof(f13461,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172,f3236])).
fof(f13460,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152,f3172])).
fof(f13459,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089,f3152])).
fof(f13458,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3152,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909,f3089])).
fof(f13457,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3152,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823,f2909])).
fof(f13456,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845,f2823])).
fof(f13455,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844,f1845])).
fof(f13454,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913,f1844])).
fof(f13453,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613,f913])).
fof(f13452,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475,f613])).
fof(f13451,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438,f475])).
fof(f13450,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283,f438])).
fof(f13449,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964,f283])).
fof(f13448,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958,f9964])).
fof(f13447,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306,f9958])).
fof(f13446,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782,f9306])).
fof(f13445,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781,f6782])).
fof(f13444,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779,f6781])).
fof(f13443,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660,f4779])).
fof(f13442,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4779,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659,f4660])).
fof(f13441,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4779,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595,f4659])).
fof(f13440,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591,f4595])).
fof(f13439,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826,f4591])).
fof(f13438,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846,f2826])).
fof(f13437,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319,f1846])).
fof(f13436,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270,f1319])).
fof(f13435,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904,f1270])).
fof(f13434,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504,f904])).
fof(f13433,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586,f504])).
fof(f13432,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584,f12586])).
fof(f13431,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577,f12584])).
fof(f13430,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570,f12577])).
fof(f13429,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568,f12570])).
fof(f13428,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563,f12568])).
fof(f13427,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334,f12563])).
fof(f13426,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333,f12334])).
fof(f13425,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332,f12333])).
fof(f13424,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327,f12332])).
fof(f13423,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325,f12327])).
fof(f13422,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321,f12325])).
fof(f13421,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911,f12321])).
fof(f13420,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776,f11911])).
fof(f13419,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733,f11776])).
fof(f13418,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416,f11733])).
fof(f13417,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985,f13416])).
fof(f13413,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997,f11985])).
fof(f13412,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410,f11997])).
fof(f13411,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465,f13410])).
fof(f13407,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461,f11465])).
fof(f13406,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404,f11461])).
fof(f13405,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401,f13404])).
fof(f13402,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398,f13401])).
fof(f13399,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395,f13398])).
fof(f13396,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392,f13395])).
fof(f13393,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061,f13392])).
fof(f13389,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383,f12061])).
fof(f13384,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196,f13383])).
fof(f13381,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198,f10196])).
fof(f13380,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185,f10198])).
fof(f13379,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101,f10185])).
fof(f13372,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370,f10101])).
fof(f13371,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284,f13370])).
fof(f13368,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306,f10284])).
fof(f13367,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13366,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306])).
fof(f13366,plain,(
  ( ! [X476,X478,X472,X474,X471,X475,X477,X473] : (s(bool,'T_0') = s(bool,happ(s(fun(X474,bool),'const.combin.K_1'(s(bool,X471))),s(X474,X475))) | s(bool,X476) = s(bool,'const.combin.K_2'(s(bool,X471),s(X472,X473))) | s(bool,'T_0') = s(bool,happ(s(fun(X477,bool),'const.combin.K_1'(s(bool,X476))),s(X477,X478)))) ) | $spl23),
  inference(subsumption_resolution,[],[f10051,f450])).
fof(f10051,plain,(
  ( ! [X476,X478,X472,X474,X471,X475,X477,X473] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X474,bool),'const.combin.K_1'(s(bool,X471))),s(X474,X475))) | s(bool,X476) = s(bool,'const.combin.K_2'(s(bool,X471),s(X472,X473))) | s(bool,'T_0') = s(bool,happ(s(fun(X477,bool),'const.combin.K_1'(s(bool,X476))),s(X477,X478)))) )),
  inference(superposition,[],[f904,f544])).
fof(f13365,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13364,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306])).
fof(f13364,plain,(
  ( ! [X453,X455,X451,X457,X452,X454,X450,X456] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X450),s(X453,X454))) | s(bool,X455) = s(bool,'const.combin.K_2'(s(bool,X450),s(X451,X452))) | s(bool,'T_0') = s(bool,happ(s(fun(X456,bool),'const.combin.K_1'(s(bool,X455))),s(X456,X457)))) ) | $spl23),
  inference(subsumption_resolution,[],[f10049,f450])).
fof(f10049,plain,(
  ( ! [X453,X455,X451,X457,X452,X454,X450,X456] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X450),s(X453,X454))) | s(bool,X455) = s(bool,'const.combin.K_2'(s(bool,X450),s(X451,X452))) | s(bool,'T_0') = s(bool,happ(s(fun(X456,bool),'const.combin.K_1'(s(bool,X455))),s(X456,X457)))) )),
  inference(superposition,[],[f504,f544])).
fof(f13363,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13362,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306])).
fof(f13362,plain,(
  ( ! [X436,X438,X434,X440,X437,X439,X433,X435] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X434),s(X436,X437))) | s(bool,X438) = s(bool,happ(s(fun(X433,bool),'const.combin.K_1'(s(bool,X434))),s(X433,X435))) | s(bool,'T_0') = s(bool,happ(s(fun(X439,bool),'const.combin.K_1'(s(bool,X438))),s(X439,X440)))) ) | $spl23),
  inference(subsumption_resolution,[],[f10048,f450])).
fof(f10048,plain,(
  ( ! [X436,X438,X434,X440,X437,X439,X433,X435] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X434),s(X436,X437))) | s(bool,X438) = s(bool,happ(s(fun(X433,bool),'const.combin.K_1'(s(bool,X434))),s(X433,X435))) | s(bool,'T_0') = s(bool,happ(s(fun(X439,bool),'const.combin.K_1'(s(bool,X438))),s(X439,X440)))) )),
  inference(superposition,[],[f505,f544])).
fof(f13361,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13360,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306])).
fof(f13360,plain,(
  ( ! [X428,X430,X432,X429,X431,X427] : (s(bool,'T_0') = s(bool,X428) | s(bool,X430) = s(bool,happ(s(fun(X427,bool),'const.combin.K_1'(s(bool,X428))),s(X427,X429))) | s(bool,'T_0') = s(bool,happ(s(fun(X431,bool),'const.combin.K_1'(s(bool,X430))),s(X431,X432)))) ) | $spl23),
  inference(subsumption_resolution,[],[f10047,f450])).
fof(f10047,plain,(
  ( ! [X428,X430,X432,X429,X431,X427] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X428) | s(bool,X430) = s(bool,happ(s(fun(X427,bool),'const.combin.K_1'(s(bool,X428))),s(X427,X429))) | s(bool,'T_0') = s(bool,happ(s(fun(X431,bool),'const.combin.K_1'(s(bool,X430))),s(X431,X432)))) )),
  inference(superposition,[],[f6347,f544])).
fof(f13359,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871,f10306])).
fof(f13358,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346,f9871])).
fof(f13357,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355,f10346])).
fof(f13356,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703,f13355])).
fof(f13353,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471,f10703])).
fof(f13352,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13351,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471])).
fof(f13351,plain,(
  ( ! [X420,X422,X418,X421,X423,X417,X419] : (s(bool,X418) != s(bool,'const.combin.K_2'(s(bool,X417),s(X419,X420))) | s(bool,X418) = s(bool,X421) | s(bool,'T_0') = s(bool,X421) | s(bool,'T_0') = s(bool,happ(s(fun(X422,bool),'const.combin.K_1'(s(bool,X417))),s(X422,X423)))) ) | ($spl23 | $spl32)),
  inference(subsumption_resolution,[],[f9844,f450])).
fof(f9844,plain,(
  ( ! [X420,X422,X418,X421,X423,X417,X419] : (s(bool,X418) != s(bool,'const.combin.K_2'(s(bool,X417),s(X419,X420))) | s(bool,X418) = s(bool,X421) | s(bool,'T_0') = s(bool,X421) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X422,bool),'const.combin.K_1'(s(bool,X417))),s(X422,X423)))) ) | $spl32),
  inference(superposition,[],[f4994,f544])).
fof(f13350,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13349,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471])).
fof(f13349,plain,(
  ( ! [X412,X414,X410,X416,X413,X415,X411] : (s(bool,X410) != s(bool,X411) | s(bool,X412) = s(bool,'const.combin.K_2'(s(bool,X411),s(X413,X414))) | s(bool,'T_0') = s(bool,X412) | s(bool,'T_0') = s(bool,happ(s(fun(X415,bool),'const.combin.K_1'(s(bool,X410))),s(X415,X416)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9843,f450])).
fof(f9843,plain,(
  ( ! [X412,X414,X410,X416,X413,X415,X411] : (s(bool,X410) != s(bool,X411) | s(bool,X412) = s(bool,'const.combin.K_2'(s(bool,X411),s(X413,X414))) | s(bool,'T_0') = s(bool,X412) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X415,bool),'const.combin.K_1'(s(bool,X410))),s(X415,X416)))) )),
  inference(superposition,[],[f4879,f544])).
fof(f13348,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13347,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471])).
fof(f13347,plain,(
  ( ! [X383,X389,X385,X387,X388,X390,X384,X386] : (s(bool,X384) = s(bool,'const.combin.K_2'(s(bool,X383),s(X385,X386))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X384),s(X387,X388))) | s(bool,'T_0') = s(bool,happ(s(fun(X389,bool),'const.combin.K_1'(s(bool,X383))),s(X389,X390)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9839,f450])).
fof(f9839,plain,(
  ( ! [X383,X389,X385,X387,X388,X390,X384,X386] : (s(bool,X384) = s(bool,'const.combin.K_2'(s(bool,X383),s(X385,X386))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X384),s(X387,X388))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X389,bool),'const.combin.K_1'(s(bool,X383))),s(X389,X390)))) )),
  inference(superposition,[],[f3152,f544])).
fof(f13346,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13345,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471])).
fof(f13345,plain,(
  ( ! [X372,X374,X370,X376,X373,X375,X369,X371] : (s(bool,X370) = s(bool,'const.combin.K_2'(s(bool,X369),s(X371,X372))) | s(bool,'T_0') = s(bool,happ(s(fun(X373,bool),'const.combin.K_1'(s(bool,X370))),s(X373,X374))) | s(bool,'T_0') = s(bool,happ(s(fun(X375,bool),'const.combin.K_1'(s(bool,X369))),s(X375,X376)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9837,f450])).
fof(f9837,plain,(
  ( ! [X372,X374,X370,X376,X373,X375,X369,X371] : (s(bool,X370) = s(bool,'const.combin.K_2'(s(bool,X369),s(X371,X372))) | s(bool,'T_0') = s(bool,happ(s(fun(X373,bool),'const.combin.K_1'(s(bool,X370))),s(X373,X374))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X375,bool),'const.combin.K_1'(s(bool,X369))),s(X375,X376)))) )),
  inference(superposition,[],[f2909,f544])).
fof(f13338,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691,f9471])).
fof(f13337,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13336,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691])).
fof(f13336,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s(bool,X139) = s(bool,'const.combin.K_2'(s(bool,X136),s(X137,X138))) | s(bool,'T_0') = s(bool,happ(s(fun(X140,bool),'const.combin.K_1'(s(bool,X139))),s(X140,X141))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),'const.combin.K_1'(s(bool,X136))),s(X142,X143)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9465,f450])).
fof(f9465,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X139) = s(bool,'const.combin.K_2'(s(bool,X136),s(X137,X138))) | s(bool,'T_0') = s(bool,happ(s(fun(X140,bool),'const.combin.K_1'(s(bool,X139))),s(X140,X141))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),'const.combin.K_1'(s(bool,X136))),s(X142,X143)))) )),
  inference(superposition,[],[f544,f904])).
fof(f13335,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13334,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691])).
fof(f13334,plain,(
  ( ! [X121,X118,X116,X122,X120,X119,X117,X115] : (s(bool,X118) = s(bool,'const.combin.K_2'(s(bool,X115),s(X116,X117))) | s(bool,'T_0') = s(bool,happ(s(fun(X119,bool),'const.combin.K_1'(s(bool,X118))),s(X119,X120))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X115),s(X121,X122)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9463,f450])).
fof(f9463,plain,(
  ( ! [X121,X118,X116,X122,X120,X119,X117,X115] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X118) = s(bool,'const.combin.K_2'(s(bool,X115),s(X116,X117))) | s(bool,'T_0') = s(bool,happ(s(fun(X119,bool),'const.combin.K_1'(s(bool,X118))),s(X119,X120))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X115),s(X121,X122)))) )),
  inference(superposition,[],[f544,f504])).
fof(f13333,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13332,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691])).
fof(f13332,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(bool,X101) = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X99))),s(X98,X100))) | s(bool,'T_0') = s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X101))),s(X102,X103))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X104,X105)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9462,f450])).
fof(f9462,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X101) = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X99))),s(X98,X100))) | s(bool,'T_0') = s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X101))),s(X102,X103))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X104,X105)))) )),
  inference(superposition,[],[f544,f505])).
fof(f13331,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13330,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691])).
fof(f13330,plain,(
  ( ! [X94,X92,X97,X95,X93,X96] : (s(bool,X95) = s(bool,happ(s(fun(X92,bool),'const.combin.K_1'(s(bool,X93))),s(X92,X94))) | s(bool,'T_0') = s(bool,happ(s(fun(X96,bool),'const.combin.K_1'(s(bool,X95))),s(X96,X97))) | s(bool,'T_0') = s(bool,X93)) ) | $spl23),
  inference(subsumption_resolution,[],[f9461,f450])).
fof(f9461,plain,(
  ( ! [X94,X92,X97,X95,X93,X96] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X95) = s(bool,happ(s(fun(X92,bool),'const.combin.K_1'(s(bool,X93))),s(X92,X94))) | s(bool,'T_0') = s(bool,happ(s(fun(X96,bool),'const.combin.K_1'(s(bool,X95))),s(X96,X97))) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f544,f6347])).
fof(f13325,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692,f8691])).
fof(f13324,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676,f8692])).
fof(f13323,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321,f8676])).
fof(f13322,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319,f13321])).
fof(f13320,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313,f13319])).
fof(f13314,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216,f13313])).
fof(f13311,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145,f8216])).
fof(f13310,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13309,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145])).
fof(f13309,plain,(
  ( ! [X161,X159,X155,X162,X160] : (s(bool,'T_0') = s(bool,happ(s(fun(X159,bool),'const.combin.K_1'(s(bool,X155))),s(X159,X160))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X161,X162)))) ) | $spl23),
  inference(forward_demodulation,[],[f13308,f399])).
fof(f13308,plain,(
  ( ! [X156,X154,X161,X159,X155,X162,X160] : (s(bool,'T_0') = s(bool,happ(s(fun(X159,bool),'const.combin.K_1'(s(bool,happ(s(fun(X154,bool),'const.combin.K_1'(s(bool,X155))),s(X154,X156))))),s(X159,X160))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X161,X162)))) ) | $spl23),
  inference(subsumption_resolution,[],[f8477,f450])).
fof(f8477,plain,(
  ( ! [X156,X154,X161,X159,X155,X162,X160] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X159,bool),'const.combin.K_1'(s(bool,happ(s(fun(X154,bool),'const.combin.K_1'(s(bool,X155))),s(X154,X156))))),s(X159,X160))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X161,X162)))) )),
  inference(forward_demodulation,[],[f8208,f367])).
fof(f8208,plain,(
  ( ! [X158,X156,X154,X161,X159,X157,X155,X162,X160] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X157,X158))) | s(bool,'T_0') = s(bool,happ(s(fun(X159,bool),'const.combin.K_1'(s(bool,happ(s(fun(X154,bool),'const.combin.K_1'(s(bool,X155))),s(X154,X156))))),s(X159,X160))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X161,X162)))) )),
  inference(superposition,[],[f904,f2909])).
fof(f13307,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13306,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145])).
fof(f13306,plain,(
  ( ! [X85,X83,X79,X86,X84] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X79),s(X83,X84))) | s(bool,X79) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X85,X86)))) ) | $spl23),
  inference(forward_demodulation,[],[f13305,f399])).
fof(f13305,plain,(
  ( ! [X80,X78,X85,X83,X79,X86,X84] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X78,bool),'const.combin.K_1'(s(bool,X79))),s(X78,X80))),s(X83,X84))) | s(bool,X79) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X85,X86)))) ) | $spl23),
  inference(subsumption_resolution,[],[f8466,f450])).
fof(f8466,plain,(
  ( ! [X80,X78,X85,X83,X79,X86,X84] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X78,bool),'const.combin.K_1'(s(bool,X79))),s(X78,X80))),s(X83,X84))) | s(bool,X79) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X85,X86)))) )),
  inference(forward_demodulation,[],[f8199,f399])).
fof(f8199,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X86,X84,X82] : (s(bool,'F_0') = s(bool,happ(s(fun(X81,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X81,X82))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X78,bool),'const.combin.K_1'(s(bool,X79))),s(X78,X80))),s(X83,X84))) | s(bool,X79) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X85,X86)))) )),
  inference(superposition,[],[f505,f2909])).
fof(f13304,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13303,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145])).
fof(f13303,plain,(
  ( ! [X70,X76,X74,X77,X75] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X74,X75))) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X76,X77)))) ) | $spl23),
  inference(forward_demodulation,[],[f13302,f399])).
fof(f13302,plain,(
  ( ! [X70,X76,X74,X71,X69,X77,X75] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X69,bool),'const.combin.K_1'(s(bool,X70))),s(X69,X71))),s(X74,X75))) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X76,X77)))) ) | $spl23),
  inference(subsumption_resolution,[],[f8463,f450])).
fof(f8463,plain,(
  ( ! [X70,X76,X74,X71,X69,X77,X75] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X69,bool),'const.combin.K_1'(s(bool,X70))),s(X69,X71))),s(X74,X75))) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X76,X77)))) )),
  inference(forward_demodulation,[],[f8198,f367])).
fof(f8198,plain,(
  ( ! [X70,X76,X74,X72,X71,X69,X77,X75,X73] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X72,X73))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X69,bool),'const.combin.K_1'(s(bool,X70))),s(X69,X71))),s(X74,X75))) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X76,X77)))) )),
  inference(superposition,[],[f504,f2909])).
fof(f13301,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101,f8145])).
fof(f13300,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13299,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101])).
fof(f13299,plain,(
  ( ! [X94,X95,X93] : (s(bool,'T_0') != s(bool,X93) | s(bool,'T_0') = s(bool,happ(s(fun(X94,bool),'const.combin.K_1'(s(bool,X93))),s(X94,X95)))) ) | $spl23),
  inference(subsumption_resolution,[],[f8113,f450])).
fof(f8113,plain,(
  ( ! [X94,X95,X93] : (s(bool,'T_0') != s(bool,X93) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X94,bool),'const.combin.K_1'(s(bool,X93))),s(X94,X95)))) )),
  inference(superposition,[],[f2851,f2909])).
fof(f13298,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100,f8101])).
fof(f13297,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293,f8100])).
fof(f13294,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285,f13293])).
fof(f13286,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280,f13285])).
fof(f13281,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276,f13280])).
fof(f13277,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272,f13276])).
fof(f13273,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995,f13272])).
fof(f13270,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266,f7995])).
fof(f13267,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368,f13266])).
fof(f13263,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260,f8368])).
fof(f13261,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848,f13260])).
fof(f13258,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256,f7848])).
fof(f13257,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246,f13256])).
fof(f13251,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13250,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246])).
fof(f13250,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X42,X40] : (s(bool,X36) = s(bool,'const.combin.K_2'(s(bool,X35),s(X37,X38))) | s(bool,'T_0') = s(bool,happ(s(fun(X39,bool),'const.combin.K_1'(s(bool,X36))),s(X39,X40))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X35),s(X41,X42)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7724,f450])).
fof(f7724,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X42,X40] : (s(bool,X36) = s(bool,'const.combin.K_2'(s(bool,X35),s(X37,X38))) | s(bool,'T_0') = s(bool,happ(s(fun(X39,bool),'const.combin.K_1'(s(bool,X36))),s(X39,X40))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X35),s(X41,X42)))) )),
  inference(superposition,[],[f2909,f543])).
fof(f13247,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242,f13246])).
fof(f13243,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490,f13242])).
fof(f13240,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238,f7490])).
fof(f13239,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560,f13238])).
fof(f13237,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554,f7560])).
fof(f13236,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478,f7554])).
fof(f13235,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493,f7478])).
fof(f13234,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108,f7493])).
fof(f13233,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13232,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108])).
fof(f13232,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),'const.combin.K_1'(s(bool,X21))),s(X22,X23)))) ) | $spl23),
  inference(subsumption_resolution,[],[f13231,f450])).
fof(f13231,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') != s(bool,X21) | s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),'const.combin.K_1'(s(bool,X21))),s(X22,X23)))) )),
  inference(forward_demodulation,[],[f7473,f399])).
fof(f7473,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') != s(bool,X21) | s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),'const.combin.K_1'(s(bool,X21))),s(X22,X23))) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X24,X25)))) )),
  inference(superposition,[],[f2143,f505])).
fof(f13230,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13229,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108])).
fof(f13229,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,X7) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),'const.combin.K_1'(s(bool,X7))),s(X8,X9)))) ) | $spl23),
  inference(subsumption_resolution,[],[f13228,f450])).
fof(f13228,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') != s(bool,X7) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),'const.combin.K_1'(s(bool,X7))),s(X8,X9)))) )),
  inference(forward_demodulation,[],[f7471,f367])).
fof(f7471,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,'T_0') != s(bool,X7) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),'const.combin.K_1'(s(bool,X7))),s(X8,X9))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X10,X11)))) )),
  inference(superposition,[],[f2143,f504])).
fof(f13227,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13226,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108])).
fof(f13226,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7470,f450])).
fof(f7470,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f2143,f438])).
fof(f13225,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13224,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108])).
fof(f13224,plain,(
  ( ! [X218,X222,X220,X219,X217,X223,X221,X224] : (s(bool,X220) = s(bool,'const.combin.K_2'(s(bool,X217),s(X218,X219))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X220),s(X221,X222))) | s(bool,'T_0') = s(bool,happ(s(fun(X223,bool),'const.combin.K_1'(s(bool,X217))),s(X223,X224)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7118,f450])).
fof(f7118,plain,(
  ( ! [X218,X222,X220,X219,X217,X223,X221,X224] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X220) = s(bool,'const.combin.K_2'(s(bool,X217),s(X218,X219))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X220),s(X221,X222))) | s(bool,'T_0') = s(bool,happ(s(fun(X223,bool),'const.combin.K_1'(s(bool,X217))),s(X223,X224)))) )),
  inference(superposition,[],[f543,f904])).
fof(f13223,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046,f7108])).
fof(f13222,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424,f7046])).
fof(f13221,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13220,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13220,plain,(
  ( ! [X80,X76,X83,X81,X82] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X76),s(X80,X81))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X76),s(X82,X83)))) ) | $spl23),
  inference(forward_demodulation,[],[f13219,f399])).
fof(f13219,plain,(
  ( ! [X80,X76,X83,X81,X77,X75,X82] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X75,bool),'const.combin.K_1'(s(bool,X76))),s(X75,X77))),s(X80,X81))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X76),s(X82,X83)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7290,f450])).
fof(f7290,plain,(
  ( ! [X80,X76,X83,X81,X77,X75,X82] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X75,bool),'const.combin.K_1'(s(bool,X76))),s(X75,X77))),s(X80,X81))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X76),s(X82,X83)))) )),
  inference(forward_demodulation,[],[f7032,f399])).
fof(f7032,plain,(
  ( ! [X80,X78,X76,X83,X81,X79,X77,X75,X82] : (s(bool,'F_0') = s(bool,happ(s(fun(X78,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X78,X79))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X75,bool),'const.combin.K_1'(s(bool,X76))),s(X75,X77))),s(X80,X81))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X76),s(X82,X83)))) )),
  inference(superposition,[],[f505,f904])).
fof(f13218,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13217,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13217,plain,(
  ( ! [X74,X72,X71,X67,X73] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X67),s(X71,X72))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X67),s(X73,X74)))) ) | $spl23),
  inference(forward_demodulation,[],[f13216,f399])).
fof(f13216,plain,(
  ( ! [X68,X66,X74,X72,X71,X67,X73] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X66,bool),'const.combin.K_1'(s(bool,X67))),s(X66,X68))),s(X71,X72))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X67),s(X73,X74)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7287,f450])).
fof(f7287,plain,(
  ( ! [X68,X66,X74,X72,X71,X67,X73] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X66,bool),'const.combin.K_1'(s(bool,X67))),s(X66,X68))),s(X71,X72))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X67),s(X73,X74)))) )),
  inference(forward_demodulation,[],[f7031,f367])).
fof(f7031,plain,(
  ( ! [X70,X68,X66,X74,X72,X71,X69,X67,X73] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X69,X70))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X66,bool),'const.combin.K_1'(s(bool,X67))),s(X66,X68))),s(X71,X72))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X67),s(X73,X74)))) )),
  inference(superposition,[],[f504,f904])).
fof(f13215,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13214,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13214,plain,(
  ( ! [X103,X109,X107,X105,X102,X108,X106,X104] : (s(bool,'T_0') = s(bool,happ(s(fun(X105,bool),'const.combin.K_1'(s(bool,X102))),s(X105,X106))) | s(bool,X107) = s(bool,'const.combin.K_2'(s(bool,X102),s(X103,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7017,f450])).
fof(f7017,plain,(
  ( ! [X103,X109,X107,X105,X102,X108,X106,X104] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X105,bool),'const.combin.K_1'(s(bool,X102))),s(X105,X106))) | s(bool,X107) = s(bool,'const.combin.K_2'(s(bool,X102),s(X103,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109)))) )),
  inference(superposition,[],[f904,f543])).
fof(f13213,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13212,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13212,plain,(
  ( ! [X208,X206,X200,X207,X205] : (s(bool,'T_0') = s(bool,happ(s(fun(X205,bool),'const.combin.K_1'(s(bool,X200))),s(X205,X206))) | s(bool,X200) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X207,X208)))) ) | $spl23),
  inference(forward_demodulation,[],[f13211,f367])).
fof(f13211,plain,(
  ( ! [X208,X206,X202,X200,X207,X205,X201] : (s(bool,'T_0') = s(bool,happ(s(fun(X205,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X200),s(X201,X202))))),s(X205,X206))) | s(bool,X200) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X207,X208)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7280,f450])).
fof(f7280,plain,(
  ( ! [X208,X206,X202,X200,X207,X205,X201] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X205,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X200),s(X201,X202))))),s(X205,X206))) | s(bool,X200) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X207,X208)))) )),
  inference(forward_demodulation,[],[f6902,f367])).
fof(f6902,plain,(
  ( ! [X208,X206,X204,X202,X200,X207,X205,X203,X201] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X203,X204))) | s(bool,'T_0') = s(bool,happ(s(fun(X205,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X200),s(X201,X202))))),s(X205,X206))) | s(bool,X200) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X207,X208)))) )),
  inference(superposition,[],[f904,f3152])).
fof(f13208,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13207,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13207,plain,(
  ( ! [X167,X165,X159,X166,X164] : (s(bool,'T_0') = s(bool,happ(s(fun(X164,bool),'const.combin.K_1'(s(bool,X159))),s(X164,X165))) | s(bool,'F_0') = s(bool,happ(s(fun(X166,bool),'const.combin.K_1'(s(bool,X159))),s(X166,X167)))) ) | $spl23),
  inference(forward_demodulation,[],[f13206,f367])).
fof(f13206,plain,(
  ( ! [X167,X165,X161,X159,X166,X164,X160] : (s(bool,'T_0') = s(bool,happ(s(fun(X164,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X159),s(X160,X161))))),s(X164,X165))) | s(bool,'F_0') = s(bool,happ(s(fun(X166,bool),'const.combin.K_1'(s(bool,X159))),s(X166,X167)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7274,f450])).
fof(f7274,plain,(
  ( ! [X167,X165,X161,X159,X166,X164,X160] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X164,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X159),s(X160,X161))))),s(X164,X165))) | s(bool,'F_0') = s(bool,happ(s(fun(X166,bool),'const.combin.K_1'(s(bool,X159))),s(X166,X167)))) )),
  inference(forward_demodulation,[],[f6897,f367])).
fof(f6897,plain,(
  ( ! [X167,X165,X163,X161,X159,X166,X164,X162,X160] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X162,X163))) | s(bool,'T_0') = s(bool,happ(s(fun(X164,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X159),s(X160,X161))))),s(X164,X165))) | s(bool,'F_0') = s(bool,happ(s(fun(X166,bool),'const.combin.K_1'(s(bool,X159))),s(X166,X167)))) )),
  inference(superposition,[],[f904,f505])).
fof(f13205,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13204,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13204,plain,(
  ( ! [X146,X149,X147,X141,X148] : (s(bool,'T_0') = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,X141))),s(X146,X147))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X141),s(X148,X149)))) ) | $spl23),
  inference(forward_demodulation,[],[f13203,f367])).
fof(f13203,plain,(
  ( ! [X146,X142,X149,X147,X143,X141,X148] : (s(bool,'T_0') = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143))))),s(X146,X147))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X141),s(X148,X149)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7271,f450])).
fof(f7271,plain,(
  ( ! [X146,X142,X149,X147,X143,X141,X148] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143))))),s(X146,X147))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X141),s(X148,X149)))) )),
  inference(forward_demodulation,[],[f6895,f367])).
fof(f6895,plain,(
  ( ! [X146,X144,X142,X149,X147,X145,X143,X141,X148] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X144,X145))) | s(bool,'T_0') = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143))))),s(X146,X147))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X141),s(X148,X149)))) )),
  inference(superposition,[],[f904,f504])).
fof(f13202,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13201,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13201,plain,(
  ( ! [X134,X140,X139] : (s(bool,'T_0') = s(bool,happ(s(fun(X139,bool),'const.combin.K_1'(s(bool,X134))),s(X139,X140))) | s(bool,'F_0') = s(bool,X134)) ) | $spl23),
  inference(forward_demodulation,[],[f13200,f367])).
fof(f13200,plain,(
  ( ! [X134,X140,X136,X135,X139] : (s(bool,'T_0') = s(bool,happ(s(fun(X139,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X134),s(X135,X136))))),s(X139,X140))) | s(bool,'F_0') = s(bool,X134)) ) | $spl23),
  inference(subsumption_resolution,[],[f7268,f450])).
fof(f7268,plain,(
  ( ! [X134,X140,X136,X135,X139] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X139,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X134),s(X135,X136))))),s(X139,X140))) | s(bool,'F_0') = s(bool,X134)) )),
  inference(forward_demodulation,[],[f6894,f367])).
fof(f6894,plain,(
  ( ! [X134,X140,X138,X136,X135,X139,X137] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X137,X138))) | s(bool,'T_0') = s(bool,happ(s(fun(X139,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,X134),s(X135,X136))))),s(X139,X140))) | s(bool,'F_0') = s(bool,X134)) )),
  inference(superposition,[],[f904,f438])).
fof(f13199,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13198,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13198,plain,(
  ( ! [X132,X128,X133] : (s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,X128))),s(X132,X133))) | s(bool,'F_0') = s(bool,X128)) ) | $spl23),
  inference(forward_demodulation,[],[f13197,f399])).
fof(f13197,plain,(
  ( ! [X127,X132,X128,X133,X129] : (s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,happ(s(fun(X127,bool),'const.combin.K_1'(s(bool,X128))),s(X127,X129))))),s(X132,X133))) | s(bool,'F_0') = s(bool,X128)) ) | $spl23),
  inference(subsumption_resolution,[],[f7265,f450])).
fof(f7265,plain,(
  ( ! [X127,X132,X128,X133,X129] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,happ(s(fun(X127,bool),'const.combin.K_1'(s(bool,X128))),s(X127,X129))))),s(X132,X133))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(forward_demodulation,[],[f6893,f367])).
fof(f6893,plain,(
  ( ! [X127,X132,X130,X128,X133,X131,X129] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X130,X131))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,happ(s(fun(X127,bool),'const.combin.K_1'(s(bool,X128))),s(X127,X129))))),s(X132,X133))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(superposition,[],[f904,f475])).
fof(f13196,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13195,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13195,plain,(
  ( ! [X103,X109,X107,X110,X108] : (s(bool,'T_0') = s(bool,happ(s(fun(X107,bool),'const.combin.K_1'(s(bool,X103))),s(X107,X108))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X103),s(X109,X110)))) ) | $spl23),
  inference(forward_demodulation,[],[f13194,f399])).
fof(f13194,plain,(
  ( ! [X103,X109,X107,X102,X110,X108,X104] : (s(bool,'T_0') = s(bool,happ(s(fun(X107,bool),'const.combin.K_1'(s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X103))),s(X102,X104))))),s(X107,X108))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X103),s(X109,X110)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7262,f450])).
fof(f7262,plain,(
  ( ! [X103,X109,X107,X102,X110,X108,X104] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X107,bool),'const.combin.K_1'(s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X103))),s(X102,X104))))),s(X107,X108))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X103),s(X109,X110)))) )),
  inference(forward_demodulation,[],[f6890,f367])).
fof(f6890,plain,(
  ( ! [X103,X109,X107,X105,X102,X110,X108,X106,X104] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X105,X106))) | s(bool,'T_0') = s(bool,happ(s(fun(X107,bool),'const.combin.K_1'(s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X103))),s(X102,X104))))),s(X107,X108))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X103),s(X109,X110)))) )),
  inference(superposition,[],[f904,f904])).
fof(f13193,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13192,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13192,plain,(
  ( ! [X94,X99,X97,X95,X93,X100,X98,X96] : (s(bool,X96) = s(bool,happ(s(fun(X93,bool),'const.combin.K_1'(s(bool,X94))),s(X93,X95))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X94),s(X99,X100)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6221,f450])).
fof(f6221,plain,(
  ( ! [X94,X99,X97,X95,X93,X100,X98,X96] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X96) = s(bool,happ(s(fun(X93,bool),'const.combin.K_1'(s(bool,X94))),s(X93,X95))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X94),s(X99,X100)))) )),
  inference(superposition,[],[f543,f505])).
fof(f13191,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13190,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13190,plain,(
  ( ! [X156,X154,X155,X153,X148] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X148),s(X153,X154))) | s(bool,'F_0') = s(bool,happ(s(fun(X155,bool),'const.combin.K_1'(s(bool,X148))),s(X155,X156)))) ) | $spl23),
  inference(forward_demodulation,[],[f13189,f367])).
fof(f13189,plain,(
  ( ! [X156,X154,X149,X155,X153,X150,X148] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X148),s(X149,X150))),s(X153,X154))) | s(bool,'F_0') = s(bool,happ(s(fun(X155,bool),'const.combin.K_1'(s(bool,X148))),s(X155,X156)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6407,f450])).
fof(f6407,plain,(
  ( ! [X156,X154,X149,X155,X153,X150,X148] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X148),s(X149,X150))),s(X153,X154))) | s(bool,'F_0') = s(bool,happ(s(fun(X155,bool),'const.combin.K_1'(s(bool,X148))),s(X155,X156)))) )),
  inference(forward_demodulation,[],[f6159,f367])).
fof(f6159,plain,(
  ( ! [X156,X154,X152,X151,X149,X155,X153,X150,X148] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X151,X152))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X148),s(X149,X150))),s(X153,X154))) | s(bool,'F_0') = s(bool,happ(s(fun(X155,bool),'const.combin.K_1'(s(bool,X148))),s(X155,X156)))) )),
  inference(superposition,[],[f504,f505])).
fof(f13188,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13187,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13187,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53,X51] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X52),s(X54,X55))) | s(bool,X56) = s(bool,happ(s(fun(X51,bool),'const.combin.K_1'(s(bool,X52))),s(X51,X53))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X56),s(X57,X58)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6132,f450])).
fof(f6132,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53,X51] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X52),s(X54,X55))) | s(bool,X56) = s(bool,happ(s(fun(X51,bool),'const.combin.K_1'(s(bool,X52))),s(X51,X53))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X56),s(X57,X58)))) )),
  inference(superposition,[],[f505,f543])).
fof(f13186,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13185,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13185,plain,(
  ( ! [X175,X182,X180,X183,X181] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X175),s(X180,X181))) | s(bool,X175) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X182,X183)))) ) | $spl23),
  inference(forward_demodulation,[],[f13184,f367])).
fof(f13184,plain,(
  ( ! [X177,X175,X182,X180,X176,X183,X181] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X175),s(X176,X177))),s(X180,X181))) | s(bool,X175) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X182,X183)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6396,f450])).
fof(f6396,plain,(
  ( ! [X177,X175,X182,X180,X176,X183,X181] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X175),s(X176,X177))),s(X180,X181))) | s(bool,X175) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X182,X183)))) )),
  inference(forward_demodulation,[],[f6028,f399])).
fof(f6028,plain,(
  ( ! [X177,X175,X182,X180,X178,X176,X183,X181,X179] : (s(bool,'F_0') = s(bool,happ(s(fun(X178,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X178,X179))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X175),s(X176,X177))),s(X180,X181))) | s(bool,X175) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X182,X183)))) )),
  inference(superposition,[],[f505,f3152])).
fof(f13181,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13180,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13180,plain,(
  ( ! [X151,X149,X143,X150,X148] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X143),s(X148,X149))) | s(bool,'F_0') = s(bool,happ(s(fun(X150,bool),'const.combin.K_1'(s(bool,X143))),s(X150,X151)))) ) | $spl23),
  inference(forward_demodulation,[],[f13179,f367])).
fof(f13179,plain,(
  ( ! [X144,X151,X149,X145,X143,X150,X148] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X143),s(X144,X145))),s(X148,X149))) | s(bool,'F_0') = s(bool,happ(s(fun(X150,bool),'const.combin.K_1'(s(bool,X143))),s(X150,X151)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6390,f450])).
fof(f6390,plain,(
  ( ! [X144,X151,X149,X145,X143,X150,X148] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X143),s(X144,X145))),s(X148,X149))) | s(bool,'F_0') = s(bool,happ(s(fun(X150,bool),'const.combin.K_1'(s(bool,X143))),s(X150,X151)))) )),
  inference(forward_demodulation,[],[f6024,f399])).
fof(f6024,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X143,X150,X148] : (s(bool,'F_0') = s(bool,happ(s(fun(X146,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X146,X147))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X143),s(X144,X145))),s(X148,X149))) | s(bool,'F_0') = s(bool,happ(s(fun(X150,bool),'const.combin.K_1'(s(bool,X143))),s(X150,X151)))) )),
  inference(superposition,[],[f505,f505])).
fof(f13178,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13177,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13177,plain,(
  ( ! [X125,X132,X130,X133,X131] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X125),s(X130,X131))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X125),s(X132,X133)))) ) | $spl23),
  inference(forward_demodulation,[],[f13176,f367])).
fof(f13176,plain,(
  ( ! [X127,X125,X132,X130,X126,X133,X131] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X125),s(X126,X127))),s(X130,X131))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X125),s(X132,X133)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6387,f450])).
fof(f6387,plain,(
  ( ! [X127,X125,X132,X130,X126,X133,X131] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X125),s(X126,X127))),s(X130,X131))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X125),s(X132,X133)))) )),
  inference(forward_demodulation,[],[f6022,f399])).
fof(f6022,plain,(
  ( ! [X127,X125,X132,X130,X128,X126,X133,X131,X129] : (s(bool,'F_0') = s(bool,happ(s(fun(X128,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X128,X129))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X125),s(X126,X127))),s(X130,X131))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X125),s(X132,X133)))) )),
  inference(superposition,[],[f505,f504])).
fof(f13175,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13174,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13174,plain,(
  ( ! [X123,X118,X124] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X118),s(X123,X124))) | s(bool,'F_0') = s(bool,X118)) ) | $spl23),
  inference(forward_demodulation,[],[f13173,f367])).
fof(f13173,plain,(
  ( ! [X123,X118,X124,X120,X119] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X118),s(X119,X120))),s(X123,X124))) | s(bool,'F_0') = s(bool,X118)) ) | $spl23),
  inference(subsumption_resolution,[],[f6384,f450])).
fof(f6384,plain,(
  ( ! [X123,X118,X124,X120,X119] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X118),s(X119,X120))),s(X123,X124))) | s(bool,'F_0') = s(bool,X118)) )),
  inference(forward_demodulation,[],[f6021,f399])).
fof(f6021,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(bool,'F_0') = s(bool,happ(s(fun(X121,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X121,X122))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X118),s(X119,X120))),s(X123,X124))) | s(bool,'F_0') = s(bool,X118)) )),
  inference(superposition,[],[f505,f438])).
fof(f13172,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13171,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13171,plain,(
  ( ! [X116,X112,X117] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X112),s(X116,X117))) | s(bool,'F_0') = s(bool,X112)) ) | $spl23),
  inference(forward_demodulation,[],[f13170,f399])).
fof(f13170,plain,(
  ( ! [X111,X116,X112,X117,X113] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113))),s(X116,X117))) | s(bool,'F_0') = s(bool,X112)) ) | $spl23),
  inference(subsumption_resolution,[],[f6381,f450])).
fof(f6381,plain,(
  ( ! [X111,X116,X112,X117,X113] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113))),s(X116,X117))) | s(bool,'F_0') = s(bool,X112)) )),
  inference(forward_demodulation,[],[f6020,f399])).
fof(f6020,plain,(
  ( ! [X111,X116,X114,X112,X117,X115,X113] : (s(bool,'F_0') = s(bool,happ(s(fun(X114,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X114,X115))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113))),s(X116,X117))) | s(bool,'F_0') = s(bool,X112)) )),
  inference(superposition,[],[f505,f475])).
fof(f13169,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422,f5424])).
fof(f13168,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466,f5422])).
fof(f13167,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218,f5466])).
fof(f13166,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204,f5218])).
fof(f13165,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961,f5204])).
fof(f13164,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13163,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961])).
fof(f13163,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,X30) != s(bool,'const.combin.K_2'(s(bool,X29),s(X31,X32))) | s(bool,X30) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X29),s(X34,X35)))) ) | ($spl23 | $spl32)),
  inference(subsumption_resolution,[],[f5127,f450])).
fof(f5127,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,X30) != s(bool,'const.combin.K_2'(s(bool,X29),s(X31,X32))) | s(bool,X30) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X29),s(X34,X35)))) ) | $spl32),
  inference(superposition,[],[f4994,f543])).
fof(f13162,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13161,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961])).
fof(f13161,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,'const.combin.K_2'(s(bool,X30),s(X32,X33))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X29),s(X34,X35)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5031,f450])).
fof(f5031,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,'const.combin.K_2'(s(bool,X30),s(X32,X33))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X29),s(X34,X35)))) )),
  inference(superposition,[],[f4879,f543])).
fof(f13160,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947,f4961])).
fof(f13159,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014,f4947])).
fof(f13158,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13157,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014])).
fof(f13157,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,X18) != s(bool,'const.combin.K_2'(s(bool,X17),s(bool,X18))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) ) | ($spl23 | $spl32)),
  inference(subsumption_resolution,[],[f4917,f450])).
fof(f4917,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,X18) != s(bool,'const.combin.K_2'(s(bool,X17),s(bool,X18))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) ) | $spl32),
  inference(superposition,[],[f3237,f543])).
fof(f13156,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13155,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014])).
fof(f13155,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,X17) != s(bool,X18) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4854,f450])).
fof(f4854,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,X17) != s(bool,X18) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) )),
  inference(superposition,[],[f4753,f543])).
fof(f13151,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013,f4014])).
fof(f13150,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907,f4013])).
fof(f13149,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877,f3907])).
fof(f13148,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13147,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877])).
fof(f13147,plain,(
  ( ! [X109,X116,X114,X117,X115] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X109),s(X114,X115))) | s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X116,X117)))) ) | $spl23),
  inference(forward_demodulation,[],[f13146,f367])).
fof(f13146,plain,(
  ( ! [X111,X109,X116,X114,X110,X117,X115] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X109),s(X110,X111))),s(X114,X115))) | s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X116,X117)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4161,f450])).
fof(f4161,plain,(
  ( ! [X111,X109,X116,X114,X110,X117,X115] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X109),s(X110,X111))),s(X114,X115))) | s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X116,X117)))) )),
  inference(forward_demodulation,[],[f3896,f367])).
fof(f3896,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X117,X115,X113] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X112,X113))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X109),s(X110,X111))),s(X114,X115))) | s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X116,X117)))) )),
  inference(superposition,[],[f504,f3152])).
fof(f13145,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752,f3877])).
fof(f13144,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13143,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752])).
fof(f13143,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X42,X40] : (s(bool,X36) = s(bool,'const.combin.K_2'(s(bool,X35),s(X37,X38))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X36),s(X39,X40))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X35),s(X41,X42)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3785,f450])).
fof(f3785,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X42,X40] : (s(bool,X36) = s(bool,'const.combin.K_2'(s(bool,X35),s(X37,X38))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X36),s(X39,X40))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X35),s(X41,X42)))) )),
  inference(superposition,[],[f3152,f543])).
fof(f13142,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606,f3752])).
fof(f13141,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380,f3606])).
fof(f13140,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13139,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380])).
fof(f13139,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X23),s(X24,X25))) | s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X24,X25))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X23),s(X27,X28)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3518,f450])).
fof(f3518,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X23),s(X24,X25))) | s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X24,X25))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X23),s(X27,X28)))) )),
  inference(superposition,[],[f3089,f543])).
fof(f13138,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494,f3380])).
fof(f13137,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029,f3494])).
fof(f13136,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13135,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029])).
fof(f13135,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X17),s(X18,X19))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) ) | ($spl23 | $spl32)),
  inference(subsumption_resolution,[],[f3221,f450])).
fof(f3221,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X17),s(X18,X19))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) ) | $spl32),
  inference(superposition,[],[f3172,f543])).
fof(f13134,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905,f3029])).
fof(f13133,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131,f2905])).
fof(f13132,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127,f13131])).
fof(f13128,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059,f13127])).
fof(f13119,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13118,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059])).
fof(f13118,plain,(
  ( ! [X94,X92,X97,X95,X93,X91,X98,X96] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X91),s(X94,X95))) | s(bool,X96) = s(bool,'const.combin.K_2'(s(bool,X91),s(X92,X93))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98)))) ) | $spl23),
  inference(subsumption_resolution,[],[f1866,f450])).
fof(f1866,plain,(
  ( ! [X94,X92,X97,X95,X93,X91,X98,X96] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X91),s(X94,X95))) | s(bool,X96) = s(bool,'const.combin.K_2'(s(bool,X91),s(X92,X93))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98)))) )),
  inference(superposition,[],[f504,f543])).
fof(f13115,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13114,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059])).
fof(f13114,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s(bool,X53) = s(bool,'const.combin.K_2'(s(bool,X50),s(X51,X52))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X53),s(X54,X55))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X56,X57)))) ) | $spl23),
  inference(subsumption_resolution,[],[f1670,f450])).
fof(f1670,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X53) = s(bool,'const.combin.K_2'(s(bool,X50),s(X51,X52))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X53),s(X54,X55))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X56,X57)))) )),
  inference(superposition,[],[f543,f504])).
fof(f13113,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13112,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059])).
fof(f13112,plain,(
  ( ! [X76,X71,X77] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X71),s(X76,X77))) | s(bool,'F_0') = s(bool,X71)) ) | $spl23),
  inference(forward_demodulation,[],[f13111,f367])).
fof(f13111,plain,(
  ( ! [X76,X72,X71,X77,X73] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X71),s(X72,X73))),s(X76,X77))) | s(bool,'F_0') = s(bool,X71)) ) | $spl23),
  inference(subsumption_resolution,[],[f1474,f450])).
fof(f1474,plain,(
  ( ! [X76,X72,X71,X77,X73] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X71),s(X72,X73))),s(X76,X77))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(forward_demodulation,[],[f1331,f367])).
fof(f1331,plain,(
  ( ! [X76,X74,X72,X71,X77,X75,X73] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X74,X75))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X71),s(X72,X73))),s(X76,X77))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f504,f438])).
fof(f13110,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13109,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059])).
fof(f13109,plain,(
  ( ! [X70,X68,X62,X69,X67] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X67,X68))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X69,X70)))) ) | $spl23),
  inference(forward_demodulation,[],[f13108,f367])).
fof(f13108,plain,(
  ( ! [X70,X68,X64,X62,X69,X67,X63] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X62),s(X63,X64))),s(X67,X68))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X69,X70)))) ) | $spl23),
  inference(subsumption_resolution,[],[f1471,f450])).
fof(f1471,plain,(
  ( ! [X70,X68,X64,X62,X69,X67,X63] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X62),s(X63,X64))),s(X67,X68))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X69,X70)))) )),
  inference(forward_demodulation,[],[f1330,f367])).
fof(f1330,plain,(
  ( ! [X70,X68,X66,X64,X62,X69,X67,X65,X63] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X65,X66))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'const.combin.K_2'(s(bool,X62),s(X63,X64))),s(X67,X68))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X69,X70)))) )),
  inference(superposition,[],[f504,f504])).
fof(f13107,plain,(
  $false | ($spl23 | $spl28 | $spl32)),
  inference(global_subsumption,[],[f13106,f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059])).
fof(f13106,plain,(
  ( ! [X47,X52,X51] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X47),s(X51,X52))) | s(bool,'F_0') = s(bool,X47)) ) | $spl23),
  inference(forward_demodulation,[],[f13105,f399])).
fof(f13105,plain,(
  ( ! [X47,X52,X48,X46,X51] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X46,bool),'const.combin.K_1'(s(bool,X47))),s(X46,X48))),s(X51,X52))) | s(bool,'F_0') = s(bool,X47)) ) | $spl23),
  inference(subsumption_resolution,[],[f1468,f450])).
fof(f1468,plain,(
  ( ! [X47,X52,X48,X46,X51] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X46,bool),'const.combin.K_1'(s(bool,X47))),s(X46,X48))),s(X51,X52))) | s(bool,'F_0') = s(bool,X47)) )),
  inference(forward_demodulation,[],[f1328,f367])).
fof(f1328,plain,(
  ( ! [X47,X52,X50,X48,X46,X51,X49] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X49,X50))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,happ(s(fun(X46,bool),'const.combin.K_1'(s(bool,X47))),s(X46,X48))),s(X51,X52))) | s(bool,'F_0') = s(bool,X47)) )),
  inference(superposition,[],[f504,f475])).
fof(f13104,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057,f12059])).
fof(f13103,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977,f12057])).
fof(f13102,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775,f11977])).
fof(f13101,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961,f11775])).
fof(f13100,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347,f9961])).
fof(f13099,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912,f6347])).
fof(f13098,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6347,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911,f5912])).
fof(f13097,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6347,f5912,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905,f5911])).
fof(f13096,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6347,f5911,f5912,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505,f905])).
fof(f13095,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f543,f544,f556,f566,f567,f610,f613,f904,f905,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6347,f5911,f5912,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464,f505])).
fof(f13094,plain,(
  $false | ($spl28 | $spl32)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f505,f543,f544,f556,f566,f567,f610,f613,f904,f905,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3172,f3236,f3237,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f4945,f4993,f4994,f5025,f5119,f5120,f5425,f5459,f5452,f6347,f5911,f5912,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10308,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f12915,f1671,f1688,f1691,f1904,f1917,f9778,f1464])).
fof(f13093,plain,(
  $false | ($spl23 | $spl36)),
  inference(subsumption_resolution,[],[f450,f13073])).
fof(f13073,plain,(
  ( ! [X868] : (s(bool,'T_0') = s(bool,X868)) ) | $spl36),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f475,f504,f505,f543,f544,f556,f566,f567,f610,f613,f904,f905,f913,f1251,f1252,f1253,f1270,f1319,f1343,f2074,f1652,f1653,f1654,f1672,f1692,f1703,f1704,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3089,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f5025,f5425,f5459,f5452,f6347,f5911,f5912,f6781,f6782,f7364,f7365,f7827,f7901,f7902,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f9511,f9529,f9530,f9531,f9775,f9906,f9909,f9914,f9916,f9917,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12778,f12899,f12901,f12906,f12908,f1671,f1688,f1691,f1904,f1917,f12907,f9778])).
fof(f13090,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3323,f13073])).
fof(f3323,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(forward_demodulation,[],[f3322,f367])).
fof(f3322,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | $spl32),
  inference(forward_demodulation,[],[f3209,f367])).
fof(f3209,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1))) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f3172,f1920])).
fof(f13089,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3334,f13073])).
fof(f3334,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(forward_demodulation,[],[f3184,f367])).
fof(f3184,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f3172,f2247])).
fof(f13088,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3307,f13073])).
fof(f3307,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(superposition,[],[f3172,f367])).
fof(f13085,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f4597,f13073])).
fof(f4597,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(forward_demodulation,[],[f4596,f367])).
fof(f4596,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | $spl32),
  inference(forward_demodulation,[],[f4419,f367])).
fof(f4419,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1))) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f3172,f3172,f1908])).
fof(f13084,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f4786,f13073])).
fof(f4786,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(forward_demodulation,[],[f4630,f367])).
fof(f4630,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f3172,f3172,f4595])).
fof(f13083,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f4842,f13073])).
fof(f4842,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f3172,f3172,f4753])).
fof(f13082,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f11350,f13073])).
fof(f11350,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl32),
  inference(forward_demodulation,[],[f11113,f399])).
fof(f11113,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X0,X1)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f3172,f11011])).
fof(f13081,plain,(
  $false | $spl36),
  inference(subsumption_resolution,[],[f13080,f282])).
fof(f13080,plain,(
  ~p(s(bool,'T_0')) | $spl36),
  inference(forward_demodulation,[],[f283,f13073])).
fof(f13077,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3172,f13073])).
fof(f13076,plain,(
  $false | ($spl32 | $spl36)),
  inference(subsumption_resolution,[],[f12915,f13073])).
fof(f13075,plain,(
  $false | ($spl34 | $spl36)),
  inference(subsumption_resolution,[],[f13074,f13073])).
fof(f13074,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X173,X174)))) ) | ($spl34 | $spl36)),
  inference(backward_demodulation,[],[f13073,f12880])).
fof(f13072,plain,(
  $false | ($spl20 | $spl34)),
  inference(subsumption_resolution,[],[f12880,f13056])).
fof(f13056,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(subsumption_resolution,[],[f2256,f448])).
fof(f2256,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2252,f367])).
fof(f2252,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f2125])).
fof(f2125,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1920,f284])).
fof(f13071,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f12915,f13056])).
fof(f13070,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f3172,f13056])).
fof(f13067,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f13066,f282])).
fof(f13066,plain,(
  ~p(s(bool,'T_0')) | $spl20),
  inference(forward_demodulation,[],[f283,f13056])).
fof(f13065,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f11350,f13056])).
fof(f13064,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f4842,f13056])).
fof(f13063,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f4786,f13056])).
fof(f13062,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f4597,f13056])).
fof(f13059,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f3307,f13056])).
fof(f13058,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f3334,f13056])).
fof(f13057,plain,(
  $false | ($spl20 | $spl32)),
  inference(subsumption_resolution,[],[f3323,f13056])).
fof(f13055,plain,(
  ( ! [X92,X90,X87,X85,X91,X86] : (s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X85),s(X86,X87))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X85),s(X91,X92))) | s(bool,'T_0') = s(bool,X90)) ) | $spl40),
  inference(cnf_transformation,[],[f13055_D])).
fof(f13055_D,plain,(
  ( ! [X92,X90,X87,X85,X91,X86] : (s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X85),s(X86,X87))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X85),s(X91,X92))) | s(bool,'T_0') = s(bool,X90)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1464,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26)))) ) | $spl28),
  inference(cnf_transformation,[],[f1464_D])).
fof(f1464_D,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1688,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X88,X89))) | s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X85),s(X86,X87))) | s(bool,'T_0') = s(bool,X90) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X85),s(X91,X92)))) )),
  inference(superposition,[],[f543,f504])).
fof(f13051,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f3323,f3171])).
fof(f13050,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f3334,f3171])).
fof(f13049,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f3307,f3171])).
fof(f13046,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f4597,f3171])).
fof(f13045,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f4786,f3171])).
fof(f13044,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f4842,f3171])).
fof(f13043,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f11350,f3171])).
fof(f13042,plain,(
  $false | $spl30),
  inference(subsumption_resolution,[],[f13041,f282])).
fof(f13041,plain,(
  ~p(s(bool,'T_0')) | $spl30),
  inference(forward_demodulation,[],[f283,f3171])).
fof(f13038,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f3172,f3171])).
fof(f13037,plain,(
  $false | ($spl30 | $spl32)),
  inference(subsumption_resolution,[],[f12915,f3171])).
fof(f13036,plain,(
  $false | ($spl23 | $spl32 | $spl38)),
  inference(subsumption_resolution,[],[f13016,f12976])).
fof(f12976,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,X42)) ) | ($spl23 | $spl38)),
  inference(global_subsumption,[],[f281,f280,f279,f278,f277,f276,f275,f274,f273,f272,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f366,f365,f364,f363,f362,f361,f360,f359,f358,f357,f367,f399,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f436,f438,f439,f447,f450,f475,f504,f505,f543,f544,f556,f566,f567,f610,f613,f904,f905,f913,f1251,f1252,f1253,f1270,f1319,f1343,f1479,f2074,f1652,f1653,f1654,f2086,f2087,f1672,f1692,f1703,f1704,f2099,f1844,f1845,f1846,f1920,f1908,f2247,f2143,f2144,f2145,f2282,f2283,f2383,f2384,f2826,f2547,f2823,f2569,f2851,f3152,f2909,f3170,f3089,f3381,f3394,f3395,f3683,f3684,f4595,f4591,f4443,f4444,f4470,f4471,f4779,f4659,f4660,f4753,f4848,f4879,f4880,f5025,f5072,f5425,f5459,f5452,f6347,f5911,f5912,f6401,f6781,f6782,f7286,f7364,f7365,f7548,f7605,f8352,f7827,f7901,f7902,f8403,f8580,f8581,f9286,f9287,f9288,f9291,f9292,f9293,f9312,f9313,f9298,f9299,f9300,f9303,f9304,f9305,f9306,f9315,f9316,f9435,f9436,f9437,f10574,f10575,f10576,f9511,f9529,f9530,f9531,f9775,f9778,f10696,f9906,f9909,f9914,f9915,f9916,f9917,f9918,f10304,f9956,f9957,f9958,f9961,f9962,f9964,f9972,f9973,f9976,f9980,f10100,f10103,f10201,f10189,f11011,f11009,f10822,f10823,f10824,f11156,f11157,f11158,f12059,f12057,f12052,f11977,f12125,f11970,f11775,f12209,f12210,f12211,f12212,f12213,f12214,f12215,f12216,f12217,f12218,f12845,f12843,f12879,f12778,f12898,f12899,f12901,f12906,f12908,f12909,f12951,f12975])).
fof(f12975,plain,(
  ( ! [X39,X38,X42] : (s(bool,X38) = s(bool,'const.combin.K_2'(s(bool,X39),s(bool,X38))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl23 | $spl38)),
  inference(subsumption_resolution,[],[f12954,f450])).
fof(f12954,plain,(
  ( ! [X39,X38,X42] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X38) = s(bool,'const.combin.K_2'(s(bool,X39),s(bool,X38))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl23 | $spl38)),
  inference(backward_demodulation,[],[f12951,f1270])).
fof(f12951,plain,(
  ( ! [X19,X17,X20] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X19,X20)))) ) | ($spl23 | $spl38)),
  inference(subsumption_resolution,[],[f12936,f450])).
fof(f12936,plain,(
  ( ! [X19,X17,X20] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X19,X20)))) ) | $spl38),
  inference(backward_demodulation,[],[f12909,f505])).
fof(f9918,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X75] : (s(bool,X75) != s(bool,X76) | s(bool,'T_0') = s(bool,happ(s(fun(X77,bool),'const.combin.K_1'(s(bool,X76))),s(X77,X78))) | s(bool,X75) = s(bool,X79) | s(bool,'T_0') = s(bool,happ(s(fun(X80,bool),'const.combin.K_1'(s(bool,X79))),s(X80,X81)))) ) | $spl23),
  inference(superposition,[],[f7548,f544])).
fof(f9915,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (s(bool,X32) != s(bool,X33) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X33),s(X34,X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,happ(s(fun(X37,bool),'const.combin.K_1'(s(bool,X36))),s(X37,X38)))) ) | $spl23),
  inference(superposition,[],[f2099,f544])).
fof(f10696,plain,(
  ( ! [X412,X414,X410,X416,X413,X415,X411] : (s(bool,X410) != s(bool,X411) | s(bool,X412) = s(bool,'const.combin.K_2'(s(bool,X411),s(X413,X414))) | s(bool,'T_0') = s(bool,X412) | s(bool,'T_0') = s(bool,happ(s(fun(X415,bool),'const.combin.K_1'(s(bool,X410))),s(X415,X416)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9843,f450])).
fof(f10576,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s(bool,X139) = s(bool,'const.combin.K_2'(s(bool,X136),s(X137,X138))) | s(bool,'T_0') = s(bool,happ(s(fun(X140,bool),'const.combin.K_1'(s(bool,X139))),s(X140,X141))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),'const.combin.K_1'(s(bool,X136))),s(X142,X143)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9465,f450])).
fof(f10575,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(bool,X101) = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X99))),s(X98,X100))) | s(bool,'T_0') = s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X101))),s(X102,X103))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X104,X105)))) ) | $spl23),
  inference(subsumption_resolution,[],[f9462,f450])).
fof(f10574,plain,(
  ( ! [X94,X92,X97,X95,X93,X96] : (s(bool,X95) = s(bool,happ(s(fun(X92,bool),'const.combin.K_1'(s(bool,X93))),s(X92,X94))) | s(bool,'T_0') = s(bool,happ(s(fun(X96,bool),'const.combin.K_1'(s(bool,X95))),s(X96,X97))) | s(bool,'T_0') = s(bool,X93)) ) | $spl23),
  inference(subsumption_resolution,[],[f9461,f450])).
fof(f8403,plain,(
  ( ! [X167,X163,X169,X166,X170,X168] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X166),s(X167,X168))) | s(bool,X163) = s(bool,X166) | s(bool,'T_0') = s(bool,happ(s(fun(X169,bool),'const.combin.K_1'(s(bool,X163))),s(X169,X170)))) ) | $spl23),
  inference(forward_demodulation,[],[f8402,f367])).
fof(f8402,plain,(
  ( ! [X167,X165,X163,X169,X166,X164,X170,X168] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X164,X165))) != s(bool,'const.combin.K_2'(s(bool,X166),s(X167,X168))) | s(bool,X163) = s(bool,X166) | s(bool,'T_0') = s(bool,happ(s(fun(X169,bool),'const.combin.K_1'(s(bool,X163))),s(X169,X170)))) ) | $spl23),
  inference(subsumption_resolution,[],[f8021,f7548])).
fof(f8352,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X42,X40] : (s(bool,X36) = s(bool,'const.combin.K_2'(s(bool,X35),s(X37,X38))) | s(bool,'T_0') = s(bool,happ(s(fun(X39,bool),'const.combin.K_1'(s(bool,X36))),s(X39,X40))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X35),s(X41,X42)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7724,f450])).
fof(f7605,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,X1))),s(X2,X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X4),s(X5,X6)))) ) | $spl23),
  inference(superposition,[],[f7548,f543])).
fof(f7548,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7470,f450])).
fof(f7286,plain,(
  ( ! [X103,X109,X107,X105,X102,X108,X106,X104] : (s(bool,'T_0') = s(bool,happ(s(fun(X105,bool),'const.combin.K_1'(s(bool,X102))),s(X105,X106))) | s(bool,X107) = s(bool,'const.combin.K_2'(s(bool,X102),s(X103,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X107),s(X108,X109)))) ) | $spl23),
  inference(subsumption_resolution,[],[f7017,f450])).
fof(f6401,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53,X51] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X52),s(X54,X55))) | s(bool,X56) = s(bool,happ(s(fun(X51,bool),'const.combin.K_1'(s(bool,X52))),s(X51,X53))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X56),s(X57,X58)))) ) | $spl23),
  inference(subsumption_resolution,[],[f6132,f450])).
fof(f5072,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,'const.combin.K_2'(s(bool,X30),s(X32,X33))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X29),s(X34,X35)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5031,f450])).
fof(f2283,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,X7) != s(bool,X8) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X8),s(X9,X10))) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl23),
  inference(superposition,[],[f2099,f436])).
fof(f2282,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X4),s(X5,X6)))) ) | $spl23),
  inference(superposition,[],[f2099,f543])).
fof(f2099,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,X75) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X75),s(X76,X77)))) ) | $spl23),
  inference(subsumption_resolution,[],[f1809,f450])).
fof(f1809,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,X75) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X75),s(X76,X77)))) ) | $spl23),
  inference(superposition,[],[f450,f543])).
fof(f2087,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s(bool,X53) = s(bool,'const.combin.K_2'(s(bool,X50),s(X51,X52))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X53),s(X54,X55))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X56,X57)))) ) | $spl23),
  inference(subsumption_resolution,[],[f1670,f450])).
fof(f2086,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,X47) = s(bool,'const.combin.K_2'(s(bool,X44),s(X45,X46))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X47),s(X48,X49))) | s(bool,'T_0') = s(bool,X44)) ) | $spl23),
  inference(subsumption_resolution,[],[f1669,f450])).
fof(f1669,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X47) = s(bool,'const.combin.K_2'(s(bool,X44),s(X45,X46))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X47),s(X48,X49))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f543,f1319])).
fof(f1479,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X15),s(X18,X19))) | s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,X15),s(X16,X17))) | s(bool,'T_0') = s(bool,X20)) ) | $spl23),
  inference(subsumption_resolution,[],[f1388,f450])).
fof(f1388,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X15),s(X18,X19))) | s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,X15),s(X16,X17))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f504,f436])).
fof(f13016,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,happ(s(fun(X2,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X2,X3)))) ) | ($spl23 | $spl32 | $spl38)),
  inference(backward_demodulation,[],[f12976,f12915])).
fof(f13035,plain,(
  $false | ($spl23 | $spl32 | $spl38)),
  inference(subsumption_resolution,[],[f12988,f12976])).
fof(f12988,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X97,X98)))) ) | ($spl23 | $spl32 | $spl38)),
  inference(backward_demodulation,[],[f12976,f3172])).
fof(f13030,plain,(
  $false | ($spl23 | $spl38)),
  inference(subsumption_resolution,[],[f12977,f282])).
fof(f12977,plain,(
  ~p(s(bool,'T_0')) | ($spl23 | $spl38)),
  inference(backward_demodulation,[],[f12976,f283])).
fof(f12909,plain,(
  ( ! [X499,X498,X493] : (s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499)))) ) | $spl38),
  inference(cnf_transformation,[],[f12909_D])).
fof(f12909_D,plain,(
  ( ! [X499,X498,X493] : (s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f12880,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174)))) ) | $spl34),
  inference(cnf_transformation,[],[f12880_D])).
fof(f12880_D,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f12908,plain,(
  ( ! [X499,X496,X498,X493,X497] : (s(bool,'T_0') != s(bool,happ(s(fun(X496,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X496,X497))) | s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499)))) )),
  inference(subsumption_resolution,[],[f12579,f3381])).
fof(f12579,plain,(
  ( ! [X499,X494,X496,X498,X493,X495,X497] : (s(bool,'T_0') != s(bool,happ(s(fun(X496,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X496,X497))) | s(bool,'T_0') = s(bool,happ(s(fun(X498,bool),'const.combin.K_1'(s(bool,X493))),s(X498,X499))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X493),s(X494,X495)))) )),
  inference(superposition,[],[f3381,f12052])).
fof(f12907,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) | $spl36),
  inference(cnf_transformation,[],[f12907_D])).
fof(f12907_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f12773,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'T_0') != s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X3,X4)))) ) | ($spl23 | $spl32)),
  inference(condensation,[],[f12578])).
fof(f12578,plain,(
  ( ! [X486,X492,X488,X490,X487,X489,X491] : (s(bool,'T_0') != s(bool,happ(s(fun(X489,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X489,X490))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X486),s(X491,X492))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X486),s(X487,X488)))) ) | ($spl23 | $spl32)),
  inference(superposition,[],[f3335,f12052])).
fof(f3335,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X17),s(X18,X19))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X20,X21)))) ) | ($spl23 | $spl32)),
  inference(subsumption_resolution,[],[f3221,f450])).
fof(f3171,plain,(
  ( ! [X96] : (s(bool,'T_0') = s(bool,X96)) ) | $spl30),
  inference(cnf_transformation,[],[f3171_D])).
fof(f3171_D,plain,(
  ( ! [X96] : (s(bool,'T_0') = s(bool,X96)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f12906,plain,(
  ( ! [X478,X474,X477] : (s(bool,'T_0') != s(bool,happ(s(fun(X477,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X477,X478))) | s(bool,'T_0') = s(bool,X474)) )),
  inference(subsumption_resolution,[],[f12576,f2851])).
fof(f12576,plain,(
  ( ! [X476,X478,X474,X475,X477] : (s(bool,'T_0') != s(bool,happ(s(fun(X477,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X477,X478))) | s(bool,'T_0') = s(bool,X474) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X474),s(X475,X476)))) )),
  inference(superposition,[],[f2851,f12052])).
fof(f12901,plain,(
  ( ! [X294,X296,X295] : (s(bool,'T_0') != s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) | s(bool,'T_0') = s(bool,X294)) )),
  inference(forward_demodulation,[],[f12900,f399])).
fof(f12900,plain,(
  ( ! [X294,X296,X298,X295,X297] : (s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) != s(bool,happ(s(fun(X297,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X297,X298))) | s(bool,'T_0') = s(bool,X294)) )),
  inference(subsumption_resolution,[],[f12557,f2851])).
fof(f12557,plain,(
  ( ! [X294,X300,X296,X298,X295,X297,X299] : (s(bool,happ(s(fun(X295,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X295,X296))) != s(bool,happ(s(fun(X297,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X297,X298))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X294),s(X299,X300))) | s(bool,'T_0') = s(bool,X294)) )),
  inference(superposition,[],[f11011,f12052])).
fof(f12899,plain,(
  ( ! [X290,X289,X291] : (s(bool,'T_0') != s(bool,happ(s(fun(X290,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X290,X291))) | s(bool,'T_0') = s(bool,X289)) )),
  inference(forward_demodulation,[],[f12775,f399])).
fof(f12775,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s(bool,happ(s(fun(X290,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X290,X291))) != s(bool,happ(s(fun(X292,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X292,X293))) | s(bool,'T_0') = s(bool,X289)) )),
  inference(duplicate_literal_removal,[],[f12556])).
fof(f12556,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s(bool,happ(s(fun(X290,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X290,X291))) != s(bool,happ(s(fun(X292,bool),'const.combin.K_1'(s(bool,'T_0'))),s(X292,X293))) | s(bool,'T_0') = s(bool,X289) | s(bool,'T_0') = s(bool,X289)) )),
  inference(superposition,[],[f10201,f12052])).
fof(f12898,plain,(
  ( ! [X285,X284,X286] : (s(bool,'T_0') != s(bool,happ(s(fun(X285,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X285,X286))) | s(bool,'T_0') = s(bool,X284)) ) | $spl23),
  inference(subsumption_resolution,[],[f12555,f12125])).
fof(f12555,plain,(
  ( ! [X288,X285,X287,X284,X286] : (s(bool,'T_0') != s(bool,happ(s(fun(X285,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X285,X286))) | s(bool,'T_0') = s(bool,happ(s(fun(X287,bool),'const.combin.K_1'(s(bool,X284))),s(X287,X288))) | s(bool,'T_0') = s(bool,X284)) ) | $spl23),
  inference(superposition,[],[f7548,f12052])).
fof(f12879,plain,(
  ( ! [X173,X174,X172] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174))) | s(bool,'T_0') = s(bool,X172)) ) | $spl23),
  inference(subsumption_resolution,[],[f12536,f2851])).
fof(f12536,plain,(
  ( ! [X175,X173,X176,X174,X172] : (s(bool,'T_0') != s(bool,happ(s(fun(X173,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X173,X174))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X172),s(X175,X176))) | s(bool,'T_0') = s(bool,X172)) ) | $spl23),
  inference(superposition,[],[f2099,f12052])).
fof(f3172,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98)))) ) | $spl32),
  inference(cnf_transformation,[],[f3172_D])).
fof(f3172_D,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f3170,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,X96)) ) | $spl23),
  inference(subsumption_resolution,[],[f3022,f2851])).
fof(f3022,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X99,X100))) | s(bool,'T_0') = s(bool,X96)) ) | $spl23),
  inference(superposition,[],[f2099,f2823])).
fof(f1462,plain,(
  ( ! [X12,X17,X16] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12)) ) | $spl24),
  inference(cnf_transformation,[],[f1462_D])).
fof(f1462_D,plain,(
  ( ! [X12,X17,X16] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1253,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X24),s(X27,X28))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f504,f284])).
fof(f1463,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) | $spl26),
  inference(cnf_transformation,[],[f1463_D])).
fof(f1463_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1252,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X19),s(X20,X21))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X18),s(X22,X23))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f504,f436])).
fof(f1251,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f504,f436])).
fof(f448,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f448_D])).
fof(f448_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f450,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl23),
  inference(cnf_transformation,[],[f450_D])).
fof(f450_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f447,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f284])).
fof(f409,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(trivial_inequality_removal,[],[f408])).
fof(f408,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f407,f381])).
fof(f407,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f406,f383])).
fof(f406,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f405,f385])).
fof(f405,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f404,f387])).
fof(f404,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f403,f389])).
fof(f403,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f402,f391])).
fof(f402,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f401,f393])).
fof(f401,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f400,f395])).
fof(f400,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | ($spl1 | $spl18)),
  inference(forward_demodulation,[],[f380,f397])).
fof(f379,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl0),
  inference(cnf_transformation,[],[f379_D])).
fof(f379_D,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f381,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK2) = s('type.sptree.spt'('type.bvlSem.v'),sK11) | $spl2),
  inference(cnf_transformation,[],[f381_D])).
fof(f381_D,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK2) = s('type.sptree.spt'('type.bvlSem.v'),sK11) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f272,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK2) = s('type.sptree.spt'('type.bvlSem.v'),sK11) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f268,plain,(
  (s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | (s('type.sptree.spt'('type.bvlSem.v'),sK2) = s('type.sptree.spt'('type.bvlSem.v'),sK11) & s('type.list.list'('type.bvpSem.stack'),sK3) = s('type.list.list'('type.bvpSem.stack'),sK12) & s('type.option.option'('type.num.num'),sK4) = s('type.option.option'('type.num.num'),sK13) & s('type.num.num',sK5) = s('type.num.num',sK14) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) & s('type.num.num',sK7) = s('type.num.num',sK16) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) & s('type.ffi.ffi_state'(sK1),sK9) = s('type.ffi.ffi_state'(sK1),sK18) & s('type.num.num',sK10) = s('type.num.num',sK19))) & (s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | s('type.sptree.spt'('type.bvlSem.v'),sK2) != s('type.sptree.spt'('type.bvlSem.v'),sK11) | s('type.list.list'('type.bvpSem.stack'),sK3) != s('type.list.list'('type.bvpSem.stack'),sK12) | s('type.option.option'('type.num.num'),sK4) != s('type.option.option'('type.num.num'),sK13) | s('type.num.num',sK5) != s('type.num.num',sK14) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) | s('type.num.num',sK7) != s('type.num.num',sK16) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) | s('type.ffi.ffi_state'(sK1),sK9) != s('type.ffi.ffi_state'(sK1),sK18) | s('type.num.num',sK10) != s('type.num.num',sK19))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f267])).
fof(f267,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : ((s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) | (s('type.sptree.spt'('type.bvlSem.v'),X2) = s('type.sptree.spt'('type.bvlSem.v'),X11) & s('type.list.list'('type.bvpSem.stack'),X3) = s('type.list.list'('type.bvpSem.stack'),X12) & s('type.option.option'('type.num.num'),X4) = s('type.option.option'('type.num.num'),X13) & s('type.num.num',X5) = s('type.num.num',X14) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) & s('type.num.num',X7) = s('type.num.num',X16) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) & s('type.ffi.ffi_state'(X1),X9) = s('type.ffi.ffi_state'(X1),X18) & s('type.num.num',X10) = s('type.num.num',X19))) & (s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) | s('type.sptree.spt'('type.bvlSem.v'),X2) != s('type.sptree.spt'('type.bvlSem.v'),X11) | s('type.list.list'('type.bvpSem.stack'),X3) != s('type.list.list'('type.bvpSem.stack'),X12) | s('type.option.option'('type.num.num'),X4) != s('type.option.option'('type.num.num'),X13) | s('type.num.num',X5) != s('type.num.num',X14) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) | s('type.num.num',X7) != s('type.num.num',X16) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) | s('type.ffi.ffi_state'(X1),X9) != s('type.ffi.ffi_state'(X1),X18) | s('type.num.num',X10) != s('type.num.num',X19)))),
  inference(flattening,[],[f266])).
fof(f266,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : ((s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) | (s('type.sptree.spt'('type.bvlSem.v'),X2) = s('type.sptree.spt'('type.bvlSem.v'),X11) & s('type.list.list'('type.bvpSem.stack'),X3) = s('type.list.list'('type.bvpSem.stack'),X12) & s('type.option.option'('type.num.num'),X4) = s('type.option.option'('type.num.num'),X13) & s('type.num.num',X5) = s('type.num.num',X14) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) & s('type.num.num',X7) = s('type.num.num',X16) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) & s('type.ffi.ffi_state'(X1),X9) = s('type.ffi.ffi_state'(X1),X18) & s('type.num.num',X10) = s('type.num.num',X19))) & (s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) | (s('type.sptree.spt'('type.bvlSem.v'),X2) != s('type.sptree.spt'('type.bvlSem.v'),X11) | s('type.list.list'('type.bvpSem.stack'),X3) != s('type.list.list'('type.bvpSem.stack'),X12) | s('type.option.option'('type.num.num'),X4) != s('type.option.option'('type.num.num'),X13) | s('type.num.num',X5) != s('type.num.num',X14) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) | s('type.num.num',X7) != s('type.num.num',X16) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) | s('type.ffi.ffi_state'(X1),X9) != s('type.ffi.ffi_state'(X1),X18) | s('type.num.num',X10) != s('type.num.num',X19))))),
  inference(nnf_transformation,[],[f264])).
fof(f264,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : (s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) <~> (s('type.sptree.spt'('type.bvlSem.v'),X2) = s('type.sptree.spt'('type.bvlSem.v'),X11) & s('type.list.list'('type.bvpSem.stack'),X3) = s('type.list.list'('type.bvpSem.stack'),X12) & s('type.option.option'('type.num.num'),X4) = s('type.option.option'('type.num.num'),X13) & s('type.num.num',X5) = s('type.num.num',X14) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) & s('type.num.num',X7) = s('type.num.num',X16) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) & s('type.ffi.ffi_state'(X1),X9) = s('type.ffi.ffi_state'(X1),X18) & s('type.num.num',X10) = s('type.num.num',X19)))),
  inference(ennf_transformation,[],[f92])).
fof(f92,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : (s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) <=> (s('type.sptree.spt'('type.bvlSem.v'),X2) = s('type.sptree.spt'('type.bvlSem.v'),X11) & s('type.list.list'('type.bvpSem.stack'),X3) = s('type.list.list'('type.bvpSem.stack'),X12) & s('type.option.option'('type.num.num'),X4) = s('type.option.option'('type.num.num'),X13) & s('type.num.num',X5) = s('type.num.num',X14) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) & s('type.num.num',X7) = s('type.num.num',X16) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) & s('type.ffi.ffi_state'(X1),X9) = s('type.ffi.ffi_state'(X1),X18) & s('type.num.num',X10) = s('type.num.num',X19)))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : (s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X2))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X3))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X4))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X5))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X9))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X11))),s('type.bvpSem.state'(X1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X12))),s('type.bvpSem.state'(X1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X13))),s('type.bvpSem.state'(X1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.bvpSem.state'(X1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15))),s('type.bvpSem.state'(X1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17))),s('type.bvpSem.state'(X1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X18))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.bvpSem.state'(X0),'const.bool.ARB_0'))))))))))))))))))) <=> (s('type.sptree.spt'('type.bvlSem.v'),X2) = s('type.sptree.spt'('type.bvlSem.v'),X11) & s('type.list.list'('type.bvpSem.stack'),X3) = s('type.list.list'('type.bvpSem.stack'),X12) & s('type.option.option'('type.num.num'),X4) = s('type.option.option'('type.num.num'),X13) & s('type.num.num',X5) = s('type.num.num',X14) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X15) & s('type.num.num',X7) = s('type.num.num',X16) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X17) & s('type.ffi.ffi_state'(X1),X9) = s('type.ffi.ffi_state'(X1),X18) & s('type.num.num',X10) = s('type.num.num',X19)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24,X25] : (s('type.bvpSem.state'(X7),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X8))),s('type.bvpSem.state'(X7),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X9))),s('type.bvpSem.state'(X7),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X10))),s('type.bvpSem.state'(X7),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X11))),s('type.bvpSem.state'(X7),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12))),s('type.bvpSem.state'(X7),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.bvpSem.state'(X7),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14))),s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X15))),s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X6),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X7),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X17))),s('type.bvpSem.state'(X7),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X18))),s('type.bvpSem.state'(X7),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X19))),s('type.bvpSem.state'(X7),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X20))),s('type.bvpSem.state'(X7),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X21))),s('type.bvpSem.state'(X7),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X22))),s('type.bvpSem.state'(X7),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X23))),s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X24))),s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X25))),s('type.bvpSem.state'(X6),'const.bool.ARB_0'))))))))))))))))))) <=> (s('type.sptree.spt'('type.bvlSem.v'),X8) = s('type.sptree.spt'('type.bvlSem.v'),X17) & s('type.list.list'('type.bvpSem.stack'),X9) = s('type.list.list'('type.bvpSem.stack'),X18) & s('type.option.option'('type.num.num'),X10) = s('type.option.option'('type.num.num'),X19) & s('type.num.num',X11) = s('type.num.num',X20) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X21) & s('type.num.num',X13) = s('type.num.num',X22) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X23) & s('type.ffi.ffi_state'(X7),X15) = s('type.ffi.ffi_state'(X7),X24) & s('type.num.num',X16) = s('type.num.num',X25)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24,X25] : (s('type.bvpSem.state'(X7),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X8))),s('type.bvpSem.state'(X7),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X9))),s('type.bvpSem.state'(X7),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X10))),s('type.bvpSem.state'(X7),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X11))),s('type.bvpSem.state'(X7),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12))),s('type.bvpSem.state'(X7),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.bvpSem.state'(X7),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14))),s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X15))),s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.bvpSem.state'(X6),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(X7),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),X17))),s('type.bvpSem.state'(X7),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),X18))),s('type.bvpSem.state'(X7),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),X19))),s('type.bvpSem.state'(X7),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X20))),s('type.bvpSem.state'(X7),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X21))),s('type.bvpSem.state'(X7),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X22))),s('type.bvpSem.state'(X7),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X23))),s('type.bvpSem.state'(X7),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X24))),s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X25))),s('type.bvpSem.state'(X6),'const.bool.ARB_0'))))))))))))))))))) <=> (s('type.sptree.spt'('type.bvlSem.v'),X8) = s('type.sptree.spt'('type.bvlSem.v'),X17) & s('type.list.list'('type.bvpSem.stack'),X9) = s('type.list.list'('type.bvpSem.stack'),X18) & s('type.option.option'('type.num.num'),X10) = s('type.option.option'('type.num.num'),X19) & s('type.num.num',X11) = s('type.num.num',X20) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X12) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X21) & s('type.num.num',X13) = s('type.num.num',X22) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X14) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X23) & s('type.ffi.ffi_state'(X7),X15) = s('type.ffi.ffi_state'(X7),X24) & s('type.num.num',X16) = s('type.num.num',X25)))),
  file('thm.bvpSem.state_literal_|49||49|','thm.bvpSem.state_literal_|49||49|')).
fof(f383,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK3) = s('type.list.list'('type.bvpSem.stack'),sK12) | $spl4),
  inference(cnf_transformation,[],[f383_D])).
fof(f383_D,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK3) = s('type.list.list'('type.bvpSem.stack'),sK12) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f273,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK3) = s('type.list.list'('type.bvpSem.stack'),sK12) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f385,plain,(
  s('type.option.option'('type.num.num'),sK4) = s('type.option.option'('type.num.num'),sK13) | $spl6),
  inference(cnf_transformation,[],[f385_D])).
fof(f385_D,plain,(
  s('type.option.option'('type.num.num'),sK4) = s('type.option.option'('type.num.num'),sK13) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f274,plain,(
  s('type.option.option'('type.num.num'),sK4) = s('type.option.option'('type.num.num'),sK13) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f387,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | $spl8),
  inference(cnf_transformation,[],[f387_D])).
fof(f387_D,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f275,plain,(
  s('type.num.num',sK5) = s('type.num.num',sK14) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f389,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) | $spl10),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f276,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f391,plain,(
  s('type.num.num',sK7) = s('type.num.num',sK16) | $spl12),
  inference(cnf_transformation,[],[f391_D])).
fof(f391_D,plain,(
  s('type.num.num',sK7) = s('type.num.num',sK16) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f277,plain,(
  s('type.num.num',sK7) = s('type.num.num',sK16) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f393,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) | $spl14),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f278,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f395,plain,(
  s('type.ffi.ffi_state'(sK1),sK9) = s('type.ffi.ffi_state'(sK1),sK18) | $spl16),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  s('type.ffi.ffi_state'(sK1),sK9) = s('type.ffi.ffi_state'(sK1),sK18) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f279,plain,(
  s('type.ffi.ffi_state'(sK1),sK9) = s('type.ffi.ffi_state'(sK1),sK18) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f397,plain,(
  s('type.num.num',sK10) = s('type.num.num',sK19) | $spl18),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  s('type.num.num',sK10) = s('type.num.num',sK19) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f280,plain,(
  s('type.num.num',sK10) = s('type.num.num',sK19) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) = s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
fof(f380,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) | $spl1),
  inference(cnf_transformation,[],[f380_D])).
fof(f380_D,plain,(
  s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f382,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK2) != s('type.sptree.spt'('type.bvlSem.v'),sK11) | $spl3),
  inference(cnf_transformation,[],[f382_D])).
fof(f382_D,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),sK2) != s('type.sptree.spt'('type.bvlSem.v'),sK11) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f384,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK3) != s('type.list.list'('type.bvpSem.stack'),sK12) | $spl5),
  inference(cnf_transformation,[],[f384_D])).
fof(f384_D,plain,(
  s('type.list.list'('type.bvpSem.stack'),sK3) != s('type.list.list'('type.bvpSem.stack'),sK12) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f386,plain,(
  s('type.option.option'('type.num.num'),sK4) != s('type.option.option'('type.num.num'),sK13) | $spl7),
  inference(cnf_transformation,[],[f386_D])).
fof(f386_D,plain,(
  s('type.option.option'('type.num.num'),sK4) != s('type.option.option'('type.num.num'),sK13) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f388,plain,(
  s('type.num.num',sK5) != s('type.num.num',sK14) | $spl9),
  inference(cnf_transformation,[],[f388_D])).
fof(f388_D,plain,(
  s('type.num.num',sK5) != s('type.num.num',sK14) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f390,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) | $spl11),
  inference(cnf_transformation,[],[f390_D])).
fof(f390_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f392,plain,(
  s('type.num.num',sK7) != s('type.num.num',sK16) | $spl13),
  inference(cnf_transformation,[],[f392_D])).
fof(f392_D,plain,(
  s('type.num.num',sK7) != s('type.num.num',sK16) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f394,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) | $spl15),
  inference(cnf_transformation,[],[f394_D])).
fof(f394_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f396,plain,(
  s('type.ffi.ffi_state'(sK1),sK9) != s('type.ffi.ffi_state'(sK1),sK18) | $spl17),
  inference(cnf_transformation,[],[f396_D])).
fof(f396_D,plain,(
  s('type.ffi.ffi_state'(sK1),sK9) != s('type.ffi.ffi_state'(sK1),sK18) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f398,plain,(
  s('type.num.num',sK10) != s('type.num.num',sK19) | $spl19),
  inference(cnf_transformation,[],[f398_D])).
fof(f398_D,plain,(
  s('type.num.num',sK10) != s('type.num.num',sK19) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f281,plain,(
  s('type.num.num',sK10) != s('type.num.num',sK19) | s('type.ffi.ffi_state'(sK1),sK9) != s('type.ffi.ffi_state'(sK1),sK18) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17) | s('type.num.num',sK7) != s('type.num.num',sK16) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15) | s('type.num.num',sK5) != s('type.num.num',sK14) | s('type.option.option'('type.num.num'),sK4) != s('type.option.option'('type.num.num'),sK13) | s('type.list.list'('type.bvpSem.stack'),sK3) != s('type.list.list'('type.bvpSem.stack'),sK12) | s('type.sptree.spt'('type.bvlSem.v'),sK2) != s('type.sptree.spt'('type.bvlSem.v'),sK11) | s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK2))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK3))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK4))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK5))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK6))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK8))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK9))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK10))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0'))))))))))))))))))) != s('type.bvpSem.state'(sK1),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),sK11))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),sK12))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),sK13))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK14))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK15))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK17))),s('type.bvpSem.state'(sK1),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK18))),s('type.bvpSem.state'(sK0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK19))),s('type.bvpSem.state'(sK0),'const.bool.ARB_0')))))))))))))))))))),
  inference(cnf_transformation,[],[f268])).
% SZS output end Proof for thm.bvpSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 179
% Passive clauses: 563
% Generated clauses: 30888
% Final active clauses: 139
% Final passive clauses: 219
% Input formulas: 89
% Initial clauses: 107
% 
% Duplicate literals: 904
% Trivial inequalities: 220
% Fw subsumption resolutions: 1375
% Fw demodulations: 6328
% Bw demodulations: 114
% Condensations: 2775
% Global subsumptions: 224
% 
% Simple tautologies: 198
% Equational tautologies: 108
% Forward subsumptions: 17851
% Fw demodulations to eq. taut.: 36
% 
% Unit resulting resolution: 600
% Forward superposition: 9037
% Backward superposition: 6849
% Self superposition: 267
% Equality factoring: 70
% Equality resolution: 26
% 
% Split clauses: 23
% Split components: 54
% SAT solver clauses: 1122
% SAT solver unit clauses: 157
% SAT solver binary clauses: 383
% 
% Sat splits: 23
% Sat splitting refutations: 287
% 
% Memory used [KB]: 17526
% Time elapsed: 1.247 s
% ------------------------------
% ------------------------------
% Success in time 2.59 s
