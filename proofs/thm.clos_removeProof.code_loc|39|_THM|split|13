Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_removeProof
% SZS output start Proof for thm.clos_removeProof
fof(f9204,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f9192])).
fof(f9192,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),sK1))))) != s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),sK1)))))),
  inference(superposition,[],[f92,f8320])).
fof(f8320,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) )),
  inference(forward_demodulation,[],[f110,f96])).
fof(f96,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X6))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|13','thm.clos_removeProof.code_loc|39|_def')).
fof(f110,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X7)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|13','thm.closProps.code_locs_cons')).
fof(f92,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),sK1))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK1)))))),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),sK1))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f87])).
fof(f87,plain,(
  ? [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X6))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),X7))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X6))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X7)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|13','thm.clos_removeProof.code_loc|39|_THM|split|13')).
% SZS output end Proof for thm.clos_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 87
% Passive clauses: 1031
% Generated clauses: 8909
% Final active clauses: 83
% Final passive clauses: 842
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 561
% Trivial inequalities: 147
% Fw subsumption resolutions: 961
% Fw demodulations: 1379
% Bw demodulations: 2
% 
% Simple tautologies: 187
% Equational tautologies: 23
% Forward subsumptions: 4298
% 
% Binary resolution: 6
% Forward superposition: 3198
% Backward superposition: 2356
% Self superposition: 135
% Equality factoring: 66
% Equality resolution: 19
% 
% Split clauses: 181
% Split components: 374
% SAT solver clauses: 410
% SAT solver unit clauses: 31
% SAT solver binary clauses: 109
% 
% Sat splits: 181
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 409
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 5245
% Time elapsed: 0.508 s
% ------------------------------
% ------------------------------
% Success in time 0.53 s
