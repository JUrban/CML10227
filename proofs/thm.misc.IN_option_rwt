Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.misc
% (38112)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 124
% Passive clauses: 2688
% Generated clauses: 16347
% Final active clauses: 106
% Final passive clauses: 1755
% Input formulas: 35
% Initial clauses: 86
% 
% Duplicate literals: 845
% Trivial inequalities: 428
% Fw subsumption resolutions: 2733
% Fw demodulations: 1029
% Bw demodulations: 4
% 
% Simple tautologies: 445
% Equational tautologies: 69
% Forward subsumptions: 6480
% Fw demodulations to eq. taut.: 11
% 
% Binary resolution: 276
% Factoring: 1
% Forward superposition: 4118
% Backward superposition: 6221
% Self superposition: 234
% Equality factoring: 185
% Equality resolution: 40
% 
% Split clauses: 1253
% Split components: 2635
% SAT solver clauses: 1862
% SAT solver unit clauses: 43
% SAT solver binary clauses: 235
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 1253
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 1769
% TWLsolver calls for satisfiability: 190
% 
% Memory used [KB]: 8315
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% (38137)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 168
% Passive clauses: 1117
% Generated clauses: 10599
% Final active clauses: 105
% Final passive clauses: 578
% Input formulas: 35
% Initial clauses: 86
% 
% Duplicate literals: 241
% Trivial inequalities: 109
% Fw subsumption resolutions: 893
% Fw demodulations: 1070
% Bw demodulations: 353
% Condensations: 349
% Global subsumptions: 9
% 
% Simple tautologies: 183
% Equational tautologies: 23
% Forward subsumptions: 4938
% Fw demodulations to eq. taut.: 18
% Bw demodulations to eq. taut.: 34
% 
% Binary resolution: 253
% Factoring: 1
% Forward superposition: 2461
% Backward superposition: 3049
% Self superposition: 110
% Equality factoring: 36
% Equality resolution: 27
% 
% Split clauses: 134
% Split components: 269
% SAT solver clauses: 1596
% SAT solver unit clauses: 92
% SAT solver binary clauses: 59
% SAT solver learnt clauses: 21
% SAT solver learnt literals: 5
% 
% Sat splits: 134
% Sat splitting refutations: 32
% 
% TWLsolver clauses: 1557
% TWLsolver calls for satisfiability: 503
% 
% Memory used [KB]: 8571
% Time elapsed: 0.705 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f51861,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f142,f245,f244,f141,f247,f140,f249,f243,f689,f690,f751,f755,f759,f763,f764,f1754,f1757,f1756,f1755,f4075,f4078,f4076,f4175,f4177,f4178,f4180,f4182,f4201,f4510,f4511,f4512,f4514,f4515,f4537,f4540,f4568,f4570,f4572,f4577,f4579,f4581,f4583,f4587,f4589,f4593,f4595,f4599,f4600,f4601,f4602,f4603,f4605,f4606,f4608,f4609,f4611,f4614,f4616,f4619,f4621,f7368,f7366,f7378,f9248,f9231,f9799,f9802,f9800,f10201,f10203,f10205,f10209,f10211,f10213,f10215,f10217,f10219,f10223,f10225,f10227,f10229,f10231,f10233,f10236,f10240,f10244,f10259,f10261,f10263,f10279,f10281,f10283,f10333,f10334,f10335,f10336,f10337,f10338,f10525,f10528,f10533,f10536,f10539,f10541,f10550,f10553,f10555,f10849,f10850,f10865,f4183,f10867,f10524,f9250,f10980,f10983,f10988,f10991,f10994,f10996,f11005,f11008,f11010,f11304,f11305,f11695,f11745,f14845,f14826,f14816,f14906,f14749,f15192,f15569,f15572,f15574,f15570,f17021,f16995,f16984,f17042,f16909,f17287,f16905,f17302,f17383,f17384,f19680,f19682,f19684,f19681,f19701,f19703,f19705,f19709,f19711,f19713,f19715,f19717,f19719,f19723,f19725,f19727,f19729,f19731,f19733,f19736,f19739,f19743,f19757,f19759,f19761,f19777,f19779,f19781,f20206,f20208,f20207,f20215,f20216,f20217,f20218,f20219,f20220,f23446,f23448,f23450,f23447,f24011,f24033,f26035,f26169,f26006,f25993,f26161,f26527,f26545,f26547,f26549,f26552,f25907,f26528,f25906,f26724,f26726,f4179,f26728,f26729,f25901,f26731,f26740,f26742,f25891,f26745,f26747,f26730,f26751,f26767,f26170,f25889,f26770,f26775,f26780,f26727,f25879,f26857,f27482,f27483,f9249,f28946,f28948,f28950,f28947,f31006,f31007,f31008,f31009,f31010,f31036,f31011,f31012,f31013,f31014,f31040,f31015,f31044,f31016,f31046,f31017,f31047,f31018,f31048,f31049,f31020,f31050,f31021,f31051,f31022,f31053,f31023,f31054,f31024,f31038,f31055,f31056,f31039,f31026,f31057,f31033,f31027,f31035,f31058,f31059,f31043,f31029,f31060,f9801,f31042,f31231,f31287,f31285,f31310,f31311,f31312,f31313,f31314,f31315,f31316,f31317,f31318,f31319,f31353,f31320,f31355,f31321,f31356,f31322,f31357,f31358,f31324,f31359,f31325,f31360,f31326,f31362,f31327,f31363,f31328,f31364,f31365,f31330,f31366,f31331,f31367,f31368,f31333,f31369,f31371,f32631,f15571,f32632,f32675,f32676,f32677,f32678,f32679,f32680,f32681,f32682,f32683,f32838,f32844,f32847,f32699,f32708,f32709,f32710,f32711,f32724,f32725,f32726,f32727,f31343,f32736,f32738,f31349,f32739,f32876,f32880,f32904,f31347,f32906,f32832,f32916,f32833,f32778,f31345,f32921,f31342,f31352,f32925,f31348,f32926,f32936,f31351,f31344,f32964,f33146,f33148,f33149,f33150,f33158,f33161,f33164,f33165,f33169,f33172,f33173,f33177,f33178,f33186,f33189,f33192,f33195,f33198,f33200,f33202,f33204,f33208,f33210,f33212,f33214,f33220,f33222,f33224,f33227,f33228,f33236,f33242,f33245,f33248,f33880,f33882,f33883,f33884,f33885,f33886,f33887,f33898,f33899,f33907,f33908,f33938,f33939,f33941,f33942,f33944,f33946,f33950,f33951,f33954,f33956,f33962,f33965,f33967,f33968,f31346,f35506,f36150,f36151,f36152,f36155,f36158,f36161,f36162,f36163,f36171,f36172,f36181,f36182,f36208,f36209,f36211,f36212,f36214,f36216,f36220,f36221,f36224,f36226,f36279,f36369,f36370,f36821,f36823,f36827,f36831,f36871,f36872,f36889,f36873,f36892,f36890,f36894,f36893,f36895,f37499,f37500,f37503,f37506,f37509,f37512,f37513,f37514,f37515,f37516,f37517,f37525,f37526,f37556,f37557,f37559,f37560,f37562,f37564,f37566,f37567,f37569,f37571,f43212,f43213,f35507,f43092,f43245,f43088,f43268,f4176,f43854,f43856,f43861,f44100,f44118,f47058,f47071,f47057,f47072,f47055,f47082,f47793,f47994,f47794,f47996,f47993,f48032,f48987,f4077,f48994,f48995,f48988,f50382,f50383,f50384,f50386,f50388,f50392,f50403,f50418,f50421,f50424,f50426,f50428,f50432,f50437,f50439,f50445,f50458,f50462,f50491,f50494,f50497,f50500,f50508,f50523,f50528,f50531,f50532,f50533,f50537,f50539,f50542,f50544,f50546,f50548,f50549,f50552,f50555,f50558,f50559,f50562,f50565,f50568,f50570,f50572,f50574,f50579,f50582,f50585,f50588,f50591,f50596,f50598,f50601,f50602,f50603,f50609,f50611,f50612,f50614,f50617,f50618,f50620,f50622,f50633,f50634,f50636,f50637,f50638,f50639,f50642,f50643,f50646,f50647,f50649,f50651,f50655,f50657,f50658,f50659,f50660,f50662,f50664,f50665,f50667,f50668,f50670,f50672,f50680,f50682,f50684,f50723,f50725,f50729,f50731,f50733,f50735,f50737,f50739,f50741,f50743,f50750,f50753,f50755,f50758,f50760,f50762,f50764,f50768,f50771,f50778,f50782,f50784,f50785,f50786,f50787,f50788,f50792,f50794,f50796,f50803,f50805,f50820,f50826,f50828,f50831,f50839,f50840,f50841,f50853,f51854,f51860])).
fof(f51860,plain,(
  $false | ($spl2 | $spl213 | $spl216)),
  inference(subsumption_resolution,[],[f51859,f143])).
fof(f143,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.misc.IN_option_rwt','thm.bool.TRUTH')).
fof(f51859,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl213 | $spl216)),
  inference(forward_demodulation,[],[f51852,f47996])).
fof(f51852,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1))))))) | ($spl2 | $spl213)),
  inference(trivial_inequality_removal,[],[f51850])).
fof(f51850,plain,(
  s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),sK3) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1))))))) | ($spl2 | $spl213)),
  inference(superposition,[],[f245,f50893])).
fof(f50893,plain,(
  s('type.option.option'(sK1),sK3) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK3,sK1)))) | $spl213),
  inference(unit_resulting_resolution,[],[f47992,f186])).
fof(f186,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f59])).
fof(f59,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X9) | ? [X8] : s('type.option.option'(X6),X9) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))))),
  file('thm.misc.IN_option_rwt','thm.option.option_nchotomy')).
fof(f47992,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK3) | $spl213),
  inference(cnf_transformation,[],[f47992_D])).
fof(f47992_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK3) <=> ~$spl213),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl213])])).
fof(f51854,plain,(
  $false | ($spl2 | $spl213 | $spl216)),
  inference(subsumption_resolution,[],[f51853,f143])).
fof(f51853,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl213 | $spl216)),
  inference(forward_demodulation,[],[f51843,f47996])).
fof(f51843,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1))))))) | ($spl2 | $spl213)),
  inference(unit_resulting_resolution,[],[f50893,f245])).
fof(f50853,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376,f50838,f50359,f50361,f50852])).
fof(f50852,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50851])).
fof(f50851,plain,(
  ( ! [X70,X69] : (s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50850,f48034])).
fof(f50850,plain,(
  ( ! [X70,X69] : (s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48019,f208])).
fof(f48019,plain,(
  ( ! [X70,X69] : (s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f47993,f2923])).
fof(f50361,plain,(
  ( ! [X600,X602,X598,X601,X603,X599,X604] : (s(bool,X602) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X603),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X603,bool),X604))) | s(bool,X602) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X598),X600),s(bool,X601),s(fun(X598,bool),X599))) | s('type.option.option'(X598),'const.option.NONE_0') = s('type.option.option'(X598),X600)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f48998])).
fof(f50359,plain,(
  ( ! [X569,X571,X565,X568,X570,X566] : (s(bool,X569) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X570),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X570,bool),X571))) | s(bool,X569) != s(bool,happ(s(fun(X565,bool),X568),s(X565,sK6(X566,X565)))) | s('type.option.option'(X565),'const.option.NONE_0') = s('type.option.option'(X565),X566)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f48889])).
fof(f50838,plain,(
  ( ! [X720,X722,X718] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s('type.option.option'(X718),'const.option.NONE_0') = s('type.option.option'(X718),X720)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50357,f48861])).
fof(f50357,plain,(
  ( ! [X720,X722,X718,X719] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s(bool,X722) != s(bool,happ(s(fun(X718,bool),X719),s(X718,sK6(X720,X718)))) | s('type.option.option'(X718),'const.option.NONE_0') = s('type.option.option'(X718),X720)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f48854])).
fof(f50376,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl212)),
  inference(duplicate_literal_removal,[],[f50375])).
fof(f50375,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50140])).
fof(f50140,plain,(
  ( ! [X292,X290,X291] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X292))) | s(bool,X290) = s(bool,X291) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X291))) | s(bool,X290) = s(bool,X292)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30807])).
fof(f50139,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X118) = s(bool,happ(s(fun(X119,bool),X120),s(X119,X121))) | s(X119,X121) = s(X119,sK7(X121,X120,X119)) | s(bool,X118) = s(bool,X122)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30789])).
fof(f50138,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30777])).
fof(f50770,plain,(
  ( ! [X633,X631,X632,X634] : (s(X633,f(s(bool,'T_0'))) != s(X633,g(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X634))) | s(fun(bool,X633),X631) = s(fun(bool,X633),X632) | s(bool,X634) = s(bool,sK8(X631,X632,X633,bool))) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50125,f49420])).
fof(f50125,plain,(
  ( ! [X633,X631,X632,X634] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X634))) | s(X633,f(s(bool,'F_0'))) != s(X633,g(s(bool,'F_0'))) | s(fun(bool,X633),X631) = s(fun(bool,X633),X632) | s(bool,X634) = s(bool,sK8(X631,X632,X633,bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30208])).
fof(f50767,plain,(
  ( ! [X592,X590,X591] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X592))) | s(bool,X590) = s(bool,sK7(X590,X591,bool)) | s(bool,X590) = s(bool,X592)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50766,f49420])).
fof(f50766,plain,(
  ( ! [X592,X590,X591] : (s(bool,X590) = s(bool,sK7(X590,X591,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X592))) | s(bool,X590) = s(bool,X592)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50123,f49420])).
fof(f50123,plain,(
  ( ! [X592,X590,X591] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X591),s(bool,'T_0'))) | s(bool,X590) = s(bool,sK7(X590,X591,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X592))) | s(bool,X590) = s(bool,X592)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30197])).
fof(f50763,plain,(
  ( ! [X576,X578,X577] : (s('type.option.option'(bool),X577) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X578))) | s(bool,X576) = s(bool,sK6(X577,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X577) | s(bool,X576) = s(bool,X578)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50121,f49420])).
fof(f50121,plain,(
  ( ! [X576,X578,X577] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X578))) | s('type.option.option'(bool),X577) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X576) = s(bool,sK6(X577,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X577) | s(bool,X576) = s(bool,X578)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30192])).
fof(f50761,plain,(
  ( ! [X569,X567,X568,X570,X566] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X570))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X567))) | s(bool,X566) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X568),'const.option.NONE_0'),s(bool,X567),s(fun(X568,bool),X569))) | s(bool,X566) = s(bool,X570)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50120,f49420])).
fof(f50120,plain,(
  ( ! [X569,X567,X568,X570,X566] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X567))) | s(bool,X566) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X568),'const.option.NONE_0'),s(bool,X567),s(fun(X568,bool),X569))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X570))) | s(bool,X566) = s(bool,X570)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30190])).
fof(f50759,plain,(
  ( ! [X565,X561,X563,X564,X562] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X565))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X562))) | s(bool,X562) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X563),'const.option.NONE_0'),s(bool,X561),s(fun(X563,bool),X564))) | s(bool,X561) = s(bool,X565)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50119,f49420])).
fof(f50119,plain,(
  ( ! [X565,X561,X563,X564,X562] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X562))) | s(bool,X562) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X563),'const.option.NONE_0'),s(bool,X561),s(fun(X563,bool),X564))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X565))) | s(bool,X561) = s(bool,X565)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30189])).
fof(f50757,plain,(
  ( ! [X524,X525,X523] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X525))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X523))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X524))) | s(bool,X523) = s(bool,X525)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50756,f49420])).
fof(f50756,plain,(
  ( ! [X524,X525,X523] : (s(bool,'T_0') != s(bool,X524) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X525))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X523))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X524))) | s(bool,X523) = s(bool,X525)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50118,f49420])).
fof(f50118,plain,(
  ( ! [X524,X525,X523] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X525))) | s(bool,'F_0') != s(bool,X524) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X523))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X524))) | s(bool,X523) = s(bool,X525)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30178])).
fof(f50754,plain,(
  ( ! [X518,X517,X519] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X519))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X518))) | s(bool,X517) = s(bool,X518) | s(bool,X517) = s(bool,X519)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50117,f49420])).
fof(f50117,plain,(
  ( ! [X518,X517,X519] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X518))) | s(bool,X517) = s(bool,X518) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X519))) | s(bool,X517) = s(bool,X519)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30176])).
fof(f50752,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X215) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,X216),s(fun(X217,bool),X218))) | s(bool,X215) = s(bool,X219)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50751,f49420])).
fof(f50751,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s(bool,'T_0') != s(bool,X216) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X215) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,X216),s(fun(X217,bool),X218))) | s(bool,X215) = s(bool,X219)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50116,f49420])).
fof(f50116,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,'F_0') != s(bool,X216) | s(bool,X215) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,X216),s(fun(X217,bool),X218))) | s(bool,X215) = s(bool,X219)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30069])).
fof(f50749,plain,(
  ( ! [X212,X210,X213,X211,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,X211) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X212),'const.option.NONE_0'),s(bool,X210),s(fun(X212,bool),X213))) | s(bool,X210) = s(bool,X214)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50748,f49420])).
fof(f50748,plain,(
  ( ! [X212,X210,X213,X211,X214] : (s(bool,'T_0') != s(bool,X211) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,X211) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X212),'const.option.NONE_0'),s(bool,X210),s(fun(X212,bool),X213))) | s(bool,X210) = s(bool,X214)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50115,f49420])).
fof(f50115,plain,(
  ( ! [X212,X210,X213,X211,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,'F_0') != s(bool,X211) | s(bool,X211) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X212),'const.option.NONE_0'),s(bool,X210),s(fun(X212,bool),X213))) | s(bool,X210) = s(bool,X214)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30068])).
fof(f50742,plain,(
  ( ! [X422,X424,X421,X423,X425] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X425))) | s(bool,X422) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X423),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X423,bool),X424))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X421))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X422))) | s(bool,X421) = s(bool,X425)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50110,f49420])).
fof(f50110,plain,(
  ( ! [X422,X424,X421,X423,X425] : (s(bool,X422) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X423),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X423,bool),X424))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X421))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X422))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X425))) | s(bool,X421) = s(bool,X425)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29987])).
fof(f50740,plain,(
  ( ! [X383,X385,X384] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X385))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X384))) | s(bool,X383) != s(bool,X384) | s(bool,X383) = s(bool,X385)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50109,f49420])).
fof(f50109,plain,(
  ( ! [X383,X385,X384] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X384))) | s(bool,X383) != s(bool,X384) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X385))) | s(bool,X383) = s(bool,X385)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29976])).
fof(f50738,plain,(
  ( ! [X288,X290,X287,X289,X286] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X290))) | s(bool,X287) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X288),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X288,bool),X289))) | s(bool,X286) != s(bool,X287) | s(bool,X286) = s(bool,X290)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50108,f49420])).
fof(f50108,plain,(
  ( ! [X288,X290,X287,X289,X286] : (s(bool,X287) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X288),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X288,bool),X289))) | s(bool,X286) != s(bool,X287) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X290))) | s(bool,X286) = s(bool,X290)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29944])).
fof(f50736,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X94) = s(bool,'const.bool.IN_2'(s(X95,X96),s(fun(X95,bool),'const.pred_set.EMPTY_0'))) | s(bool,X93) = s(bool,X97)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50107,f26907])).
fof(f50107,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X93) != s(bool,X94) | s(bool,X94) = s(bool,'const.bool.IN_2'(s(X95,X96),s(fun(X95,bool),'const.pred_set.EMPTY_0'))) | s(bool,X93) = s(bool,X97)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29882])).
fof(f50098,plain,(
  ( ! [X61,X59,X60] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X59) = s(bool,X61)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29872])).
fof(f50724,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50090,f15094])).
fof(f50090,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29858])).
fof(f50089,plain,(
  ( ! [X6,X7,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X5) != s(bool,X6) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X7)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29857])).
fof(f50681,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,X23) | s(bool,X21) = s(bool,X24)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50048,f49420])).
fof(f50048,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X21) = s(bool,X22) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,X22) = s(bool,X23) | s(bool,X21) = s(bool,X24)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29204])).
fof(f50047,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X15) = s(bool,X16) | s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29203])).
fof(f50669,plain,(
  ( ! [X261,X262,X258] : (s(bool,X258) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50028,f49420])).
fof(f50028,plain,(
  ( ! [X261,X262,X258] : (s(bool,'T_0') != s(bool,X258) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f26749])).
fof(f50024,plain,(
  ( ! [X198,X200,X199,X201] : (s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X199) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,X199) = s(bool,sK6(X198,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f26260])).
fof(f50016,plain,(
  ( ! [X926,X924,X928,X927,X925,X929] : (s(X926,f(s(bool,'T_0'))) != s(X926,g(s(bool,'T_0'))) | s(fun(bool,X926),X924) = s(fun(bool,X926),X925) | s(bool,X927) = s(bool,'const.bool.IN_2'(s(X928,X929),s(fun(X928,bool),'const.pred_set.EMPTY_0'))) | s(bool,X927) = s(bool,sK8(X924,X925,X926,bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25802])).
fof(f50663,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50015,f49420])).
fof(f50015,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(bool,'T_0') != s(bool,f(s(X885,sK8(X886,X887,bool,X885)))) | s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25795])).
fof(f50661,plain,(
  ( ! [X881,X878,X880,X879,X877] : (s(bool,X877) = s(bool,sK7(X877,X878,bool)) | s(bool,X879) = s(bool,'const.bool.IN_2'(s(X880,X881),s(fun(X880,bool),'const.pred_set.EMPTY_0'))) | s(bool,X877) = s(bool,X879)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50014,f49420])).
fof(f50014,plain,(
  ( ! [X881,X878,X880,X879,X877] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X878),s(bool,'T_0'))) | s(bool,X877) = s(bool,sK7(X877,X878,bool)) | s(bool,X879) = s(bool,'const.bool.IN_2'(s(X880,X881),s(fun(X880,bool),'const.pred_set.EMPTY_0'))) | s(bool,X877) = s(bool,X879)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25794])).
fof(f50012,plain,(
  ( ! [X854,X857,X855,X853,X856] : (s('type.option.option'(bool),X854) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X853) = s(bool,sK6(X854,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X854) | s(bool,X855) = s(bool,'const.bool.IN_2'(s(X856,X857),s(fun(X856,bool),'const.pred_set.EMPTY_0'))) | s(bool,X853) = s(bool,X855)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25789])).
fof(f50011,plain,(
  ( ! [X850,X848,X852,X847,X851,X849,X846] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X847))) | s(bool,X846) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X848),'const.option.NONE_0'),s(bool,X847),s(fun(X848,bool),X849))) | s(bool,X850) = s(bool,'const.bool.IN_2'(s(X851,X852),s(fun(X851,bool),'const.pred_set.EMPTY_0'))) | s(bool,X846) = s(bool,X850)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25788])).
fof(f50010,plain,(
  ( ! [X843,X841,X845,X839,X842,X840,X844] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X840))) | s(bool,X840) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X841),'const.option.NONE_0'),s(bool,X839),s(fun(X841,bool),X842))) | s(bool,X843) = s(bool,'const.bool.IN_2'(s(X844,X845),s(fun(X844,bool),'const.pred_set.EMPTY_0'))) | s(bool,X839) = s(bool,X843)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25787])).
fof(f50656,plain,(
  ( ! [X779,X783,X781,X782,X780] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X779))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X780))) | s(bool,X781) = s(bool,'const.bool.IN_2'(s(X782,X783),s(fun(X782,bool),'const.pred_set.EMPTY_0'))) | s(bool,X779) = s(bool,X781)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50009,f26843])).
fof(f50009,plain,(
  ( ! [X779,X783,X781,X782,X780] : (s(bool,'T_0') != s(bool,X780) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X779))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X780))) | s(bool,X781) = s(bool,'const.bool.IN_2'(s(X782,X783),s(fun(X782,bool),'const.pred_set.EMPTY_0'))) | s(bool,X779) = s(bool,X781)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25776])).
fof(f50654,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(duplicate_literal_removal,[],[f50653])).
fof(f50653,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50652])).
fof(f50652,plain,(
  ( ! [X771,X769,X773,X770,X772] : (s(bool,X769) = s(bool,X770) | s(bool,X771) = s(bool,'const.bool.IN_2'(s(X772,X773),s(fun(X772,bool),'const.pred_set.EMPTY_0'))) | s(bool,X769) = s(bool,X771)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50008,f26907])).
fof(f50008,plain,(
  ( ! [X771,X769,X773,X770,X772] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X770))) | s(bool,X769) = s(bool,X770) | s(bool,X771) = s(bool,'const.bool.IN_2'(s(X772,X773),s(fun(X772,bool),'const.pred_set.EMPTY_0'))) | s(bool,X769) = s(bool,X771)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25774])).
fof(f50650,plain,(
  ( ! [X333,X329,X331,X332,X334,X328,X330] : (s(bool,X328) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X330),'const.option.NONE_0'),s(bool,X329),s(fun(X330,bool),X331))) | s(bool,X332) = s(bool,'const.bool.IN_2'(s(X333,X334),s(fun(X333,bool),'const.pred_set.EMPTY_0'))) | s(bool,X328) = s(bool,X332)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50007,f49420])).
fof(f50007,plain,(
  ( ! [X333,X329,X331,X332,X334,X328,X330] : (s(bool,'T_0') != s(bool,X329) | s(bool,X328) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X330),'const.option.NONE_0'),s(bool,X329),s(fun(X330,bool),X331))) | s(bool,X332) = s(bool,'const.bool.IN_2'(s(X333,X334),s(fun(X333,bool),'const.pred_set.EMPTY_0'))) | s(bool,X328) = s(bool,X332)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25679])).
fof(f50648,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (s(bool,X322) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X323),'const.option.NONE_0'),s(bool,X321),s(fun(X323,bool),X324))) | s(bool,X325) = s(bool,'const.bool.IN_2'(s(X326,X327),s(fun(X326,bool),'const.pred_set.EMPTY_0'))) | s(bool,X321) = s(bool,X325)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50006,f49420])).
fof(f50006,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (s(bool,'T_0') != s(bool,X322) | s(bool,X322) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X323),'const.option.NONE_0'),s(bool,X321),s(fun(X323,bool),X324))) | s(bool,X325) = s(bool,'const.bool.IN_2'(s(X326,X327),s(fun(X326,bool),'const.pred_set.EMPTY_0'))) | s(bool,X321) = s(bool,X325)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25678])).
fof(f50001,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X604] : (s(bool,X601) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X602),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X602,bool),X603))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X600))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X601))) | s(bool,X604) = s(bool,'const.bool.IN_2'(s(X605,X606),s(fun(X605,bool),'const.pred_set.EMPTY_0'))) | s(bool,X600) = s(bool,X604)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25605])).
fof(f50645,plain,(
  ( ! [X4,X2,X5,X3] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50644])).
fof(f50644,plain,(
  ( ! [X540,X542,X541,X543,X544] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X541))) | s(bool,X542) = s(bool,'const.bool.IN_2'(s(X543,X544),s(fun(X543,bool),'const.pred_set.EMPTY_0'))) | s(bool,X540) = s(bool,X542)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f50000,f26907])).
fof(f50000,plain,(
  ( ! [X540,X542,X541,X543,X544] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X541))) | s(bool,X540) != s(bool,X541) | s(bool,X542) = s(bool,'const.bool.IN_2'(s(X543,X544),s(fun(X543,bool),'const.pred_set.EMPTY_0'))) | s(bool,X540) = s(bool,X542)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25594])).
fof(f49999,plain,(
  ( ! [X412,X408,X410,X407,X413,X409,X411] : (s(bool,X408) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X409),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X409,bool),X410))) | s(bool,X407) != s(bool,X408) | s(bool,X411) = s(bool,'const.bool.IN_2'(s(X412,X413),s(fun(X412,bool),'const.pred_set.EMPTY_0'))) | s(bool,X407) = s(bool,X411)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25564])).
fof(f49951,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X96),s(fun(X97,bool),X98)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24367])).
fof(f49941,plain,(
  ( ! [X231,X233,X234,X232] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(bool,X232) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X233,bool),X234))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24347])).
fof(f49938,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X95),s(fun(X97,bool),X98)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24322])).
fof(f50587,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50586])).
fof(f50586,plain,(
  ( ! [X189,X188] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49861,f21155])).
fof(f49861,plain,(
  ( ! [X189,X188] : (s(bool,'T_0') != s(bool,X189) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f21195])).
fof(f50584,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50583])).
fof(f50583,plain,(
  ( ! [X177,X176] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49860,f21475])).
fof(f49860,plain,(
  ( ! [X177,X176] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s(bool,X177) != s(bool,sK6('const.option.SOME_1'(s(bool,X176)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f21191])).
fof(f50581,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,X135),s(fun(X137,bool),X138))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X135)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49859,f49420])).
fof(f49859,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,'T_0') != s(bool,X136) | s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,X135),s(fun(X137,bool),X138))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X135)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f21177])).
fof(f50578,plain,(
  ( ! [X185,X184] : (s(bool,X185) = s(bool,sK6('const.option.SOME_1'(s(bool,X184)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49854,f21475])).
fof(f49854,plain,(
  ( ! [X185,X184] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) | s(bool,X185) = s(bool,sK6('const.option.SOME_1'(s(bool,X184)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f21055])).
fof(f50573,plain,(
  ( ! [X107,X106] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49848,f21476])).
fof(f49848,plain,(
  ( ! [X107,X106] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) | s(bool,X107) != s(bool,sK6('const.option.SOME_1'(s(bool,X106)),bool)) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f20500])).
fof(f50571,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49847,f21474])).
fof(f49847,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X103) != s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f20499])).
fof(f50569,plain,(
  ( ! [X99] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49846,f21473])).
fof(f49846,plain,(
  ( ! [X99,X97,X98] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) | s(bool,X99) != s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f20498])).
fof(f50567,plain,(
  ( ! [X130,X129] : (s('type.option.option'(bool),X129) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) | s(bool,X130) = s(bool,sK6(X129,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X129)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f49845,f49420])).
fof(f49845,plain,(
  ( ! [X130,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) | s(bool,X130) = s(bool,sK6(X129,bool)) | s('type.option.option'(bool),X129) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X129)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f20412])).
fof(f50564,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50563])).
fof(f50563,plain,(
  ( ! [X45,X46,X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,X46)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49843,f14503])).
fof(f49843,plain,(
  ( ! [X45,X46,X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X44) = s(bool,X45) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,X46)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f20380])).
fof(f50377,plain,(
  ( ! [X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174)))) ) | ($spl0 | $spl212)),
  inference(duplicate_literal_removal,[],[f49838])).
fof(f49838,plain,(
  ( ! [X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19551])).
fof(f49837,plain,(
  ( ! [X134,X136,X135,X137] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(bool,X135) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X136),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X136,bool),X137))) | s(bool,X134) != s(bool,X135)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19541])).
fof(f50554,plain,(
  ( ! [X26] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49833,f21147])).
fof(f49833,plain,(
  ( ! [X26] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | p(s(bool,X26))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19514])).
fof(f50551,plain,(
  ( ! [X241,X242] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241))) | s(bool,X241) = s(bool,sK7(X241,X242,bool))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49829,f49420])).
fof(f49829,plain,(
  ( ! [X241,X242] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X242),s(bool,'T_0'))) | s(bool,X241) = s(bool,sK7(X241,X242,bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19500])).
fof(f49827,plain,(
  ( ! [X237,X236] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236))) | s('type.option.option'(bool),X237) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X236) = s(bool,sK6(X237,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X237)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19498])).
fof(f50545,plain,(
  ( ! [X116,X114,X115,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s(bool,X113) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X115),'const.option.NONE_0'),s(bool,X114),s(fun(X115,bool),X116)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49825,f49420])).
fof(f49825,plain,(
  ( ! [X116,X114,X115,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s(bool,'T_0') != s(bool,X114) | s(bool,X113) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X115),'const.option.NONE_0'),s(bool,X114),s(fun(X115,bool),X116)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19441])).
fof(f50543,plain,(
  ( ! [X111,X109,X112,X110] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(bool,X109),s(fun(X111,bool),X112)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49824,f49420])).
fof(f49824,plain,(
  ( ! [X111,X109,X112,X110] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,'T_0') != s(bool,X110) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(bool,X109),s(fun(X111,bool),X112)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19440])).
fof(f50538,plain,(
  ( ! [X12,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | p(s(bool,X12))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49821,f21149])).
fof(f49821,plain,(
  ( ! [X12,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | p(s(bool,X12)) | s(bool,X11) != s(bool,X12)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19401])).
fof(f50536,plain,(
  ( ! [X10,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,X10)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49820,f21149])).
fof(f49820,plain,(
  ( ! [X10,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19399])).
fof(f49805,plain,(
  ( ! [X177,X176] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s(bool,X177) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19260])).
fof(f49804,plain,(
  ( ! [X210,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) | s(bool,X210) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19146])).
fof(f50530,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(condensation,[],[f50529])).
fof(f50529,plain,(
  ( ! [X17,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49803,f21104])).
fof(f49803,plain,(
  ( ! [X17,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19006])).
fof(f50527,plain,(
  ( ! [X10,X9] : (s(bool,X9) = s(bool,sK6(X10,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X10) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49802,f14654])).
fof(f49802,plain,(
  ( ! [X10,X9] : (s('type.option.option'(bool),X10) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X9) = s(bool,sK6(X10,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X10) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19003])).
fof(f50378,plain,(
  ( ! [X164] : (s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X164)) ) | ($spl0 | $spl212)),
  inference(duplicate_literal_removal,[],[f49752])).
fof(f49752,plain,(
  ( ! [X164] : (s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X164)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f18204])).
fof(f50496,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50495,f49420])).
fof(f50495,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X171,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49749,f49420])).
fof(f49749,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X172) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X171,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f18188])).
fof(f49748,plain,(
  ( ! [X167,X168] : (s('type.option.option'(bool),X167) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X168))) | s(bool,X168) = s(bool,sK6(X167,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X167)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f18186])).
fof(f50490,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X134,bool),X135))) | s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f50489,f49420])).
fof(f50489,plain,(
  ( ! [X134,X132,X135,X133] : (s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,sK6(X132,bool)),s(fun(X134,bool),X135))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49746,f49420])).
fof(f49746,plain,(
  ( ! [X134,X132,X135,X133] : (s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X133) | s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,sK6(X132,bool)),s(fun(X134,bool),X135))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f18166])).
fof(f50427,plain,(
  ( ! [X76,X75] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49587,f13721])).
fof(f49587,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') != s(bool,X76) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f8127])).
fof(f50423,plain,(
  ( ! [X72,X71] : (s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,X71)),bool)) | s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49582,f21476])).
fof(f49582,plain,(
  ( ! [X72,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,X71)),bool)) | s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f7870])).
fof(f50420,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49562,f194])).
fof(f49562,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f4169])).
fof(f50402,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49485,f21474])).
fof(f49485,plain,(
  ( ! [X118,X116,X119,X117] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f2832])).
fof(f50391,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49436,f21146])).
fof(f49436,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f1005])).
fof(f50387,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49426,f21473])).
fof(f49426,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f440])).
fof(f50385,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49422,f49420])).
fof(f49422,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f152])).
fof(f49420,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49419,f871])).
fof(f49419,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48006,f208])).
fof(f48006,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f47993,f857])).
fof(f49004,plain,(
  ( ! [X269,X267,X268,X270,X266] : (s(bool,X270) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X266),X267),s(bool,X268),s(fun(X266,bool),X269))) | s(bool,'T_0') = s(bool,X270) | s('type.option.option'(X266),'const.option.NONE_0') = s('type.option.option'(X266),X267)) ) | ($spl0 | $spl212)),
  inference(trivial_inequality_removal,[],[f49003])).
fof(f49003,plain,(
  ( ! [X269,X267,X268,X270,X266] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X270) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X266),X267),s(bool,X268),s(fun(X266,bool),X269))) | s(bool,'T_0') = s(bool,X270) | s('type.option.option'(X266),'const.option.NONE_0') = s('type.option.option'(X266),X267)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48331,f261])).
fof(f48331,plain,(
  ( ! [X269,X267,X268,X270,X266] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,X270) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X266),X267),s(bool,X268),s(fun(X266,bool),X269))) | s(bool,'T_0') = s(bool,X270) | s('type.option.option'(X266),'const.option.NONE_0') = s('type.option.option'(X266),X267)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47685])).
fof(f48998,plain,(
  ( ! [X600,X602,X598,X601,X603,X599,X604] : (s(bool,X602) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X603),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X603,bool),X604))) | s(bool,X602) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X598),X600),s(bool,X601),s(fun(X598,bool),X599))) | s('type.option.option'(X598),'const.option.NONE_0') = s('type.option.option'(X598),X600)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48325,f261])).
fof(f48325,plain,(
  ( ! [X600,X602,X598,X601,X603,X599,X604] : (s(bool,X602) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X603),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X603,bool),X604))) | s(bool,X602) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X598),X600),s(bool,X601),s(fun(X598,bool),X599))) | s('type.option.option'(X598),'const.option.NONE_0') = s('type.option.option'(X598),X600)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47572])).
fof(f48997,plain,(
  ( ! [X596,X594,X597,X595] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X594),X596),s(bool,X597),s(fun(X594,bool),X595))) | s('type.option.option'(X594),'const.option.NONE_0') = s('type.option.option'(X594),X596)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48996,f3993])).
fof(f48996,plain,(
  ( ! [X596,X594,X597,X595] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X594),X596),s(bool,X597),s(fun(X594,bool),X595))) | s('type.option.option'(X594),'const.option.NONE_0') = s('type.option.option'(X594),X596)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48324,f261])).
fof(f48324,plain,(
  ( ! [X596,X594,X597,X595] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X594),X596),s(bool,X597),s(fun(X594,bool),X595))) | s('type.option.option'(X594),'const.option.NONE_0') = s('type.option.option'(X594),X596)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47571])).
fof(f48984,plain,(
  ( ! [X364,X366,X365,X367,X363] : (s(bool,X367) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X363),X365),s(bool,X366),s(fun(X363,bool),X364))) | s(bool,'F_0') = s(bool,X367) | s('type.option.option'(X363),'const.option.NONE_0') = s('type.option.option'(X363),X365)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48983,f454])).
fof(f48983,plain,(
  ( ! [X364,X366,X365,X367,X363] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X367) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X363),X365),s(bool,X366),s(fun(X363,bool),X364))) | s(bool,'F_0') = s(bool,X367) | s('type.option.option'(X363),'const.option.NONE_0') = s('type.option.option'(X363),X365)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48318,f261])).
fof(f48318,plain,(
  ( ! [X364,X366,X365,X367,X363] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,X367) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X363),X365),s(bool,X366),s(fun(X363,bool),X364))) | s(bool,'F_0') = s(bool,X367) | s('type.option.option'(X363),'const.option.NONE_0') = s('type.option.option'(X363),X365)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47525])).
fof(f48927,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl212)),
  inference(trivial_inequality_removal,[],[f48926])).
fof(f48926,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48217,f261])).
fof(f48217,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f3148])).
fof(f48889,plain,(
  ( ! [X569,X571,X565,X568,X570,X566] : (s(bool,X569) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X570),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X570,bool),X571))) | s(bool,X569) != s(bool,happ(s(fun(X565,bool),X568),s(X565,sK6(X566,X565)))) | s('type.option.option'(X565),'const.option.NONE_0') = s('type.option.option'(X565),X566)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48167,f261])).
fof(f48167,plain,(
  ( ! [X569,X571,X565,X568,X570,X566] : (s(bool,X569) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X570),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X570,bool),X571))) | s(bool,X569) != s(bool,happ(s(fun(X565,bool),X568),s(X565,sK6(X566,X565)))) | s('type.option.option'(X565),'const.option.NONE_0') = s('type.option.option'(X565),X566)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47745])).
fof(f48874,plain,(
  ( ! [X333,X331,X334,X330] : (s(bool,X334) != s(bool,happ(s(fun(X330,bool),X333),s(X330,sK6(X331,X330)))) | s(bool,'F_0') = s(bool,X334) | s('type.option.option'(X330),'const.option.NONE_0') = s('type.option.option'(X330),X331)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48873,f454])).
fof(f48873,plain,(
  ( ! [X333,X331,X334,X330] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X334) != s(bool,happ(s(fun(X330,bool),X333),s(X330,sK6(X331,X330)))) | s(bool,'F_0') = s(bool,X334) | s('type.option.option'(X330),'const.option.NONE_0') = s('type.option.option'(X330),X331)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48157,f261])).
fof(f48157,plain,(
  ( ! [X333,X331,X334,X330] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,X334) != s(bool,happ(s(fun(X330,bool),X333),s(X330,sK6(X331,X330)))) | s(bool,'F_0') = s(bool,X334) | s('type.option.option'(X330),'const.option.NONE_0') = s('type.option.option'(X330),X331)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47698])).
fof(f48861,plain,(
  ( ! [X741,X744,X740,X742] : (s(bool,X744) = s(bool,happ(s(fun(X740,bool),X741),s(X740,sK6(X742,X740)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X744))) | s('type.option.option'(X740),'const.option.NONE_0') = s('type.option.option'(X740),X742)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48860,f145])).
fof(f48860,plain,(
  ( ! [X741,X744,X740,X742] : (p(s(bool,'F_0')) | s(bool,X744) = s(bool,happ(s(fun(X740,bool),X741),s(X740,sK6(X742,X740)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X744))) | s('type.option.option'(X740),'const.option.NONE_0') = s('type.option.option'(X740),X742)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48141,f261])).
fof(f48141,plain,(
  ( ! [X741,X744,X740,X742] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) | s(bool,X744) = s(bool,happ(s(fun(X740,bool),X741),s(X740,sK6(X742,X740)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X744))) | s('type.option.option'(X740),'const.option.NONE_0') = s('type.option.option'(X740),X742)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47602])).
fof(f48854,plain,(
  ( ! [X720,X722,X718,X719] : (s(bool,X722) != s(bool,happ(s(fun(X718,bool),X719),s(X718,sK6(X720,X718)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s('type.option.option'(X718),'const.option.NONE_0') = s('type.option.option'(X718),X720)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48853,f145])).
fof(f48853,plain,(
  ( ! [X720,X722,X718,X719] : (p(s(bool,'F_0')) | s(bool,X722) != s(bool,happ(s(fun(X718,bool),X719),s(X718,sK6(X720,X718)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s('type.option.option'(X718),'const.option.NONE_0') = s('type.option.option'(X718),X720)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48137,f261])).
fof(f48137,plain,(
  ( ! [X720,X722,X718,X719] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) | s(bool,X722) != s(bool,happ(s(fun(X718,bool),X719),s(X718,sK6(X720,X718)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s('type.option.option'(X718),'const.option.NONE_0') = s('type.option.option'(X718),X720)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47597])).
fof(f48844,plain,(
  ( ! [X399,X401,X403,X404,X400] : (s(bool,X403) = s(bool,happ(s(fun(X399,bool),X400),s(X399,sK6(X401,X399)))) | s(bool,X403) = s(bool,X404) | s(bool,'F_0') = s(bool,X404) | s('type.option.option'(X399),'const.option.NONE_0') = s('type.option.option'(X399),X401)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48843,f145])).
fof(f48843,plain,(
  ( ! [X399,X401,X403,X404,X400] : (p(s(bool,'F_0')) | s(bool,X403) = s(bool,happ(s(fun(X399,bool),X400),s(X399,sK6(X401,X399)))) | s(bool,X403) = s(bool,X404) | s(bool,'F_0') = s(bool,X404) | s('type.option.option'(X399),'const.option.NONE_0') = s('type.option.option'(X399),X401)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48130,f261])).
fof(f48130,plain,(
  ( ! [X399,X401,X403,X404,X400] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) | s(bool,X403) = s(bool,happ(s(fun(X399,bool),X400),s(X399,sK6(X401,X399)))) | s(bool,X403) = s(bool,X404) | s(bool,'F_0') = s(bool,X404) | s('type.option.option'(X399),'const.option.NONE_0') = s('type.option.option'(X399),X401)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47532])).
fof(f48833,plain,(
  ( ! [X280,X282,X279,X278] : (s(bool,X282) = s(bool,happ(s(fun(X278,bool),X279),s(X278,sK6(X280,X278)))) | s(bool,'T_0') = s(bool,X282) | s('type.option.option'(X278),'const.option.NONE_0') = s('type.option.option'(X278),X280)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48832,f145])).
fof(f48832,plain,(
  ( ! [X280,X282,X279,X278] : (p(s(bool,'F_0')) | s(bool,X282) = s(bool,happ(s(fun(X278,bool),X279),s(X278,sK6(X280,X278)))) | s(bool,'T_0') = s(bool,X282) | s('type.option.option'(X278),'const.option.NONE_0') = s('type.option.option'(X278),X280)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48121,f261])).
fof(f48121,plain,(
  ( ! [X280,X282,X279,X278] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) | s(bool,X282) = s(bool,happ(s(fun(X278,bool),X279),s(X278,sK6(X280,X278)))) | s(bool,'T_0') = s(bool,X282) | s('type.option.option'(X278),'const.option.NONE_0') = s('type.option.option'(X278),X280)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47508])).
fof(f48820,plain,(
  ( ! [X218,X219,X217] : (s(bool,'T_0') != s(bool,happ(s(fun(X217,bool),X218),s(X217,sK6(X219,X217)))) | s('type.option.option'(X217),'const.option.NONE_0') = s('type.option.option'(X217),X219)) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48819,f145])).
fof(f48819,plain,(
  ( ! [X218,X219,X217] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(X217,bool),X218),s(X217,sK6(X219,X217)))) | s('type.option.option'(X217),'const.option.NONE_0') = s('type.option.option'(X217),X219)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48113,f261])).
fof(f48113,plain,(
  ( ! [X218,X219,X217] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) | s(bool,'T_0') != s(bool,happ(s(fun(X217,bool),X218),s(X217,sK6(X219,X217)))) | s('type.option.option'(X217),'const.option.NONE_0') = s('type.option.option'(X217),X219)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47495])).
fof(f48803,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl212)),
  inference(trivial_inequality_removal,[],[f48802])).
fof(f48802,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48074,f261])).
fof(f48074,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f3149])).
fof(f48034,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48033,f21473])).
fof(f48033,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4)))) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48003,f208])).
fof(f48003,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4)))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f47993,f800])).
fof(f47810,plain,(
  ( ! [X893,X890,X888,X892,X891,X889] : (s('type.option.option'(X888),'const.option.SOME_1'(s(X888,X893))) != s('type.option.option'(X888),happ(s(fun(X889,'type.option.option'(X888)),X892),s(X889,sK6(X890,X889)))) | s(X888,X893) = s(X888,sK6('const.option.option_CASE_3'(s('type.option.option'(X889),X890),s('type.option.option'(X888),X891),s(fun(X889,'type.option.option'(X888)),X892)),X888)) | s('type.option.option'(X888),'const.option.NONE_0') = s('type.option.option'(X888),'const.option.option_CASE_3'(s('type.option.option'(X889),X890),s('type.option.option'(X888),X891),s(fun(X889,'type.option.option'(X888)),X892))) | s('type.option.option'(X889),'const.option.NONE_0') = s('type.option.option'(X889),X890)) )),
  inference(superposition,[],[f544,f644])).
fof(f47805,plain,(
  ( ! [X860,X859,X857,X855,X858,X856] : (s(bool,'T_0') != s(bool,happ(s(fun(X855,bool),happ(s(fun(X856,fun(X855,bool)),X859),s(X856,sK6(X857,X856)))),s(X855,X860))) | s(X855,X860) = s(X855,sK7(X860,'const.option.option_CASE_3'(s('type.option.option'(X856),X857),s(fun(X855,bool),X858),s(fun(X856,fun(X855,bool)),X859)),X855)) | s('type.option.option'(X856),'const.option.NONE_0') = s('type.option.option'(X856),X857)) ) | $spl0),
  inference(superposition,[],[f2868,f644])).
fof(f47804,plain,(
  ( ! [X850,X854,X852,X851,X849,X853] : (s(bool,'F_0') = s(bool,happ(s(fun(X849,bool),happ(s(fun(X850,fun(X849,bool)),X853),s(X850,sK6(X851,X850)))),s(X849,X854))) | s(X849,X854) = s(X849,sK7(X854,'const.option.option_CASE_3'(s('type.option.option'(X850),X851),s(fun(X849,bool),X852),s(fun(X850,fun(X849,bool)),X853)),X849)) | s('type.option.option'(X850),'const.option.NONE_0') = s('type.option.option'(X850),X851)) ) | $spl0),
  inference(superposition,[],[f1907,f644])).
fof(f47803,plain,(
  ( ! [X848,X843,X847,X845,X846,X844] : (~p(s(bool,happ(s(fun(X843,bool),happ(s(fun(X844,fun(X843,bool)),X847),s(X844,sK6(X845,X844)))),s(X843,X848)))) | s(bool,'T_0') = s(bool,happ(s(fun(X843,bool),'const.option.option_CASE_3'(s('type.option.option'(X844),X845),s(fun(X843,bool),X846),s(fun(X844,fun(X843,bool)),X847))),s(X843,sK7(X848,'const.option.option_CASE_3'(s('type.option.option'(X844),X845),s(fun(X843,bool),X846),s(fun(X844,fun(X843,bool)),X847)),X843)))) | s('type.option.option'(X844),'const.option.NONE_0') = s('type.option.option'(X844),X845)) )),
  inference(superposition,[],[f620,f644])).
fof(f47802,plain,(
  ( ! [X841,X835,X839,X837,X842,X840,X838,X836] : (~p(s(bool,happ(s(fun(X835,bool),happ(s(fun(X836,fun(X835,bool)),X839),s(X836,sK6(X837,X836)))),s(X835,X840)))) | s(X835,X840) = s(X835,sK7('const.option.option_CASE_3'(s('type.option.option'(X841),'const.option.NONE_0'),s(X835,X840),s(fun(X841,X835),X842)),'const.option.option_CASE_3'(s('type.option.option'(X836),X837),s(fun(X835,bool),X838),s(fun(X836,fun(X835,bool)),X839)),X835)) | s('type.option.option'(X836),'const.option.NONE_0') = s('type.option.option'(X836),X837)) )),
  inference(superposition,[],[f532,f644])).
fof(f47801,plain,(
  ( ! [X831,X829,X833,X830,X828,X834,X832,X827] : (~p(s(bool,happ(s(fun(X827,bool),happ(s(fun(X828,fun(X827,bool)),X831),s(X828,sK6(X829,X828)))),s(X827,X832)))) | s(X827,X832) = s(X827,sK7(X832,'const.option.option_CASE_3'(s('type.option.option'(X833),'const.option.NONE_0'),s(fun(X827,bool),'const.option.option_CASE_3'(s('type.option.option'(X828),X829),s(fun(X827,bool),X830),s(fun(X828,fun(X827,bool)),X831))),s(fun(X833,fun(X827,bool)),X834)),X827)) | s('type.option.option'(X828),'const.option.NONE_0') = s('type.option.option'(X828),X829)) )),
  inference(superposition,[],[f519,f644])).
fof(f47799,plain,(
  ( ! [X819,X817,X818,X816,X820,X815] : (p(s(bool,happ(s(fun(X815,bool),happ(s(fun(X816,fun(X815,bool)),X819),s(X816,sK6(X817,X816)))),s(X815,sK7(X820,'const.option.option_CASE_3'(s('type.option.option'(X816),X817),s(fun(X815,bool),X818),s(fun(X816,fun(X815,bool)),X819)),X815))))) | ~p(s(bool,happ(s(fun(X815,bool),'const.option.option_CASE_3'(s('type.option.option'(X816),X817),s(fun(X815,bool),X818),s(fun(X816,fun(X815,bool)),X819))),s(X815,X820)))) | s('type.option.option'(X816),'const.option.NONE_0') = s('type.option.option'(X816),X817)) )),
  inference(superposition,[],[f197,f644])).
fof(f47798,plain,(
  ( ! [X810,X814,X812,X811,X809,X813] : (~p(s(bool,happ(s(fun(X809,bool),happ(s(fun(X810,fun(X809,bool)),X813),s(X810,sK6(X811,X810)))),s(X809,X814)))) | s(X809,X814) = s(X809,sK7(X814,'const.option.option_CASE_3'(s('type.option.option'(X810),X811),s(fun(X809,bool),X812),s(fun(X810,fun(X809,bool)),X813)),X809)) | s('type.option.option'(X810),'const.option.NONE_0') = s('type.option.option'(X810),X811)) )),
  inference(superposition,[],[f196,f644])).
fof(f47797,plain,(
  ( ! [X808,X802,X806,X804,X803,X807,X805] : (~p(s(bool,happ(s(fun(X802,bool),happ(s(fun(X803,fun(X802,bool)),X806),s(X803,sK6(X804,X803)))),s(X802,X807)))) | p(s(bool,happ(s(fun(X802,bool),'const.option.option_CASE_3'(s('type.option.option'(X803),X804),s(fun(X802,bool),X805),s(fun(X803,fun(X802,bool)),X806))),s(X802,X808)))) | s(X802,X807) != s(X802,X808) | s('type.option.option'(X803),'const.option.NONE_0') = s('type.option.option'(X803),X804)) )),
  inference(superposition,[],[f195,f644])).
fof(f47796,plain,(
  ( ! [X798,X800,X799,X797,X801] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X797,fun(bool,bool)),X800),s(X797,sK6(X798,X797)))),s(bool,X801)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X797),X798),s(fun(bool,bool),X799),s(fun(X797,fun(bool,bool)),X800)),bool)) | s(bool,'T_0') = s(bool,X801) | s('type.option.option'(X797),'const.option.NONE_0') = s('type.option.option'(X797),X798)) )),
  inference(superposition,[],[f524,f644])).
fof(f47795,plain,(
  ( ! [X796,X795,X793,X794,X792] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X792,fun(bool,bool)),X795),s(X792,sK6(X793,X792)))),s(bool,X796)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X792),X793),s(fun(bool,bool),X794),s(fun(X792,fun(bool,bool)),X795))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X796,'const.option.option_CASE_3'(s('type.option.option'(X792),X793),s(fun(bool,bool),X794),s(fun(X792,fun(bool,bool)),X795)),bool)) | s('type.option.option'(X792),'const.option.NONE_0') = s('type.option.option'(X792),X793)) )),
  inference(superposition,[],[f617,f644])).
fof(f47777,plain,(
  ( ! [X720,X722,X716,X718,X721,X717,X719] : (s(bool,'T_0') != s(bool,happ(s(fun(X716,bool),X719),s(X716,sK6(X717,X716)))) | s(bool,X720) = s(bool,'const.bool.IN_2'(s(X721,X722),s(fun(X721,bool),'const.pred_set.EMPTY_0'))) | s(bool,X720) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X716),X717),s(bool,X718),s(fun(X716,bool),X719))) | s('type.option.option'(X716),'const.option.NONE_0') = s('type.option.option'(X716),X717)) ) | $spl0),
  inference(superposition,[],[f25483,f644])).
fof(f47775,plain,(
  ( ! [X707,X708,X710,X709,X711] : (p(s(bool,happ(s(fun(X707,bool),X710),s(X707,sK6(X708,X707))))) | s(bool,X711) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X707),X708),s(bool,X709),s(fun(X707,bool),X710))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X711))) | s('type.option.option'(X707),'const.option.NONE_0') = s('type.option.option'(X707),X708)) ) | $spl0),
  inference(superposition,[],[f21149,f644])).
fof(f47774,plain,(
  ( ! [X705,X704,X706,X703] : (~p(s(bool,happ(s(fun(X703,bool),X706),s(X703,sK6(X704,X703))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X703),X704),s(bool,X705),s(fun(X703,bool),X706))))) | s('type.option.option'(X703),'const.option.NONE_0') = s('type.option.option'(X703),X704)) ) | $spl0),
  inference(superposition,[],[f21147,f644])).
fof(f47773,plain,(
  ( ! [X699,X700,X702,X701] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X699,bool),X702),s(X699,sK6(X700,X699))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X699),X700),s(bool,X701),s(fun(X699,bool),X702))))) | s('type.option.option'(X699),'const.option.NONE_0') = s('type.option.option'(X699),X700)) ) | $spl0),
  inference(superposition,[],[f21146,f644])).
fof(f47771,plain,(
  ( ! [X693,X691,X692,X690] : (p(s(bool,happ(s(fun(X690,bool),X693),s(X690,sK6(X691,X690))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X690),X691),s(bool,X692),s(fun(X690,bool),X693))))) | s('type.option.option'(X690),'const.option.NONE_0') = s('type.option.option'(X690),X691)) ) | $spl0),
  inference(superposition,[],[f19514,f644])).
fof(f47770,plain,(
  ( ! [X689,X685,X687,X688,X686] : (p(s(bool,happ(s(fun(X685,bool),X688),s(X685,sK6(X686,X685))))) | s(bool,X689) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X685),X686),s(bool,X687),s(fun(X685,bool),X688))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X689))) | s('type.option.option'(X685),'const.option.NONE_0') = s('type.option.option'(X685),X686)) ) | $spl0),
  inference(superposition,[],[f19401,f644])).
fof(f47769,plain,(
  ( ! [X681,X683,X684,X680,X682] : (~p(s(bool,happ(s(fun(X680,bool),X683),s(X680,sK6(X681,X680))))) | s(bool,X684) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X680),X681),s(bool,X682),s(fun(X680,bool),X683))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X684))) | s('type.option.option'(X680),'const.option.NONE_0') = s('type.option.option'(X680),X681)) ) | $spl0),
  inference(superposition,[],[f19399,f644])).
fof(f47764,plain,(
  ( ! [X660,X656,X658,X657,X659] : (s(bool,'F_0') != s(bool,happ(s(fun(X656,bool),X659),s(X656,sK6(X657,X656)))) | s(bool,X660) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X656),X657),s(bool,X658),s(fun(X656,bool),X659)))),bool)) | s(bool,'T_0') = s(bool,X660) | s('type.option.option'(X656),'const.option.NONE_0') = s('type.option.option'(X656),X657)) ) | $spl0),
  inference(superposition,[],[f15417,f644])).
fof(f47976,plain,(
  ( ! [X652,X654,X653,X655,X651] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X651),X652),s(bool,X653),s(fun(X651,bool),X654))) | s(bool,X655) != s(bool,happ(s(fun(X651,bool),X654),s(X651,sK6(X652,X651)))) | s(bool,'F_0') = s(bool,X655) | s('type.option.option'(X651),'const.option.NONE_0') = s('type.option.option'(X651),X652)) ) | $spl0),
  inference(forward_demodulation,[],[f47763,f994])).
fof(f47763,plain,(
  ( ! [X652,X654,X653,X655,X651] : (s(bool,X655) != s(bool,happ(s(fun(X651,bool),X654),s(X651,sK6(X652,X651)))) | s(bool,'F_0') = s(bool,X655) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X651),X652),s(bool,X653),s(fun(X651,bool),X654))) | s('type.option.option'(X651),'const.option.NONE_0') = s('type.option.option'(X651),X652)) ) | $spl0),
  inference(superposition,[],[f15236,f644])).
fof(f47975,plain,(
  ( ! [X648,X650,X646,X649,X647] : (s(bool,'T_0') = s(bool,X650) | s(bool,X650) != s(bool,happ(s(fun(X646,bool),X649),s(X646,sK6(X647,X646)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X646),X647),s(bool,X648),s(fun(X646,bool),X649))) | s('type.option.option'(X646),'const.option.NONE_0') = s('type.option.option'(X646),X647)) ) | $spl0),
  inference(forward_demodulation,[],[f47762,f994])).
fof(f47762,plain,(
  ( ! [X648,X650,X646,X649,X647] : (s(bool,X650) != s(bool,happ(s(fun(X646,bool),X649),s(X646,sK6(X647,X646)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X646),X647),s(bool,X648),s(fun(X646,bool),X649))) | s(bool,X650) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(X646),'const.option.NONE_0') = s('type.option.option'(X646),X647)) ) | $spl0),
  inference(superposition,[],[f15236,f644])).
fof(f47761,plain,(
  ( ! [X644,X642,X645,X641,X643] : (s(bool,'F_0') != s(bool,happ(s(fun(X641,bool),X644),s(X641,sK6(X642,X641)))) | s(bool,X645) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X641),X642),s(bool,X643),s(fun(X641,bool),X644))) | s(bool,'T_0') = s(bool,X645) | s('type.option.option'(X641),'const.option.NONE_0') = s('type.option.option'(X641),X642)) ) | $spl0),
  inference(superposition,[],[f15050,f644])).
fof(f47746,plain,(
  ( ! [X573,X575,X576,X578,X572,X574,X577] : (s(bool,X576) != s(bool,happ(s(fun(X572,bool),X575),s(X572,sK6(X573,X572)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X577),'const.option.NONE_0'),s(bool,X576),s(fun(X577,bool),X578))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X572),X573),s(bool,X574),s(fun(X572,bool),X575))) | s('type.option.option'(X572),'const.option.NONE_0') = s('type.option.option'(X572),X573)) ) | $spl0),
  inference(superposition,[],[f8919,f644])).
fof(f47745,plain,(
  ( ! [X569,X571,X565,X567,X568,X570,X566] : (s(bool,X569) != s(bool,happ(s(fun(X565,bool),X568),s(X565,sK6(X566,X565)))) | s(bool,X569) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X570),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X565),X566),s(bool,X567),s(fun(X565,bool),X568))),s(fun(X570,bool),X571))) | s('type.option.option'(X565),'const.option.NONE_0') = s('type.option.option'(X565),X566)) ) | $spl0),
  inference(superposition,[],[f8919,f644])).
fof(f47744,plain,(
  ( ! [X561,X563,X564,X562] : (s(bool,'T_0') != s(bool,happ(s(fun(X561,bool),X564),s(X561,sK6(X562,X561)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X561),X562),s(bool,X563),s(fun(X561,bool),X564)))),bool)) | s('type.option.option'(X561),'const.option.NONE_0') = s('type.option.option'(X561),X562)) ) | $spl0),
  inference(superposition,[],[f8593,f644])).
fof(f47738,plain,(
  ( ! [X536,X534,X533,X535] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X533,bool),X536),s(X533,sK6(X534,X533))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X533),X534),s(bool,X535),s(fun(X533,bool),X536))))) | s('type.option.option'(X533),'const.option.NONE_0') = s('type.option.option'(X533),X534)) ) | $spl0),
  inference(superposition,[],[f8256,f644])).
fof(f47731,plain,(
  ( ! [X505,X507,X508,X504,X506,X503] : (s(bool,'T_0') != s(bool,happ(s(fun(X503,bool),X506),s(X503,sK6(X504,X503)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X507),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X503),X504),s(bool,X505),s(fun(X503,bool),X506))),s(fun(X507,bool),X508))) | s('type.option.option'(X503),'const.option.NONE_0') = s('type.option.option'(X503),X504)) ) | $spl0),
  inference(superposition,[],[f5281,f644])).
fof(f47730,plain,(
  ( ! [X499,X500,X502,X498,X501] : (s(bool,X502) != s(bool,happ(s(fun(X498,bool),X501),s(X498,sK6(X499,X498)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X498),X499),s(bool,X500),s(fun(X498,bool),X501)))),bool)) | s(bool,'T_0') = s(bool,X502) | s('type.option.option'(X498),'const.option.NONE_0') = s('type.option.option'(X498),X499)) ) | $spl0),
  inference(superposition,[],[f4952,f644])).
fof(f47729,plain,(
  ( ! [X494,X496,X493,X495,X497] : (s(bool,X497) != s(bool,happ(s(fun(X493,bool),X496),s(X493,sK6(X494,X493)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X497)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X493),X494),s(bool,X495),s(fun(X493,bool),X496))) | s('type.option.option'(X493),'const.option.NONE_0') = s('type.option.option'(X493),X494)) ) | $spl0),
  inference(superposition,[],[f4952,f644])).
fof(f47728,plain,(
  ( ! [X492,X490,X489,X491] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X489,bool),X492),s(X489,sK6(X490,X489))))),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X489),X490),s(bool,X491),s(fun(X489,bool),X492))) | s('type.option.option'(X489),'const.option.NONE_0') = s('type.option.option'(X489),X490)) ) | $spl0),
  inference(superposition,[],[f4678,f644])).
fof(f47727,plain,(
  ( ! [X484,X486,X488,X485,X487,X483] : (s(bool,'F_0') != s(bool,happ(s(fun(X483,bool),X486),s(X483,sK6(X484,X483)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X487),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X483),X484),s(bool,X485),s(fun(X483,bool),X486))),s(fun(X487,bool),X488))) | s('type.option.option'(X483),'const.option.NONE_0') = s('type.option.option'(X483),X484)) ) | $spl0),
  inference(superposition,[],[f4072,f644])).
fof(f47725,plain,(
  ( ! [X476,X478,X474,X475,X477] : (s(bool,sK6('const.option.SOME_1'(s(bool,X478)),bool)) != s(bool,happ(s(fun(X474,bool),X477),s(X474,sK6(X475,X474)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X474),X475),s(bool,X476),s(fun(X474,bool),X477))) | s(bool,'T_0') = s(bool,X478) | s('type.option.option'(X474),'const.option.NONE_0') = s('type.option.option'(X474),X475)) ) | $spl0),
  inference(superposition,[],[f4028,f644])).
fof(f47724,plain,(
  ( ! [X472,X469,X471,X473,X470] : (s(bool,X473) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X469,bool),X472),s(X469,sK6(X470,X469))))),bool)) | s(bool,'F_0') = s(bool,X473) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X469),X470),s(bool,X471),s(fun(X469,bool),X472))) | s('type.option.option'(X469),'const.option.NONE_0') = s('type.option.option'(X469),X470)) ) | $spl0),
  inference(superposition,[],[f4028,f644])).
fof(f47723,plain,(
  ( ! [X466,X465,X467,X468] : (s(bool,'F_0') != s(bool,happ(s(fun(X465,bool),X468),s(X465,sK6(X466,X465)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X465),X466),s(bool,X467),s(fun(X465,bool),X468)))),bool)) | s('type.option.option'(X465),'const.option.NONE_0') = s('type.option.option'(X465),X466)) ) | $spl0),
  inference(superposition,[],[f3992,f644])).
fof(f47718,plain,(
  ( ! [X441,X443,X444,X440,X442] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X440,bool),X443),s(X440,sK6(X441,X440))))),bool)) | s(bool,X444) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X440),X441),s(bool,X442),s(fun(X440,bool),X443))) | s(bool,'F_0') = s(bool,X444) | s('type.option.option'(X440),'const.option.NONE_0') = s('type.option.option'(X440),X441)) ) | $spl0),
  inference(superposition,[],[f3967,f644])).
fof(f47950,plain,(
  ( ! [X432,X434,X433,X435] : (s(bool,'F_0') != s(bool,happ(s(fun(X432,bool),X435),s(X432,sK6(X433,X432)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X432),X433),s(bool,X434),s(fun(X432,bool),X435))) | s('type.option.option'(X432),'const.option.NONE_0') = s('type.option.option'(X432),X433)) ) | $spl0),
  inference(forward_demodulation,[],[f47716,f994])).
fof(f47716,plain,(
  ( ! [X432,X434,X433,X435] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,happ(s(fun(X432,bool),X435),s(X432,sK6(X433,X432)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X432),X433),s(bool,X434),s(fun(X432,bool),X435))) | s('type.option.option'(X432),'const.option.NONE_0') = s('type.option.option'(X432),X433)) ) | $spl0),
  inference(superposition,[],[f3674,f644])).
fof(f47715,plain,(
  ( ! [X428,X430,X429,X431,X427] : (s(bool,X431) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X427,bool),X430),s(X427,sK6(X428,X427))))),bool)) | s(bool,X431) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X427),X428),s(bool,X429),s(fun(X427,bool),X430))) | s(bool,'F_0') = s(bool,X431) | s('type.option.option'(X427),'const.option.NONE_0') = s('type.option.option'(X427),X428)) ) | $spl0),
  inference(superposition,[],[f3662,f644])).
fof(f47714,plain,(
  ( ! [X422,X424,X426,X423,X425] : (s(bool,sK6('const.option.SOME_1'(s(bool,X426)),bool)) != s(bool,happ(s(fun(X422,bool),X425),s(X422,sK6(X423,X422)))) | s(bool,X426) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X422),X423),s(bool,X424),s(fun(X422,bool),X425))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X422),X423),s(bool,X424),s(fun(X422,bool),X425))) | s('type.option.option'(X422),'const.option.NONE_0') = s('type.option.option'(X422),X423)) ) | $spl0),
  inference(superposition,[],[f3662,f644])).
fof(f47713,plain,(
  ( ! [X420,X418,X421,X417,X419] : (s(bool,'T_0') != s(bool,happ(s(fun(X417,bool),X420),s(X417,sK6(X418,X417)))) | s(bool,X421) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X418),s(bool,X419),s(fun(X417,bool),X420))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X421)),bool)) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X418)) ) | $spl0),
  inference(superposition,[],[f3482,f644])).
fof(f47708,plain,(
  ( ! [X385,X387,X388,X384,X386] : (s(bool,'T_0') != s(bool,happ(s(fun(X384,bool),X387),s(X384,sK6(X385,X384)))) | s(bool,X388) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X384),X385),s(bool,X386),s(fun(X384,bool),X387)))),bool)) | s(bool,'F_0') = s(bool,X388) | s('type.option.option'(X384),'const.option.NONE_0') = s('type.option.option'(X384),X385)) ) | $spl0),
  inference(superposition,[],[f2635,f644])).
fof(f47707,plain,(
  ( ! [X383,X379,X380,X382,X378,X381] : (s(bool,X382) != s(bool,happ(s(fun(X378,bool),X381),s(X378,sK6(X379,X378)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X378),X379),s(bool,X380),s(fun(X378,bool),X381))) | s(bool,X382) = s(bool,X383) | s(bool,'F_0') = s(bool,X383) | s('type.option.option'(X378),'const.option.NONE_0') = s('type.option.option'(X378),X379)) ) | $spl0),
  inference(superposition,[],[f2590,f644])).
fof(f47706,plain,(
  ( ! [X377,X372,X374,X376,X373,X375] : (s(bool,X376) != s(bool,happ(s(fun(X372,bool),X375),s(X372,sK6(X373,X372)))) | s(bool,'F_0') = s(bool,X376) | s(bool,X377) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X372),X373),s(bool,X374),s(fun(X372,bool),X375))) | s(bool,'F_0') = s(bool,X377) | s('type.option.option'(X372),'const.option.NONE_0') = s('type.option.option'(X372),X373)) ) | $spl0),
  inference(superposition,[],[f2590,f644])).
fof(f47705,plain,(
  ( ! [X366,X368,X370,X367,X369,X371] : (p(s(bool,happ(s(fun(X366,bool),X369),s(X366,sK6(X367,X366))))) | s(bool,X370) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X366),X367),s(bool,X368),s(fun(X366,bool),X369))) | s(bool,X370) = s(bool,X371) | s(bool,'F_0') = s(bool,X371) | s('type.option.option'(X366),'const.option.NONE_0') = s('type.option.option'(X366),X367)) ) | $spl0),
  inference(superposition,[],[f2586,f644])).
fof(f47704,plain,(
  ( ! [X364,X362,X365,X361,X363] : (s(bool,'T_0') != s(bool,happ(s(fun(X361,bool),X364),s(X361,sK6(X362,X361)))) | s(bool,X365) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X361),X362),s(bool,X363),s(fun(X361,bool),X364))) | s(bool,'F_0') = s(bool,X365) | s('type.option.option'(X361),'const.option.NONE_0') = s('type.option.option'(X361),X362)) ) | $spl0),
  inference(superposition,[],[f2192,f644])).
fof(f47703,plain,(
  ( ! [X356,X358,X360,X357,X359,X355] : (~p(s(bool,happ(s(fun(X355,bool),X358),s(X355,sK6(X356,X355))))) | s(bool,X359) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X355),X356),s(bool,X357),s(fun(X355,bool),X358))) | s(bool,X359) = s(bool,X360) | s(bool,'F_0') = s(bool,X360) | s('type.option.option'(X355),'const.option.NONE_0') = s('type.option.option'(X355),X356)) ) | $spl0),
  inference(superposition,[],[f2191,f644])).
fof(f47698,plain,(
  ( ! [X333,X331,X332,X334,X330] : (s(bool,X334) != s(bool,happ(s(fun(X330,bool),X333),s(X330,sK6(X331,X330)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X330),X331),s(bool,X332),s(fun(X330,bool),X333))))) | s(bool,'F_0') = s(bool,X334) | s('type.option.option'(X330),'const.option.NONE_0') = s('type.option.option'(X330),X331)) ) | $spl0),
  inference(superposition,[],[f1927,f644])).
fof(f47697,plain,(
  ( ! [X325,X327,X329,X326,X328] : (s(bool,X329) != s(bool,happ(s(fun(X325,bool),X328),s(X325,sK6(X326,X325)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X329))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X325),X326),s(bool,X327),s(fun(X325,bool),X328))) | s('type.option.option'(X325),'const.option.NONE_0') = s('type.option.option'(X325),X326)) ) | $spl0),
  inference(superposition,[],[f1927,f644])).
fof(f47696,plain,(
  ( ! [X321,X323,X324,X320,X322] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X320,bool),X323),s(X320,sK6(X321,X320)))))) | s(bool,X324) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X320),X321),s(bool,X322),s(fun(X320,bool),X323))) | s(bool,'F_0') = s(bool,X324) | s('type.option.option'(X320),'const.option.NONE_0') = s('type.option.option'(X320),X321)) ) | $spl0),
  inference(superposition,[],[f1909,f644])).
fof(f47947,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,happ(s(fun(X296,bool),X299),s(X296,sK6(X297,X296)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X296),X297),s(bool,X298),s(fun(X296,bool),X299))) | s('type.option.option'(X296),'const.option.NONE_0') = s('type.option.option'(X296),X297)) ) | $spl0),
  inference(forward_demodulation,[],[f47691,f778])).
fof(f47691,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,happ(s(fun(X296,bool),X299),s(X296,sK6(X297,X296)))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X296),X297),s(bool,X298),s(fun(X296,bool),X299))) | s('type.option.option'(X296),'const.option.NONE_0') = s('type.option.option'(X296),X297)) ) | $spl0),
  inference(superposition,[],[f857,f644])).
fof(f47690,plain,(
  ( ! [X292,X294,X293,X295,X291] : (~p(s(bool,happ(s(fun(bool,bool),X295),s(bool,happ(s(fun(X291,bool),X294),s(X291,sK6(X292,X291))))))) | p(s(bool,happ(s(fun(bool,bool),X295),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X291),X292),s(bool,X293),s(fun(X291,bool),X294)),X295,bool)) | s('type.option.option'(X291),'const.option.NONE_0') = s('type.option.option'(X291),X292)) )),
  inference(superposition,[],[f617,f644])).
fof(f47689,plain,(
  ( ! [X288,X290,X287,X289,X286] : (~p(s(bool,happ(s(fun(bool,bool),X290),s(bool,happ(s(fun(X286,bool),X289),s(X286,sK6(X287,X286))))))) | s(bool,'F_0') = s(bool,sK7('F_0',X290,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X286),X287),s(bool,X288),s(fun(X286,bool),X289))) | s('type.option.option'(X286),'const.option.NONE_0') = s('type.option.option'(X286),X287)) )),
  inference(superposition,[],[f524,f644])).
fof(f47688,plain,(
  ( ! [X282,X285,X281,X283,X284] : (s(bool,'F_0') != s(bool,happ(s(fun(X281,bool),X284),s(X281,sK6(X282,X281)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X285))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X281),X282),s(bool,X283),s(fun(X281,bool),X284))))) | s(bool,'T_0') = s(bool,X285) | s('type.option.option'(X281),'const.option.NONE_0') = s('type.option.option'(X281),X282)) )),
  inference(superposition,[],[f480,f644])).
fof(f47687,plain,(
  ( ! [X280,X277,X279,X276,X278] : (s(bool,X280) != s(bool,happ(s(fun(X276,bool),X279),s(X276,sK6(X277,X276)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X276),X277),s(bool,X278),s(fun(X276,bool),X279))))) | s(bool,'T_0') = s(bool,X280) | s('type.option.option'(X276),'const.option.NONE_0') = s('type.option.option'(X276),X277)) )),
  inference(superposition,[],[f479,f644])).
fof(f47686,plain,(
  ( ! [X271,X273,X275,X272,X274] : (s(bool,X275) != s(bool,happ(s(fun(X271,bool),X274),s(X271,sK6(X272,X271)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X275))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X271),X272),s(bool,X273),s(fun(X271,bool),X274))) | s('type.option.option'(X271),'const.option.NONE_0') = s('type.option.option'(X271),X272)) )),
  inference(superposition,[],[f479,f644])).
fof(f47685,plain,(
  ( ! [X269,X267,X268,X270,X266] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X266,bool),X269),s(X266,sK6(X267,X266)))))) | s(bool,X270) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X266),X267),s(bool,X268),s(fun(X266,bool),X269))) | s(bool,'T_0') = s(bool,X270) | s('type.option.option'(X266),'const.option.NONE_0') = s('type.option.option'(X266),X267)) )),
  inference(superposition,[],[f442,f644])).
fof(f47684,plain,(
  ( ! [X261,X263,X265,X262,X264] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X265))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X261,bool),X264),s(X261,sK6(X262,X261)))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X261),X262),s(bool,X263),s(fun(X261,bool),X264))) | s(bool,'T_0') = s(bool,X265) | s('type.option.option'(X261),'const.option.NONE_0') = s('type.option.option'(X261),X262)) )),
  inference(superposition,[],[f441,f644])).
fof(f47683,plain,(
  ( ! [X257,X259,X260,X256,X258] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X260))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X256,bool),X259),s(X256,sK6(X257,X256)))))) | s(bool,'F_0') = s(bool,X260) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X256),X257),s(bool,X258),s(fun(X256,bool),X259))) | s('type.option.option'(X256),'const.option.NONE_0') = s('type.option.option'(X256),X257)) )),
  inference(superposition,[],[f441,f644])).
fof(f47682,plain,(
  ( ! [X255,X253,X251,X254,X252,X250] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,happ(s(fun(X250,bool),X253),s(X250,sK6(X251,X250)))),s(fun(X254,bool),X255))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),X251),s(bool,X252),s(fun(X250,bool),X253))) | s('type.option.option'(X250),'const.option.NONE_0') = s('type.option.option'(X250),X251)) )),
  inference(superposition,[],[f368,f644])).
fof(f47681,plain,(
  ( ! [X249,X246,X248,X247,X245] : (p(s(bool,happ(s(fun(X245,bool),X248),s(X245,sK6(X246,X245))))) | s(bool,X249) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X245),X246),s(bool,X247),s(fun(X245,bool),X248))) | s(bool,'T_0') = s(bool,X249) | s('type.option.option'(X245),'const.option.NONE_0') = s('type.option.option'(X245),X246)) )),
  inference(superposition,[],[f313,f644])).
fof(f47680,plain,(
  ( ! [X243,X241,X244,X242,X240] : (~p(s(bool,happ(s(fun(X240,bool),X243),s(X240,sK6(X241,X240))))) | s(bool,X244) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X240),X241),s(bool,X242),s(fun(X240,bool),X243))) | s(bool,'T_0') = s(bool,X244) | s('type.option.option'(X240),'const.option.NONE_0') = s('type.option.option'(X240),X241)) )),
  inference(superposition,[],[f281,f644])).
fof(f47675,plain,(
  ( ! [X218,X216,X215,X219,X217] : (~p(s(bool,happ(s(fun(X215,bool),X218),s(X215,sK6(X216,X215))))) | p(s(bool,X219)) | s(bool,X219) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X215),X216),s(bool,X217),s(fun(X215,bool),X218))) | s('type.option.option'(X215),'const.option.NONE_0') = s('type.option.option'(X215),X216)) )),
  inference(superposition,[],[f203,f644])).
fof(f47674,plain,(
  ( ! [X212,X210,X213,X211,X214] : (~p(s(bool,happ(s(fun(X210,bool),X213),s(X210,sK6(X211,X210))))) | ~p(s(bool,X214)) | s(bool,X214) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X210),X211),s(bool,X212),s(fun(X210,bool),X213))) | s('type.option.option'(X210),'const.option.NONE_0') = s('type.option.option'(X210),X211)) )),
  inference(superposition,[],[f201,f644])).
fof(f47672,plain,(
  ( ! [X204,X202,X200,X203,X201] : (p(s(bool,happ(s(fun(X200,bool),X203),s(X200,sK6(X201,X200))))) | p(s(bool,X204)) | s(bool,X204) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X200),X201),s(bool,X202),s(fun(X200,bool),X203))) | s('type.option.option'(X200),'const.option.NONE_0') = s('type.option.option'(X200),X201)) )),
  inference(superposition,[],[f198,f644])).
fof(f47671,plain,(
  ( ! [X198,X196,X199,X197] : (p(s(bool,happ(s(fun(X196,bool),X199),s(X196,sK6(X197,X196))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X196),X197),s(bool,X198),s(fun(X196,bool),X199))) | s('type.option.option'(X196),'const.option.NONE_0') = s('type.option.option'(X196),X197)) )),
  inference(superposition,[],[f153,f644])).
fof(f47670,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,'F_0') != s(bool,happ(s(fun(X192,bool),X195),s(X192,sK6(X193,X192)))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X192),X193),s(bool,X194),s(fun(X192,bool),X195)))) | s('type.option.option'(X192),'const.option.NONE_0') = s('type.option.option'(X192),X193)) )),
  inference(superposition,[],[f152,f644])).
fof(f47669,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,happ(s(fun(X188,bool),X191),s(X188,sK6(X189,X188))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X188),X189),s(bool,X190),s(fun(X188,bool),X191))) | s('type.option.option'(X188),'const.option.NONE_0') = s('type.option.option'(X188),X189)) )),
  inference(superposition,[],[f149,f644])).
fof(f47668,plain,(
  ( ! [X187,X185,X186,X184] : (p(s(bool,happ(s(fun(X184,bool),X187),s(X184,sK6(X185,X184))))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X184),X185),s(bool,X186),s(fun(X184,bool),X187))) | s('type.option.option'(X184),'const.option.NONE_0') = s('type.option.option'(X184),X185)) )),
  inference(superposition,[],[f148,f644])).
fof(f47662,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(bool,'T_0') != s(bool,happ(s(fun(X152,bool),X157),s(X152,happ(s(fun(X153,X152),X156),s(X153,sK6(X154,X153)))))) | s(X152,'const.option.option_CASE_3'(s('type.option.option'(X153),X154),s(X152,X155),s(fun(X153,X152),X156))) = s(X152,sK7('const.option.option_CASE_3'(s('type.option.option'(X153),X154),s(X152,X155),s(fun(X153,X152),X156)),X157,X152)) | s('type.option.option'(X153),'const.option.NONE_0') = s('type.option.option'(X153),X154)) ) | $spl0),
  inference(superposition,[],[f2868,f644])).
fof(f47661,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'F_0') = s(bool,happ(s(fun(X146,bool),X151),s(X146,happ(s(fun(X147,X146),X150),s(X147,sK6(X148,X147)))))) | s(X146,'const.option.option_CASE_3'(s('type.option.option'(X147),X148),s(X146,X149),s(fun(X147,X146),X150))) = s(X146,sK7('const.option.option_CASE_3'(s('type.option.option'(X147),X148),s(X146,X149),s(fun(X147,X146),X150)),X151,X146)) | s('type.option.option'(X147),'const.option.NONE_0') = s('type.option.option'(X147),X148)) ) | $spl0),
  inference(superposition,[],[f1907,f644])).
fof(f47659,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (~p(s(bool,happ(s(fun(X135,bool),X140),s(X135,happ(s(fun(X136,X135),X139),s(X136,sK6(X137,X136))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X135,bool),X140),s(X135,sK7('const.option.option_CASE_3'(s('type.option.option'(X136),X137),s(X135,X138),s(fun(X136,X135),X139)),X140,X135)))) | s('type.option.option'(X136),'const.option.NONE_0') = s('type.option.option'(X136),X137)) )),
  inference(superposition,[],[f620,f644])).
fof(f47658,plain,(
  ( ! [X134,X132,X130,X133,X131,X129] : (s('type.option.option'(X129),X134) != s('type.option.option'(X129),'const.option.SOME_1'(s(X129,happ(s(fun(X130,X129),X133),s(X130,sK6(X131,X130)))))) | s(X129,sK6(X134,X129)) = s(X129,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(X129,X132),s(fun(X130,X129),X133))) | s('type.option.option'(X129),'const.option.NONE_0') = s('type.option.option'(X129),X134) | s('type.option.option'(X130),'const.option.NONE_0') = s('type.option.option'(X130),X131)) )),
  inference(superposition,[],[f544,f644])).
fof(f47657,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122] : (~p(s(bool,happ(s(fun(X121,bool),X126),s(X121,happ(s(fun(X122,X121),X125),s(X122,sK6(X123,X122))))))) | s(X121,'const.option.option_CASE_3'(s('type.option.option'(X122),X123),s(X121,X124),s(fun(X122,X121),X125))) = s(X121,sK7('const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(X121,'const.option.option_CASE_3'(s('type.option.option'(X122),X123),s(X121,X124),s(fun(X122,X121),X125))),s(fun(X127,X121),X128)),X126,X121)) | s('type.option.option'(X122),'const.option.NONE_0') = s('type.option.option'(X122),X123)) )),
  inference(superposition,[],[f532,f644])).
fof(f47656,plain,(
  ( ! [X118,X116,X114,X120,X119,X117,X115,X113] : (~p(s(bool,happ(s(fun(X113,bool),X118),s(X113,happ(s(fun(X114,X113),X117),s(X114,sK6(X115,X114))))))) | s(X113,'const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(X113,X116),s(fun(X114,X113),X117))) = s(X113,sK7('const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(X113,X116),s(fun(X114,X113),X117)),'const.option.option_CASE_3'(s('type.option.option'(X119),'const.option.NONE_0'),s(fun(X113,bool),X118),s(fun(X119,fun(X113,bool)),X120)),X113)) | s('type.option.option'(X114),'const.option.NONE_0') = s('type.option.option'(X114),X115)) )),
  inference(superposition,[],[f519,f644])).
fof(f47655,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106] : (s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X110))) != s('type.option.option'(X105),'const.option.SOME_1'(s(X105,happ(s(fun(X106,X105),X109),s(X106,sK6(X107,X106)))))) | s(X105,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(X105,X110),s(fun(X111,X105),X112))) = s(X105,'const.option.option_CASE_3'(s('type.option.option'(X106),X107),s(X105,X108),s(fun(X106,X105),X109))) | s('type.option.option'(X106),'const.option.NONE_0') = s('type.option.option'(X106),X107)) )),
  inference(superposition,[],[f443,f644])).
fof(f47654,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X104] : (s('type.option.option'(X97),'const.option.SOME_1'(s(X97,X102))) != s('type.option.option'(X97),'const.option.SOME_1'(s(X97,happ(s(fun(X98,X97),X101),s(X98,sK6(X99,X98)))))) | s(X97,X102) = s(X97,'const.option.option_CASE_3'(s('type.option.option'(X103),'const.option.NONE_0'),s(X97,'const.option.option_CASE_3'(s('type.option.option'(X98),X99),s(X97,X100),s(fun(X98,X97),X101))),s(fun(X103,X97),X104))) | s('type.option.option'(X98),'const.option.NONE_0') = s('type.option.option'(X98),X99)) )),
  inference(superposition,[],[f443,f644])).
fof(f47646,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,happ(s(fun(X45,bool),X50),s(X45,happ(s(fun(X46,X45),X49),s(X46,sK6(X47,X46))))))) | s(X45,'const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49))) = s(X45,sK7('const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49)),X50,X45)) | s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),X47)) )),
  inference(superposition,[],[f196,f644])).
fof(f47645,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (~p(s(bool,happ(s(fun(X38,bool),X43),s(X38,happ(s(fun(X39,X38),X42),s(X39,sK6(X40,X39))))))) | p(s(bool,happ(s(fun(X38,bool),X43),s(X38,X44)))) | s(X38,X44) != s(X38,'const.option.option_CASE_3'(s('type.option.option'(X39),X40),s(X38,X41),s(fun(X39,X38),X42))) | s('type.option.option'(X39),'const.option.NONE_0') = s('type.option.option'(X39),X40)) )),
  inference(superposition,[],[f195,f644])).
fof(f47643,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X26,X31) != s(X26,happ(s(fun(X27,X26),X30),s(X27,sK6(X28,X27)))) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,X31))) = s('type.option.option'(X26),'const.option.SOME_1'(s(X26,'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s(X26,X29),s(fun(X27,X26),X30))))) | s('type.option.option'(X27),'const.option.NONE_0') = s('type.option.option'(X27),X28)) )),
  inference(superposition,[],[f194,f644])).
fof(f47641,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.option.option'(X14),'const.option.SOME_1'(s(X14,X19))) != s('type.option.option'(X14),'const.option.SOME_1'(s(X14,happ(s(fun(X15,X14),X18),s(X15,sK6(X16,X15)))))) | s(X14,X19) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(X15),X16),s(X14,X17),s(fun(X15,X14),X18))) | s('type.option.option'(X15),'const.option.NONE_0') = s('type.option.option'(X15),X16)) )),
  inference(superposition,[],[f193,f644])).
fof(f47635,plain,(
  ( ! [X936,X934,X932,X931,X935,X933] : (s('type.option.option'(X931),'const.option.SOME_1'(s(X931,X936))) != s('type.option.option'(X931),'const.option.option_CASE_3'(s('type.option.option'(X932),X934),s('type.option.option'(X931),X935),s(fun(X932,'type.option.option'(X931)),X933))) | s(X931,X936) = s(X931,sK6(happ(s(fun(X932,'type.option.option'(X931)),X933),s(X932,sK6(X934,X932))),X931)) | s('type.option.option'(X931),'const.option.NONE_0') = s('type.option.option'(X931),happ(s(fun(X932,'type.option.option'(X931)),X933),s(X932,sK6(X934,X932)))) | s('type.option.option'(X932),'const.option.NONE_0') = s('type.option.option'(X932),X934)) )),
  inference(superposition,[],[f544,f644])).
fof(f47630,plain,(
  ( ! [X899,X903,X901,X898,X902,X900] : (s(bool,'T_0') != s(bool,happ(s(fun(X898,bool),'const.option.option_CASE_3'(s('type.option.option'(X899),X901),s(fun(X898,bool),X902),s(fun(X899,fun(X898,bool)),X900))),s(X898,X903))) | s(X898,X903) = s(X898,sK7(X903,happ(s(fun(X899,fun(X898,bool)),X900),s(X899,sK6(X901,X899))),X898)) | s('type.option.option'(X899),'const.option.NONE_0') = s('type.option.option'(X899),X901)) ) | $spl0),
  inference(superposition,[],[f2868,f644])).
fof(f47629,plain,(
  ( ! [X895,X893,X897,X894,X892,X896] : (s(bool,'F_0') = s(bool,happ(s(fun(X892,bool),'const.option.option_CASE_3'(s('type.option.option'(X893),X895),s(fun(X892,bool),X896),s(fun(X893,fun(X892,bool)),X894))),s(X892,X897))) | s(X892,X897) = s(X892,sK7(X897,happ(s(fun(X893,fun(X892,bool)),X894),s(X893,sK6(X895,X893))),X892)) | s('type.option.option'(X893),'const.option.NONE_0') = s('type.option.option'(X893),X895)) ) | $spl0),
  inference(superposition,[],[f1907,f644])).
fof(f47628,plain,(
  ( ! [X887,X890,X888,X886,X891,X889] : (~p(s(bool,happ(s(fun(X886,bool),'const.option.option_CASE_3'(s('type.option.option'(X887),X889),s(fun(X886,bool),X890),s(fun(X887,fun(X886,bool)),X888))),s(X886,X891)))) | s(bool,'T_0') = s(bool,happ(s(fun(X886,bool),happ(s(fun(X887,fun(X886,bool)),X888),s(X887,sK6(X889,X887)))),s(X886,sK7(X891,happ(s(fun(X887,fun(X886,bool)),X888),s(X887,sK6(X889,X887))),X886)))) | s('type.option.option'(X887),'const.option.NONE_0') = s('type.option.option'(X887),X889)) )),
  inference(superposition,[],[f620,f644])).
fof(f47627,plain,(
  ( ! [X883,X881,X885,X878,X882,X880,X884,X879] : (~p(s(bool,happ(s(fun(X878,bool),'const.option.option_CASE_3'(s('type.option.option'(X879),X881),s(fun(X878,bool),X882),s(fun(X879,fun(X878,bool)),X880))),s(X878,X883)))) | s(X878,X883) = s(X878,sK7('const.option.option_CASE_3'(s('type.option.option'(X884),'const.option.NONE_0'),s(X878,X883),s(fun(X884,X878),X885)),happ(s(fun(X879,fun(X878,bool)),X880),s(X879,sK6(X881,X879))),X878)) | s('type.option.option'(X879),'const.option.NONE_0') = s('type.option.option'(X879),X881)) )),
  inference(superposition,[],[f532,f644])).
fof(f47626,plain,(
  ( ! [X874,X872,X876,X870,X875,X873,X877,X871] : (~p(s(bool,happ(s(fun(X870,bool),'const.option.option_CASE_3'(s('type.option.option'(X871),X873),s(fun(X870,bool),X874),s(fun(X871,fun(X870,bool)),X872))),s(X870,X875)))) | s(X870,X875) = s(X870,sK7(X875,'const.option.option_CASE_3'(s('type.option.option'(X876),'const.option.NONE_0'),s(fun(X870,bool),happ(s(fun(X871,fun(X870,bool)),X872),s(X871,sK6(X873,X871)))),s(fun(X876,fun(X870,bool)),X877)),X870)) | s('type.option.option'(X871),'const.option.NONE_0') = s('type.option.option'(X871),X873)) )),
  inference(superposition,[],[f519,f644])).
fof(f47624,plain,(
  ( ! [X860,X859,X863,X861,X858,X862] : (p(s(bool,happ(s(fun(X858,bool),'const.option.option_CASE_3'(s('type.option.option'(X859),X861),s(fun(X858,bool),X862),s(fun(X859,fun(X858,bool)),X860))),s(X858,sK7(X863,happ(s(fun(X859,fun(X858,bool)),X860),s(X859,sK6(X861,X859))),X858))))) | ~p(s(bool,happ(s(fun(X858,bool),happ(s(fun(X859,fun(X858,bool)),X860),s(X859,sK6(X861,X859)))),s(X858,X863)))) | s('type.option.option'(X859),'const.option.NONE_0') = s('type.option.option'(X859),X861)) )),
  inference(superposition,[],[f197,f644])).
fof(f47623,plain,(
  ( ! [X854,X852,X857,X855,X853,X856] : (~p(s(bool,happ(s(fun(X852,bool),'const.option.option_CASE_3'(s('type.option.option'(X853),X855),s(fun(X852,bool),X856),s(fun(X853,fun(X852,bool)),X854))),s(X852,X857)))) | s(X852,X857) = s(X852,sK7(X857,happ(s(fun(X853,fun(X852,bool)),X854),s(X853,sK6(X855,X853))),X852)) | s('type.option.option'(X853),'const.option.NONE_0') = s('type.option.option'(X853),X855)) )),
  inference(superposition,[],[f196,f644])).
fof(f47622,plain,(
  ( ! [X850,X848,X847,X845,X851,X849,X846] : (~p(s(bool,happ(s(fun(X845,bool),'const.option.option_CASE_3'(s('type.option.option'(X846),X848),s(fun(X845,bool),X849),s(fun(X846,fun(X845,bool)),X847))),s(X845,X850)))) | p(s(bool,happ(s(fun(X845,bool),happ(s(fun(X846,fun(X845,bool)),X847),s(X846,sK6(X848,X846)))),s(X845,X851)))) | s(X845,X850) != s(X845,X851) | s('type.option.option'(X846),'const.option.NONE_0') = s('type.option.option'(X846),X848)) )),
  inference(superposition,[],[f195,f644])).
fof(f47621,plain,(
  ( ! [X843,X841,X842,X840,X844] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X840),X842),s(fun(bool,bool),X843),s(fun(X840,fun(bool,bool)),X841))),s(bool,X844)))) | s(bool,'F_0') = s(bool,sK7('F_0',happ(s(fun(X840,fun(bool,bool)),X841),s(X840,sK6(X842,X840))),bool)) | s(bool,'T_0') = s(bool,X844) | s('type.option.option'(X840),'const.option.NONE_0') = s('type.option.option'(X840),X842)) )),
  inference(superposition,[],[f524,f644])).
fof(f47620,plain,(
  ( ! [X835,X839,X837,X838,X836] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X835),X837),s(fun(bool,bool),X838),s(fun(X835,fun(bool,bool)),X836))),s(bool,X839)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X835,fun(bool,bool)),X836),s(X835,sK6(X837,X835)))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X839,happ(s(fun(X835,fun(bool,bool)),X836),s(X835,sK6(X837,X835))),bool)) | s('type.option.option'(X835),'const.option.NONE_0') = s('type.option.option'(X835),X837)) )),
  inference(superposition,[],[f617,f644])).
fof(f47604,plain,(
  ( ! [X753,X755,X749,X751,X752,X754,X750] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X749),X751),s(bool,X752),s(fun(X749,bool),X750))) | s(bool,X753) = s(bool,'const.bool.IN_2'(s(X754,X755),s(fun(X754,bool),'const.pred_set.EMPTY_0'))) | s(bool,X753) = s(bool,happ(s(fun(X749,bool),X750),s(X749,sK6(X751,X749)))) | s('type.option.option'(X749),'const.option.NONE_0') = s('type.option.option'(X749),X751)) ) | $spl0),
  inference(superposition,[],[f25483,f644])).
fof(f47602,plain,(
  ( ! [X741,X743,X744,X740,X742] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X740),X742),s(bool,X743),s(fun(X740,bool),X741)))) | s(bool,X744) = s(bool,happ(s(fun(X740,bool),X741),s(X740,sK6(X742,X740)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X744))) | s('type.option.option'(X740),'const.option.NONE_0') = s('type.option.option'(X740),X742)) ) | $spl0),
  inference(superposition,[],[f21149,f644])).
fof(f47601,plain,(
  ( ! [X736,X738,X737,X739] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X736),X738),s(bool,X739),s(fun(X736,bool),X737)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X736,bool),X737),s(X736,sK6(X738,X736)))))) | s('type.option.option'(X736),'const.option.NONE_0') = s('type.option.option'(X736),X738)) ) | $spl0),
  inference(superposition,[],[f21147,f644])).
fof(f47600,plain,(
  ( ! [X732,X734,X733,X735] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X732),X734),s(bool,X735),s(fun(X732,bool),X733)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X732,bool),X733),s(X732,sK6(X734,X732)))))) | s('type.option.option'(X732),'const.option.NONE_0') = s('type.option.option'(X732),X734)) ) | $spl0),
  inference(superposition,[],[f21146,f644])).
fof(f47598,plain,(
  ( ! [X724,X726,X725,X723] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X723),X725),s(bool,X726),s(fun(X723,bool),X724)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X723,bool),X724),s(X723,sK6(X725,X723)))))) | s('type.option.option'(X723),'const.option.NONE_0') = s('type.option.option'(X723),X725)) ) | $spl0),
  inference(superposition,[],[f19514,f644])).
fof(f47597,plain,(
  ( ! [X720,X722,X718,X721,X719] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X718),X720),s(bool,X721),s(fun(X718,bool),X719)))) | s(bool,X722) != s(bool,happ(s(fun(X718,bool),X719),s(X718,sK6(X720,X718)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s('type.option.option'(X718),'const.option.NONE_0') = s('type.option.option'(X718),X720)) ) | $spl0),
  inference(superposition,[],[f19401,f644])).
fof(f47596,plain,(
  ( ! [X716,X714,X717,X713,X715] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X713),X715),s(bool,X716),s(fun(X713,bool),X714)))) | s(bool,X717) = s(bool,happ(s(fun(X713,bool),X714),s(X713,sK6(X715,X713)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X717))) | s('type.option.option'(X713),'const.option.NONE_0') = s('type.option.option'(X713),X715)) ) | $spl0),
  inference(superposition,[],[f19399,f644])).
fof(f47591,plain,(
  ( ! [X693,X689,X691,X692,X690] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X689),X691),s(bool,X692),s(fun(X689,bool),X690))) | s(bool,X693) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X689,bool),X690),s(X689,sK6(X691,X689))))),bool)) | s(bool,'T_0') = s(bool,X693) | s('type.option.option'(X689),'const.option.NONE_0') = s('type.option.option'(X689),X691)) ) | $spl0),
  inference(superposition,[],[f15417,f644])).
fof(f47930,plain,(
  ( ! [X685,X687,X688,X684,X686] : (s(bool,'T_0') = s(bool,happ(s(fun(X684,bool),X685),s(X684,sK6(X686,X684)))) | s(bool,X688) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X684),X686),s(bool,X687),s(fun(X684,bool),X685))) | s(bool,'F_0') = s(bool,X688) | s('type.option.option'(X684),'const.option.NONE_0') = s('type.option.option'(X684),X686)) ) | $spl0),
  inference(forward_demodulation,[],[f47590,f994])).
fof(f47590,plain,(
  ( ! [X685,X687,X688,X684,X686] : (s(bool,X688) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X684),X686),s(bool,X687),s(fun(X684,bool),X685))) | s(bool,'F_0') = s(bool,X688) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(X684,bool),X685),s(X684,sK6(X686,X684)))) | s('type.option.option'(X684),'const.option.NONE_0') = s('type.option.option'(X684),X686)) ) | $spl0),
  inference(superposition,[],[f15236,f644])).
fof(f47929,plain,(
  ( ! [X681,X683,X679,X680,X682] : (s(bool,'T_0') = s(bool,X683) | s(bool,X683) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X679),X681),s(bool,X682),s(fun(X679,bool),X680))) | s(bool,'F_0') = s(bool,happ(s(fun(X679,bool),X680),s(X679,sK6(X681,X679)))) | s('type.option.option'(X679),'const.option.NONE_0') = s('type.option.option'(X679),X681)) ) | $spl0),
  inference(forward_demodulation,[],[f47589,f994])).
fof(f47589,plain,(
  ( ! [X681,X683,X679,X680,X682] : (s(bool,X683) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X679),X681),s(bool,X682),s(fun(X679,bool),X680))) | s(bool,'F_0') = s(bool,happ(s(fun(X679,bool),X680),s(X679,sK6(X681,X679)))) | s(bool,X683) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(X679),'const.option.NONE_0') = s('type.option.option'(X679),X681)) ) | $spl0),
  inference(superposition,[],[f15236,f644])).
fof(f47588,plain,(
  ( ! [X677,X675,X676,X678,X674] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X674),X676),s(bool,X677),s(fun(X674,bool),X675))) | s(bool,X678) = s(bool,happ(s(fun(X674,bool),X675),s(X674,sK6(X676,X674)))) | s(bool,'T_0') = s(bool,X678) | s('type.option.option'(X674),'const.option.NONE_0') = s('type.option.option'(X674),X676)) ) | $spl0),
  inference(superposition,[],[f15050,f644])).
fof(f47573,plain,(
  ( ! [X606,X609,X605,X607,X611,X608,X610] : (s(bool,X609) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X605),X607),s(bool,X608),s(fun(X605,bool),X606))) | s(bool,happ(s(fun(X605,bool),X606),s(X605,sK6(X607,X605)))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X610),'const.option.NONE_0'),s(bool,X609),s(fun(X610,bool),X611))) | s('type.option.option'(X605),'const.option.NONE_0') = s('type.option.option'(X605),X607)) ) | $spl0),
  inference(superposition,[],[f8919,f644])).
fof(f47572,plain,(
  ( ! [X600,X602,X598,X601,X603,X599,X604] : (s(bool,X602) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X598),X600),s(bool,X601),s(fun(X598,bool),X599))) | s(bool,X602) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X603),'const.option.NONE_0'),s(bool,happ(s(fun(X598,bool),X599),s(X598,sK6(X600,X598)))),s(fun(X603,bool),X604))) | s('type.option.option'(X598),'const.option.NONE_0') = s('type.option.option'(X598),X600)) ) | $spl0),
  inference(superposition,[],[f8919,f644])).
fof(f47571,plain,(
  ( ! [X596,X594,X597,X595] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X594),X596),s(bool,X597),s(fun(X594,bool),X595))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X594,bool),X595),s(X594,sK6(X596,X594))))),bool)) | s('type.option.option'(X594),'const.option.NONE_0') = s('type.option.option'(X594),X596)) ) | $spl0),
  inference(superposition,[],[f8593,f644])).
fof(f47565,plain,(
  ( ! [X569,X567,X568,X566] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X566),X568),s(bool,X569),s(fun(X566,bool),X567)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X566,bool),X567),s(X566,sK6(X568,X566)))))) | s('type.option.option'(X566),'const.option.NONE_0') = s('type.option.option'(X566),X568)) ) | $spl0),
  inference(superposition,[],[f8256,f644])).
fof(f47558,plain,(
  ( ! [X540,X536,X538,X541,X537,X539] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X540),'const.option.NONE_0'),s(bool,happ(s(fun(X536,bool),X537),s(X536,sK6(X538,X536)))),s(fun(X540,bool),X541))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | $spl0),
  inference(superposition,[],[f5281,f644])).
fof(f47557,plain,(
  ( ! [X532,X534,X533,X535,X531] : (s(bool,X535) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X531),X533),s(bool,X534),s(fun(X531,bool),X532))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X531,bool),X532),s(X531,sK6(X533,X531))))),bool)) | s(bool,'T_0') = s(bool,X535) | s('type.option.option'(X531),'const.option.NONE_0') = s('type.option.option'(X531),X533)) ) | $spl0),
  inference(superposition,[],[f4952,f644])).
fof(f47556,plain,(
  ( ! [X528,X530,X526,X529,X527] : (s(bool,X530) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X526),X528),s(bool,X529),s(fun(X526,bool),X527))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X530)),bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X526,bool),X527),s(X526,sK6(X528,X526)))) | s('type.option.option'(X526),'const.option.NONE_0') = s('type.option.option'(X526),X528)) ) | $spl0),
  inference(superposition,[],[f4952,f644])).
fof(f47555,plain,(
  ( ! [X524,X522,X525,X523] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X522),X524),s(bool,X525),s(fun(X522,bool),X523)))),bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X522,bool),X523),s(X522,sK6(X524,X522)))) | s('type.option.option'(X522),'const.option.NONE_0') = s('type.option.option'(X522),X524)) ) | $spl0),
  inference(superposition,[],[f4678,f644])).
fof(f47554,plain,(
  ( ! [X520,X516,X518,X521,X517,X519] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X516),X518),s(bool,X519),s(fun(X516,bool),X517))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X520),'const.option.NONE_0'),s(bool,happ(s(fun(X516,bool),X517),s(X516,sK6(X518,X516)))),s(fun(X520,bool),X521))) | s('type.option.option'(X516),'const.option.NONE_0') = s('type.option.option'(X516),X518)) ) | $spl0),
  inference(superposition,[],[f4072,f644])).
fof(f47552,plain,(
  ( ! [X509,X511,X507,X508,X510] : (s(bool,sK6('const.option.SOME_1'(s(bool,X511)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X507),X509),s(bool,X510),s(fun(X507,bool),X508))) | s(bool,'F_0') = s(bool,happ(s(fun(X507,bool),X508),s(X507,sK6(X509,X507)))) | s(bool,'T_0') = s(bool,X511) | s('type.option.option'(X507),'const.option.NONE_0') = s('type.option.option'(X507),X509)) ) | $spl0),
  inference(superposition,[],[f4028,f644])).
fof(f47551,plain,(
  ( ! [X505,X502,X504,X506,X503] : (s(bool,X506) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X502),X504),s(bool,X505),s(fun(X502,bool),X503)))),bool)) | s(bool,'F_0') = s(bool,X506) | s(bool,'T_0') = s(bool,happ(s(fun(X502,bool),X503),s(X502,sK6(X504,X502)))) | s('type.option.option'(X502),'const.option.NONE_0') = s('type.option.option'(X502),X504)) ) | $spl0),
  inference(superposition,[],[f4028,f644])).
fof(f47550,plain,(
  ( ! [X499,X500,X498,X501] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X498),X500),s(bool,X501),s(fun(X498,bool),X499))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X498,bool),X499),s(X498,sK6(X500,X498))))),bool)) | s('type.option.option'(X498),'const.option.NONE_0') = s('type.option.option'(X498),X500)) ) | $spl0),
  inference(superposition,[],[f3992,f644])).
fof(f47545,plain,(
  ( ! [X476,X474,X475,X477,X473] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X473),X475),s(bool,X476),s(fun(X473,bool),X474)))),bool)) | s(bool,X477) = s(bool,happ(s(fun(X473,bool),X474),s(X473,sK6(X475,X473)))) | s(bool,'F_0') = s(bool,X477) | s('type.option.option'(X473),'const.option.NONE_0') = s('type.option.option'(X473),X475)) ) | $spl0),
  inference(superposition,[],[f3967,f644])).
fof(f47904,plain,(
  ( ! [X466,X465,X467,X468] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X465),X467),s(bool,X468),s(fun(X465,bool),X466))) | s(bool,'F_0') = s(bool,happ(s(fun(X465,bool),X466),s(X465,sK6(X467,X465)))) | s('type.option.option'(X465),'const.option.NONE_0') = s('type.option.option'(X465),X467)) ) | $spl0),
  inference(forward_demodulation,[],[f47543,f994])).
fof(f47543,plain,(
  ( ! [X466,X465,X467,X468] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X465),X467),s(bool,X468),s(fun(X465,bool),X466))) | s(bool,'F_0') = s(bool,happ(s(fun(X465,bool),X466),s(X465,sK6(X467,X465)))) | s('type.option.option'(X465),'const.option.NONE_0') = s('type.option.option'(X465),X467)) ) | $spl0),
  inference(superposition,[],[f3674,f644])).
fof(f47542,plain,(
  ( ! [X461,X463,X460,X462,X464] : (s(bool,X464) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X460),X462),s(bool,X463),s(fun(X460,bool),X461)))),bool)) | s(bool,X464) = s(bool,happ(s(fun(X460,bool),X461),s(X460,sK6(X462,X460)))) | s(bool,'F_0') = s(bool,X464) | s('type.option.option'(X460),'const.option.NONE_0') = s('type.option.option'(X460),X462)) ) | $spl0),
  inference(superposition,[],[f3662,f644])).
fof(f47541,plain,(
  ( ! [X455,X457,X459,X456,X458] : (s(bool,sK6('const.option.SOME_1'(s(bool,X459)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X455),X457),s(bool,X458),s(fun(X455,bool),X456))) | s(bool,X459) = s(bool,happ(s(fun(X455,bool),X456),s(X455,sK6(X457,X455)))) | s(bool,'F_0') = s(bool,happ(s(fun(X455,bool),X456),s(X455,sK6(X457,X455)))) | s('type.option.option'(X455),'const.option.NONE_0') = s('type.option.option'(X455),X457)) ) | $spl0),
  inference(superposition,[],[f3662,f644])).
fof(f47540,plain,(
  ( ! [X453,X451,X452,X454,X450] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X450),X452),s(bool,X453),s(fun(X450,bool),X451))) | s(bool,X454) = s(bool,happ(s(fun(X450,bool),X451),s(X450,sK6(X452,X450)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X454)),bool)) | s('type.option.option'(X450),'const.option.NONE_0') = s('type.option.option'(X450),X452)) ) | $spl0),
  inference(superposition,[],[f3482,f644])).
fof(f47535,plain,(
  ( ! [X420,X418,X421,X417,X419] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s(bool,X421) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X417,bool),X418),s(X417,sK6(X419,X417))))),bool)) | s(bool,'F_0') = s(bool,X421) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) | $spl0),
  inference(superposition,[],[f2635,f644])).
fof(f47534,plain,(
  ( ! [X412,X414,X416,X413,X415,X411] : (s(bool,X415) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X411),X413),s(bool,X414),s(fun(X411,bool),X412))) | s(bool,'F_0') = s(bool,happ(s(fun(X411,bool),X412),s(X411,sK6(X413,X411)))) | s(bool,X415) = s(bool,X416) | s(bool,'F_0') = s(bool,X416) | s('type.option.option'(X411),'const.option.NONE_0') = s('type.option.option'(X411),X413)) ) | $spl0),
  inference(superposition,[],[f2590,f644])).
fof(f47533,plain,(
  ( ! [X408,X410,X405,X407,X409,X406] : (s(bool,X409) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X405),X407),s(bool,X408),s(fun(X405,bool),X406))) | s(bool,'F_0') = s(bool,X409) | s(bool,X410) = s(bool,happ(s(fun(X405,bool),X406),s(X405,sK6(X407,X405)))) | s(bool,'F_0') = s(bool,X410) | s('type.option.option'(X405),'const.option.NONE_0') = s('type.option.option'(X405),X407)) ) | $spl0),
  inference(superposition,[],[f2590,f644])).
fof(f47532,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X399),X401),s(bool,X402),s(fun(X399,bool),X400)))) | s(bool,X403) = s(bool,happ(s(fun(X399,bool),X400),s(X399,sK6(X401,X399)))) | s(bool,X403) = s(bool,X404) | s(bool,'F_0') = s(bool,X404) | s('type.option.option'(X399),'const.option.NONE_0') = s('type.option.option'(X399),X401)) ) | $spl0),
  inference(superposition,[],[f2586,f644])).
fof(f47531,plain,(
  ( ! [X397,X395,X396,X398,X394] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X394),X396),s(bool,X397),s(fun(X394,bool),X395))) | s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK6(X396,X394)))) | s(bool,'F_0') = s(bool,X398) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) | $spl0),
  inference(superposition,[],[f2192,f644])).
fof(f47530,plain,(
  ( ! [X389,X391,X393,X388,X390,X392] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X388),X390),s(bool,X391),s(fun(X388,bool),X389)))) | s(bool,X392) != s(bool,happ(s(fun(X388,bool),X389),s(X388,sK6(X390,X388)))) | s(bool,X392) = s(bool,X393) | s(bool,'F_0') = s(bool,X393) | s('type.option.option'(X388),'const.option.NONE_0') = s('type.option.option'(X388),X390)) ) | $spl0),
  inference(superposition,[],[f2191,f644])).
fof(f47525,plain,(
  ( ! [X364,X366,X365,X367,X363] : (s(bool,X367) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X363),X365),s(bool,X366),s(fun(X363,bool),X364))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X363,bool),X364),s(X363,sK6(X365,X363)))))) | s(bool,'F_0') = s(bool,X367) | s('type.option.option'(X363),'const.option.NONE_0') = s('type.option.option'(X363),X365)) ) | $spl0),
  inference(superposition,[],[f1927,f644])).
fof(f47524,plain,(
  ( ! [X358,X360,X362,X359,X361] : (s(bool,X362) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X358),X360),s(bool,X361),s(fun(X358,bool),X359))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X362))) | s(bool,'F_0') = s(bool,happ(s(fun(X358,bool),X359),s(X358,sK6(X360,X358)))) | s('type.option.option'(X358),'const.option.NONE_0') = s('type.option.option'(X358),X360)) ) | $spl0),
  inference(superposition,[],[f1927,f644])).
fof(f47523,plain,(
  ( ! [X356,X354,X357,X353,X355] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X353),X355),s(bool,X356),s(fun(X353,bool),X354))))) | s(bool,X357) = s(bool,happ(s(fun(X353,bool),X354),s(X353,sK6(X355,X353)))) | s(bool,'F_0') = s(bool,X357) | s('type.option.option'(X353),'const.option.NONE_0') = s('type.option.option'(X353),X355)) ) | $spl0),
  inference(superposition,[],[f1909,f644])).
fof(f47901,plain,(
  ( ! [X329,X331,X332,X330] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X329),X331),s(bool,X332),s(fun(X329,bool),X330))) | s(bool,'T_0') = s(bool,happ(s(fun(X329,bool),X330),s(X329,sK6(X331,X329)))) | s('type.option.option'(X329),'const.option.NONE_0') = s('type.option.option'(X329),X331)) ) | $spl0),
  inference(forward_demodulation,[],[f47518,f778])).
fof(f47518,plain,(
  ( ! [X329,X331,X332,X330] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X329),X331),s(bool,X332),s(fun(X329,bool),X330))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,happ(s(fun(X329,bool),X330),s(X329,sK6(X331,X329)))) | s('type.option.option'(X329),'const.option.NONE_0') = s('type.option.option'(X329),X331)) ) | $spl0),
  inference(superposition,[],[f857,f644])).
fof(f47517,plain,(
  ( ! [X325,X327,X324,X326,X328] : (~p(s(bool,happ(s(fun(bool,bool),X328),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X324),X326),s(bool,X327),s(fun(X324,bool),X325)))))) | p(s(bool,happ(s(fun(bool,bool),X328),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun(X324,bool),X325),s(X324,sK6(X326,X324))),X328,bool)) | s('type.option.option'(X324),'const.option.NONE_0') = s('type.option.option'(X324),X326)) )),
  inference(superposition,[],[f617,f644])).
fof(f47516,plain,(
  ( ! [X321,X323,X320,X322,X319] : (~p(s(bool,happ(s(fun(bool,bool),X323),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X319),X321),s(bool,X322),s(fun(X319,bool),X320)))))) | s(bool,'F_0') = s(bool,sK7('F_0',X323,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X319,bool),X320),s(X319,sK6(X321,X319)))) | s('type.option.option'(X319),'const.option.NONE_0') = s('type.option.option'(X319),X321)) )),
  inference(superposition,[],[f524,f644])).
fof(f47515,plain,(
  ( ! [X315,X316,X318,X314,X317] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X314),X316),s(bool,X317),s(fun(X314,bool),X315))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X318))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X314,bool),X315),s(X314,sK6(X316,X314)))))) | s(bool,'T_0') = s(bool,X318) | s('type.option.option'(X314),'const.option.NONE_0') = s('type.option.option'(X314),X316)) )),
  inference(superposition,[],[f480,f644])).
fof(f47514,plain,(
  ( ! [X313,X310,X312,X309,X311] : (s(bool,X313) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X309),X311),s(bool,X312),s(fun(X309,bool),X310))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X309,bool),X310),s(X309,sK6(X311,X309)))))) | s(bool,'T_0') = s(bool,X313) | s('type.option.option'(X309),'const.option.NONE_0') = s('type.option.option'(X309),X311)) )),
  inference(superposition,[],[f479,f644])).
fof(f47513,plain,(
  ( ! [X308,X304,X306,X305,X307] : (s(bool,X308) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X304),X306),s(bool,X307),s(fun(X304,bool),X305))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X308))) | s(bool,'T_0') = s(bool,happ(s(fun(X304,bool),X305),s(X304,sK6(X306,X304)))) | s('type.option.option'(X304),'const.option.NONE_0') = s('type.option.option'(X304),X306)) )),
  inference(superposition,[],[f479,f644])).
fof(f47512,plain,(
  ( ! [X300,X302,X301,X303,X299] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X299),X301),s(bool,X302),s(fun(X299,bool),X300))))) | s(bool,X303) = s(bool,happ(s(fun(X299,bool),X300),s(X299,sK6(X301,X299)))) | s(bool,'T_0') = s(bool,X303) | s('type.option.option'(X299),'const.option.NONE_0') = s('type.option.option'(X299),X301)) )),
  inference(superposition,[],[f442,f644])).
fof(f47511,plain,(
  ( ! [X294,X296,X298,X295,X297] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X298))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X294),X296),s(bool,X297),s(fun(X294,bool),X295))))) | s(bool,'F_0') = s(bool,happ(s(fun(X294,bool),X295),s(X294,sK6(X296,X294)))) | s(bool,'T_0') = s(bool,X298) | s('type.option.option'(X294),'const.option.NONE_0') = s('type.option.option'(X294),X296)) )),
  inference(superposition,[],[f441,f644])).
fof(f47510,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X293))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X289),X291),s(bool,X292),s(fun(X289,bool),X290))))) | s(bool,'F_0') = s(bool,X293) | s(bool,'T_0') = s(bool,happ(s(fun(X289,bool),X290),s(X289,sK6(X291,X289)))) | s('type.option.option'(X289),'const.option.NONE_0') = s('type.option.option'(X289),X291)) )),
  inference(superposition,[],[f441,f644])).
fof(f47509,plain,(
  ( ! [X288,X285,X287,X283,X284,X286] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X287),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X283),X285),s(bool,X286),s(fun(X283,bool),X284))),s(fun(X287,bool),X288))) | s(bool,'F_0') = s(bool,happ(s(fun(X283,bool),X284),s(X283,sK6(X285,X283)))) | s('type.option.option'(X283),'const.option.NONE_0') = s('type.option.option'(X283),X285)) )),
  inference(superposition,[],[f368,f644])).
fof(f47508,plain,(
  ( ! [X280,X282,X279,X281,X278] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X278),X280),s(bool,X281),s(fun(X278,bool),X279)))) | s(bool,X282) = s(bool,happ(s(fun(X278,bool),X279),s(X278,sK6(X280,X278)))) | s(bool,'T_0') = s(bool,X282) | s('type.option.option'(X278),'const.option.NONE_0') = s('type.option.option'(X278),X280)) )),
  inference(superposition,[],[f313,f644])).
fof(f47507,plain,(
  ( ! [X277,X273,X275,X276,X274] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X273),X275),s(bool,X276),s(fun(X273,bool),X274)))) | s(bool,X277) != s(bool,happ(s(fun(X273,bool),X274),s(X273,sK6(X275,X273)))) | s(bool,'T_0') = s(bool,X277) | s('type.option.option'(X273),'const.option.NONE_0') = s('type.option.option'(X273),X275)) )),
  inference(superposition,[],[f281,f644])).
fof(f47502,plain,(
  ( ! [X251,X249,X252,X250,X248] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X248),X250),s(bool,X251),s(fun(X248,bool),X249)))) | p(s(bool,X252)) | s(bool,X252) != s(bool,happ(s(fun(X248,bool),X249),s(X248,sK6(X250,X248)))) | s('type.option.option'(X248),'const.option.NONE_0') = s('type.option.option'(X248),X250)) )),
  inference(superposition,[],[f203,f644])).
fof(f47501,plain,(
  ( ! [X243,X246,X244,X247,X245] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X243),X245),s(bool,X246),s(fun(X243,bool),X244)))) | ~p(s(bool,X247)) | s(bool,X247) = s(bool,happ(s(fun(X243,bool),X244),s(X243,sK6(X245,X243)))) | s('type.option.option'(X243),'const.option.NONE_0') = s('type.option.option'(X243),X245)) )),
  inference(superposition,[],[f201,f644])).
fof(f47499,plain,(
  ( ! [X237,X235,X233,X236,X234] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),X235),s(bool,X236),s(fun(X233,bool),X234)))) | p(s(bool,X237)) | s(bool,X237) = s(bool,happ(s(fun(X233,bool),X234),s(X233,sK6(X235,X233)))) | s('type.option.option'(X233),'const.option.NONE_0') = s('type.option.option'(X233),X235)) )),
  inference(superposition,[],[f198,f644])).
fof(f47498,plain,(
  ( ! [X231,X229,X230,X232] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X229),X231),s(bool,X232),s(fun(X229,bool),X230)))) | s(bool,'F_0') = s(bool,happ(s(fun(X229,bool),X230),s(X229,sK6(X231,X229)))) | s('type.option.option'(X229),'const.option.NONE_0') = s('type.option.option'(X229),X231)) )),
  inference(superposition,[],[f153,f644])).
fof(f47497,plain,(
  ( ! [X227,X225,X228,X226] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X225),X227),s(bool,X228),s(fun(X225,bool),X226))) | ~p(s(bool,happ(s(fun(X225,bool),X226),s(X225,sK6(X227,X225))))) | s('type.option.option'(X225),'const.option.NONE_0') = s('type.option.option'(X225),X227)) )),
  inference(superposition,[],[f152,f644])).
fof(f47496,plain,(
  ( ! [X222,X223,X221,X224] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X221),X223),s(bool,X224),s(fun(X221,bool),X222)))) | s(bool,'T_0') = s(bool,happ(s(fun(X221,bool),X222),s(X221,sK6(X223,X221)))) | s('type.option.option'(X221),'const.option.NONE_0') = s('type.option.option'(X221),X223)) )),
  inference(superposition,[],[f149,f644])).
fof(f47495,plain,(
  ( ! [X218,X220,X219,X217] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),X219),s(bool,X220),s(fun(X217,bool),X218)))) | s(bool,'T_0') != s(bool,happ(s(fun(X217,bool),X218),s(X217,sK6(X219,X217)))) | s('type.option.option'(X217),'const.option.NONE_0') = s('type.option.option'(X217),X219)) )),
  inference(superposition,[],[f148,f644])).
fof(f47493,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),X205),s(bool,X206),s(fun(X203,bool),X204))) | s(X203,sK6(X205,X203)) = s(X203,sK7(sK6(X205,X203),X204,X203)) | s('type.option.option'(X203),'const.option.NONE_0') = s('type.option.option'(X203),X205)) ) | $spl0),
  inference(superposition,[],[f2868,f644])).
fof(f47491,plain,(
  ( ! [X198,X196,X197,X195] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X195),X197),s(bool,X198),s(fun(X195,bool),X196)))) | s(bool,'T_0') = s(bool,happ(s(fun(X195,bool),X196),s(X195,sK7(sK6(X197,X195),X196,X195)))) | s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) )),
  inference(superposition,[],[f620,f644])).
fof(f47490,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X189),X191),s(bool,X192),s(fun(X189,bool),X190)))) | s(X189,sK6(X191,X189)) = s(X189,sK7('const.option.option_CASE_3'(s('type.option.option'(X193),'const.option.NONE_0'),s(X189,sK6(X191,X189)),s(fun(X193,X189),X194)),X190,X189)) | s('type.option.option'(X189),'const.option.NONE_0') = s('type.option.option'(X189),X191)) )),
  inference(superposition,[],[f532,f644])).
fof(f47489,plain,(
  ( ! [X187,X185,X188,X186,X184,X183] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),X185),s(bool,X186),s(fun(X183,bool),X184)))) | s(X183,sK6(X185,X183)) = s(X183,sK7(sK6(X185,X183),'const.option.option_CASE_3'(s('type.option.option'(X187),'const.option.NONE_0'),s(fun(X183,bool),X184),s(fun(X187,fun(X183,bool)),X188)),X183)) | s('type.option.option'(X183),'const.option.NONE_0') = s('type.option.option'(X183),X185)) )),
  inference(superposition,[],[f519,f644])).
fof(f47488,plain,(
  ( ! [X182,X180,X181,X179] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X179),X181),s(bool,X182),s(fun(X179,bool),X180)))) | s(X179,sK6(X181,X179)) = s(X179,sK7(sK6(X181,X179),X180,X179)) | s('type.option.option'(X179),'const.option.NONE_0') = s('type.option.option'(X179),X181)) )),
  inference(superposition,[],[f196,f644])).
fof(f47487,plain,(
  ( ! [X177,X175,X178,X176,X174] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X174),X176),s(bool,X177),s(fun(X174,bool),X175)))) | p(s(bool,happ(s(fun(X174,bool),X175),s(X174,X178)))) | s(X174,X178) != s(X174,sK6(X176,X174)) | s('type.option.option'(X174),'const.option.NONE_0') = s('type.option.option'(X174),X176)) )),
  inference(superposition,[],[f195,f644])).
fof(f47483,plain,(
  ( ! [X154,X152,X151,X149,X153,X150] : (s(bool,'T_0') != s(bool,happ(s(fun(X149,bool),X154),s(X149,'const.option.option_CASE_3'(s('type.option.option'(X150),X152),s(X149,X153),s(fun(X150,X149),X151))))) | s(X149,happ(s(fun(X150,X149),X151),s(X150,sK6(X152,X150)))) = s(X149,sK7(happ(s(fun(X150,X149),X151),s(X150,sK6(X152,X150))),X154,X149)) | s('type.option.option'(X150),'const.option.NONE_0') = s('type.option.option'(X150),X152)) ) | $spl0),
  inference(superposition,[],[f2868,f644])).
fof(f47482,plain,(
  ( ! [X146,X144,X147,X145,X143,X148] : (s(bool,'F_0') = s(bool,happ(s(fun(X143,bool),X148),s(X143,'const.option.option_CASE_3'(s('type.option.option'(X144),X146),s(X143,X147),s(fun(X144,X143),X145))))) | s(X143,happ(s(fun(X144,X143),X145),s(X144,sK6(X146,X144)))) = s(X143,sK7(happ(s(fun(X144,X143),X145),s(X144,sK6(X146,X144))),X148,X143)) | s('type.option.option'(X144),'const.option.NONE_0') = s('type.option.option'(X144),X146)) ) | $spl0),
  inference(superposition,[],[f1907,f644])).
fof(f47480,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (~p(s(bool,happ(s(fun(X132,bool),X137),s(X132,'const.option.option_CASE_3'(s('type.option.option'(X133),X135),s(X132,X136),s(fun(X133,X132),X134)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X137),s(X132,sK7(happ(s(fun(X133,X132),X134),s(X133,sK6(X135,X133))),X137,X132)))) | s('type.option.option'(X133),'const.option.NONE_0') = s('type.option.option'(X133),X135)) )),
  inference(superposition,[],[f620,f644])).
fof(f47479,plain,(
  ( ! [X127,X130,X128,X126,X131,X129] : (s('type.option.option'(X126),X131) != s('type.option.option'(X126),'const.option.SOME_1'(s(X126,'const.option.option_CASE_3'(s('type.option.option'(X127),X129),s(X126,X130),s(fun(X127,X126),X128))))) | s(X126,sK6(X131,X126)) = s(X126,happ(s(fun(X127,X126),X128),s(X127,sK6(X129,X127)))) | s('type.option.option'(X126),'const.option.NONE_0') = s('type.option.option'(X126),X131) | s('type.option.option'(X127),'const.option.NONE_0') = s('type.option.option'(X127),X129)) )),
  inference(superposition,[],[f544,f644])).
fof(f47478,plain,(
  ( ! [X125,X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),X123),s(X118,'const.option.option_CASE_3'(s('type.option.option'(X119),X121),s(X118,X122),s(fun(X119,X118),X120)))))) | s(X118,happ(s(fun(X119,X118),X120),s(X119,sK6(X121,X119)))) = s(X118,sK7('const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(X118,happ(s(fun(X119,X118),X120),s(X119,sK6(X121,X119)))),s(fun(X124,X118),X125)),X123,X118)) | s('type.option.option'(X119),'const.option.NONE_0') = s('type.option.option'(X119),X121)) )),
  inference(superposition,[],[f532,f644])).
fof(f47477,plain,(
  ( ! [X111,X116,X114,X112,X110,X117,X115,X113] : (~p(s(bool,happ(s(fun(X110,bool),X115),s(X110,'const.option.option_CASE_3'(s('type.option.option'(X111),X113),s(X110,X114),s(fun(X111,X110),X112)))))) | s(X110,happ(s(fun(X111,X110),X112),s(X111,sK6(X113,X111)))) = s(X110,sK7(happ(s(fun(X111,X110),X112),s(X111,sK6(X113,X111))),'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X110,bool),X115),s(fun(X116,fun(X110,bool)),X117)),X110)) | s('type.option.option'(X111),'const.option.NONE_0') = s('type.option.option'(X111),X113)) )),
  inference(superposition,[],[f519,f644])).
fof(f47476,plain,(
  ( ! [X103,X109,X107,X105,X102,X108,X106,X104] : (s('type.option.option'(X102),'const.option.SOME_1'(s(X102,X107))) != s('type.option.option'(X102),'const.option.SOME_1'(s(X102,'const.option.option_CASE_3'(s('type.option.option'(X103),X105),s(X102,X106),s(fun(X103,X102),X104))))) | s(X102,happ(s(fun(X103,X102),X104),s(X103,sK6(X105,X103)))) = s(X102,'const.option.option_CASE_3'(s('type.option.option'(X108),'const.option.NONE_0'),s(X102,X107),s(fun(X108,X102),X109))) | s('type.option.option'(X103),'const.option.NONE_0') = s('type.option.option'(X103),X105)) )),
  inference(superposition,[],[f443,f644])).
fof(f47475,plain,(
  ( ! [X94,X101,X99,X97,X95,X100,X98,X96] : (s('type.option.option'(X94),'const.option.SOME_1'(s(X94,X99))) != s('type.option.option'(X94),'const.option.SOME_1'(s(X94,'const.option.option_CASE_3'(s('type.option.option'(X95),X97),s(X94,X98),s(fun(X95,X94),X96))))) | s(X94,X99) = s(X94,'const.option.option_CASE_3'(s('type.option.option'(X100),'const.option.NONE_0'),s(X94,happ(s(fun(X95,X94),X96),s(X95,sK6(X97,X95)))),s(fun(X100,X94),X101))) | s('type.option.option'(X95),'const.option.NONE_0') = s('type.option.option'(X95),X97)) )),
  inference(superposition,[],[f443,f644])).
fof(f47467,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,'const.option.option_CASE_3'(s('type.option.option'(X43),X45),s(X42,X46),s(fun(X43,X42),X44)))))) | s(X42,happ(s(fun(X43,X42),X44),s(X43,sK6(X45,X43)))) = s(X42,sK7(happ(s(fun(X43,X42),X44),s(X43,sK6(X45,X43))),X47,X42)) | s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X45)) )),
  inference(superposition,[],[f196,f644])).
fof(f47466,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X40] : (~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,'const.option.option_CASE_3'(s('type.option.option'(X36),X38),s(X35,X39),s(fun(X36,X35),X37)))))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41)))) | s(X35,X41) != s(X35,happ(s(fun(X36,X35),X37),s(X36,sK6(X38,X36)))) | s('type.option.option'(X36),'const.option.NONE_0') = s('type.option.option'(X36),X38)) )),
  inference(superposition,[],[f195,f644])).
fof(f47464,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(X23,X28) != s(X23,'const.option.option_CASE_3'(s('type.option.option'(X24),X26),s(X23,X27),s(fun(X24,X23),X25))) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X28))) = s('type.option.option'(X23),'const.option.SOME_1'(s(X23,happ(s(fun(X24,X23),X25),s(X24,sK6(X26,X24)))))) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X26)) )),
  inference(superposition,[],[f194,f644])).
fof(f47462,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.option.option'(X11),'const.option.SOME_1'(s(X11,X16))) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X14),s(X11,X15),s(fun(X12,X11),X13))))) | s(X11,X16) = s(X11,happ(s(fun(X12,X11),X13),s(X12,sK6(X14,X12)))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X14)) )),
  inference(superposition,[],[f193,f644])).
fof(f47459,plain,(
  ( ! [X204,X202,X203,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X201,'type.option.option'(bool)),X204),s(X201,sK6(X202,X201)))) | s('type.option.option'(X201),'const.option.NONE_0') = s('type.option.option'(X201),X202) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X201),X202),s('type.option.option'(bool),X203),s(fun(X201,'type.option.option'(bool)),X204)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X201),X202),s('type.option.option'(bool),X203),s(fun(X201,'type.option.option'(bool)),X204)))) )),
  inference(superposition,[],[f644,f543])).
fof(f47885,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,'T_0') = s(bool,happ(s(fun(X127,bool),X130),s(X127,sK6(X128,X127)))) | s('type.option.option'(X127),'const.option.NONE_0') = s('type.option.option'(X127),X128) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),X128),s(bool,X129),s(fun(X127,bool),X130)))))) ) | $spl0),
  inference(forward_demodulation,[],[f47443,f994])).
fof(f47443,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(X127,bool),X130),s(X127,sK6(X128,X127)))) | s('type.option.option'(X127),'const.option.NONE_0') = s('type.option.option'(X127),X128) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),X128),s(bool,X129),s(fun(X127,bool),X130)))))) ) | $spl0),
  inference(superposition,[],[f644,f8126])).
fof(f47884,plain,(
  ( ! [X125,X123,X126,X124] : (s(bool,'T_0') = s(bool,happ(s(fun(X123,bool),X126),s(X123,sK6(X124,X123)))) | s('type.option.option'(X123),'const.option.NONE_0') = s('type.option.option'(X123),X124) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),X124),s(bool,X125),s(fun(X123,bool),X126)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f47442,f994])).
fof(f47442,plain,(
  ( ! [X125,X123,X126,X124] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(X123,bool),X126),s(X123,sK6(X124,X123)))) | s('type.option.option'(X123),'const.option.NONE_0') = s('type.option.option'(X123),X124) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),X124),s(bool,X125),s(fun(X123,bool),X126)))),bool))) ) | $spl0),
  inference(superposition,[],[f644,f7614])).
fof(f47439,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s(bool,X113) = s(bool,happ(s(fun(X109,bool),X112),s(X109,sK6(X110,X109)))) | s('type.option.option'(X109),'const.option.NONE_0') = s('type.option.option'(X109),X110) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X109),X110),s(bool,X111),s(fun(X109,bool),X112))))) | s(bool,'F_0') = s(bool,X113)) ) | $spl0),
  inference(superposition,[],[f644,f3984])).
fof(f47432,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X70) = s(bool,happ(s(fun(X66,bool),X69),s(X66,sK6(X67,X66)))) | s('type.option.option'(X66),'const.option.NONE_0') = s('type.option.option'(X66),X67) | s(bool,'F_0') = s(bool,X70) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),X67),s(bool,X68),s(fun(X66,bool),X69)))),bool))) ) | $spl0),
  inference(superposition,[],[f644,f1987])).
fof(f47879,plain,(
  ( ! [X80,X78,X81,X79,X82] : (s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79) | s(X80,'const.option.option_CASE_3'(s('type.option.option'(X78),X79),s(X80,X82),s(fun(X78,X80),X81))) = s(X80,happ(s(fun(X78,X80),X81),s(X78,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X78),X79)),'type.option.option'(X78)),X78))))) )),
  inference(forward_demodulation,[],[f47321,f994])).
fof(f47321,plain,(
  ( ! [X80,X78,X81,X79,X82] : (s(X80,'const.option.option_CASE_3'(s('type.option.option'(X78),X79),s(X80,X82),s(fun(X78,X80),X81))) = s(X80,happ(s(fun(X78,X80),X81),s(X78,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X78),X79)),'type.option.option'(X78)),X78)))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),sK6('const.option.SOME_1'(s('type.option.option'(X78),X79)),'type.option.option'(X78)))) )),
  inference(superposition,[],[f644,f994])).
fof(f47320,plain,(
  ( ! [X70,X76,X74,X72,X71,X77,X75,X73] : (s(X75,happ(s(fun(X70,X75),X76),s(X70,sK6(happ(s(fun(X71,'type.option.option'(X70)),X72),s(X71,sK6(X73,X71))),X70)))) = s(X75,'const.option.option_CASE_3'(s('type.option.option'(X70),'const.option.option_CASE_3'(s('type.option.option'(X71),X73),s('type.option.option'(X70),X74),s(fun(X71,'type.option.option'(X70)),X72))),s(X75,X77),s(fun(X70,X75),X76))) | s('type.option.option'(X70),'const.option.NONE_0') = s('type.option.option'(X70),happ(s(fun(X71,'type.option.option'(X70)),X72),s(X71,sK6(X73,X71)))) | s('type.option.option'(X71),'const.option.NONE_0') = s('type.option.option'(X71),X73)) )),
  inference(superposition,[],[f644,f644])).
fof(f47878,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.option.option'(X62),'const.option.NONE_0') = s('type.option.option'(X62),'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s('type.option.option'(X62),X65),s(fun(X63,'type.option.option'(X62)),X66))) | s(X67,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s('type.option.option'(X62),X65),s(fun(X63,'type.option.option'(X62)),X66))),s(X67,X69),s(fun(X62,X67),X68))) = s(X67,happ(s(fun(X62,X67),X68),s(X62,sK6(happ(s(fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62)),happ(s(fun('type.option.option'(X62),fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62))),happ(s(fun('type.option.option'(X63),fun('type.option.option'(X62),fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62)))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s('type.option.option'(X62),X65))),s(fun(X63,'type.option.option'(X62)),X66)),X62))))) )),
  inference(forward_demodulation,[],[f47319,f211])).
fof(f47319,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s(X67,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s('type.option.option'(X62),X65),s(fun(X63,'type.option.option'(X62)),X66))),s(X67,X69),s(fun(X62,X67),X68))) = s(X67,happ(s(fun(X62,X67),X68),s(X62,sK6(happ(s(fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62)),happ(s(fun('type.option.option'(X62),fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62))),happ(s(fun('type.option.option'(X63),fun('type.option.option'(X62),fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62)))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s('type.option.option'(X62),X65))),s(fun(X63,'type.option.option'(X62)),X66)),X62)))) | s('type.option.option'(X62),'const.option.NONE_0') = s('type.option.option'(X62),happ(s(fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62)),happ(s(fun('type.option.option'(X62),fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62))),happ(s(fun('type.option.option'(X63),fun('type.option.option'(X62),fun(fun(X63,'type.option.option'(X62)),'type.option.option'(X62)))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s('type.option.option'(X62),X65))),s(fun(X63,'type.option.option'(X62)),X66)))) )),
  inference(superposition,[],[f644,f211])).
fof(f47318,plain,(
  ( ! [X61,X59,X57,X54,X60,X58,X56,X55] : (s(X59,'const.option.option_CASE_3'(s('type.option.option'(X54),happ(s(fun(X55,'type.option.option'(X54)),X58),s(X55,sK6(X56,X55)))),s(X59,X61),s(fun(X54,X59),X60))) = s(X59,happ(s(fun(X54,X59),X60),s(X54,sK6('const.option.option_CASE_3'(s('type.option.option'(X55),X56),s('type.option.option'(X54),X57),s(fun(X55,'type.option.option'(X54)),X58)),X54)))) | s('type.option.option'(X54),'const.option.NONE_0') = s('type.option.option'(X54),'const.option.option_CASE_3'(s('type.option.option'(X55),X56),s('type.option.option'(X54),X57),s(fun(X55,'type.option.option'(X54)),X58))) | s('type.option.option'(X55),'const.option.NONE_0') = s('type.option.option'(X55),X56)) )),
  inference(superposition,[],[f644,f644])).
fof(f47877,plain,(
  ( ! [X47,X52,X50,X48,X46,X53,X51,X49] : (s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),happ(s(fun(X47,'type.option.option'(X46)),X50),s(X47,X48))) | s(X51,'const.option.option_CASE_3'(s('type.option.option'(X46),happ(s(fun(X47,'type.option.option'(X46)),X50),s(X47,X48))),s(X51,X53),s(fun(X46,X51),X52))) = s(X51,happ(s(fun(X46,X51),X52),s(X46,sK6('const.option.option_CASE_3'(s('type.option.option'(X47),'const.option.SOME_1'(s(X47,X48))),s('type.option.option'(X46),X49),s(fun(X47,'type.option.option'(X46)),X50)),X46))))) )),
  inference(forward_demodulation,[],[f47317,f210])).
fof(f47317,plain,(
  ( ! [X47,X52,X50,X48,X46,X53,X51,X49] : (s(X51,'const.option.option_CASE_3'(s('type.option.option'(X46),happ(s(fun(X47,'type.option.option'(X46)),X50),s(X47,X48))),s(X51,X53),s(fun(X46,X51),X52))) = s(X51,happ(s(fun(X46,X51),X52),s(X46,sK6('const.option.option_CASE_3'(s('type.option.option'(X47),'const.option.SOME_1'(s(X47,X48))),s('type.option.option'(X46),X49),s(fun(X47,'type.option.option'(X46)),X50)),X46)))) | s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),'const.option.option_CASE_3'(s('type.option.option'(X47),'const.option.SOME_1'(s(X47,X48))),s('type.option.option'(X46),X49),s(fun(X47,'type.option.option'(X46)),X50)))) )),
  inference(superposition,[],[f644,f210])).
fof(f47876,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s('type.option.option'(X39),'const.option.NONE_0') = s('type.option.option'(X39),X41) | s(X43,'const.option.option_CASE_3'(s('type.option.option'(X39),X41),s(X43,X45),s(fun(X39,X43),X44))) = s(X43,happ(s(fun(X39,X43),X44),s(X39,sK6('const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s('type.option.option'(X39),X41),s(fun(X40,'type.option.option'(X39)),X42)),X39))))) )),
  inference(forward_demodulation,[],[f47316,f208])).
fof(f47316,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s(X43,'const.option.option_CASE_3'(s('type.option.option'(X39),X41),s(X43,X45),s(fun(X39,X43),X44))) = s(X43,happ(s(fun(X39,X43),X44),s(X39,sK6('const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s('type.option.option'(X39),X41),s(fun(X40,'type.option.option'(X39)),X42)),X39)))) | s('type.option.option'(X39),'const.option.NONE_0') = s('type.option.option'(X39),'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s('type.option.option'(X39),X41),s(fun(X40,'type.option.option'(X39)),X42)))) )),
  inference(superposition,[],[f644,f208])).
fof(f47863,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(X10,happ(s(fun(bool,X10),X11),s(bool,'F_0'))) = s(X10,happ(s(fun(bool,X10),X11),s(bool,X9)))) ) | $spl0),
  inference(forward_demodulation,[],[f47862,f994])).
fof(f47862,plain,(
  ( ! [X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,'F_0'))) = s(X10,happ(s(fun(bool,X10),X11),s(bool,X9))) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f47861,f994])).
fof(f47861,plain,(
  ( ! [X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,'F_0'))) = s(X10,happ(s(fun(bool,X10),X11),s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)))) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f47860,f210])).
fof(f47860,plain,(
  ( ! [X12,X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)))) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X10,X12),s(fun(bool,X10),X11))) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f47309,f189])).
fof(f47309,plain,(
  ( ! [X12,X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)))) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X10,X12),s(fun(bool,X10),X11))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f644,f8126])).
fof(f47855,plain,(
  ( ! [X4,X2,X0,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,'F_0'))) = s(X1,happ(s(fun(bool,X1),X2),s(bool,X0))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(forward_demodulation,[],[f47854,f994])).
fof(f47854,plain,(
  ( ! [X4,X2,X0,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,'F_0'))) = s(X1,happ(s(fun(bool,X1),X2),s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(forward_demodulation,[],[f47853,f210])).
fof(f47853,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X1,X3),s(fun(bool,X1),X2))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(subsumption_resolution,[],[f47307,f189])).
fof(f47307,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X1,X3),s(fun(bool,X1),X2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f644,f3984])).
fof(f47306,plain,(
  ( ! [X202,X200,X203,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X200),X202),s('type.option.option'(bool),X203),s(fun(X200,'type.option.option'(bool)),X201))) | s('type.option.option'(X200),'const.option.NONE_0') = s('type.option.option'(X200),X202) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(X200,'type.option.option'(bool)),X201),s(X200,sK6(X202,X200))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X200,'type.option.option'(bool)),X201),s(X200,sK6(X202,X200))))) )),
  inference(superposition,[],[f644,f543])).
fof(f47837,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X126),X128),s(bool,X129),s(fun(X126,bool),X127))) | s('type.option.option'(X126),'const.option.NONE_0') = s('type.option.option'(X126),X128) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X126,bool),X127),s(X126,sK6(X128,X126))))))) ) | $spl0),
  inference(forward_demodulation,[],[f47290,f994])).
fof(f47290,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X126),X128),s(bool,X129),s(fun(X126,bool),X127))) | s('type.option.option'(X126),'const.option.NONE_0') = s('type.option.option'(X126),X128) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X126,bool),X127),s(X126,sK6(X128,X126))))))) ) | $spl0),
  inference(superposition,[],[f644,f8126])).
fof(f47836,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),X124),s(bool,X125),s(fun(X122,bool),X123))) | s('type.option.option'(X122),'const.option.NONE_0') = s('type.option.option'(X122),X124) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X122,bool),X123),s(X122,sK6(X124,X122))))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f47289,f994])).
fof(f47289,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),X124),s(bool,X125),s(fun(X122,bool),X123))) | s('type.option.option'(X122),'const.option.NONE_0') = s('type.option.option'(X122),X124) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X122,bool),X123),s(X122,sK6(X124,X122))))),bool))) ) | $spl0),
  inference(superposition,[],[f644,f7614])).
fof(f47287,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,X116) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X113),X115),s(bool,X117),s(fun(X113,bool),X114))) | s('type.option.option'(X113),'const.option.NONE_0') = s('type.option.option'(X113),X115) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X116))) | s(bool,'F_0') = s(bool,happ(s(fun(X113,bool),X114),s(X113,sK6(X115,X113))))) ) | $spl0),
  inference(superposition,[],[f644,f3984])).
fof(f47286,plain,(
  ( ! [X111,X109,X112,X110,X108] : (s(bool,X111) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X108),X110),s(bool,X112),s(fun(X108,bool),X109))) | s('type.option.option'(X108),'const.option.NONE_0') = s('type.option.option'(X108),X110) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X108,bool),X109),s(X108,sK6(X110,X108)))))) | s(bool,'F_0') = s(bool,X111)) ) | $spl0),
  inference(superposition,[],[f644,f3984])).
fof(f47285,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X103),X105),s(bool,X106),s(fun(X103,bool),X104))) | s('type.option.option'(X103),'const.option.NONE_0') = s('type.option.option'(X103),X105) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) | s(bool,X107) = s(bool,happ(s(fun(X103,bool),X104),s(X103,sK6(X105,X103))))) ) | $spl0),
  inference(superposition,[],[f644,f3984])).
fof(f47284,plain,(
  ( ! [X101,X99,X97,X102,X100,X98,X96] : (s(bool,X99) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X98),s(bool,X100),s(fun(X96,bool),X97))) | s('type.option.option'(X96),'const.option.NONE_0') = s('type.option.option'(X96),X98) | s(bool,X99) = s(bool,'const.bool.IN_2'(s(X101,X102),s(fun(X101,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X96,bool),X97),s(X96,sK6(X98,X96))))) ) | $spl0),
  inference(superposition,[],[f644,f3053])).
fof(f47282,plain,(
  ( ! [X88,X87,X85,X83,X86,X84,X82] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X82),X84),s(bool,X85),s(fun(X82,bool),X83))) | s('type.option.option'(X82),'const.option.NONE_0') = s('type.option.option'(X82),X84) | s(bool,X86) = s(bool,'const.bool.IN_2'(s(X87,X88),s(fun(X87,bool),'const.pred_set.EMPTY_0'))) | s(bool,X86) = s(bool,happ(s(fun(X82,bool),X83),s(X82,sK6(X84,X82))))) ) | $spl0),
  inference(superposition,[],[f644,f3053])).
fof(f47280,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s(bool,X73) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X70),X72),s(bool,X74),s(fun(X70,bool),X71))) | s('type.option.option'(X70),'const.option.NONE_0') = s('type.option.option'(X70),X72) | s(bool,'F_0') = s(bool,happ(s(fun(X70,bool),X71),s(X70,sK6(X72,X70)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) ) | $spl0),
  inference(superposition,[],[f644,f1987])).
fof(f47279,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X67),s(bool,X69),s(fun(X65,bool),X66))) | s('type.option.option'(X65),'const.option.NONE_0') = s('type.option.option'(X65),X67) | s(bool,'F_0') = s(bool,X68) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,sK6(X67,X65))))),bool))) ) | $spl0),
  inference(superposition,[],[f644,f1987])).
fof(f47278,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),X62),s(bool,X63),s(fun(X60,bool),X61))) | s('type.option.option'(X60),'const.option.NONE_0') = s('type.option.option'(X60),X62) | s(bool,X64) = s(bool,happ(s(fun(X60,bool),X61),s(X60,sK6(X62,X60)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool))) ) | $spl0),
  inference(superposition,[],[f644,f1987])).
fof(f47275,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,X48) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X45),X47),s(bool,X49),s(fun(X45,bool),X46))) | s('type.option.option'(X45),'const.option.NONE_0') = s('type.option.option'(X45),X47) | s(bool,'F_0') = s(bool,X48) | s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),X46),s(X45,sK6(X47,X45))))) ) | $spl0),
  inference(superposition,[],[f644,f1778])).
fof(f47274,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),X42),s(bool,X43),s(fun(X40,bool),X41))) | s('type.option.option'(X40),'const.option.NONE_0') = s('type.option.option'(X40),X42) | s(bool,X44) = s(bool,happ(s(fun(X40,bool),X41),s(X40,sK6(X42,X40)))) | s(bool,'F_0') = s(bool,X44)) ) | $spl0),
  inference(superposition,[],[f644,f1778])).
fof(f47271,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X28) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X25),X27),s(bool,X29),s(fun(X25,bool),X26))) | s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),X27) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(X25,bool),X26),s(X25,sK6(X27,X25))))) )),
  inference(superposition,[],[f644,f278])).
fof(f47270,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X20),X22),s(bool,X23),s(fun(X20,bool),X21))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),X22) | s(bool,X24) = s(bool,happ(s(fun(X20,bool),X21),s(X20,sK6(X22,X20)))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f644,f278])).
fof(f47269,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X16),X18),s(bool,X19),s(fun(X16,bool),X17))) | s('type.option.option'(X16),'const.option.NONE_0') = s('type.option.option'(X16),X18) | s(bool,'T_0') = s(bool,happ(s(fun(X16,bool),X17),s(X16,sK6(X18,X16))))) )),
  inference(superposition,[],[f644,f146])).
fof(f47268,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X14),s(bool,X15),s(fun(X12,bool),X13))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X14) | s(X12,sK6(X14,X12)) = s(X12,sK7(sK6(X14,X12),X13,X12))) ) | $spl0),
  inference(superposition,[],[f644,f1907])).
fof(f47831,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X10),s(fun(X7,X6),X8))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X11),s(fun(X7,X6),X8))) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9)) )),
  inference(duplicate_literal_removal,[],[f47267])).
fof(f47267,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X10),s(fun(X7,X6),X8))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X11),s(fun(X7,X6),X8))) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9)) )),
  inference(superposition,[],[f644,f644])).
fof(f47266,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),X2),s(X0,X3),s(fun(X1,X0),sK6(X4,fun(X1,X0))))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(fun(X1,X0)),X4),s(X0,X5),s(fun(fun(X1,X0),X0),happ(s(fun(X0,fun(fun(X1,X0),X0)),happ(s(fun('type.option.option'(X1),fun(X0,fun(fun(X1,X0),X0))),'const.option.option_CASE_0'),s('type.option.option'(X1),X2))),s(X0,X3))))) | s('type.option.option'(fun(X1,X0)),'const.option.NONE_0') = s('type.option.option'(fun(X1,X0)),X4)) )),
  inference(superposition,[],[f644,f211])).
fof(f8802,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,sK6('const.option.SOME_1'(s(bool,X92)),bool)) != s(bool,happ(s(fun(X88,bool),X91),s(X88,X89))) | s(bool,X92) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.SOME_1'(s(X88,X89))),s(bool,X90),s(fun(X88,bool),X91))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.SOME_1'(s(X88,X89))),s(bool,X90),s(fun(X88,bool),X91)))) ) | $spl0),
  inference(superposition,[],[f3662,f210])).
fof(f8803,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),X94),s(bool,X95),s(fun(X93,bool),X96))) | s(bool,X97) = s(bool,happ(s(fun(fun(X93,bool),bool),happ(s(fun(bool,fun(fun(X93,bool),bool)),happ(s(fun('type.option.option'(X93),fun(bool,fun(fun(X93,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X93),X94))),s(bool,X95))),s(fun(X93,bool),X96))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X93,bool),bool),happ(s(fun(bool,fun(fun(X93,bool),bool)),happ(s(fun('type.option.option'(X93),fun(bool,fun(fun(X93,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X93),X94))),s(bool,X95))),s(fun(X93,bool),X96)))) ) | $spl0),
  inference(superposition,[],[f3662,f211])).
fof(f12886,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,sK6('const.option.SOME_1'(s(bool,X92)),bool)) != s(bool,happ(s(fun(X88,bool),X91),s(X88,X89))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.SOME_1'(s(X88,X89))),s(bool,X90),s(fun(X88,bool),X91))) | s(bool,'T_0') = s(bool,X92)) ) | $spl0),
  inference(superposition,[],[f4028,f210])).
fof(f12887,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),X94),s(bool,X95),s(fun(X93,bool),X96))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X93,bool),bool),happ(s(fun(bool,fun(fun(X93,bool),bool)),happ(s(fun('type.option.option'(X93),fun(bool,fun(fun(X93,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X93),X94))),s(bool,X95))),s(fun(X93,bool),X96))) | s(bool,'T_0') = s(bool,X97)) ) | $spl0),
  inference(superposition,[],[f4028,f211])).
fof(f13479,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,'F_0') != s(bool,X133) | s(bool,sK6('const.option.SOME_1'(s(bool,X132)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,X133),s(fun(X134,bool),X135))) | s(bool,X132) = s(bool,X136) | s(bool,'F_0') = s(bool,X136)) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13488,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X177) != s(bool,X178) | s(bool,sK6('const.option.SOME_1'(s(bool,X177)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X179),'const.option.NONE_0'),s(bool,X178),s(fun(X179,bool),X180)))) ) | $spl0),
  inference(superposition,[],[f8919,f994])).
fof(f13533,plain,(
  ( ! [X130,X128,X131,X129] : (s(bool,'T_0') = s(bool,X128) | s(bool,'F_0') != s(bool,X129) | s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),'const.option.NONE_0'),s(bool,X129),s(fun(X130,bool),X131)))) ) | $spl0),
  inference(forward_demodulation,[],[f13478,f994])).
fof(f13478,plain,(
  ( ! [X130,X128,X131,X129] : (s(bool,'F_0') != s(bool,X129) | s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),'const.option.NONE_0'),s(bool,X129),s(fun(X130,bool),X131))) | s(bool,X128) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f7614])).
fof(f18636,plain,(
  ( ! [X125,X124] : (s('type.option.option'(bool),X125) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X125,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X125) | s(bool,X124) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f544,f7614])).
fof(f18637,plain,(
  ( ! [X127,X128,X126] : (s('type.option.option'(bool),X127) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X127,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X126)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X127) | s(bool,X126) = s(bool,X128) | s(bool,'F_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f544,f1987])).
fof(f18638,plain,(
  ( ! [X130,X129] : (s('type.option.option'(bool),X130) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X130,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X129)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X130) | s(bool,'T_0') = s(bool,X129)) ) | $spl0),
  inference(superposition,[],[f544,f3818])).
fof(f21029,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'F_0') != s(bool,X140) | s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X141),'const.option.NONE_0'),s(bool,X140),s(fun(X141,bool),X142))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139)))) ) | $spl0),
  inference(superposition,[],[f8919,f8256])).
fof(f21067,plain,(
  ( ! [X212,X213] : (s('type.option.option'(bool),X213) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X213,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X212)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X213) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212)))) ) | $spl0),
  inference(superposition,[],[f544,f8256])).
fof(f24153,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,sK6('const.option.SOME_1'(s(bool,X182)),bool)) = s(bool,happ(s(fun(X183,bool),X184),s(X183,X185))) | s(X183,X185) = s(X183,sK7(X185,X184,X183)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | $spl0),
  inference(subsumption_resolution,[],[f24098,f145])).
fof(f24098,plain,(
  ( ! [X185,X182,X184,X183] : (p(s(bool,'F_0')) | s(bool,sK6('const.option.SOME_1'(s(bool,X182)),bool)) = s(bool,happ(s(fun(X183,bool),X184),s(X183,X185))) | s(X183,X185) = s(X183,sK7(X185,X184,X183)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | $spl0),
  inference(superposition,[],[f2869,f8256])).
fof(f24155,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,'T_0') = s(bool,X190) | s(bool,sK6('const.option.SOME_1'(s(bool,X190)),bool)) = s(bool,happ(s(fun(X191,bool),X192),s(X191,X193))) | s(X191,X193) = s(X191,sK7(X193,X192,X191))) ) | $spl0),
  inference(forward_demodulation,[],[f24154,f994])).
fof(f24154,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,sK6('const.option.SOME_1'(s(bool,X190)),bool)) = s(bool,happ(s(fun(X191,bool),X192),s(X191,X193))) | s(X191,X193) = s(X191,sK7(X193,X192,X191)) | s(bool,X190) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f24100,f145])).
fof(f24100,plain,(
  ( ! [X191,X192,X190,X193] : (p(s(bool,'F_0')) | s(bool,sK6('const.option.SOME_1'(s(bool,X190)),bool)) = s(bool,happ(s(fun(X191,bool),X192),s(X191,X193))) | s(X191,X193) = s(X191,sK7(X193,X192,X191)) | s(bool,X190) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2869,f7614])).
fof(f24156,plain,(
  ( ! [X198,X196,X194,X197,X195] : (s(bool,sK6('const.option.SOME_1'(s(bool,X194)),bool)) = s(bool,happ(s(fun(X195,bool),X196),s(X195,X197))) | s(X195,X197) = s(X195,sK7(X197,X196,X195)) | s(bool,X194) = s(bool,X198) | s(bool,'F_0') = s(bool,X198)) ) | $spl0),
  inference(subsumption_resolution,[],[f24101,f145])).
fof(f24101,plain,(
  ( ! [X198,X196,X194,X197,X195] : (p(s(bool,'F_0')) | s(bool,sK6('const.option.SOME_1'(s(bool,X194)),bool)) = s(bool,happ(s(fun(X195,bool),X196),s(X195,X197))) | s(X195,X197) = s(X195,sK7(X197,X196,X195)) | s(bool,X194) = s(bool,X198) | s(bool,'F_0') = s(bool,X198)) ) | $spl0),
  inference(superposition,[],[f2869,f1987])).
fof(f24285,plain,(
  ( ! [X212,X210,X213,X211] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X211))) | s(bool,sK6('const.option.SOME_1'(s(bool,X210)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X212),'const.option.NONE_0'),s(bool,X211),s(fun(X212,bool),X213))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210)))) ) | $spl0),
  inference(superposition,[],[f443,f8256])).
fof(f24288,plain,(
  ( ! [X222,X225,X223,X226,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X223))) | s(bool,sK6('const.option.SOME_1'(s(bool,X222)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X224),'const.option.NONE_0'),s(bool,X223),s(fun(X224,bool),X225))) | s(bool,X222) = s(bool,X226) | s(bool,'F_0') = s(bool,X226)) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24384,plain,(
  ( ! [X218,X220,X219,X221] : (s(bool,'T_0') = s(bool,X218) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,sK6('const.option.SOME_1'(s(bool,X218)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X220),'const.option.NONE_0'),s(bool,X219),s(fun(X220,bool),X221)))) ) | $spl0),
  inference(forward_demodulation,[],[f24287,f994])).
fof(f24287,plain,(
  ( ! [X218,X220,X219,X221] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,sK6('const.option.SOME_1'(s(bool,X218)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X220),'const.option.NONE_0'),s(bool,X219),s(fun(X220,bool),X221))) | s(bool,X218) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f443,f7614])).
fof(f13473,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (s(bool,'T_0') != s(bool,X107) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X104),'const.option.NONE_0'),s(bool,X105),s(fun(X104,bool),X106))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X108),'const.option.NONE_0'),s(bool,X107),s(fun(X108,bool),X109))) | s(bool,'F_0') = s(bool,X105)) ) | $spl0),
  inference(superposition,[],[f8919,f368])).
fof(f13476,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,'F_0') != s(bool,X121) | s(bool,happ(s(fun(X118,bool),X119),s(X118,X120))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,X121),s(fun(X122,bool),X123))) | s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | $spl0),
  inference(superposition,[],[f8919,f1907])).
fof(f13485,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,X158) != s(bool,X160) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X157),'const.option.NONE_0'),s(bool,X158),s(fun(X157,bool),X159))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X161),'const.option.NONE_0'),s(bool,X160),s(fun(X161,bool),X162)))) ) | $spl0),
  inference(superposition,[],[f8919,f208])).
fof(f13486,plain,(
  ( ! [X167,X165,X163,X169,X166,X164,X168] : (s(bool,X167) != s(bool,happ(s(fun(X163,bool),X166),s(X163,X164))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X168),'const.option.NONE_0'),s(bool,X167),s(fun(X168,bool),X169))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X163),'const.option.SOME_1'(s(X163,X164))),s(bool,X165),s(fun(X163,bool),X166)))) ) | $spl0),
  inference(superposition,[],[f8919,f210])).
fof(f13487,plain,(
  ( ! [X175,X173,X171,X176,X174,X172,X170] : (s(bool,X174) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X170),X171),s(bool,X172),s(fun(X170,bool),X173))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X175),'const.option.NONE_0'),s(bool,X174),s(fun(X175,bool),X176))) = s(bool,happ(s(fun(fun(X170,bool),bool),happ(s(fun(bool,fun(fun(X170,bool),bool)),happ(s(fun('type.option.option'(X170),fun(bool,fun(fun(X170,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X170),X171))),s(bool,X172))),s(fun(X170,bool),X173)))) ) | $spl0),
  inference(superposition,[],[f8919,f211])).
fof(f18167,plain,(
  ( ! [X138,X136,X139,X137] : (s(bool,'T_0') != s(bool,X137) | s(bool,sK6(X136,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X138),'const.option.NONE_0'),s(bool,X137),s(fun(X138,bool),X139))) | s('type.option.option'(bool),X136) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X136)) ) | $spl0),
  inference(superposition,[],[f8919,f543])).
fof(f18631,plain,(
  ( ! [X111,X112,X110,X113] : (s('type.option.option'(bool),X113) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X113,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X110),'const.option.NONE_0'),s(bool,X111),s(fun(X110,bool),X112))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X113) | s(bool,'F_0') = s(bool,X111)) )),
  inference(superposition,[],[f544,f368])).
fof(f24281,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X190),'const.option.NONE_0'),s(bool,X191),s(fun(X190,bool),X192))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X194),'const.option.NONE_0'),s(bool,X193),s(fun(X194,bool),X195))) | s(bool,'F_0') = s(bool,X191)) )),
  inference(superposition,[],[f443,f368])).
fof(f24284,plain,(
  ( ! [X208,X206,X204,X209,X207,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207))) | s(bool,happ(s(fun(X204,bool),X205),s(X204,X206))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(bool,X207),s(fun(X208,bool),X209))) | s(X204,X206) = s(X204,sK7(X206,X205,X204))) ) | $spl0),
  inference(superposition,[],[f443,f1907])).
fof(f24298,plain,(
  ( ! [X265,X267,X268,X266] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X266))) | s(bool,sK6(X265,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X267),'const.option.NONE_0'),s(bool,X266),s(fun(X267,bool),X268))) | s('type.option.option'(bool),X265) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X265)) )),
  inference(superposition,[],[f443,f543])).
fof(f31643,plain,(
  ( ! [X397,X399,X401,X396,X398,X400,X402] : (s(bool,'T_0') != s(bool,X400) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X401),'const.option.NONE_0'),s(bool,X400),s(fun(X401,bool),X402))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.SOME_1'(s(X396,X397))),s(bool,X398),s(fun(X396,bool),X399))) | s(bool,'F_0') = s(bool,happ(s(fun(X396,bool),X399),s(X396,X397)))) ) | $spl0),
  inference(superposition,[],[f8919,f657])).
fof(f31694,plain,(
  ( ! [X660,X662,X656,X658,X661,X657,X659] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X660))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X661),'const.option.NONE_0'),s(bool,X660),s(fun(X661,bool),X662))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X656),'const.option.SOME_1'(s(X656,X657))),s(bool,X658),s(fun(X656,bool),X659))) | s(bool,'F_0') = s(bool,happ(s(fun(X656,bool),X659),s(X656,X657)))) )),
  inference(superposition,[],[f443,f657])).
fof(f1310,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,X140) != s(bool,f(s(X137,sK8(X138,X139,bool,X137)))) | s(fun(X137,bool),X138) = s(fun(X137,bool),X139) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,g(s(X137,sK8(X138,X139,bool,X137))))) )),
  inference(superposition,[],[f209,f278])).
fof(f1441,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'T_0') != s(bool,f(s(X130,sK8(X131,X132,bool,X130)))) | s(fun(X130,bool),X131) = s(fun(X130,bool),X132) | s(bool,X133) = s(bool,g(s(X130,sK8(X131,X132,bool,X130)))) | s(bool,'T_0') = s(bool,X133)) )),
  inference(superposition,[],[f209,f278])).
fof(f1914,plain,(
  ( ! [X92,X90,X91] : (s(bool,'T_0') != s(bool,f(s(X90,sK8(X91,X92,bool,X90)))) | s(fun(X90,bool),X91) = s(fun(X90,bool),X92) | s(bool,'F_0') = s(bool,g(s(X90,sK8(X91,X92,bool,X90))))) ) | $spl0),
  inference(forward_demodulation,[],[f1830,f778])).
fof(f1830,plain,(
  ( ! [X92,X90,X91] : (s(bool,f(s(X90,sK8(X91,X92,bool,X90)))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(fun(X90,bool),X91) = s(fun(X90,bool),X92) | s(bool,'F_0') = s(bool,g(s(X90,sK8(X91,X92,bool,X90))))) ) | $spl0),
  inference(superposition,[],[f209,f1191])).
fof(f2118,plain,(
  ( ! [X167,X165,X166,X164] : (s(bool,X167) != s(bool,f(s(X164,sK8(X165,X166,bool,X164)))) | s(fun(X164,bool),X165) = s(fun(X164,bool),X166) | s(bool,'F_0') = s(bool,X167) | s(bool,'F_0') = s(bool,g(s(X164,sK8(X165,X166,bool,X164))))) ) | $spl0),
  inference(superposition,[],[f209,f1778])).
fof(f2277,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'F_0') != s(bool,f(s(X145,sK8(X146,X147,bool,X145)))) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK8(X146,X147,bool,X145)))) | s(bool,'F_0') = s(bool,X148)) ) | $spl0),
  inference(superposition,[],[f209,f1778])).
fof(f3388,plain,(
  ( ! [X237,X235,X236,X234] : (s(bool,X237) != s(bool,f(s(X234,sK8(X235,X236,bool,X234)))) | s(fun(X234,bool),X235) = s(fun(X234,bool),X236) | s(bool,'F_0') = s(bool,X237) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X234,sK8(X235,X236,bool,X234))))),bool))) ) | $spl0),
  inference(superposition,[],[f209,f1987])).
fof(f3471,plain,(
  ( ! [X237,X235,X236,X234] : (s(bool,X237) != s(bool,f(s(X234,sK8(X235,X236,bool,X234)))) | s(fun(X234,bool),X235) = s(fun(X234,bool),X236) | s(bool,'F_0') = s(bool,g(s(X234,sK8(X235,X236,bool,X234)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X237)),bool))) ) | $spl0),
  inference(superposition,[],[f209,f1987])).
fof(f3597,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,'F_0') != s(bool,f(s(X203,sK8(X204,X205,bool,X203)))) | s(fun(X203,bool),X204) = s(fun(X203,bool),X205) | s(bool,X206) = s(bool,g(s(X203,sK8(X204,X205,bool,X203)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X206)),bool))) ) | $spl0),
  inference(superposition,[],[f209,f1987])).
fof(f8211,plain,(
  ( ! [X134,X136,X135] : (s(bool,'T_0') != s(bool,f(s(X134,sK8(X135,X136,bool,X134)))) | s(fun(X134,bool),X135) = s(fun(X134,bool),X136) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X134,sK8(X135,X136,bool,X134))))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7960,f994])).
fof(f7960,plain,(
  ( ! [X134,X136,X135] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,f(s(X134,sK8(X135,X136,bool,X134)))) | s(fun(X134,bool),X135) = s(fun(X134,bool),X136) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X134,sK8(X135,X136,bool,X134))))),bool))) ) | $spl0),
  inference(superposition,[],[f209,f7614])).
fof(f19501,plain,(
  ( ! [X246,X248,X247] : (s(bool,'T_0') != s(bool,f(s(X246,sK8(X247,X248,bool,X246)))) | s(fun(X246,bool),X247) = s(fun(X246,bool),X248) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X246,sK8(X247,X248,bool,X246))))))) ) | $spl0),
  inference(forward_demodulation,[],[f19161,f994])).
fof(f19161,plain,(
  ( ! [X246,X248,X247] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,f(s(X246,sK8(X247,X248,bool,X246)))) | s(fun(X246,bool),X247) = s(fun(X246,bool),X248) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X246,sK8(X247,X248,bool,X246))))))) ) | $spl0),
  inference(superposition,[],[f209,f8126])).
fof(f25472,plain,(
  ( ! [X1048,X1046,X1044,X1049,X1047,X1045] : (s(bool,X1047) != s(bool,f(s(X1044,sK8(X1045,X1046,bool,X1044)))) | s(fun(X1044,bool),X1045) = s(fun(X1044,bool),X1046) | s(bool,X1047) = s(bool,'const.bool.IN_2'(s(X1048,X1049),s(fun(X1048,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,g(s(X1044,sK8(X1045,X1046,bool,X1044))))) ) | $spl0),
  inference(superposition,[],[f209,f3053])).
fof(f25795,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(bool,'F_0') != s(bool,f(s(X885,sK8(X886,X887,bool,X885)))) | s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | $spl0),
  inference(superposition,[],[f209,f3053])).
fof(f29602,plain,(
  ( ! [X704,X702,X701,X703] : (s(bool,X704) != s(bool,f(s(X701,sK8(X702,X703,bool,X701)))) | s(fun(X701,bool),X702) = s(fun(X701,bool),X703) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X701,sK8(X702,X703,bool,X701)))))) | s(bool,'F_0') = s(bool,X704)) ) | $spl0),
  inference(superposition,[],[f209,f3984])).
fof(f29847,plain,(
  ( ! [X704,X702,X701,X703] : (s(bool,X704) != s(bool,f(s(X701,sK8(X702,X703,bool,X701)))) | s(fun(X701,bool),X702) = s(fun(X701,bool),X703) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X704))) | s(bool,'F_0') = s(bool,g(s(X701,sK8(X702,X703,bool,X701))))) ) | $spl0),
  inference(superposition,[],[f209,f3984])).
fof(f30201,plain,(
  ( ! [X606,X609,X607,X608] : (s(bool,'F_0') != s(bool,f(s(X606,sK8(X607,X608,bool,X606)))) | s(fun(X606,bool),X607) = s(fun(X606,bool),X608) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) | s(bool,X609) = s(bool,g(s(X606,sK8(X607,X608,bool,X606))))) ) | $spl0),
  inference(superposition,[],[f209,f3984])).
fof(f947,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X82),X83),s(bool,X84),s(fun(X82,bool),X85))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(fun(X82,bool)),'const.option.SOME_1'(s(fun(X82,bool),X85))),s(bool,X86),s(fun(fun(X82,bool),bool),happ(s(fun(bool,fun(fun(X82,bool),bool)),happ(s(fun('type.option.option'(X82),fun(bool,fun(fun(X82,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X82),X83))),s(bool,X84)))))) ) | $spl0),
  inference(superposition,[],[f897,f211])).
fof(f949,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),X93),s(bool,X94),s(fun(X92,bool),X95)))) | s(fun(X92,bool),X95) = s(fun(X92,bool),sK7(X95,happ(s(fun(bool,fun(fun(X92,bool),bool)),happ(s(fun('type.option.option'(X92),fun(bool,fun(fun(X92,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X92),X93))),s(bool,X94)),fun(X92,bool)))) )),
  inference(superposition,[],[f196,f211])).
fof(f975,plain,(
  ( ! [X90,X88,X87,X91,X89] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),X88),s(bool,X89),s(fun(X87,bool),X91)))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),X88),s(bool,X89),s(fun(X87,bool),X90)))) | s(fun(X87,bool),X90) != s(fun(X87,bool),X91)) )),
  inference(forward_demodulation,[],[f948,f211])).
fof(f948,plain,(
  ( ! [X90,X88,X87,X91,X89] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),X88),s(bool,X89),s(fun(X87,bool),X90)))) | p(s(bool,happ(s(fun(fun(X87,bool),bool),happ(s(fun(bool,fun(fun(X87,bool),bool)),happ(s(fun('type.option.option'(X87),fun(bool,fun(fun(X87,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X87),X88))),s(bool,X89))),s(fun(X87,bool),X91)))) | s(fun(X87,bool),X90) != s(fun(X87,bool),X91)) )),
  inference(superposition,[],[f195,f211])).
fof(f976,plain,(
  ( ! [X99,X97,X98,X96] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),X99)))) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),sK7(X99,happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98)),fun(X96,bool))))))) )),
  inference(forward_demodulation,[],[f950,f211])).
fof(f950,plain,(
  ( ! [X99,X97,X98,X96] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),sK7(X99,happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98)),fun(X96,bool)))))) | ~p(s(bool,happ(s(fun(fun(X96,bool),bool),happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98))),s(fun(X96,bool),X99))))) )),
  inference(superposition,[],[f197,f211])).
fof(f987,plain,(
  ( ! [X152,X151,X153,X150] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),X151),s(bool,X152),s(fun(X150,bool),X153))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X150,bool),bool),happ(s(fun(bool,fun(fun(X150,bool),bool)),happ(s(fun('type.option.option'(X150),fun(bool,fun(fun(X150,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X150),X151))),s(bool,X152))),s(fun(X150,bool),X153)))) ) | $spl0),
  inference(forward_demodulation,[],[f962,f778])).
fof(f962,plain,(
  ( ! [X152,X151,X153,X150] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),X151),s(bool,X152),s(fun(X150,bool),X153))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X150,bool),bool),happ(s(fun(bool,fun(fun(X150,bool),bool)),happ(s(fun('type.option.option'(X150),fun(bool,fun(fun(X150,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X150),X151))),s(bool,X152))),s(fun(X150,bool),X153)))) ) | $spl0),
  inference(superposition,[],[f857,f211])).
fof(f1163,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(bool,X14),s(fun(X12,bool),X15))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X12,bool),bool),happ(s(fun(bool,fun(fun(X12,bool),bool)),happ(s(fun('type.option.option'(X12),fun(bool,fun(fun(X12,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(bool,X14))),s(fun(X12,bool),X15)))) )),
  inference(forward_demodulation,[],[f1127,f994])).
fof(f1127,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(bool,X14),s(fun(X12,bool),X15)))),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X12,bool),bool),happ(s(fun(bool,fun(fun(X12,bool),bool)),happ(s(fun('type.option.option'(X12),fun(bool,fun(fun(X12,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(bool,X14))),s(fun(X12,bool),X15)))) )),
  inference(superposition,[],[f1054,f211])).
fof(f1218,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X35),X36),s(bool,X37),s(fun(X35,bool),X38))) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X35,bool),bool),happ(s(fun(bool,fun(fun(X35,bool),bool)),happ(s(fun('type.option.option'(X35),fun(bool,fun(fun(X35,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X35),X36))),s(bool,X37))),s(fun(X35,bool),X38)))) )),
  inference(superposition,[],[f278,f211])).
fof(f1248,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s(bool,X29),s(fun(X27,bool),X30))) | s(bool,X31) = s(bool,happ(s(fun(fun(X27,bool),bool),happ(s(fun(bool,fun(fun(X27,bool),bool)),happ(s(fun('type.option.option'(X27),fun(bool,fun(fun(X27,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X27),X28))),s(bool,X29))),s(fun(X27,bool),X30))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f278,f211])).
fof(f1986,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X61) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),X58),s(bool,X59),s(fun(X57,bool),X60))) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) | $spl0),
  inference(superposition,[],[f1778,f211])).
fof(f2035,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X44),X45),s(bool,X46),s(fun(X44,bool),X47))) | s(bool,X48) = s(bool,happ(s(fun(fun(X44,bool),bool),happ(s(fun(bool,fun(fun(X44,bool),bool)),happ(s(fun('type.option.option'(X44),fun(bool,fun(fun(X44,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X44),X45))),s(bool,X46))),s(fun(X44,bool),X47))) | s(bool,'F_0') = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f1778,f211])).
fof(f2634,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X59),X60),s(bool,X61),s(fun(X59,bool),X62))) | s(bool,X63) = s(bool,happ(s(fun(fun(X59,bool),bool),happ(s(fun(bool,fun(fun(X59,bool),bool)),happ(s(fun('type.option.option'(X59),fun(bool,fun(fun(X59,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X59),X60))),s(bool,X61))),s(fun(X59,bool),X62))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f2192,f211])).
fof(f2683,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X83),X84),s(bool,X85),s(fun(X83,bool),X86))),s(fun(X87,bool),X88))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X83,bool),bool),happ(s(fun(bool,fun(fun(X83,bool),bool)),happ(s(fun('type.option.option'(X83),fun(bool,fun(fun(X83,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X83),X84))),s(bool,X85))),s(fun(X83,bool),X86)))) )),
  inference(superposition,[],[f368,f211])).
fof(f2802,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),X40),s(bool,X41),s(fun(X39,bool),X42))) | s(fun(X39,bool),X42) = s(fun(X39,bool),sK7(X42,happ(s(fun(bool,fun(fun(X39,bool),bool)),happ(s(fun('type.option.option'(X39),fun(bool,fun(fun(X39,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X39),X40))),s(bool,X41)),fun(X39,bool)))) ) | $spl0),
  inference(superposition,[],[f1907,f211])).
fof(f2954,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68))))) | s(bool,'F_0') = s(bool,X69) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68)))) )),
  inference(superposition,[],[f441,f211])).
fof(f2980,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f441,f211])).
fof(f3100,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),X42),s(bool,X43),s(fun(X41,bool),X44))) | s(fun(X41,bool),X44) = s(fun(X41,bool),sK7(X44,happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43)),fun(X41,bool)))) ) | $spl0),
  inference(superposition,[],[f2868,f211])).
fof(f3149,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s(bool,X65),s(fun(X63,bool),X66))))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f442,f211])).
fof(f3237,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(bool,X83) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X79),X80),s(bool,X81),s(fun(X79,bool),X82))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X79,bool),bool),happ(s(fun(bool,fun(fun(X79,bool),bool)),happ(s(fun('type.option.option'(X79),fun(bool,fun(fun(X79,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X79),X80))),s(bool,X81))),s(fun(X79,bool),X82))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f211])).
fof(f3270,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),X61),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,X64) = s(bool,happ(s(fun(fun(X60,bool),bool),happ(s(fun(bool,fun(fun(X60,bool),bool)),happ(s(fun('type.option.option'(X60),fun(bool,fun(fun(X60,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X60),X61))),s(bool,X62))),s(fun(X60,bool),X63))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f211])).
fof(f4074,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),X50),s(bool,X51),s(fun(X49,bool),X52))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X49,bool),bool),happ(s(fun(bool,fun(fun(X49,bool),bool)),happ(s(fun('type.option.option'(X49),fun(bool,fun(fun(X49,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X49),X50))),s(bool,X51))),s(fun(X49,bool),X52)))) ) | $spl0),
  inference(forward_demodulation,[],[f4023,f994])).
fof(f4023,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),X50),s(bool,X51),s(fun(X49,bool),X52))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X49,bool),bool),happ(s(fun(bool,fun(fun(X49,bool),bool)),happ(s(fun('type.option.option'(X49),fun(bool,fun(fun(X49,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X49),X50))),s(bool,X51))),s(fun(X49,bool),X52)))) ) | $spl0),
  inference(superposition,[],[f3674,f211])).
fof(f4125,plain,(
  ( ! [X80,X83,X81,X84,X82] : (s(bool,X84) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),X81),s(bool,X82),s(fun(X80,bool),X83))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X80,bool),bool),happ(s(fun(bool,fun(fun(X80,bool),bool)),happ(s(fun('type.option.option'(X80),fun(bool,fun(fun(X80,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X80),X81))),s(bool,X82))),s(fun(X80,bool),X83)))) )),
  inference(superposition,[],[f479,f211])).
fof(f8640,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X98),X99),s(bool,X100),s(fun(X98,bool),X101))) | s(bool,X102) = s(bool,happ(s(fun(fun(X98,bool),bool),happ(s(fun(bool,fun(fun(X98,bool),bool)),happ(s(fun('type.option.option'(X98),fun(bool,fun(fun(X98,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X98),X99))),s(bool,X100))),s(fun(X98,bool),X101))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X102)),bool))) ) | $spl0),
  inference(superposition,[],[f3482,f211])).
fof(f8921,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,X102) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X98),X99),s(bool,X100),s(fun(X98,bool),X101))) | s(bool,X102) = s(bool,happ(s(fun(fun(X98,bool),bool),happ(s(fun(bool,fun(fun(X98,bool),bool)),happ(s(fun('type.option.option'(X98),fun(bool,fun(fun(X98,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X98),X99))),s(bool,X100))),s(fun(X98,bool),X101))) | s(bool,'F_0') = s(bool,X102)) ) | $spl0),
  inference(forward_demodulation,[],[f8841,f994])).
fof(f8841,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,X102) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X98),X99),s(bool,X100),s(fun(X98,bool),X101)))),bool)) | s(bool,X102) = s(bool,happ(s(fun(fun(X98,bool),bool),happ(s(fun(bool,fun(fun(X98,bool),bool)),happ(s(fun('type.option.option'(X98),fun(bool,fun(fun(X98,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X98),X99))),s(bool,X100))),s(fun(X98,bool),X101))) | s(bool,'F_0') = s(bool,X102)) ) | $spl0),
  inference(superposition,[],[f3662,f211])).
fof(f13010,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,X100) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),X99))) | s(bool,'F_0') = s(bool,X100) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X96,bool),bool),happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98))),s(fun(X96,bool),X99)))) ) | $spl0),
  inference(forward_demodulation,[],[f12925,f994])).
fof(f12925,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,X100) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),X99)))),bool)) | s(bool,'F_0') = s(bool,X100) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X96,bool),bool),happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98))),s(fun(X96,bool),X99)))) ) | $spl0),
  inference(superposition,[],[f4028,f211])).
fof(f13280,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,X100) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),X99))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X96,bool),bool),happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98))),s(fun(X96,bool),X99)))) ) | $spl0),
  inference(superposition,[],[f4952,f211])).
fof(f15416,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X110),X111),s(bool,X112),s(fun(X110,bool),X113))) | s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | $spl0),
  inference(superposition,[],[f15050,f211])).
fof(f17963,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,'T_0') = s(bool,X134) | s(bool,X134) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(bool,X132),s(fun(X130,bool),X133))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X130,bool),bool),happ(s(fun(bool,fun(fun(X130,bool),bool)),happ(s(fun('type.option.option'(X130),fun(bool,fun(fun(X130,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X130),X131))),s(bool,X132))),s(fun(X130,bool),X133)))) ) | $spl0),
  inference(forward_demodulation,[],[f17900,f994])).
fof(f17900,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X134) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(bool,X132),s(fun(X130,bool),X133))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X130,bool),bool),happ(s(fun(bool,fun(fun(X130,bool),bool)),happ(s(fun('type.option.option'(X130),fun(bool,fun(fun(X130,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X130),X131))),s(bool,X132))),s(fun(X130,bool),X133))) | s(bool,X134) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f15236,f211])).
fof(f19318,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X76,bool),bool),happ(s(fun(bool,fun(fun(X76,bool),bool)),happ(s(fun('type.option.option'(X76),fun(bool,fun(fun(X76,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X76),X77))),s(bool,X78))),s(fun(X76,bool),X79))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X76),X77),s(bool,X78),s(fun(X76,bool),X79)))))) ) | $spl0),
  inference(forward_demodulation,[],[f18876,f994])).
fof(f18876,plain,(
  ( ! [X78,X76,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X76),X77),s(bool,X78),s(fun(X76,bool),X79))))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(fun(X76,bool),bool),happ(s(fun(bool,fun(fun(X76,bool),bool)),happ(s(fun('type.option.option'(X76),fun(bool,fun(fun(X76,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X76),X77))),s(bool,X78))),s(fun(X76,bool),X79)))) ) | $spl0),
  inference(superposition,[],[f8126,f211])).
fof(f19700,plain,(
  ( ! [X99,X97,X100,X98] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),X98),s(bool,X99),s(fun(X97,bool),sK7(X100,happ(s(fun(bool,fun(fun(X97,bool),bool)),happ(s(fun('type.option.option'(X97),fun(bool,fun(fun(X97,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X97),X98))),s(bool,X99)),fun(X97,bool))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),X98),s(bool,X99),s(fun(X97,bool),X100))))) )),
  inference(forward_demodulation,[],[f19647,f211])).
fof(f19647,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),X98),s(bool,X99),s(fun(X97,bool),X100)))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X97,bool),bool),happ(s(fun(bool,fun(fun(X97,bool),bool)),happ(s(fun('type.option.option'(X97),fun(bool,fun(fun(X97,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X97),X98))),s(bool,X99))),s(fun(X97,bool),sK7(X100,happ(s(fun(bool,fun(fun(X97,bool),bool)),happ(s(fun('type.option.option'(X97),fun(bool,fun(fun(X97,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X97),X98))),s(bool,X99)),fun(X97,bool)))))) )),
  inference(superposition,[],[f620,f211])).
fof(f23152,plain,(
  ( ! [X204,X202,X200,X205,X203,X201] : (s(bool,X204) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X200),X201),s(bool,X202),s(fun(X200,bool),X203))) | s(bool,'F_0') = s(bool,X204) | s(bool,X205) = s(bool,happ(s(fun(fun(X200,bool),bool),happ(s(fun(bool,fun(fun(X200,bool),bool)),happ(s(fun('type.option.option'(X200),fun(bool,fun(fun(X200,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X200),X201))),s(bool,X202))),s(fun(X200,bool),X203))) | s(bool,'F_0') = s(bool,X205)) ) | $spl0),
  inference(superposition,[],[f2590,f211])).
fof(f23208,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s(bool,X195) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),X192),s(bool,X193),s(fun(X191,bool),X194))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X191,bool),bool),happ(s(fun(bool,fun(fun(X191,bool),bool)),happ(s(fun('type.option.option'(X191),fun(bool,fun(fun(X191,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X191),X192))),s(bool,X193))),s(fun(X191,bool),X194))) | s(bool,X195) = s(bool,X196) | s(bool,'F_0') = s(bool,X196)) ) | $spl0),
  inference(superposition,[],[f2590,f211])).
fof(f23414,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),X101),s(bool,X102),s(fun(X100,bool),X103)))) | s(fun(X100,bool),sK7(X103,happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool))) = s(fun(X100,bool),sK7(sK7(X103,happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool)),happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool)))) ) | $spl0),
  inference(superposition,[],[f2867,f211])).
fof(f23616,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X146),X147),s(bool,X148),s(fun(X146,bool),X149))))) | s(bool,X150) = s(bool,happ(s(fun(fun(X146,bool),bool),happ(s(fun(bool,fun(fun(X146,bool),bool)),happ(s(fun('type.option.option'(X146),fun(bool,fun(fun(X146,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X146),X147))),s(bool,X148))),s(fun(X146,bool),X149))) | s(bool,'F_0') = s(bool,X150)) ) | $spl0),
  inference(superposition,[],[f1909,f211])).
fof(f23951,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(bool,X146) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),X143),s(bool,X144),s(fun(X142,bool),X145))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X142,bool),bool),happ(s(fun(bool,fun(fun(X142,bool),bool)),happ(s(fun('type.option.option'(X142),fun(bool,fun(fun(X142,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X142),X143))),s(bool,X144))),s(fun(X142,bool),X145)))) ) | $spl0),
  inference(superposition,[],[f1927,f211])).
fof(f24676,plain,(
  ( ! [X292,X294,X290,X293,X295,X289,X291] : (s(bool,X293) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X289),X290),s(bool,X291),s(fun(X289,bool),X292))) | s(bool,X293) = s(bool,'const.bool.IN_2'(s(X294,X295),s(fun(X294,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X289,bool),bool),happ(s(fun(bool,fun(fun(X289,bool),bool)),happ(s(fun('type.option.option'(X289),fun(bool,fun(fun(X289,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X289),X290))),s(bool,X291))),s(fun(X289,bool),X292)))) ) | $spl0),
  inference(superposition,[],[f3053,f211])).
fof(f24744,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X215),X216),s(bool,X217),s(fun(X215,bool),X218))) | s(bool,X219) = s(bool,'const.bool.IN_2'(s(X220,X221),s(fun(X220,bool),'const.pred_set.EMPTY_0'))) | s(bool,X219) = s(bool,happ(s(fun(fun(X215,bool),bool),happ(s(fun(bool,fun(fun(X215,bool),bool)),happ(s(fun('type.option.option'(X215),fun(bool,fun(fun(X215,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X215),X216))),s(bool,X217))),s(fun(X215,bool),X218)))) ) | $spl0),
  inference(superposition,[],[f3053,f211])).
fof(f27214,plain,(
  ( ! [X191,X189,X187,X190,X188,X186] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X186),X187),s(bool,X188),s(fun(X186,bool),X189)))) | s(fun(X186,bool),X189) = s(fun(X186,bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X190),'const.option.NONE_0'),s(fun(X186,bool),X189),s(fun(X190,fun(X186,bool)),X191)),happ(s(fun(bool,fun(fun(X186,bool),bool)),happ(s(fun('type.option.option'(X186),fun(bool,fun(fun(X186,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X186),X187))),s(bool,X188)),fun(X186,bool)))) )),
  inference(superposition,[],[f532,f211])).
fof(f28876,plain,(
  ( ! [X191,X189,X192,X190,X188] : (~p(s(bool,happ(s(fun(bool,bool),X192),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X188),X189),s(bool,X190),s(fun(X188,bool),X191)))))) | p(s(bool,happ(s(fun(bool,bool),X192),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun(fun(X188,bool),bool),happ(s(fun(bool,fun(fun(X188,bool),bool)),happ(s(fun('type.option.option'(X188),fun(bool,fun(fun(X188,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X188),X189))),s(bool,X190))),s(fun(X188,bool),X191)),X192,bool))) )),
  inference(superposition,[],[f617,f211])).
fof(f29057,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X157),X158),s(bool,X159),s(fun(X157,bool),X160))))) | s(bool,X161) = s(bool,happ(s(fun(fun(X157,bool),bool),happ(s(fun(bool,fun(fun(X157,bool),bool)),happ(s(fun('type.option.option'(X157),fun(bool,fun(fun(X157,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X157),X158))),s(bool,X159))),s(fun(X157,bool),X160))) | s(bool,'F_0') = s(bool,X161)) ) | $spl0),
  inference(superposition,[],[f3984,f211])).
fof(f29197,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X196) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X192),X193),s(bool,X194),s(fun(X192,bool),X195))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X196))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X192,bool),bool),happ(s(fun(bool,fun(fun(X192,bool),bool)),happ(s(fun('type.option.option'(X192),fun(bool,fun(fun(X192,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X192),X193))),s(bool,X194))),s(fun(X192,bool),X195)))) ) | $spl0),
  inference(superposition,[],[f3984,f211])).
fof(f29274,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X157),X158),s(bool,X159),s(fun(X157,bool),X160))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X161))) | s(bool,X161) = s(bool,happ(s(fun(fun(X157,bool),bool),happ(s(fun(bool,fun(fun(X157,bool),bool)),happ(s(fun('type.option.option'(X157),fun(bool,fun(fun(X157,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X157),X158))),s(bool,X159))),s(fun(X157,bool),X160)))) ) | $spl0),
  inference(superposition,[],[f3984,f211])).
fof(f30921,plain,(
  ( ! [X335,X337,X339,X334,X340,X336,X338] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X334),X335),s(bool,X336),s(fun(X334,bool),X337))) | s(bool,X338) = s(bool,'const.bool.IN_2'(s(X339,X340),s(fun(X339,bool),'const.pred_set.EMPTY_0'))) | s(bool,X338) = s(bool,happ(s(fun(fun(X334,bool),bool),happ(s(fun(bool,fun(fun(X334,bool),bool)),happ(s(fun('type.option.option'(X334),fun(bool,fun(fun(X334,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X334),X335))),s(bool,X336))),s(fun(X334,bool),X337)))) ) | $spl0),
  inference(superposition,[],[f25483,f211])).
fof(f32554,plain,(
  ( ! [X212,X216,X215,X213,X211,X214] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X211),X212),s(bool,X213),s(fun(X211,bool),X214)))) | s(fun(X211,bool),X214) = s(fun(X211,bool),sK7(X214,'const.option.option_CASE_3'(s('type.option.option'(X215),'const.option.NONE_0'),s(fun(fun(X211,bool),bool),happ(s(fun(bool,fun(fun(X211,bool),bool)),happ(s(fun('type.option.option'(X211),fun(bool,fun(fun(X211,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X211),X212))),s(bool,X213))),s(fun(X215,fun(fun(X211,bool),bool)),X216)),fun(X211,bool)))) )),
  inference(superposition,[],[f519,f211])).
fof(f31696,plain,(
  ( ! [X670,X673,X671,X672,X674] : (s('type.option.option'(bool),X674) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X674,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X670),'const.option.SOME_1'(s(X670,X671))),s(bool,X672),s(fun(X670,bool),X673))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X674) | s(bool,'F_0') = s(bool,happ(s(fun(X670,bool),X673),s(X670,X671)))) )),
  inference(superposition,[],[f544,f657])).
fof(f195,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK7(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X18,X19] : (? [X8] : (s(X6,X8) = s(X6,X19) & p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X8))))) <=> p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X19)))))),
  file('thm.misc.IN_option_rwt','thm.bool.UNWIND_THM2')).
fof(f196,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f132])).
fof(f197,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f132])).
fof(f519,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) )),
  inference(superposition,[],[f196,f208])).
fof(f532,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(X10,bool),X14),s(X10,X12)))) | s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) )),
  inference(forward_demodulation,[],[f526,f208])).
fof(f526,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(X10,bool),X14),s(X10,X12)))) | s(X10,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13))) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) )),
  inference(superposition,[],[f196,f208])).
fof(f619,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)))))) )),
  inference(forward_demodulation,[],[f616,f208])).
fof(f616,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3))),s(X0,X4))))) )),
  inference(superposition,[],[f197,f208])).
fof(f620,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f618,f145])).
fof(f618,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) )),
  inference(superposition,[],[f197,f146])).
fof(f897,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X7,bool),X10),s(X7,X8))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(bool,X9),s(fun(X7,bool),X10)))) ) | $spl0),
  inference(forward_demodulation,[],[f885,f778])).
fof(f885,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,happ(s(fun(X7,bool),X10),s(X7,X8))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(bool,X9),s(fun(X7,bool),X10)))) ) | $spl0),
  inference(superposition,[],[f857,f210])).
fof(f1084,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,happ(s(fun(X79,bool),X80),s(X79,X81)))) | s(X79,X81) = s(X79,sK7(X81,sK6('const.option.SOME_1'(s(fun(X79,bool),X80)),fun(X79,bool)),X79))) )),
  inference(superposition,[],[f196,f994])).
fof(f1101,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) | ~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21))))) )),
  inference(forward_demodulation,[],[f1061,f994])).
fof(f1061,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) | s(X20,sK6('const.option.SOME_1'(s(X20,X21)),X20)) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) )),
  inference(superposition,[],[f196,f994])).
fof(f1115,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,happ(s(fun(X76,bool),X77),s(X76,X78)))) | p(s(bool,happ(s(fun(X76,bool),X77),s(X76,sK7(X78,sK6('const.option.SOME_1'(s(fun(X76,bool),X77)),fun(X76,bool)),X76)))))) )),
  inference(forward_demodulation,[],[f1083,f994])).
fof(f1083,plain,(
  ( ! [X78,X76,X77] : (p(s(bool,happ(s(fun(X76,bool),X77),s(X76,sK7(X78,sK6('const.option.SOME_1'(s(fun(X76,bool),X77)),fun(X76,bool)),X76))))) | ~p(s(bool,happ(s(fun(X76,bool),sK6('const.option.SOME_1'(s(fun(X76,bool),X77)),fun(X76,bool))),s(X76,X78))))) )),
  inference(superposition,[],[f197,f994])).
fof(f1162,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X11),s(X8,X9))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(bool,X10),s(fun(X8,bool),X11)))) )),
  inference(forward_demodulation,[],[f1126,f994])).
fof(f1126,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X8,bool),X11),s(X8,X9)))),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(bool,X10),s(fun(X8,bool),X11)))) )),
  inference(superposition,[],[f1054,f210])).
fof(f1217,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,X34) = s(bool,happ(s(fun(X30,bool),X33),s(X30,X31))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(bool,X32),s(fun(X30,bool),X33)))) )),
  inference(superposition,[],[f278,f210])).
fof(f1247,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),X25),s(X22,X23))) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X22),'const.option.SOME_1'(s(X22,X23))),s(bool,X24),s(fun(X22,bool),X25))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f278,f210])).
fof(f1720,plain,(
  ( ! [X66,X64,X67,X65,X63] : (p(s(bool,happ(s(fun(X63,bool),X64),s(X63,X66)))) | s(X63,X65) != s(X63,X66) | s(bool,X67) = s(bool,happ(s(fun(X63,bool),X64),s(X63,X65))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f1423,f143])).
fof(f1423,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X63,bool),X64),s(X63,X66)))) | s(X63,X65) != s(X63,X66) | s(bool,X67) = s(bool,happ(s(fun(X63,bool),X64),s(X63,X65))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f195,f278])).
fof(f1905,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,happ(s(fun(X41,bool),X42),s(X41,X44)))) | s(X41,X43) != s(X41,X44) | s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),X42),s(X41,X43)))) ) | $spl0),
  inference(subsumption_resolution,[],[f1904,f143])).
fof(f1904,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X41,bool),X42),s(X41,X44)))) | s(X41,X43) != s(X41,X44) | s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),X42),s(X41,X43)))) ) | $spl0),
  inference(forward_demodulation,[],[f1811,f778])).
fof(f1811,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) | p(s(bool,happ(s(fun(X41,bool),X42),s(X41,X44)))) | s(X41,X43) != s(X41,X44) | s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),X42),s(X41,X43)))) ) | $spl0),
  inference(superposition,[],[f195,f1191])).
fof(f1985,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X56) = s(bool,happ(s(fun(X52,bool),X55),s(X52,X53))) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) | $spl0),
  inference(superposition,[],[f1778,f210])).
fof(f2034,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X39,bool),X42),s(X39,X40))) | s(bool,X43) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),'const.option.SOME_1'(s(X39,X40))),s(bool,X41),s(fun(X39,bool),X42))) | s(bool,'F_0') = s(bool,X43)) ) | $spl0),
  inference(superposition,[],[f1778,f210])).
fof(f2592,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,happ(s(fun(X84,bool),X85),s(X84,X86)))) | s(bool,X87) = s(bool,happ(s(fun(X84,bool),X85),s(X84,sK7(X86,X85,X84)))) | s(bool,'F_0') = s(bool,X87)) ) | $spl0),
  inference(subsumption_resolution,[],[f2259,f145])).
fof(f2259,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X84,bool),X85),s(X84,X86)))) | s(bool,X87) = s(bool,happ(s(fun(X84,bool),X85),s(X84,sK7(X86,X85,X84)))) | s(bool,'F_0') = s(bool,X87)) ) | $spl0),
  inference(superposition,[],[f197,f1778])).
fof(f2633,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,'T_0') != s(bool,happ(s(fun(X54,bool),X57),s(X54,X55))) | s(bool,X58) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.SOME_1'(s(X54,X55))),s(bool,X56),s(fun(X54,bool),X57))) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f2192,f210])).
fof(f2682,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X81),'const.option.NONE_0'),s(bool,happ(s(fun(X77,bool),X80),s(X77,X78))),s(fun(X81,bool),X82))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.SOME_1'(s(X77,X78))),s(bool,X79),s(fun(X77,bool),X80)))) )),
  inference(superposition,[],[f368,f210])).
fof(f2765,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f1907,f208])).
fof(f2768,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f1907,f994])).
fof(f2792,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X75),s(bool,'F_0'))) | s(bool,happ(s(fun(X72,bool),X73),s(X72,X74))) = s(bool,sK7(happ(s(fun(X72,bool),X73),s(X72,X74)),X75,bool)) | s(X72,X74) = s(X72,sK7(X74,X73,X72))) ) | $spl0),
  inference(superposition,[],[f1907,f1907])).
fof(f2834,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'F_0') != s(bool,X127) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X124,bool),X125),s(X124,X126))))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | $spl0),
  inference(superposition,[],[f194,f1907])).
fof(f2836,plain,(
  ( ! [X134,X132,X136,X135,X133] : (~p(s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X135),s(bool,X136)))) | s(bool,X136) != s(bool,happ(s(fun(X132,bool),X133),s(X132,X134))) | s(X132,X134) = s(X132,sK7(X134,X133,X132))) ) | $spl0),
  inference(superposition,[],[f195,f1907])).
fof(f2837,plain,(
  ( ! [X140,X138,X139,X137] : (~p(s(bool,happ(s(fun(bool,bool),X140),s(bool,'F_0')))) | s(bool,happ(s(fun(X137,bool),X138),s(X137,X139))) = s(bool,sK7(happ(s(fun(X137,bool),X138),s(X137,X139)),X140,bool)) | s(X137,X139) = s(X137,sK7(X139,X138,X137))) ) | $spl0),
  inference(superposition,[],[f196,f1907])).
fof(f2845,plain,(
  ( ! [X177,X175,X173,X176,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X176),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))))),s(bool,X177),s(fun(bool,bool),X176))) | s(X173,X175) = s(X173,sK7(X175,X174,X173))) ) | $spl0),
  inference(superposition,[],[f897,f1907])).
fof(f2857,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) | s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) ) | $spl0),
  inference(forward_demodulation,[],[f2769,f208])).
fof(f2769,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,X2))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | $spl0),
  inference(superposition,[],[f1907,f208])).
fof(f2867,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | $spl0),
  inference(subsumption_resolution,[],[f2806,f145])).
fof(f2806,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | $spl0),
  inference(superposition,[],[f197,f1907])).
fof(f2869,plain,(
  ( ! [X30,X31,X29,X32] : (p(s(bool,X32)) | s(bool,X32) = s(bool,happ(s(fun(X29,bool),X30),s(X29,X31))) | s(X29,X31) = s(X29,sK7(X31,X30,X29))) ) | $spl0),
  inference(subsumption_resolution,[],[f2811,f145])).
fof(f2811,plain,(
  ( ! [X30,X31,X29,X32] : (p(s(bool,'F_0')) | p(s(bool,X32)) | s(bool,X32) = s(bool,happ(s(fun(X29,bool),X30),s(X29,X31))) | s(X29,X31) = s(X29,sK7(X31,X30,X29))) ) | $spl0),
  inference(superposition,[],[f198,f1907])).
fof(f2953,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X60,bool),X63),s(X60,X61))))) | s(bool,'F_0') = s(bool,X64) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63)))) )),
  inference(superposition,[],[f441,f210])).
fof(f2979,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X60,bool),X63),s(X60,X61))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f441,f210])).
fof(f3059,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f2868,f208])).
fof(f3062,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f2868,f994])).
fof(f3086,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X75),s(bool,'F_0'))) | s(bool,happ(s(fun(X72,bool),X73),s(X72,X74))) = s(bool,sK7(happ(s(fun(X72,bool),X73),s(X72,X74)),X75,bool)) | s(X72,X74) = s(X72,sK7(X74,X73,X72))) ) | $spl0),
  inference(superposition,[],[f2868,f1907])).
fof(f3104,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) | s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) ) | $spl0),
  inference(forward_demodulation,[],[f3063,f208])).
fof(f3063,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X4),s(X0,X2))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | $spl0),
  inference(superposition,[],[f2868,f208])).
fof(f3148,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f442,f210])).
fof(f3236,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,X78) = s(bool,happ(s(fun(X74,bool),X77),s(X74,X75))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.SOME_1'(s(X74,X75))),s(bool,X76),s(fun(X74,bool),X77))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f210])).
fof(f3269,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s(bool,'F_0') = s(bool,happ(s(fun(X55,bool),X58),s(X55,X56))) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X55),'const.option.SOME_1'(s(X55,X56))),s(bool,X57),s(fun(X55,bool),X58))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f210])).
fof(f3799,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))),bool)) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl0),
  inference(condensation,[],[f3798])).
fof(f3798,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66)))),bool)) | s(X64,X66) = s(X64,sK7(X66,X65,X64))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3202])).
fof(f3202,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66)))),bool)) | s(X64,X66) = s(X64,sK7(X66,X65,X64))) ) | $spl0),
  inference(superposition,[],[f1987,f1907])).
fof(f4073,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,'F_0') != s(bool,happ(s(fun(X45,bool),X48),s(X45,X46))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X45),'const.option.SOME_1'(s(X45,X46))),s(bool,X47),s(fun(X45,bool),X48)))) ) | $spl0),
  inference(forward_demodulation,[],[f4022,f994])).
fof(f4022,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,happ(s(fun(X45,bool),X48),s(X45,X46))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X45),'const.option.SOME_1'(s(X45,X46))),s(bool,X47),s(fun(X45,bool),X48)))) ) | $spl0),
  inference(superposition,[],[f3674,f210])).
fof(f4124,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X79) != s(bool,happ(s(fun(X75,bool),X78),s(X75,X76))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),'const.option.SOME_1'(s(X75,X76))),s(bool,X77),s(fun(X75,bool),X78)))) )),
  inference(superposition,[],[f479,f210])).
fof(f8639,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,'T_0') != s(bool,happ(s(fun(X93,bool),X96),s(X93,X94))) | s(bool,X97) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.SOME_1'(s(X93,X94))),s(bool,X95),s(fun(X93,bool),X96))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool))) ) | $spl0),
  inference(superposition,[],[f3482,f210])).
fof(f8920,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,X97) != s(bool,happ(s(fun(X93,bool),X96),s(X93,X94))) | s(bool,X97) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.SOME_1'(s(X93,X94))),s(bool,X95),s(fun(X93,bool),X96))) | s(bool,'F_0') = s(bool,X97)) ) | $spl0),
  inference(forward_demodulation,[],[f8840,f994])).
fof(f8840,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,X97) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X93,bool),X96),s(X93,X94)))),bool)) | s(bool,X97) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.SOME_1'(s(X93,X94))),s(bool,X95),s(fun(X93,bool),X96))) | s(bool,'F_0') = s(bool,X97)) ) | $spl0),
  inference(superposition,[],[f3662,f210])).
fof(f13009,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s(bool,X95) != s(bool,happ(s(fun(X91,bool),X94),s(X91,X92))) | s(bool,'F_0') = s(bool,X95) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X91),'const.option.SOME_1'(s(X91,X92))),s(bool,X93),s(fun(X91,bool),X94)))) ) | $spl0),
  inference(forward_demodulation,[],[f12924,f994])).
fof(f12924,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s(bool,X95) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X91,bool),X94),s(X91,X92)))),bool)) | s(bool,'F_0') = s(bool,X95) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X91),'const.option.SOME_1'(s(X91,X92))),s(bool,X93),s(fun(X91,bool),X94)))) ) | $spl0),
  inference(superposition,[],[f4028,f210])).
fof(f13195,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X90),'const.option.NONE_0'),s(bool,happ(s(fun(X87,bool),X88),s(X87,X89))),s(fun(X90,bool),X91))) | s(X87,X89) = s(X87,sK7(X89,X88,X87))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f13178])).
fof(f13178,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X90),'const.option.NONE_0'),s(bool,happ(s(fun(X87,bool),X88),s(X87,X89))),s(fun(X90,bool),X91))) | s(X87,X89) = s(X87,sK7(X89,X88,X87))) ) | $spl0),
  inference(superposition,[],[f4072,f1907])).
fof(f13279,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s(bool,X95) != s(bool,happ(s(fun(X91,bool),X94),s(X91,X92))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X95)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X91),'const.option.SOME_1'(s(X91,X92))),s(bool,X93),s(fun(X91,bool),X94)))) ) | $spl0),
  inference(superposition,[],[f4952,f210])).
fof(f13438,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,'F_0') != s(bool,X121) | s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,happ(s(fun(X118,bool),X119),s(X118,X120))),s(fun(X122,bool),X123))) | s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | $spl0),
  inference(superposition,[],[f8919,f1907])).
fof(f13694,plain,(
  ( ! [X66,X64,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66))))) | s(bool,'T_0') = s(bool,X67) | s(X64,X66) = s(X64,sK7(X66,X65,X64))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f13677])).
fof(f13677,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66))))) | s(bool,'T_0') = s(bool,X67) | s(X64,X66) = s(X64,sK7(X66,X65,X64))) ) | $spl0),
  inference(superposition,[],[f480,f1907])).
fof(f15415,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,'F_0') != s(bool,happ(s(fun(X105,bool),X108),s(X105,X106))) | s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | $spl0),
  inference(superposition,[],[f15050,f210])).
fof(f17962,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s(bool,'T_0') = s(bool,X129) | s(bool,X129) != s(bool,happ(s(fun(X125,bool),X128),s(X125,X126))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X125),'const.option.SOME_1'(s(X125,X126))),s(bool,X127),s(fun(X125,bool),X128)))) ) | $spl0),
  inference(forward_demodulation,[],[f17899,f994])).
fof(f17899,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s(bool,X129) != s(bool,happ(s(fun(X125,bool),X128),s(X125,X126))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X125),'const.option.SOME_1'(s(X125,X126))),s(bool,X127),s(fun(X125,bool),X128))) | s(bool,X129) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f15236,f210])).
fof(f18634,plain,(
  ( ! [X121,X118,X120,X119] : (s('type.option.option'(bool),X121) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X121,bool)) = s(bool,happ(s(fun(X118,bool),X119),s(X118,X120))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X121) | s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | $spl0),
  inference(superposition,[],[f544,f1907])).
fof(f18758,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X95) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94)))),bool)) | s(bool,'T_0') = s(bool,X95) | s(X92,X94) = s(X92,sK7(X94,X93,X92))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f18738])).
fof(f18738,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X95) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94)))),bool)) | s(bool,'T_0') = s(bool,X95) | s(X92,X94) = s(X92,sK7(X94,X93,X92))) ) | $spl0),
  inference(superposition,[],[f15417,f1907])).
fof(f19317,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.SOME_1'(s(X72,X73))),s(bool,X74),s(fun(X72,bool),X75))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X72,bool),X75),s(X72,X73)))))) ) | $spl0),
  inference(forward_demodulation,[],[f18875,f994])).
fof(f18875,plain,(
  ( ! [X74,X72,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X72,bool),X75),s(X72,X73))))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.SOME_1'(s(X72,X73))),s(bool,X74),s(fun(X72,bool),X75)))) ) | $spl0),
  inference(superposition,[],[f8126,f210])).
fof(f19460,plain,(
  ( ! [X158,X161,X159,X160] : (p(s(bool,happ(s(fun(X158,bool),X159),s(X158,X161)))) | s(X158,X160) != s(X158,X161) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X158,bool),X159),s(X158,X160)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f19459,f143])).
fof(f19459,plain,(
  ( ! [X158,X161,X159,X160] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X158,bool),X159),s(X158,X161)))) | s(X158,X160) != s(X158,X161) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X158,bool),X159),s(X158,X160)))))) ) | $spl0),
  inference(forward_demodulation,[],[f19115,f994])).
fof(f19115,plain,(
  ( ! [X158,X161,X159,X160] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | p(s(bool,happ(s(fun(X158,bool),X159),s(X158,X161)))) | s(X158,X160) != s(X158,X161) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X158,bool),X159),s(X158,X160)))))) ) | $spl0),
  inference(superposition,[],[f195,f8126])).
fof(f19563,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))))) )),
  inference(superposition,[],[f620,f208])).
fof(f19566,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))))) )),
  inference(superposition,[],[f620,f994])).
fof(f19648,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) )),
  inference(forward_demodulation,[],[f19559,f208])).
fof(f19559,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3))),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))))) )),
  inference(superposition,[],[f620,f208])).
fof(f19651,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17)))) | ~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))))) )),
  inference(forward_demodulation,[],[f19562,f994])).
fof(f19562,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool))),s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))))) )),
  inference(superposition,[],[f620,f994])).
fof(f19679,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK7(X8,X7,X6)))) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f19623,f143])).
fof(f19623,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK7(X8,X7,X6)))) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f620,f278])).
fof(f19687,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) ) | $spl0),
  inference(condensation,[],[f19686])).
fof(f19686,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'F_0') = s(bool,X49) | s(bool,'T_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,sK7(X48,X47,X46)))) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19685,f153])).
fof(f19685,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'F_0') = s(bool,X49) | ~p(s(bool,X49)) | s(bool,'T_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,sK7(X48,X47,X46)))) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48)))) ) | $spl0),
  inference(forward_demodulation,[],[f19633,f994])).
fof(f19633,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,X49)) | s(bool,'T_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,sK7(X48,X47,X46)))) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl0),
  inference(superposition,[],[f620,f1987])).
fof(f19689,plain,(
  ( ! [X54,X55,X53] : (s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),X54),s(X53,sK7(X55,X54,X53)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X53,bool),X54),s(X53,X55)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f19688,f143])).
fof(f19688,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),X54),s(X53,sK7(X55,X54,X53)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X53,bool),X54),s(X53,X55)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f19635,f994])).
fof(f19635,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),X54),s(X53,sK7(X55,X54,X53)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X53,bool),X54),s(X53,X55)))),bool))) ) | $spl0),
  inference(superposition,[],[f620,f7614])).
fof(f19691,plain,(
  ( ! [X57,X58,X56] : (s(bool,'T_0') = s(bool,happ(s(fun(X56,bool),X57),s(X56,sK7(X58,X57,X56)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f19690,f143])).
fof(f19690,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X56,bool),X57),s(X56,sK7(X58,X57,X56)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))))) ) | $spl0),
  inference(forward_demodulation,[],[f19636,f994])).
fof(f19636,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'T_0') = s(bool,happ(s(fun(X56,bool),X57),s(X56,sK7(X58,X57,X56)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))))) ) | $spl0),
  inference(superposition,[],[f620,f8126])).
fof(f23151,plain,(
  ( ! [X198,X196,X194,X199,X197,X195] : (s(bool,X198) != s(bool,happ(s(fun(X194,bool),X197),s(X194,X195))) | s(bool,'F_0') = s(bool,X198) | s(bool,X199) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X194),'const.option.SOME_1'(s(X194,X195))),s(bool,X196),s(fun(X194,bool),X197))) | s(bool,'F_0') = s(bool,X199)) ) | $spl0),
  inference(superposition,[],[f2590,f210])).
fof(f23207,plain,(
  ( ! [X189,X187,X185,X190,X188,X186] : (s(bool,X189) != s(bool,happ(s(fun(X185,bool),X188),s(X185,X186))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X185),'const.option.SOME_1'(s(X185,X186))),s(bool,X187),s(fun(X185,bool),X188))) | s(bool,X189) = s(bool,X190) | s(bool,'F_0') = s(bool,X190)) ) | $spl0),
  inference(superposition,[],[f2590,f210])).
fof(f23320,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)) = s(X0,sK7(sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f2867,f208])).
fof(f23323,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))) | s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17)) = s(X17,sK7(sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17),sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f2867,f994])).
fof(f23324,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) | s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) = s(X0,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0),X4,X0))) ) | $spl0),
  inference(superposition,[],[f2867,f208])).
fof(f23327,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) | s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) = s(X17,sK7(sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f2867,f994])).
fof(f23455,plain,(
  ( ! [X54,X55,X53] : (s(X53,sK7(X55,X54,X53)) = s(X53,sK7(sK7(X55,X54,X53),X54,X53)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X53,bool),X54),s(X53,X55)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f23454,f143])).
fof(f23454,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s(X53,sK7(X55,X54,X53)) = s(X53,sK7(sK7(X55,X54,X53),X54,X53)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X53,bool),X54),s(X53,X55)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f23401,f994])).
fof(f23401,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X53,sK7(X55,X54,X53)) = s(X53,sK7(sK7(X55,X54,X53),X54,X53)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X53,bool),X54),s(X53,X55)))),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f7614])).
fof(f23457,plain,(
  ( ! [X57,X58,X56] : (s(X56,sK7(X58,X57,X56)) = s(X56,sK7(sK7(X58,X57,X56),X57,X56)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f23456,f143])).
fof(f23456,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,'T_0')) | s(X56,sK7(X58,X57,X56)) = s(X56,sK7(sK7(X58,X57,X56),X57,X56)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))))) ) | $spl0),
  inference(forward_demodulation,[],[f23402,f994])).
fof(f23402,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X56,sK7(X58,X57,X56)) = s(X56,sK7(sK7(X58,X57,X56),X57,X56)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))))) ) | $spl0),
  inference(superposition,[],[f2867,f8126])).
fof(f23615,plain,(
  ( ! [X144,X142,X145,X143,X141] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X141,bool),X144),s(X141,X142))))) | s(bool,X145) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X141),'const.option.SOME_1'(s(X141,X142))),s(bool,X143),s(fun(X141,bool),X144))) | s(bool,'F_0') = s(bool,X145)) ) | $spl0),
  inference(superposition,[],[f1909,f210])).
fof(f23950,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,X141) != s(bool,happ(s(fun(X137,bool),X140),s(X137,X138))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X141))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.SOME_1'(s(X137,X138))),s(bool,X139),s(fun(X137,bool),X140)))) ) | $spl0),
  inference(superposition,[],[f1927,f210])).
fof(f24152,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (s(bool,happ(s(fun(X176,bool),X177),s(X176,X178))) = s(bool,happ(s(fun(X179,bool),X180),s(X179,X181))) | s(X179,X181) = s(X179,sK7(X181,X180,X179)) | s(X176,X178) = s(X176,sK7(X178,X177,X176))) ) | $spl0),
  inference(subsumption_resolution,[],[f24097,f145])).
fof(f24097,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (p(s(bool,'F_0')) | s(bool,happ(s(fun(X176,bool),X177),s(X176,X178))) = s(bool,happ(s(fun(X179,bool),X180),s(X179,X181))) | s(X179,X181) = s(X179,sK7(X181,X180,X179)) | s(X176,X178) = s(X176,sK7(X178,X177,X176))) ) | $spl0),
  inference(superposition,[],[f2869,f1907])).
fof(f24214,plain,(
  ( ! [X208,X206,X204,X209,X207,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207))) | s(bool,X207) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(bool,happ(s(fun(X204,bool),X205),s(X204,X206))),s(fun(X208,bool),X209))) | s(X204,X206) = s(X204,sK7(X206,X205,X204))) ) | $spl0),
  inference(superposition,[],[f443,f1907])).
fof(f24675,plain,(
  ( ! [X282,X288,X285,X287,X283,X284,X286] : (s(bool,X286) = s(bool,happ(s(fun(X282,bool),X285),s(X282,X283))) | s(bool,X286) = s(bool,'const.bool.IN_2'(s(X287,X288),s(fun(X287,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X282),'const.option.SOME_1'(s(X282,X283))),s(bool,X284),s(fun(X282,bool),X285)))) ) | $spl0),
  inference(superposition,[],[f3053,f210])).
fof(f24743,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X214] : (s(bool,'F_0') = s(bool,happ(s(fun(X208,bool),X211),s(X208,X209))) | s(bool,X212) = s(bool,'const.bool.IN_2'(s(X213,X214),s(fun(X213,bool),'const.pred_set.EMPTY_0'))) | s(bool,X212) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.SOME_1'(s(X208,X209))),s(bool,X210),s(fun(X208,bool),X211)))) ) | $spl0),
  inference(superposition,[],[f3053,f210])).
fof(f27110,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,X4) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) )),
  inference(superposition,[],[f532,f208])).
fof(f27113,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X23,bool),X24),s(X23,X25)))) | s(X23,X25) = s(X23,sK7('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK6('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) )),
  inference(superposition,[],[f532,f994])).
fof(f27161,plain,(
  ( ! [X251,X249,X246,X250,X248,X247] : (~p(s(bool,happ(s(fun(bool,bool),X249),s(bool,'F_0')))) | s(bool,happ(s(fun(X246,bool),X247),s(X246,X248))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(bool,happ(s(fun(X246,bool),X247),s(X246,X248))),s(fun(X250,bool),X251)),X249,bool)) | s(X246,X248) = s(X246,sK7(X248,X247,X246))) ) | $spl0),
  inference(superposition,[],[f532,f1907])).
fof(f27271,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X10,X12),s(fun(X13,X10),X14)),X11,X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f27185,f143])).
fof(f27185,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X10,X12),s(fun(X13,X10),X14)),X11,X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f532,f278])).
fof(f27283,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(X118,X120) = s(X118,sK7('const.option.option_CASE_3'(s('type.option.option'(X121),'const.option.NONE_0'),s(X118,X120),s(fun(X121,X118),X122)),X119,X118)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X118,bool),X119),s(X118,X120)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f27282,f143])).
fof(f27282,plain,(
  ( ! [X121,X118,X122,X120,X119] : (~p(s(bool,'T_0')) | s(X118,X120) = s(X118,sK7('const.option.option_CASE_3'(s('type.option.option'(X121),'const.option.NONE_0'),s(X118,X120),s(fun(X121,X118),X122)),X119,X118)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X118,bool),X119),s(X118,X120)))))) ) | $spl0),
  inference(forward_demodulation,[],[f27202,f994])).
fof(f27202,plain,(
  ( ! [X121,X118,X122,X120,X119] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X118,X120) = s(X118,sK7('const.option.option_CASE_3'(s('type.option.option'(X121),'const.option.NONE_0'),s(X118,X120),s(fun(X121,X118),X122)),X119,X118)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X118,bool),X119),s(X118,X120)))))) ) | $spl0),
  inference(superposition,[],[f532,f8126])).
fof(f28875,plain,(
  ( ! [X187,X185,X186,X184,X183] : (~p(s(bool,happ(s(fun(bool,bool),X187),s(bool,happ(s(fun(X183,bool),X186),s(X183,X184)))))) | p(s(bool,happ(s(fun(bool,bool),X187),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X183),'const.option.SOME_1'(s(X183,X184))),s(bool,X185),s(fun(X183,bool),X186)),X187,bool))) )),
  inference(superposition,[],[f617,f210])).
fof(f29056,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X152,bool),X155),s(X152,X153))))) | s(bool,X156) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.SOME_1'(s(X152,X153))),s(bool,X154),s(fun(X152,bool),X155))) | s(bool,'F_0') = s(bool,X156)) ) | $spl0),
  inference(superposition,[],[f3984,f210])).
fof(f29196,plain,(
  ( ! [X191,X189,X187,X190,X188] : (s(bool,X191) = s(bool,happ(s(fun(X187,bool),X190),s(X187,X188))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),'const.option.SOME_1'(s(X187,X188))),s(bool,X189),s(fun(X187,bool),X190)))) ) | $spl0),
  inference(superposition,[],[f3984,f210])).
fof(f29273,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(bool,'F_0') = s(bool,happ(s(fun(X152,bool),X155),s(X152,X153))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X156))) | s(bool,X156) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.SOME_1'(s(X152,X153))),s(bool,X154),s(fun(X152,bool),X155)))) ) | $spl0),
  inference(superposition,[],[f3984,f210])).
fof(f30818,plain,(
  ( ! [X441,X438,X440,X439] : (~p(s(bool,happ(s(fun(X438,bool),X439),s(X438,X440)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X441))) | s(bool,X441) = s(bool,happ(s(fun(X438,bool),X439),s(X438,sK7(X440,X439,X438))))) ) | $spl0),
  inference(subsumption_resolution,[],[f30145,f145])).
fof(f30145,plain,(
  ( ! [X441,X438,X440,X439] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X438,bool),X439),s(X438,X440)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X441))) | s(bool,X441) = s(bool,happ(s(fun(X438,bool),X439),s(X438,sK7(X440,X439,X438))))) ) | $spl0),
  inference(superposition,[],[f197,f3984])).
fof(f30920,plain,(
  ( ! [X327,X333,X329,X331,X332,X328,X330] : (s(bool,'T_0') != s(bool,happ(s(fun(X327,bool),X330),s(X327,X328))) | s(bool,X331) = s(bool,'const.bool.IN_2'(s(X332,X333),s(fun(X332,bool),'const.pred_set.EMPTY_0'))) | s(bool,X331) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X327),'const.option.SOME_1'(s(X327,X328))),s(bool,X329),s(fun(X327,bool),X330)))) ) | $spl0),
  inference(superposition,[],[f25483,f210])).
fof(f31426,plain,(
  ( ! [X231,X235,X233,X234,X232] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X234),s(fun(bool,bool),X235))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X235),s(bool,happ(s(fun(X231,bool),X232),s(X231,X233))))) | s(X231,X233) = s(X231,sK7(X233,X232,X231))) ) | $spl0),
  inference(superposition,[],[f657,f1907])).
fof(f31587,plain,(
  ( ! [X111,X109,X112,X110,X113] : (~p(s(bool,happ(s(fun(bool,bool),X113),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X113),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.SOME_1'(s(X109,X110))),s(bool,X111),s(fun(X109,bool),X112)),X113,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X109,bool),X112),s(X109,X110)))) )),
  inference(superposition,[],[f617,f657])).
fof(f31680,plain,(
  ( ! [X580,X582,X581,X583,X579] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X583))) | s(bool,X583) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X579),'const.option.SOME_1'(s(X579,X580))),s(bool,X581),s(fun(X579,bool),X582))) | s(bool,'F_0') = s(bool,happ(s(fun(X579,bool),X582),s(X579,X580)))) )),
  inference(superposition,[],[f193,f657])).
fof(f31697,plain,(
  ( ! [X677,X679,X675,X676,X678] : (~p(s(bool,happ(s(fun(bool,bool),X679),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X679),s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X675),'const.option.SOME_1'(s(X675,X676))),s(bool,X677),s(fun(X675,bool),X678)),X679,bool)))) | s(bool,'F_0') = s(bool,happ(s(fun(X675,bool),X678),s(X675,X676)))) )),
  inference(superposition,[],[f620,f657])).
fof(f31700,plain,(
  ( ! [X693,X689,X691,X692,X690] : (~p(s(bool,happ(s(fun(bool,bool),X693),s(bool,'T_0')))) | s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X689),'const.option.SOME_1'(s(X689,X690))),s(bool,X691),s(fun(X689,bool),X692)),X693,bool)) = s(bool,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X689),'const.option.SOME_1'(s(X689,X690))),s(bool,X691),s(fun(X689,bool),X692)),X693,bool),X693,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X689,bool),X692),s(X689,X690)))) ) | $spl0),
  inference(superposition,[],[f2867,f657])).
fof(f31820,plain,(
  ( ! [X175,X173,X176,X174,X172] : (s(bool,'T_0') = s(bool,X176) | s(bool,X172) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.SOME_1'(s(X173,X174))),s(bool,X172),s(fun(X173,bool),X175))) | s(bool,'F_0') = s(bool,happ(s(fun(X173,bool),X175),s(X173,X174))) | s(bool,X172) = s(bool,X176)) ) | $spl0),
  inference(forward_demodulation,[],[f31494,f994])).
fof(f31494,plain,(
  ( ! [X175,X173,X176,X174,X172] : (s(bool,X172) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.SOME_1'(s(X173,X174))),s(bool,X172),s(fun(X173,bool),X175))) | s(bool,'F_0') = s(bool,happ(s(fun(X173,bool),X175),s(X173,X174))) | s(bool,X176) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X172) = s(bool,X176)) ) | $spl0),
  inference(superposition,[],[f657,f8334])).
fof(f31843,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62) | s(bool,'F_0') = s(bool,happ(s(fun(X58,bool),X61),s(X58,X59)))) )),
  inference(subsumption_resolution,[],[f31577,f143])).
fof(f31577,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X62) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62) | s(bool,'F_0') = s(bool,happ(s(fun(X58,bool),X61),s(X58,X59)))) )),
  inference(superposition,[],[f281,f657])).
fof(f31851,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s(bool,X177) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.SOME_1'(s(X173,X174))),s(bool,X175),s(fun(X173,bool),X176))) | s(bool,X177) = s(bool,X178) | s(bool,'F_0') = s(bool,X178) | s(bool,'F_0') = s(bool,happ(s(fun(X173,bool),X176),s(X173,X174)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31600,f143])).
fof(f31600,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (~p(s(bool,'T_0')) | s(bool,X177) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.SOME_1'(s(X173,X174))),s(bool,X175),s(fun(X173,bool),X176))) | s(bool,X177) = s(bool,X178) | s(bool,'F_0') = s(bool,X178) | s(bool,'F_0') = s(bool,happ(s(fun(X173,bool),X176),s(X173,X174)))) ) | $spl0),
  inference(superposition,[],[f2191,f657])).
fof(f31902,plain,(
  ( ! [X606,X609,X605,X607,X608] : (s(bool,happ(s(fun(X605,bool),X608),s(X605,X606))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X605),'const.option.SOME_1'(s(X605,X606))),s(bool,X607),s(fun(X605,bool),X608)),X609,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X609),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X605,bool),X608),s(X605,X606)))) )),
  inference(forward_demodulation,[],[f31685,f210])).
fof(f31685,plain,(
  ( ! [X606,X609,X605,X607,X608] : (~p(s(bool,happ(s(fun(bool,bool),X609),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X605),'const.option.SOME_1'(s(X605,X606))),s(bool,X607),s(fun(X605,bool),X608))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X605),'const.option.SOME_1'(s(X605,X606))),s(bool,X607),s(fun(X605,bool),X608)),X609,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X605,bool),X608),s(X605,X606)))) )),
  inference(superposition,[],[f196,f657])).
fof(f31905,plain,(
  ( ! [X685,X687,X688,X684,X686] : (s(bool,happ(s(fun(X684,bool),X687),s(X684,X685))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X684),'const.option.SOME_1'(s(X684,X685))),s(bool,X686),s(fun(X684,bool),X687)),X688,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X688),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X684,bool),X687),s(X684,X685)))) ) | $spl0),
  inference(forward_demodulation,[],[f31699,f210])).
fof(f31699,plain,(
  ( ! [X685,X687,X688,X684,X686] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X688),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X684),'const.option.SOME_1'(s(X684,X685))),s(bool,X686),s(fun(X684,bool),X687))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X684),'const.option.SOME_1'(s(X684,X685))),s(bool,X686),s(fun(X684,bool),X687)),X688,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X684,bool),X687),s(X684,X685)))) ) | $spl0),
  inference(superposition,[],[f1907,f657])).
fof(f31906,plain,(
  ( ! [X697,X695,X696,X698,X694] : (s(bool,happ(s(fun(X694,bool),X697),s(X694,X695))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.SOME_1'(s(X694,X695))),s(bool,X696),s(fun(X694,bool),X697)),X698,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X698),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X694,bool),X697),s(X694,X695)))) ) | $spl0),
  inference(forward_demodulation,[],[f31701,f210])).
fof(f31701,plain,(
  ( ! [X697,X695,X696,X698,X694] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X698),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.SOME_1'(s(X694,X695))),s(bool,X696),s(fun(X694,bool),X697))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.SOME_1'(s(X694,X695))),s(bool,X696),s(fun(X694,bool),X697)),X698,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X694,bool),X697),s(X694,X695)))) ) | $spl0),
  inference(superposition,[],[f2868,f657])).
fof(f32494,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (~p(s(bool,happ(s(fun(bool,bool),X291),s(bool,'F_0')))) | s(bool,happ(s(fun(X288,bool),X289),s(X288,X290))) = s(bool,sK7(happ(s(fun(X288,bool),X289),s(X288,X290)),'const.option.option_CASE_3'(s('type.option.option'(X292),'const.option.NONE_0'),s(fun(bool,bool),X291),s(fun(X292,fun(bool,bool)),X293)),bool)) | s(X288,X290) = s(X288,sK7(X290,X289,X288))) ) | $spl0),
  inference(superposition,[],[f519,f1907])).
fof(f32562,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X24) = s(X23,sK7(sK6('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23)) | ~p(s(bool,happ(s(fun(X23,bool),X25),s(X23,X24))))) )),
  inference(forward_demodulation,[],[f32442,f994])).
fof(f32442,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X23,bool),X25),s(X23,X24)))) | s(X23,sK6('const.option.SOME_1'(s(X23,X24)),X23)) = s(X23,sK7(sK6('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23))) )),
  inference(superposition,[],[f519,f994])).
fof(f32594,plain,(
  ( ! [X261,X263,X265,X260,X262,X264,X266] : (s(bool,happ(s(fun(X260,bool),X263),s(X260,X261))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X260),'const.option.SOME_1'(s(X260,X261))),s(bool,X262),s(fun(X260,bool),X263)),'const.option.option_CASE_3'(s('type.option.option'(X265),'const.option.NONE_0'),s(fun(bool,bool),X264),s(fun(X265,fun(bool,bool)),X266)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X264),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X260,bool),X263),s(X260,X261)))) )),
  inference(forward_demodulation,[],[f32489,f210])).
fof(f32489,plain,(
  ( ! [X261,X263,X265,X260,X262,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),X264),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X260),'const.option.SOME_1'(s(X260,X261))),s(bool,X262),s(fun(X260,bool),X263))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X260),'const.option.SOME_1'(s(X260,X261))),s(bool,X262),s(fun(X260,bool),X263)),'const.option.option_CASE_3'(s('type.option.option'(X265),'const.option.NONE_0'),s(fun(bool,bool),X264),s(fun(X265,fun(bool,bool)),X266)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X260,bool),X263),s(X260,X261)))) )),
  inference(superposition,[],[f519,f657])).
fof(f32623,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s(X10,X12) = s(X10,sK7(X12,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X10,bool),X11),s(fun(X13,fun(X10,bool)),X14)),X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f32521,f143])).
fof(f32521,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK7(X12,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X10,bool),X11),s(fun(X13,fun(X10,bool)),X14)),X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f519,f278])).
fof(f32638,plain,(
  ( ! [X140,X138,X136,X139,X137] : (s(X136,X138) = s(X136,sK7(X138,'const.option.option_CASE_3'(s('type.option.option'(X139),'const.option.NONE_0'),s(fun(X136,bool),X137),s(fun(X139,fun(X136,bool)),X140)),X136)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X136,bool),X137),s(X136,X138)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f32637,f143])).
fof(f32637,plain,(
  ( ! [X140,X138,X136,X139,X137] : (~p(s(bool,'T_0')) | s(X136,X138) = s(X136,sK7(X138,'const.option.option_CASE_3'(s('type.option.option'(X139),'const.option.NONE_0'),s(fun(X136,bool),X137),s(fun(X139,fun(X136,bool)),X140)),X136)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X136,bool),X137),s(X136,X138)))))) ) | $spl0),
  inference(forward_demodulation,[],[f32541,f994])).
fof(f32541,plain,(
  ( ! [X140,X138,X136,X139,X137] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X136,X138) = s(X136,sK7(X138,'const.option.option_CASE_3'(s('type.option.option'(X139),'const.option.NONE_0'),s(fun(X136,bool),X137),s(fun(X139,fun(X136,bool)),X140)),X136)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X136,bool),X137),s(X136,X138)))))) ) | $spl0),
  inference(superposition,[],[f519,f8126])).
fof(f32561,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))) = s(X15,sK7(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15)) | ~p(s(bool,happ(s(fun(X15,bool),X20),s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))))))) )),
  inference(forward_demodulation,[],[f32441,f211])).
fof(f32441,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X15,bool),X20),s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19)))))) | s(X15,happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19))) = s(X15,sK7(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15))) )),
  inference(superposition,[],[f519,f211])).
fof(f23326,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) | s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) = s(X11,sK7(sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11),X16,X11))) ) | $spl0),
  inference(superposition,[],[f2867,f211])).
fof(f19565,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))))) )),
  inference(superposition,[],[f620,f211])).
fof(f2859,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) | s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) ) | $spl0),
  inference(forward_demodulation,[],[f2771,f211])).
fof(f2771,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | $spl0),
  inference(superposition,[],[f1907,f211])).
fof(f3106,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) | s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) ) | $spl0),
  inference(forward_demodulation,[],[f3065,f211])).
fof(f3065,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | $spl0),
  inference(superposition,[],[f2868,f211])).
fof(f973,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36)) | ~p(s(bool,happ(s(fun(X36,bool),X41),s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))))))) )),
  inference(forward_demodulation,[],[f940,f211])).
fof(f940,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,happ(s(fun(X36,bool),X41),s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40)))))) | s(X36,happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) )),
  inference(superposition,[],[f196,f211])).
fof(f32560,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))) = s(X7,sK7('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7)) | ~p(s(bool,happ(s(fun(X7,bool),X12),s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))))))) )),
  inference(forward_demodulation,[],[f32440,f210])).
fof(f32440,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),X12),s(X7,happ(s(fun(X8,X7),X11),s(X8,X9)))))) | s(X7,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11))) = s(X7,sK7('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7))) )),
  inference(superposition,[],[f519,f210])).
fof(f23325,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) | s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) = s(X5,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5),X10,X5))) ) | $spl0),
  inference(superposition,[],[f2867,f210])).
fof(f19564,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))))) )),
  inference(superposition,[],[f620,f210])).
fof(f2858,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) ) | $spl0),
  inference(forward_demodulation,[],[f2770,f210])).
fof(f2770,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | $spl0),
  inference(superposition,[],[f1907,f210])).
fof(f3105,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) ) | $spl0),
  inference(forward_demodulation,[],[f3064,f210])).
fof(f3064,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | $spl0),
  inference(superposition,[],[f2868,f210])).
fof(f693,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29)) | ~p(s(bool,happ(s(fun(X29,bool),X34),s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))))))) )),
  inference(forward_demodulation,[],[f663,f210])).
fof(f663,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,happ(s(fun(X29,bool),X34),s(X29,happ(s(fun(X30,X29),X33),s(X30,X31)))))) | s(X29,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) )),
  inference(superposition,[],[f196,f210])).
fof(f679,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,happ(s(fun(X106,bool),happ(s(fun(X107,fun(X106,bool)),X110),s(X107,X108))),s(X106,X111)))) | s(X106,X111) = s(X106,sK7(X111,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.SOME_1'(s(X107,X108))),s(fun(X106,bool),X109),s(fun(X107,fun(X106,bool)),X110)),X106))) )),
  inference(superposition,[],[f196,f210])).
fof(f702,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (~p(s(bool,happ(s(fun(X100,bool),happ(s(fun(X101,fun(X100,bool)),X104),s(X101,X102))),s(X100,X105)))) | p(s(bool,happ(s(fun(X100,bool),happ(s(fun(X101,fun(X100,bool)),X104),s(X101,X102))),s(X100,sK7(X105,'const.option.option_CASE_3'(s('type.option.option'(X101),'const.option.SOME_1'(s(X101,X102))),s(fun(X100,bool),X103),s(fun(X101,fun(X100,bool)),X104)),X100)))))) )),
  inference(forward_demodulation,[],[f678,f210])).
fof(f678,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (p(s(bool,happ(s(fun(X100,bool),happ(s(fun(X101,fun(X100,bool)),X104),s(X101,X102))),s(X100,sK7(X105,'const.option.option_CASE_3'(s('type.option.option'(X101),'const.option.SOME_1'(s(X101,X102))),s(fun(X100,bool),X103),s(fun(X101,fun(X100,bool)),X104)),X100))))) | ~p(s(bool,happ(s(fun(X100,bool),'const.option.option_CASE_3'(s('type.option.option'(X101),'const.option.SOME_1'(s(X101,X102))),s(fun(X100,bool),X103),s(fun(X101,fun(X100,bool)),X104))),s(X100,X105))))) )),
  inference(superposition,[],[f197,f210])).
fof(f2766,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f1907,f210])).
fof(f3060,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f2868,f210])).
fof(f19649,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5)))) | ~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))))) )),
  inference(forward_demodulation,[],[f19560,f210])).
fof(f19560,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9))),s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))))) )),
  inference(superposition,[],[f620,f210])).
fof(f23321,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))) | s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5)) = s(X5,sK7(sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f2867,f210])).
fof(f27111,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X8,fun(X7,bool)),X11),s(X8,X9))),s(X7,X12)))) | s(X7,X12) = s(X7,sK7('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) )),
  inference(superposition,[],[f532,f210])).
fof(f966,plain,(
  ( ! [X177,X175,X178,X176,X174,X179] : (~p(s(bool,happ(s(fun(X174,bool),'const.option.option_CASE_3'(s('type.option.option'(X175),X176),s(fun(X174,bool),X177),s(fun(X175,fun(X174,bool)),X178))),s(X174,X179)))) | s(X174,X179) = s(X174,sK7(X179,happ(s(fun(fun(X175,fun(X174,bool)),fun(X174,bool)),happ(s(fun(fun(X174,bool),fun(fun(X175,fun(X174,bool)),fun(X174,bool))),happ(s(fun('type.option.option'(X175),fun(fun(X174,bool),fun(fun(X175,fun(X174,bool)),fun(X174,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X175),X176))),s(fun(X174,bool),X177))),s(fun(X175,fun(X174,bool)),X178)),X174))) )),
  inference(superposition,[],[f196,f211])).
fof(f990,plain,(
  ( ! [X173,X171,X169,X172,X170,X168] : (~p(s(bool,happ(s(fun(X168,bool),'const.option.option_CASE_3'(s('type.option.option'(X169),X170),s(fun(X168,bool),X171),s(fun(X169,fun(X168,bool)),X172))),s(X168,X173)))) | p(s(bool,happ(s(fun(X168,bool),'const.option.option_CASE_3'(s('type.option.option'(X169),X170),s(fun(X168,bool),X171),s(fun(X169,fun(X168,bool)),X172))),s(X168,sK7(X173,happ(s(fun(fun(X169,fun(X168,bool)),fun(X168,bool)),happ(s(fun(fun(X168,bool),fun(fun(X169,fun(X168,bool)),fun(X168,bool))),happ(s(fun('type.option.option'(X169),fun(fun(X168,bool),fun(fun(X169,fun(X168,bool)),fun(X168,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X169),X170))),s(fun(X168,bool),X171))),s(fun(X169,fun(X168,bool)),X172)),X168)))))) )),
  inference(forward_demodulation,[],[f965,f211])).
fof(f965,plain,(
  ( ! [X173,X171,X169,X172,X170,X168] : (p(s(bool,happ(s(fun(X168,bool),'const.option.option_CASE_3'(s('type.option.option'(X169),X170),s(fun(X168,bool),X171),s(fun(X169,fun(X168,bool)),X172))),s(X168,sK7(X173,happ(s(fun(fun(X169,fun(X168,bool)),fun(X168,bool)),happ(s(fun(fun(X168,bool),fun(fun(X169,fun(X168,bool)),fun(X168,bool))),happ(s(fun('type.option.option'(X169),fun(fun(X168,bool),fun(fun(X169,fun(X168,bool)),fun(X168,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X169),X170))),s(fun(X168,bool),X171))),s(fun(X169,fun(X168,bool)),X172)),X168))))) | ~p(s(bool,happ(s(fun(X168,bool),happ(s(fun(fun(X169,fun(X168,bool)),fun(X168,bool)),happ(s(fun(fun(X168,bool),fun(fun(X169,fun(X168,bool)),fun(X168,bool))),happ(s(fun('type.option.option'(X169),fun(fun(X168,bool),fun(fun(X169,fun(X168,bool)),fun(X168,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X169),X170))),s(fun(X168,bool),X171))),s(fun(X169,fun(X168,bool)),X172))),s(X168,X173))))) )),
  inference(superposition,[],[f197,f211])).
fof(f2767,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f1907,f211])).
fof(f3061,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f2868,f211])).
fof(f19650,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11)))) | ~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))))) )),
  inference(forward_demodulation,[],[f19561,f211])).
fof(f19561,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16)))) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15))),s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))))) )),
  inference(superposition,[],[f620,f211])).
fof(f23322,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16)))) | s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11)) = s(X11,sK7(sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f2867,f211])).
fof(f27112,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X15,bool),'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(fun(X15,bool),X18),s(fun(X16,fun(X15,bool)),X19))),s(X15,X20)))) | s(X15,X20) = s(X15,sK7('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) )),
  inference(superposition,[],[f532,f211])).
fof(f524,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | s(bool,'F_0') = s(bool,sK7('F_0',X7,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f196,f146])).
fof(f617,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X0,X1,bool))) )),
  inference(superposition,[],[f197,f146])).
fof(f829,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,X19)))) | p(s(bool,happ(s(fun(bool,bool),X20),s(bool,X21)))) | s(bool,'F_0') != s(bool,X21) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f195,f146])).
fof(f830,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X23),s(bool,X24)))) | s(bool,X22) != s(bool,X24) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f195,f146])).
fof(f1172,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,X31) | ~p(s(bool,happ(s(fun(bool,bool),X30),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X30),s(bool,X31)))) | s(bool,'F_0') = s(bool,X29)) )),
  inference(forward_demodulation,[],[f1150,f994])).
fof(f1150,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),X30),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X30),s(bool,X31)))) | s(bool,X31) != s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s(bool,'F_0') = s(bool,X29)) )),
  inference(superposition,[],[f195,f1054])).
fof(f1300,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,happ(s(fun(bool,bool),X99),s(bool,X98)))) | p(s(bool,happ(s(fun(bool,bool),X99),s(bool,X100)))) | s(bool,X97) != s(bool,X100) | s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f195,f278])).
fof(f1301,plain,(
  ( ! [X103,X101,X102] : (~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,X102)))) | s(bool,X101) = s(bool,sK7(X101,X103,bool)) | s(bool,'T_0') = s(bool,X102) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f196,f278])).
fof(f1316,plain,(
  ( ! [X161,X159,X160] : (p(s(bool,happ(s(fun(bool,bool),X160),s(bool,X161)))) | ~p(s(bool,happ(s(fun(bool,bool),X160),s(bool,X159)))) | s(bool,'T_0') = s(bool,X161) | s(bool,'T_0') = s(bool,sK7(X159,X160,bool))) )),
  inference(superposition,[],[f197,f278])).
fof(f1388,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,X56)))) | p(s(bool,happ(s(fun(bool,bool),X57),s(bool,X58)))) | s(bool,'T_0') != s(bool,X58) | s(bool,X56) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f195,f278])).
fof(f1389,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,X60)))) | s(bool,'T_0') = s(bool,sK7('T_0',X61,bool)) | s(bool,X60) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f196,f278])).
fof(f1431,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X93)))) | s(bool,X91) != s(bool,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f195,f278])).
fof(f1447,plain,(
  ( ! [X154,X152,X153] : (p(s(bool,happ(s(fun(bool,bool),X153),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X153),s(bool,X152)))) | s(bool,X154) = s(bool,sK7(X152,X153,bool)) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f197,f278])).
fof(f1918,plain,(
  ( ! [X107,X106] : (p(s(bool,happ(s(fun(bool,bool),X107),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X107),s(bool,X106)))) | s(bool,'F_0') = s(bool,sK7(X106,X107,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f1836,f778])).
fof(f1836,plain,(
  ( ! [X107,X106] : (p(s(bool,happ(s(fun(bool,bool),X107),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))))) | ~p(s(bool,happ(s(fun(bool,bool),X107),s(bool,X106)))) | s(bool,'F_0') = s(bool,sK7(X106,X107,bool))) ) | $spl0),
  inference(superposition,[],[f197,f1191])).
fof(f1929,plain,(
  ( ! [X45,X43,X44] : (s(bool,'T_0') != s(bool,X45) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X43)))) | p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X45)))) | s(bool,'F_0') = s(bool,X43)) ) | $spl0),
  inference(forward_demodulation,[],[f1864,f778])).
fof(f1864,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X43)))) | p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X45)))) | s(bool,X45) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'F_0') = s(bool,X43)) ) | $spl0),
  inference(superposition,[],[f195,f1191])).
fof(f1930,plain,(
  ( ! [X47,X46] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X47,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X46)))) | s(bool,'F_0') = s(bool,X46)) ) | $spl0),
  inference(forward_demodulation,[],[f1865,f778])).
fof(f1865,plain,(
  ( ! [X47,X46] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X46)))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X47,bool)) | s(bool,'F_0') = s(bool,X46)) ) | $spl0),
  inference(superposition,[],[f196,f1191])).
fof(f2107,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,happ(s(fun(bool,bool),X124),s(bool,X123)))) | p(s(bool,happ(s(fun(bool,bool),X124),s(bool,X125)))) | s(bool,X122) != s(bool,X125) | s(bool,'F_0') = s(bool,X123) | s(bool,'F_0') = s(bool,X122)) ) | $spl0),
  inference(superposition,[],[f195,f1778])).
fof(f2108,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,happ(s(fun(bool,bool),X128),s(bool,X127)))) | s(bool,X126) = s(bool,sK7(X126,X128,bool)) | s(bool,'F_0') = s(bool,X127) | s(bool,'F_0') = s(bool,X126)) ) | $spl0),
  inference(superposition,[],[f196,f1778])).
fof(f2124,plain,(
  ( ! [X187,X188,X186] : (p(s(bool,happ(s(fun(bool,bool),X187),s(bool,X188)))) | ~p(s(bool,happ(s(fun(bool,bool),X187),s(bool,X186)))) | s(bool,'F_0') = s(bool,X188) | s(bool,'F_0') = s(bool,sK7(X186,X187,bool))) ) | $spl0),
  inference(superposition,[],[f197,f1778])).
fof(f2216,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,happ(s(fun(bool,bool),X74),s(bool,X73)))) | p(s(bool,happ(s(fun(bool,bool),X74),s(bool,X75)))) | s(bool,'F_0') != s(bool,X75) | s(bool,X73) = s(bool,X76) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f195,f1778])).
fof(f2217,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,happ(s(fun(bool,bool),X78),s(bool,X77)))) | s(bool,'F_0') = s(bool,sK7('F_0',X78,bool)) | s(bool,X77) = s(bool,X79) | s(bool,'F_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f196,f1778])).
fof(f2266,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,happ(s(fun(bool,bool),X105),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X105),s(bool,X106)))) | s(bool,X104) != s(bool,X106) | s(bool,X104) = s(bool,X107) | s(bool,'F_0') = s(bool,X107)) ) | $spl0),
  inference(superposition,[],[f195,f1778])).
fof(f2283,plain,(
  ( ! [X167,X169,X168] : (p(s(bool,happ(s(fun(bool,bool),X168),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X168),s(bool,X167)))) | s(bool,X169) = s(bool,sK7(X167,X168,bool)) | s(bool,'F_0') = s(bool,X169)) ) | $spl0),
  inference(superposition,[],[f197,f1778])).
fof(f7684,plain,(
  ( ! [X80,X81] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X81,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X81),s(bool,X80)))) | s(bool,'F_0') = s(bool,X80)) ) | $spl0),
  inference(forward_demodulation,[],[f7568,f994])).
fof(f7568,plain,(
  ( ! [X80,X81] : (~p(s(bool,happ(s(fun(bool,bool),X81),s(bool,X80)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X81,bool)) | s(bool,'F_0') = s(bool,X80)) ) | $spl0),
  inference(superposition,[],[f196,f7381])).
fof(f15098,plain,(
  ( ! [X220,X219,X221] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X220,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X220),s(bool,X219)))) | s(bool,X219) = s(bool,X221) | s(bool,'T_0') = s(bool,X221)) ) | $spl0),
  inference(forward_demodulation,[],[f14139,f994])).
fof(f14139,plain,(
  ( ! [X220,X219,X221] : (~p(s(bool,happ(s(fun(bool,bool),X220),s(bool,X219)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X220,bool)) | s(bool,X219) = s(bool,X221) | s(bool,'T_0') = s(bool,X221)) ) | $spl0),
  inference(superposition,[],[f196,f8334])).
fof(f15470,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f524,f208])).
fof(f15473,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'F_0') = s(bool,sK7('F_0',sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f524,f994])).
fof(f15579,plain,(
  ( ! [X39,X40] : (s(bool,'F_0') = s(bool,sK7('F_0',X39,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,X40)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f15578,f143])).
fof(f15578,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X39,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,X40)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f15532,f994])).
fof(f15532,plain,(
  ( ! [X39,X40] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'F_0') = s(bool,sK7('F_0',X39,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,X40)))),bool))) ) | $spl0),
  inference(superposition,[],[f524,f7614])).
fof(f18190,plain,(
  ( ! [X177,X175,X176] : (~p(s(bool,happ(s(fun(bool,bool),X176),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X176),s(bool,X177)))) | s(bool,X177) != s(bool,sK6(X175,bool)) | s('type.option.option'(bool),X175) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X175)) )),
  inference(superposition,[],[f195,f543])).
fof(f19463,plain,(
  ( ! [X175,X174] : (s(bool,'F_0') = s(bool,sK7('F_0',X174,bool)) | s(bool,'T_0') = s(bool,X175) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X174),s(bool,X175)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f19462,f143])).
fof(f19462,plain,(
  ( ! [X175,X174] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X174,bool)) | s(bool,'T_0') = s(bool,X175) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X174),s(bool,X175)))))) ) | $spl0),
  inference(forward_demodulation,[],[f19120,f994])).
fof(f19120,plain,(
  ( ! [X175,X174] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'F_0') = s(bool,sK7('F_0',X174,bool)) | s(bool,'T_0') = s(bool,X175) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X174),s(bool,X175)))))) ) | $spl0),
  inference(superposition,[],[f524,f8126])).
fof(f19496,plain,(
  ( ! [X215,X213,X214] : (~p(s(bool,happ(s(fun(bool,bool),X214),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X214),s(bool,X215)))) | s(bool,X213) != s(bool,X215) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X213)))) ) | $spl0),
  inference(forward_demodulation,[],[f19148,f994])).
fof(f19148,plain,(
  ( ! [X215,X213,X214] : (~p(s(bool,happ(s(fun(bool,bool),X214),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | p(s(bool,happ(s(fun(bool,bool),X214),s(bool,X215)))) | s(bool,X213) != s(bool,X215) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X213)))) ) | $spl0),
  inference(superposition,[],[f195,f8126])).
fof(f19511,plain,(
  ( ! [X263,X262] : (p(s(bool,happ(s(fun(bool,bool),X263),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X263),s(bool,X262)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X262,X263,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f19167,f994])).
fof(f19167,plain,(
  ( ! [X263,X262] : (p(s(bool,happ(s(fun(bool,bool),X263),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | ~p(s(bool,happ(s(fun(bool,bool),X263),s(bool,X262)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X262,X263,bool))))) ) | $spl0),
  inference(superposition,[],[f197,f8126])).
fof(f19554,plain,(
  ( ! [X185,X186,X184] : (s(bool,'T_0') != s(bool,X186) | ~p(s(bool,happ(s(fun(bool,bool),X185),s(bool,X184)))) | p(s(bool,happ(s(fun(bool,bool),X185),s(bool,X186)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | $spl0),
  inference(forward_demodulation,[],[f19264,f994])).
fof(f19264,plain,(
  ( ! [X185,X186,X184] : (~p(s(bool,happ(s(fun(bool,bool),X185),s(bool,X184)))) | p(s(bool,happ(s(fun(bool,bool),X185),s(bool,X186)))) | s(bool,X186) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | $spl0),
  inference(superposition,[],[f195,f8126])).
fof(f19555,plain,(
  ( ! [X187,X188] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X188,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X188),s(bool,X187)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187)))) ) | $spl0),
  inference(forward_demodulation,[],[f19265,f994])).
fof(f19265,plain,(
  ( ! [X187,X188] : (~p(s(bool,happ(s(fun(bool,bool),X188),s(bool,X187)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X188,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187)))) ) | $spl0),
  inference(superposition,[],[f196,f8126])).
fof(f19569,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X26)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X27),s(bool,sK7(X25,X27,bool)))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f620,f278])).
fof(f19573,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X39),s(bool,sK7(X37,X39,bool)))) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f620,f1778])).
fof(f19599,plain,(
  ( ! [X111,X110] : (~p(s(bool,happ(s(fun(bool,bool),X111),s(bool,X110)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X111),s(bool,sK7('F_0',X111,bool)))) | s(bool,'T_0') = s(bool,X110)) )),
  inference(superposition,[],[f620,f146])).
fof(f19608,plain,(
  ( ! [X134,X133] : (~p(s(bool,happ(s(fun(bool,bool),X134),s(bool,X133)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X134),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X134,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X133)))) ) | $spl0),
  inference(superposition,[],[f620,f8126])).
fof(f19609,plain,(
  ( ! [X136,X135,X137] : (~p(s(bool,happ(s(fun(bool,bool),X136),s(bool,X135)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X136),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X136,bool)))) | s(bool,X135) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) ) | $spl0),
  inference(superposition,[],[f620,f8334])).
fof(f19670,plain,(
  ( ! [X90,X91,X89] : (s(bool,'T_0') = s(bool,X91) | ~p(s(bool,happ(s(fun(bool,bool),X90),s(bool,X89)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X90),s(bool,sK7('T_0',X90,bool)))) | s(bool,X89) = s(bool,X91)) ) | $spl0),
  inference(forward_demodulation,[],[f19592,f994])).
fof(f19592,plain,(
  ( ! [X90,X91,X89] : (~p(s(bool,happ(s(fun(bool,bool),X90),s(bool,X89)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X90),s(bool,sK7('T_0',X90,bool)))) | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X89) = s(bool,X91)) ) | $spl0),
  inference(superposition,[],[f620,f8334])).
fof(f19675,plain,(
  ( ! [X138,X139] : (s(bool,'F_0') = s(bool,X138) | ~p(s(bool,happ(s(fun(bool,bool),X139),s(bool,X138)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X139),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X139,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f19610,f994])).
fof(f19610,plain,(
  ( ! [X138,X139] : (~p(s(bool,happ(s(fun(bool,bool),X139),s(bool,X138)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X139),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X139,bool)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X138)),bool))) ) | $spl0),
  inference(superposition,[],[f620,f7614])).
fof(f21609,plain,(
  ( ! [X167,X165,X166] : (s(bool,X165) != s(bool,X167) | ~p(s(bool,happ(s(fun(bool,bool),X166),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X166),s(bool,X167)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165)))) ) | $spl0),
  inference(forward_demodulation,[],[f21532,f994])).
fof(f21532,plain,(
  ( ! [X167,X165,X166] : (~p(s(bool,happ(s(fun(bool,bool),X166),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X166),s(bool,X167)))) | s(bool,X167) != s(bool,sK6('const.option.SOME_1'(s(bool,X165)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165)))) ) | $spl0),
  inference(superposition,[],[f195,f8256])).
fof(f23330,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X26)))) | s(bool,sK7(X25,X27,bool)) = s(bool,sK7(sK7(X25,X27,bool),X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f2867,f278])).
fof(f23334,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,sK7(X37,X39,bool)) = s(bool,sK7(sK7(X37,X39,bool),X39,bool)) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f2867,f1778])).
fof(f23361,plain,(
  ( ! [X112,X113] : (~p(s(bool,happ(s(fun(bool,bool),X113),s(bool,X112)))) | s(bool,sK7('F_0',X113,bool)) = s(bool,sK7(sK7('F_0',X113,bool),X113,bool)) | s(bool,'T_0') = s(bool,X112)) ) | $spl0),
  inference(superposition,[],[f2867,f146])).
fof(f23371,plain,(
  ( ! [X138,X137] : (~p(s(bool,happ(s(fun(bool,bool),X138),s(bool,X137)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X138,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X138,bool),X138,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X137)))) ) | $spl0),
  inference(superposition,[],[f2867,f8126])).
fof(f23372,plain,(
  ( ! [X140,X141,X139] : (~p(s(bool,happ(s(fun(bool,bool),X140),s(bool,X139)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X140,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X140,bool),X140,bool)) | s(bool,X139) = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) ) | $spl0),
  inference(superposition,[],[f2867,f8334])).
fof(f23434,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') = s(bool,X93) | ~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | s(bool,sK7('T_0',X92,bool)) = s(bool,sK7(sK7('T_0',X92,bool),X92,bool)) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(forward_demodulation,[],[f23354,f994])).
fof(f23354,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | s(bool,sK7('T_0',X92,bool)) = s(bool,sK7(sK7('T_0',X92,bool),X92,bool)) | s(bool,X93) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f2867,f8334])).
fof(f23439,plain,(
  ( ! [X142,X143] : (s(bool,'F_0') = s(bool,X142) | ~p(s(bool,happ(s(fun(bool,bool),X143),s(bool,X142)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X143,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X143,bool),X143,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f23373,f994])).
fof(f23373,plain,(
  ( ! [X142,X143] : (~p(s(bool,happ(s(fun(bool,bool),X143),s(bool,X142)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X143,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X143,bool),X143,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X142)),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f7614])).
fof(f23727,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X3) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK7(X2,X1,bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(forward_demodulation,[],[f23682,f994])).
fof(f23682,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK7(X2,X1,bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1912,f8334])).
fof(f25027,plain,(
  ( ! [X592,X594,X593,X595,X591] : (~p(s(bool,happ(s(fun(bool,bool),X594),s(bool,X593)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X594),s(bool,sK7('const.bool.IN_2'(s(X591,X592),s(fun(X591,bool),'const.pred_set.EMPTY_0')),X594,bool)))) | s(bool,X593) = s(bool,X595) | s(bool,'F_0') = s(bool,X595)) ) | $spl0),
  inference(superposition,[],[f620,f3053])).
fof(f25030,plain,(
  ( ! [X606,X609,X605,X607,X608] : (~p(s(bool,happ(s(fun(bool,bool),X608),s(bool,X607)))) | s(bool,sK7('const.bool.IN_2'(s(X605,X606),s(fun(X605,bool),'const.pred_set.EMPTY_0')),X608,bool)) = s(bool,sK7(sK7('const.bool.IN_2'(s(X605,X606),s(fun(X605,bool),'const.pred_set.EMPTY_0')),X608,bool),X608,bool)) | s(bool,X607) = s(bool,X609) | s(bool,'F_0') = s(bool,X609)) ) | $spl0),
  inference(superposition,[],[f2867,f3053])).
fof(f26487,plain,(
  ( ! [X532,X528,X530,X529,X531] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X528,X529),s(fun(X528,bool),'const.pred_set.EMPTY_0')),X531,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X531),s(bool,X530)))) | s(bool,X530) = s(bool,X532) | s(bool,'F_0') = s(bool,X532)) ) | $spl0),
  inference(forward_demodulation,[],[f25016,f261])).
fof(f25016,plain,(
  ( ! [X532,X528,X530,X529,X531] : (~p(s(bool,happ(s(fun(bool,bool),X531),s(bool,X530)))) | s(bool,'const.bool.IN_2'(s(X528,X529),s(fun(X528,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X528,X529),s(fun(X528,bool),'const.pred_set.EMPTY_0')),X531,bool)) | s(bool,X530) = s(bool,X532) | s(bool,'F_0') = s(bool,X532)) ) | $spl0),
  inference(superposition,[],[f196,f3053])).
fof(f27120,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,X37) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X37),s(fun(X40,bool),X41)),X39,bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f532,f278])).
fof(f27124,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,X58)))) | s(bool,X57) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X57),s(fun(X60,bool),X61)),X59,bool)) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f532,f1778])).
fof(f27156,plain,(
  ( ! [X222,X223,X221,X224] : (~p(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X223),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X223,bool),X224)),X222,bool)) | s(bool,'T_0') = s(bool,X221)) )),
  inference(superposition,[],[f532,f146])).
fof(f27242,plain,(
  ( ! [X182,X180,X183,X181,X179] : (s(bool,'T_0') = s(bool,X183) | ~p(s(bool,happ(s(fun(bool,bool),X180),s(bool,X179)))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X181),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X181,bool),X182)),X180,bool)) | s(bool,X179) = s(bool,X183)) ) | $spl0),
  inference(forward_demodulation,[],[f27148,f994])).
fof(f27148,plain,(
  ( ! [X182,X180,X183,X181,X179] : (~p(s(bool,happ(s(fun(bool,bool),X180),s(bool,X179)))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X181),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X181,bool),X182)),X180,bool)) | s(bool,X183) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X179) = s(bool,X183)) ) | $spl0),
  inference(superposition,[],[f532,f8334])).
fof(f27243,plain,(
  ( ! [X198,X196,X194,X197,X195] : (s(bool,'F_0') = s(bool,X198) | ~p(s(bool,happ(s(fun(bool,bool),X195),s(bool,X194)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X196,bool),X197)),X195,bool)) | s(bool,X194) = s(bool,X198)) ) | $spl0),
  inference(forward_demodulation,[],[f27151,f261])).
fof(f27151,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (~p(s(bool,happ(s(fun(bool,bool),X195),s(bool,X194)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X196,bool),X197)),X195,bool)) | s(bool,X198) = s(bool,'const.bool.IN_2'(s(X199,X200),s(fun(X199,bool),'const.pred_set.EMPTY_0'))) | s(bool,X194) = s(bool,X198)) ) | $spl0),
  inference(superposition,[],[f532,f3053])).
fof(f27257,plain,(
  ( ! [X273,X275,X276,X274] : (s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X275,bool),X276)),X274,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X274),s(bool,X273)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X273)))) ) | $spl0),
  inference(forward_demodulation,[],[f27167,f994])).
fof(f27167,plain,(
  ( ! [X273,X275,X276,X274] : (~p(s(bool,happ(s(fun(bool,bool),X274),s(bool,X273)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X275,bool),X276)),X274,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X273)))) ) | $spl0),
  inference(superposition,[],[f532,f8126])).
fof(f27260,plain,(
  ( ! [X282,X285,X283,X284] : (s(bool,'F_0') = s(bool,X282) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X284),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X284,bool),X285)),X283,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X283),s(bool,X282))))) ) | $spl0),
  inference(forward_demodulation,[],[f27259,f994])).
fof(f27259,plain,(
  ( ! [X282,X285,X283,X284] : (s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X284),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X284,bool),X285)),X283,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X283),s(bool,X282)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X282)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f27169,f994])).
fof(f27169,plain,(
  ( ! [X282,X285,X283,X284] : (~p(s(bool,happ(s(fun(bool,bool),X283),s(bool,X282)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X284),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X284,bool),X285)),X283,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X282)),bool))) ) | $spl0),
  inference(superposition,[],[f532,f7614])).
fof(f28815,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X7,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f617,f278])).
fof(f28852,plain,(
  ( ! [X121,X122] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,X121)))) | p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X122,bool)) | s(bool,'T_0') = s(bool,X121)) )),
  inference(superposition,[],[f617,f146])).
fof(f28856,plain,(
  ( ! [X134,X132,X136,X135,X133] : (~p(s(bool,happ(s(fun(bool,bool),X135),s(bool,X134)))) | p(s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(X132,X133),s(fun(X132,bool),'const.pred_set.EMPTY_0')),X135,bool)) | s(bool,X134) = s(bool,X136) | s(bool,'F_0') = s(bool,X136)) ) | $spl0),
  inference(superposition,[],[f617,f3053])).
fof(f28874,plain,(
  ( ! [X182,X180,X181,X179] : (~p(s(bool,happ(s(fun(bool,bool),X182),s(bool,X180)))) | p(s(bool,happ(s(fun(bool,bool),X182),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X179),'const.option.NONE_0'),s(bool,X180),s(fun(X179,bool),X181)),X182,bool))) )),
  inference(superposition,[],[f617,f208])).
fof(f28877,plain,(
  ( ! [X194,X193] : (~p(s(bool,happ(s(fun(bool,bool),X194),s(bool,X193)))) | p(s(bool,happ(s(fun(bool,bool),X194),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X193)),bool),X194,bool))) )),
  inference(superposition,[],[f617,f994])).
fof(f28910,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | s(bool,'T_0') = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) )),
  inference(forward_demodulation,[],[f28809,f208])).
fof(f28809,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) )),
  inference(superposition,[],[f617,f208])).
fof(f28913,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'T_0') = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool))) )),
  inference(forward_demodulation,[],[f28812,f994])).
fof(f28812,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | p(s(bool,happ(s(fun(bool,bool),sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool))) )),
  inference(superposition,[],[f617,f994])).
fof(f28914,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X17,X19,bool)) | s(bool,'F_0') = s(bool,X17)) ) | $spl0),
  inference(subsumption_resolution,[],[f28819,f195])).
fof(f28819,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X17,X19,bool)) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f617,f1778])).
fof(f28936,plain,(
  ( ! [X105,X106,X104] : (s(bool,'F_0') = s(bool,X106) | ~p(s(bool,happ(s(fun(bool,bool),X105),s(bool,X104)))) | p(s(bool,happ(s(fun(bool,bool),X105),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X105,bool)) | s(bool,X104) = s(bool,X106)) ) | $spl0),
  inference(forward_demodulation,[],[f28847,f261])).
fof(f28847,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,happ(s(fun(bool,bool),X105),s(bool,X104)))) | p(s(bool,happ(s(fun(bool,bool),X105),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X105,bool)) | s(bool,X106) = s(bool,'const.bool.IN_2'(s(X107,X108),s(fun(X107,bool),'const.pred_set.EMPTY_0'))) | s(bool,X104) = s(bool,X106)) ) | $spl0),
  inference(superposition,[],[f617,f3053])).
fof(f28943,plain,(
  ( ! [X167,X166] : (~p(s(bool,happ(s(fun(bool,bool),X167),s(bool,X166)))) | p(s(bool,happ(s(fun(bool,bool),X167),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X167,bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f28868,f195])).
fof(f28868,plain,(
  ( ! [X167,X166] : (~p(s(bool,happ(s(fun(bool,bool),X167),s(bool,X166)))) | p(s(bool,happ(s(fun(bool,bool),X167),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X167,bool)) | s(bool,'F_0') = s(bool,X166)) ) | $spl0),
  inference(superposition,[],[f617,f7381])).
fof(f28945,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f28880,f143])).
fof(f28880,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f617,f278])).
fof(f28953,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X0),s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X1,X0,bool))) ) | $spl0),
  inference(condensation,[],[f28952])).
fof(f28952,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X36) | p(s(bool,happ(s(fun(bool,bool),X34),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X35,X34,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X35)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28951,f153])).
fof(f28951,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X36) | ~p(s(bool,X36)) | p(s(bool,happ(s(fun(bool,bool),X34),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X35,X34,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X35)))) ) | $spl0),
  inference(forward_demodulation,[],[f28890,f994])).
fof(f28890,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X36)) | p(s(bool,happ(s(fun(bool,bool),X34),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X35,X34,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X35))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl0),
  inference(superposition,[],[f617,f1987])).
fof(f28961,plain,(
  ( ! [X61,X62] : (p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X62,X61,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X61),s(bool,X62)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f28960,f143])).
fof(f28960,plain,(
  ( ! [X61,X62] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X62,X61,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X61),s(bool,X62)))))) ) | $spl0),
  inference(forward_demodulation,[],[f28897,f994])).
fof(f28897,plain,(
  ( ! [X61,X62] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X62,X61,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X61),s(bool,X62)))))) ) | $spl0),
  inference(superposition,[],[f617,f8126])).
fof(f29581,plain,(
  ( ! [X625,X623,X624,X626] : (~p(s(bool,happ(s(fun(bool,bool),X625),s(bool,X624)))) | p(s(bool,happ(s(fun(bool,bool),X625),s(bool,X626)))) | s(bool,X623) != s(bool,X626) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X623))) | s(bool,'F_0') = s(bool,X624)) ) | $spl0),
  inference(superposition,[],[f195,f3984])).
fof(f29582,plain,(
  ( ! [X629,X627,X628] : (~p(s(bool,happ(s(fun(bool,bool),X629),s(bool,X628)))) | s(bool,X627) = s(bool,sK7(X627,X629,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X627))) | s(bool,'F_0') = s(bool,X628)) ) | $spl0),
  inference(superposition,[],[f196,f3984])).
fof(f29592,plain,(
  ( ! [X666,X668,X667,X669,X665] : (~p(s(bool,happ(s(fun(bool,bool),X667),s(bool,X666)))) | s(bool,X665) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X668),'const.option.NONE_0'),s(bool,X665),s(fun(X668,bool),X669)),X667,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X665))) | s(bool,'F_0') = s(bool,X666)) ) | $spl0),
  inference(superposition,[],[f532,f3984])).
fof(f29594,plain,(
  ( ! [X673,X675,X674] : (~p(s(bool,happ(s(fun(bool,bool),X675),s(bool,X674)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X675),s(bool,sK7(X673,X675,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X673))) | s(bool,'F_0') = s(bool,X674)) ) | $spl0),
  inference(superposition,[],[f620,f3984])).
fof(f29597,plain,(
  ( ! [X681,X683,X682] : (~p(s(bool,happ(s(fun(bool,bool),X683),s(bool,X682)))) | s(bool,sK7(X681,X683,bool)) = s(bool,sK7(sK7(X681,X683,bool),X683,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X681))) | s(bool,'F_0') = s(bool,X682)) ) | $spl0),
  inference(superposition,[],[f2867,f3984])).
fof(f29608,plain,(
  ( ! [X724,X725,X723] : (p(s(bool,happ(s(fun(bool,bool),X724),s(bool,X725)))) | ~p(s(bool,happ(s(fun(bool,bool),X724),s(bool,X723)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X723,X724,bool)))) | s(bool,'F_0') = s(bool,X725)) ) | $spl0),
  inference(superposition,[],[f197,f3984])).
fof(f29826,plain,(
  ( ! [X625,X623,X624,X626] : (~p(s(bool,happ(s(fun(bool,bool),X625),s(bool,X624)))) | p(s(bool,happ(s(fun(bool,bool),X625),s(bool,X626)))) | s(bool,X623) != s(bool,X626) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X624))) | s(bool,'F_0') = s(bool,X623)) ) | $spl0),
  inference(superposition,[],[f195,f3984])).
fof(f29837,plain,(
  ( ! [X666,X668,X667,X669,X665] : (~p(s(bool,happ(s(fun(bool,bool),X667),s(bool,X666)))) | s(bool,X665) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X668),'const.option.NONE_0'),s(bool,X665),s(fun(X668,bool),X669)),X667,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X666))) | s(bool,'F_0') = s(bool,X665)) ) | $spl0),
  inference(superposition,[],[f532,f3984])).
fof(f29839,plain,(
  ( ! [X673,X675,X674] : (~p(s(bool,happ(s(fun(bool,bool),X675),s(bool,X674)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X675),s(bool,sK7(X673,X675,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X674))) | s(bool,'F_0') = s(bool,X673)) ) | $spl0),
  inference(superposition,[],[f620,f3984])).
fof(f29842,plain,(
  ( ! [X681,X683,X682] : (~p(s(bool,happ(s(fun(bool,bool),X683),s(bool,X682)))) | s(bool,sK7(X681,X683,bool)) = s(bool,sK7(sK7(X681,X683,bool),X683,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X682))) | s(bool,'F_0') = s(bool,X681)) ) | $spl0),
  inference(superposition,[],[f2867,f3984])).
fof(f29853,plain,(
  ( ! [X724,X725,X723] : (p(s(bool,happ(s(fun(bool,bool),X724),s(bool,X725)))) | ~p(s(bool,happ(s(fun(bool,bool),X724),s(bool,X723)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X725))) | s(bool,'F_0') = s(bool,sK7(X723,X724,bool))) ) | $spl0),
  inference(superposition,[],[f197,f3984])).
fof(f29861,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | s(bool,X20) = s(bool,sK7(X20,X19,bool)) | s(bool,'T_0') = s(bool,X20) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f525,f3984])).
fof(f29905,plain,(
  ( ! [X158,X159,X160] : (~p(s(bool,happ(s(fun(bool,bool),X159),s(bool,X158)))) | p(s(bool,happ(s(fun(bool,bool),X159),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X159,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X160))) | s(bool,X158) = s(bool,X160)) ) | $spl0),
  inference(superposition,[],[f617,f3984])).
fof(f29978,plain,(
  ( ! [X389,X391,X390,X392] : (~p(s(bool,happ(s(fun(bool,bool),X390),s(bool,X389)))) | p(s(bool,happ(s(fun(bool,bool),X390),s(bool,X391)))) | s(bool,'F_0') != s(bool,X391) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X392))) | s(bool,X389) = s(bool,X392)) ) | $spl0),
  inference(superposition,[],[f195,f3984])).
fof(f29979,plain,(
  ( ! [X393,X395,X394] : (~p(s(bool,happ(s(fun(bool,bool),X394),s(bool,X393)))) | s(bool,'F_0') = s(bool,sK7('F_0',X394,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X395))) | s(bool,X393) = s(bool,X395)) ) | $spl0),
  inference(superposition,[],[f196,f3984])).
fof(f29989,plain,(
  ( ! [X432,X434,X431,X433,X435] : (~p(s(bool,happ(s(fun(bool,bool),X432),s(bool,X431)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X433),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X433,bool),X434)),X432,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X435))) | s(bool,X431) = s(bool,X435)) ) | $spl0),
  inference(superposition,[],[f532,f3984])).
fof(f29991,plain,(
  ( ! [X441,X440,X439] : (~p(s(bool,happ(s(fun(bool,bool),X440),s(bool,X439)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X440),s(bool,sK7('F_0',X440,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X441))) | s(bool,X439) = s(bool,X441)) ) | $spl0),
  inference(superposition,[],[f620,f3984])).
fof(f29994,plain,(
  ( ! [X447,X449,X448] : (~p(s(bool,happ(s(fun(bool,bool),X448),s(bool,X447)))) | s(bool,sK7('F_0',X448,bool)) = s(bool,sK7(sK7('F_0',X448,bool),X448,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X449))) | s(bool,X447) = s(bool,X449)) ) | $spl0),
  inference(superposition,[],[f2867,f3984])).
fof(f30180,plain,(
  ( ! [X532,X530,X529,X531] : (~p(s(bool,happ(s(fun(bool,bool),X530),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X530),s(bool,X531)))) | s(bool,X529) != s(bool,X531) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X532))) | s(bool,X529) = s(bool,X532)) ) | $spl0),
  inference(superposition,[],[f195,f3984])).
fof(f30207,plain,(
  ( ! [X629,X628,X630] : (p(s(bool,happ(s(fun(bool,bool),X629),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X629),s(bool,X628)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X630))) | s(bool,X630) = s(bool,sK7(X628,X629,bool))) ) | $spl0),
  inference(superposition,[],[f197,f3984])).
fof(f30570,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X66)))) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X65,X67,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29388,f195])).
fof(f29388,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X66)))) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X65,X67,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s(bool,'F_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f617,f3984])).
fof(f30714,plain,(
  ( ! [X341,X339,X340] : (~p(s(bool,happ(s(fun(bool,bool),X340),s(bool,X339)))) | s(bool,X341) = s(bool,sK7(X341,X340,bool)) | s(bool,'F_0') = s(bool,X341) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X339)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29725,f250])).
fof(f29725,plain,(
  ( ! [X341,X339,X340] : (~p(s(bool,happ(s(fun(bool,bool),X340),s(bool,X339)))) | s(bool,X341) = s(bool,sK7(X341,X340,bool)) | s(bool,'F_0') = s(bool,X341) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X339))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f1912,f3984])).
fof(f32445,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,X37) = s(bool,sK7(X37,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(fun(bool,bool),X39),s(fun(X40,fun(bool,bool)),X41)),bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f519,f278])).
fof(f32449,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,X58)))) | s(bool,X57) = s(bool,sK7(X57,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(fun(bool,bool),X59),s(fun(X60,fun(bool,bool)),X61)),bool)) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f519,f1778])).
fof(f32460,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,X121)))) | s(bool,X120) = s(bool,sK7(X120,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(fun(bool,bool),X122),s(fun(X123,fun(bool,bool)),X124)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f32461,plain,(
  ( ! [X127,X125,X128,X126,X129] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,X125) = s(bool,sK7(X125,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(fun(bool,bool),X127),s(fun(X128,fun(bool,bool)),X129)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,'F_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f32481,plain,(
  ( ! [X222,X220,X219,X223,X221] : (~p(s(bool,happ(s(fun(bool,bool),X220),s(bool,X219)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X221),'const.option.NONE_0'),s(fun(bool,bool),X220),s(fun(X221,fun(bool,bool)),X222)),bool)) | s(bool,X219) = s(bool,X223) | s(bool,'F_0') = s(bool,X223)) ) | $spl0),
  inference(superposition,[],[f519,f1778])).
fof(f32485,plain,(
  ( ! [X243,X241,X244,X242,X245] : (~p(s(bool,happ(s(fun(bool,bool),X242),s(bool,X241)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X243),'const.option.NONE_0'),s(fun(bool,bool),X242),s(fun(X243,fun(bool,bool)),X244)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))) | s(bool,X241) = s(bool,X245)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f32588,plain,(
  ( ! [X204,X202,X200,X203,X201] : (s(bool,'T_0') = s(bool,X204) | ~p(s(bool,happ(s(fun(bool,bool),X201),s(bool,X200)))) | s(bool,'T_0') = s(bool,sK7('T_0','const.option.option_CASE_3'(s('type.option.option'(X202),'const.option.NONE_0'),s(fun(bool,bool),X201),s(fun(X202,fun(bool,bool)),X203)),bool)) | s(bool,X200) = s(bool,X204)) ) | $spl0),
  inference(forward_demodulation,[],[f32477,f994])).
fof(f32477,plain,(
  ( ! [X204,X202,X200,X203,X201] : (~p(s(bool,happ(s(fun(bool,bool),X201),s(bool,X200)))) | s(bool,'T_0') = s(bool,sK7('T_0','const.option.option_CASE_3'(s('type.option.option'(X202),'const.option.NONE_0'),s(fun(bool,bool),X201),s(fun(X202,fun(bool,bool)),X203)),bool)) | s(bool,X204) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X200) = s(bool,X204)) ) | $spl0),
  inference(superposition,[],[f519,f8334])).
fof(f32598,plain,(
  ( ! [X280,X282,X277,X279,X281,X276,X278] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X276,X277),s(fun(X276,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X280),'const.option.NONE_0'),s(fun(bool,bool),X279),s(fun(X280,fun(bool,bool)),X281)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X279),s(bool,X278)))) | s(bool,X278) = s(bool,X282) | s(bool,'F_0') = s(bool,X282)) ) | $spl0),
  inference(forward_demodulation,[],[f32492,f261])).
fof(f32492,plain,(
  ( ! [X280,X282,X277,X279,X281,X276,X278] : (~p(s(bool,happ(s(fun(bool,bool),X279),s(bool,X278)))) | s(bool,'const.bool.IN_2'(s(X276,X277),s(fun(X276,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X276,X277),s(fun(X276,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X280),'const.option.NONE_0'),s(fun(bool,bool),X279),s(fun(X280,fun(bool,bool)),X281)),bool)) | s(bool,X278) = s(bool,X282) | s(bool,'F_0') = s(bool,X282)) ) | $spl0),
  inference(superposition,[],[f519,f3053])).
fof(f32609,plain,(
  ( ! [X321,X323,X324,X322] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X323),'const.option.NONE_0'),s(fun(bool,bool),X322),s(fun(X323,fun(bool,bool)),X324)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X322),s(bool,X321)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X321)))) ) | $spl0),
  inference(forward_demodulation,[],[f32501,f994])).
fof(f32501,plain,(
  ( ! [X321,X323,X324,X322] : (~p(s(bool,happ(s(fun(bool,bool),X322),s(bool,X321)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X323),'const.option.NONE_0'),s(fun(bool,bool),X322),s(fun(X323,fun(bool,bool)),X324)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X321)))) ) | $spl0),
  inference(superposition,[],[f519,f8126])).
fof(f32610,plain,(
  ( ! [X325,X327,X329,X326,X328] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X327),'const.option.NONE_0'),s(fun(bool,bool),X326),s(fun(X327,fun(bool,bool)),X328)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X326),s(bool,X325)))) | s(bool,X325) = s(bool,X329) | s(bool,'T_0') = s(bool,X329)) ) | $spl0),
  inference(forward_demodulation,[],[f32502,f994])).
fof(f32502,plain,(
  ( ! [X325,X327,X329,X326,X328] : (~p(s(bool,happ(s(fun(bool,bool),X326),s(bool,X325)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X327),'const.option.NONE_0'),s(fun(bool,bool),X326),s(fun(X327,fun(bool,bool)),X328)),bool)) | s(bool,X325) = s(bool,X329) | s(bool,'T_0') = s(bool,X329)) ) | $spl0),
  inference(superposition,[],[f519,f8334])).
fof(f32612,plain,(
  ( ! [X333,X331,X332,X330] : (s(bool,'F_0') = s(bool,X330) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X332),'const.option.NONE_0'),s(fun(bool,bool),X331),s(fun(X332,fun(bool,bool)),X333)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X331),s(bool,X330))))) ) | $spl0),
  inference(forward_demodulation,[],[f32611,f994])).
fof(f32611,plain,(
  ( ! [X333,X331,X332,X330] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X332),'const.option.NONE_0'),s(fun(bool,bool),X331),s(fun(X332,fun(bool,bool)),X333)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X331),s(bool,X330)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X330)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f32503,f994])).
fof(f32503,plain,(
  ( ! [X333,X331,X332,X330] : (~p(s(bool,happ(s(fun(bool,bool),X331),s(bool,X330)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X332),'const.option.NONE_0'),s(fun(bool,bool),X331),s(fun(X332,fun(bool,bool)),X333)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X330)),bool))) ) | $spl0),
  inference(superposition,[],[f519,f7614])).
fof(f818,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X8,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f804,f778])).
fof(f804,plain,(
  ( ! [X8] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X8,bool))) ) | $spl0),
  inference(superposition,[],[f196,f778])).
fof(f1173,plain,(
  ( ! [X33,X32] : (s(bool,X32) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X32)),bool),X33,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X32)) )),
  inference(forward_demodulation,[],[f1151,f994])).
fof(f1151,plain,(
  ( ! [X33,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X32)),bool),X33,bool)) | s(bool,'F_0') = s(bool,X32)) )),
  inference(superposition,[],[f196,f1054])).
fof(f1174,plain,(
  ( ! [X52,X53,X51] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))),s(bool,X53),s(fun(bool,bool),X52))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X52),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X51)) ) | $spl0),
  inference(forward_demodulation,[],[f1158,f994])).
fof(f1158,plain,(
  ( ! [X52,X53,X51] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X52),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool)))),s(bool,X53),s(fun(bool,bool),X52))) | s(bool,'F_0') = s(bool,X51)) ) | $spl0),
  inference(superposition,[],[f897,f1054])).
fof(f1432,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,'T_0')))) | s(bool,X95) = s(bool,sK7(X95,X96,bool)) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f196,f278])).
fof(f1439,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X122),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121))),s(bool,X123),s(fun(bool,bool),X122))) | s(bool,X121) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f897,f278])).
fof(f1912,plain,(
  ( ! [X64,X65] : (~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0')))) | s(bool,X64) = s(bool,sK7(X64,X65,bool)) | s(bool,'F_0') = s(bool,X64)) ) | $spl0),
  inference(forward_demodulation,[],[f1821,f778])).
fof(f1821,plain,(
  ( ! [X64,X65] : (~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))))) | s(bool,X64) = s(bool,sK7(X64,X65,bool)) | s(bool,'F_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f196,f1191])).
fof(f2763,plain,(
  ( ! [X118,X120,X119,X117] : (s(bool,X118) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X118),s(fun(X117,bool),X119)),X120,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X120),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X118)) )),
  inference(forward_demodulation,[],[f2728,f208])).
fof(f2728,plain,(
  ( ! [X118,X120,X119,X117] : (~p(s(bool,happ(s(fun(bool,bool),X120),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X118),s(fun(X117,bool),X119))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X118),s(fun(X117,bool),X119)),X120,bool)) | s(bool,'F_0') = s(bool,X118)) )),
  inference(superposition,[],[f196,f368])).
fof(f2862,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X63) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(forward_demodulation,[],[f2788,f208])).
fof(f2788,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f1907,f368])).
fof(f2865,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X71,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f2791,f778])).
fof(f2791,plain,(
  ( ! [X71] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0'))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X71,bool))) ) | $spl0),
  inference(superposition,[],[f1907,f778])).
fof(f2866,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(forward_demodulation,[],[f2793,f994])).
fof(f2793,plain,(
  ( ! [X76,X77] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f1907,f1054])).
fof(f3109,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X63) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(forward_demodulation,[],[f3082,f208])).
fof(f3082,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f2868,f368])).
fof(f3112,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X71,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f3085,f778])).
fof(f3085,plain,(
  ( ! [X71] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0'))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X71,bool))) ) | $spl0),
  inference(superposition,[],[f2868,f778])).
fof(f3113,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(forward_demodulation,[],[f3087,f994])).
fof(f3087,plain,(
  ( ! [X76,X77] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f2868,f1054])).
fof(f18191,plain,(
  ( ! [X178,X179] : (~p(s(bool,happ(s(fun(bool,bool),X179),s(bool,'T_0')))) | s(bool,sK6(X178,bool)) = s(bool,sK7(sK6(X178,bool),X179,bool)) | s('type.option.option'(bool),X178) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X178)) )),
  inference(superposition,[],[f196,f543])).
fof(f19497,plain,(
  ( ! [X216,X217] : (~p(s(bool,happ(s(fun(bool,bool),X217),s(bool,'T_0')))) | s(bool,X216) = s(bool,sK7(X216,X217,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216)))) ) | $spl0),
  inference(forward_demodulation,[],[f19149,f994])).
fof(f19149,plain,(
  ( ! [X216,X217] : (~p(s(bool,happ(s(fun(bool,bool),X217),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,X216) = s(bool,sK7(X216,X217,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216)))) ) | $spl0),
  inference(superposition,[],[f196,f8126])).
fof(f19568,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X23),s(bool,sK7(X22,X23,bool)))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f620,f278])).
fof(f19600,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,happ(s(fun(bool,bool),X115),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X115),s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X112),'const.option.NONE_0'),s(bool,X113),s(fun(X112,bool),X114)),X115,bool)))) | s(bool,'F_0') = s(bool,X113)) )),
  inference(superposition,[],[f620,f368])).
fof(f19601,plain,(
  ( ! [X116] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X116),s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X116,bool))))) ) | $spl0),
  inference(superposition,[],[f620,f778])).
fof(f19615,plain,(
  ( ! [X149,X150] : (~p(s(bool,happ(s(fun(bool,bool),X150),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X150),s(bool,sK7(sK6(X149,bool),X150,bool)))) | s('type.option.option'(bool),X149) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X149)) )),
  inference(superposition,[],[f620,f543])).
fof(f19655,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X56),s(bool,sK7(X55,X56,bool)))) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(forward_demodulation,[],[f19579,f994])).
fof(f19579,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X56),s(bool,sK7(X55,X56,bool)))) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f620,f7381])).
fof(f19658,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X60),s(bool,sK7(X59,X60,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl0),
  inference(forward_demodulation,[],[f19581,f994])).
fof(f19581,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X60),s(bool,sK7(X59,X60,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl0),
  inference(superposition,[],[f620,f8126])).
fof(f23329,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,sK7(X22,X23,bool)) = s(bool,sK7(sK7(X22,X23,bool),X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f2867,f278])).
fof(f23362,plain,(
  ( ! [X116,X114,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X117),s(bool,'T_0')))) | s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X115),s(fun(X114,bool),X116)),X117,bool)) = s(bool,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X115),s(fun(X114,bool),X116)),X117,bool),X117,bool)) | s(bool,'F_0') = s(bool,X115)) ) | $spl0),
  inference(superposition,[],[f2867,f368])).
fof(f23363,plain,(
  ( ! [X118] : (~p(s(bool,happ(s(fun(bool,bool),X118),s(bool,'T_0')))) | s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X118,bool)) = s(bool,sK7(sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X118,bool),X118,bool))) ) | $spl0),
  inference(superposition,[],[f2867,f778])).
fof(f23379,plain,(
  ( ! [X156,X155] : (~p(s(bool,happ(s(fun(bool,bool),X156),s(bool,'T_0')))) | s(bool,sK7(sK6(X155,bool),X156,bool)) = s(bool,sK7(sK7(sK6(X155,bool),X156,bool),X156,bool)) | s('type.option.option'(bool),X155) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X155)) ) | $spl0),
  inference(superposition,[],[f2867,f543])).
fof(f23418,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'T_0')))) | s(bool,sK7(X55,X56,bool)) = s(bool,sK7(sK7(X55,X56,bool),X56,bool)) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(forward_demodulation,[],[f23340,f994])).
fof(f23340,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,sK7(X55,X56,bool)) = s(bool,sK7(sK7(X55,X56,bool),X56,bool)) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f2867,f7381])).
fof(f23421,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'T_0')))) | s(bool,sK7(X59,X60,bool)) = s(bool,sK7(sK7(X59,X60,bool),X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl0),
  inference(forward_demodulation,[],[f23342,f994])).
fof(f23342,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,sK7(X59,X60,bool)) = s(bool,sK7(sK7(X59,X60,bool),X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl0),
  inference(superposition,[],[f2867,f8126])).
fof(f23678,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | s(bool,X3) = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1912,f208])).
fof(f23681,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0')))) | s(bool,X15) = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f1912,f994])).
fof(f23738,plain,(
  ( ! [X39,X40] : (s(bool,X40) = s(bool,sK7(X40,X39,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'T_0')))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f23737,f143])).
fof(f23737,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | s(bool,X40) = s(bool,sK7(X40,X39,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'T_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f23712,f994])).
fof(f23712,plain,(
  ( ! [X39,X40] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X40) = s(bool,sK7(X40,X39,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'T_0')))),bool))) ) | $spl0),
  inference(superposition,[],[f1912,f7614])).
fof(f23740,plain,(
  ( ! [X41,X42] : (s(bool,X42) = s(bool,sK7(X42,X41,bool)) | s(bool,'F_0') = s(bool,X42) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X41),s(bool,'T_0')))))) ) | $spl0),
  inference(subsumption_resolution,[],[f23739,f143])).
fof(f23739,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | s(bool,X42) = s(bool,sK7(X42,X41,bool)) | s(bool,'F_0') = s(bool,X42) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X41),s(bool,'T_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f23713,f994])).
fof(f23713,plain,(
  ( ! [X41,X42] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X42) = s(bool,sK7(X42,X41,bool)) | s(bool,'F_0') = s(bool,X42) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X41),s(bool,'T_0')))))) ) | $spl0),
  inference(superposition,[],[f1912,f8126])).
fof(f27119,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,X32) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X32),s(fun(X34,bool),X35)),X33,bool)) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f532,f278])).
fof(f27175,plain,(
  ( ! [X308,X310,X309,X307] : (~p(s(bool,happ(s(fun(bool,bool),X308),s(bool,'T_0')))) | s(bool,sK6(X307,bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X309),'const.option.NONE_0'),s(bool,sK6(X307,bool)),s(fun(X309,bool),X310)),X308,bool)) | s('type.option.option'(bool),X307) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X307)) )),
  inference(superposition,[],[f532,f543])).
fof(f27229,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,happ(s(fun(bool,bool),X124),s(bool,'T_0')))) | s(bool,X123) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X125),'const.option.NONE_0'),s(bool,X123),s(fun(X125,bool),X126)),X124,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123)))) ) | $spl0),
  inference(forward_demodulation,[],[f27136,f994])).
fof(f27136,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,happ(s(fun(bool,bool),X124),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,X123) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X125),'const.option.NONE_0'),s(bool,X123),s(fun(X125,bool),X126)),X124,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123)))) ) | $spl0),
  inference(superposition,[],[f532,f8126])).
fof(f28814,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X2,X3,bool)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f617,f278])).
fof(f28853,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,happ(s(fun(bool,bool),X126),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X126),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X124),s(fun(X123,bool),X125)),X126,bool)) | s(bool,'F_0') = s(bool,X124)) )),
  inference(superposition,[],[f617,f368])).
fof(f28873,plain,(
  ( ! [X177,X178] : (~p(s(bool,happ(s(fun(bool,bool),X178),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X178),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6(X177,bool),X178,bool)) | s('type.option.option'(bool),X177) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X177)) )),
  inference(superposition,[],[f617,f543])).
fof(f28923,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X59,X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl0),
  inference(forward_demodulation,[],[f28831,f994])).
fof(f28831,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X59,X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl0),
  inference(superposition,[],[f617,f8126])).
fof(f31783,plain,(
  ( ! [X165,X163,X164,X162] : (s(bool,'T_0') = s(bool,X165) | s(bool,X162) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X162))),s(bool,X163),s(fun(bool,bool),X164))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X164),s(bool,'T_0'))) | s(bool,X162) = s(bool,X165)) ) | $spl0),
  inference(forward_demodulation,[],[f31410,f994])).
fof(f31410,plain,(
  ( ! [X165,X163,X164,X162] : (s(bool,X162) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X162))),s(bool,X163),s(fun(bool,bool),X164))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X164),s(bool,'T_0'))) | s(bool,X165) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X162) = s(bool,X165)) ) | $spl0),
  inference(superposition,[],[f657,f8334])).
fof(f31800,plain,(
  ( ! [X257,X259,X258] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X259),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X257))),s(bool,X258),s(fun(bool,bool),X259))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X257)))) ) | $spl0),
  inference(forward_demodulation,[],[f31433,f994])).
fof(f31433,plain,(
  ( ! [X257,X259,X258] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X257))),s(bool,X258),s(fun(bool,bool),X259))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X259),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X257)))) ) | $spl0),
  inference(superposition,[],[f657,f8126])).
fof(f31801,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X262),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X260))),s(bool,X261),s(fun(bool,bool),X262))) | s(bool,X260) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) ) | $spl0),
  inference(forward_demodulation,[],[f31434,f994])).
fof(f31434,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X260))),s(bool,X261),s(fun(bool,bool),X262))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X262),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X260) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) ) | $spl0),
  inference(superposition,[],[f657,f8334])).
fof(f31803,plain,(
  ( ! [X265,X264,X266] : (s(bool,'F_0') = s(bool,X264) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X266),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264))),s(bool,X265),s(fun(bool,bool),X266)))) ) | $spl0),
  inference(forward_demodulation,[],[f31802,f994])).
fof(f31802,plain,(
  ( ! [X265,X264,X266] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X266),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264))),s(bool,X265),s(fun(bool,bool),X266))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X264)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f31435,f994])).
fof(f31435,plain,(
  ( ! [X265,X264,X266] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264))),s(bool,X265),s(fun(bool,bool),X266))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X266),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X264)),bool))) ) | $spl0),
  inference(superposition,[],[f657,f7614])).
fof(f32444,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,X32) = s(bool,sK7(X32,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(fun(bool,bool),X33),s(fun(X34,fun(bool,bool)),X35)),bool)) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f519,f278])).
fof(f32509,plain,(
  ( ! [X356,X358,X357,X355] : (~p(s(bool,happ(s(fun(bool,bool),X356),s(bool,'T_0')))) | s(bool,sK6(X355,bool)) = s(bool,sK7(sK6(X355,bool),'const.option.option_CASE_3'(s('type.option.option'(X357),'const.option.NONE_0'),s(fun(bool,bool),X356),s(fun(X357,fun(bool,bool)),X358)),bool)) | s('type.option.option'(bool),X355) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X355)) )),
  inference(superposition,[],[f519,f543])).
fof(f32573,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,happ(s(fun(bool,bool),X139),s(bool,'T_0')))) | s(bool,X138) = s(bool,sK7(X138,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(fun(bool,bool),X139),s(fun(X140,fun(bool,bool)),X141)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | $spl0),
  inference(forward_demodulation,[],[f32464,f994])).
fof(f32464,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,happ(s(fun(bool,bool),X139),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,X138) = s(bool,sK7(X138,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(fun(bool,bool),X139),s(fun(X140,fun(bool,bool)),X141)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | $spl0),
  inference(superposition,[],[f519,f8126])).
fof(f32593,plain,(
  ( ! [X255,X257,X259,X254,X256,X258] : (s(bool,X255) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,X255),s(fun(X254,bool),X256)),'const.option.option_CASE_3'(s('type.option.option'(X258),'const.option.NONE_0'),s(fun(bool,bool),X257),s(fun(X258,fun(bool,bool)),X259)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X257),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X255)) )),
  inference(forward_demodulation,[],[f32488,f208])).
fof(f32488,plain,(
  ( ! [X255,X257,X259,X254,X256,X258] : (~p(s(bool,happ(s(fun(bool,bool),X257),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,X255),s(fun(X254,bool),X256))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,X255),s(fun(X254,bool),X256)),'const.option.option_CASE_3'(s('type.option.option'(X258),'const.option.NONE_0'),s(fun(bool,bool),X257),s(fun(X258,fun(bool,bool)),X259)),bool)) | s(bool,'F_0') = s(bool,X255)) )),
  inference(superposition,[],[f519,f368])).
fof(f32595,plain,(
  ( ! [X269,X267,X268] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),'const.option.option_CASE_3'(s('type.option.option'(X268),'const.option.NONE_0'),s(fun(bool,bool),X267),s(fun(X268,fun(bool,bool)),X269)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X267),s(bool,'T_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f32490,f778])).
fof(f32490,plain,(
  ( ! [X269,X267,X268] : (~p(s(bool,happ(s(fun(bool,bool),X267),s(bool,'T_0')))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),'const.option.option_CASE_3'(s('type.option.option'(X268),'const.option.NONE_0'),s(fun(bool,bool),X267),s(fun(X268,fun(bool,bool)),X269)),bool))) ) | $spl0),
  inference(superposition,[],[f519,f778])).
fof(f531,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')),X5,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f523,f261])).
fof(f523,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')),X5,bool))) )),
  inference(superposition,[],[f196,f261])).
fof(f907,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))),s(bool,X24),s(fun(bool,bool),X23))) | s(bool,'T_0') = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f897,f146])).
fof(f2267,plain,(
  ( ! [X109,X110,X108] : (~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'F_0')))) | s(bool,X108) = s(bool,sK7(X108,X109,bool)) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f196,f1778])).
fof(f2275,plain,(
  ( ! [X138,X136,X139,X137] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X137),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136))),s(bool,X138),s(fun(bool,bool),X137))) | s(bool,X136) = s(bool,X139) | s(bool,'F_0') = s(bool,X139)) ) | $spl0),
  inference(superposition,[],[f897,f1778])).
fof(f2863,plain,(
  ( ! [X68,X66,X67] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f2789,f261])).
fof(f2789,plain,(
  ( ! [X68,X66,X67] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0'))) | s(bool,'const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool))) ) | $spl0),
  inference(superposition,[],[f1907,f261])).
fof(f3110,plain,(
  ( ! [X68,X66,X67] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f3083,f261])).
fof(f3083,plain,(
  ( ! [X68,X66,X67] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0'))) | s(bool,'const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool))) ) | $spl0),
  inference(superposition,[],[f2868,f261])).
fof(f3593,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X189),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188))),s(bool,X190),s(fun(bool,bool),X189))) | s(bool,X188) = s(bool,X191) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X191)),bool))) ) | $spl0),
  inference(superposition,[],[f897,f1987])).
fof(f3988,plain,(
  ( ! [X109,X107,X108] : (s(bool,X107) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X107)),bool),X108,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X109)) ) | $spl0),
  inference(forward_demodulation,[],[f3642,f994])).
fof(f3642,plain,(
  ( ! [X109,X107,X108] : (~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X107)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X107)),bool),X108,bool)) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X109)) ) | $spl0),
  inference(superposition,[],[f196,f1987])).
fof(f3990,plain,(
  ( ! [X142,X143,X141] : (s(bool,X141) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X141)),bool),X142,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X142),s(bool,'F_0'))) | s(bool,X141) = s(bool,X143) | s(bool,'F_0') = s(bool,X143)) ) | $spl0),
  inference(forward_demodulation,[],[f3652,f994])).
fof(f3652,plain,(
  ( ! [X142,X143,X141] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X142),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X141)),bool),X142,bool)) | s(bool,X141) = s(bool,X143) | s(bool,'F_0') = s(bool,X143)) ) | $spl0),
  inference(superposition,[],[f1907,f1987])).
fof(f3991,plain,(
  ( ! [X146,X144,X145] : (s(bool,X144) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X144)),bool),X145,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X145),s(bool,'F_0'))) | s(bool,X144) = s(bool,X146) | s(bool,'F_0') = s(bool,X146)) ) | $spl0),
  inference(forward_demodulation,[],[f3653,f994])).
fof(f3653,plain,(
  ( ! [X146,X144,X145] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X145),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X144)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X144)),bool),X145,bool)) | s(bool,X144) = s(bool,X146) | s(bool,'F_0') = s(bool,X146)) ) | $spl0),
  inference(superposition,[],[f2868,f1987])).
fof(f4915,plain,(
  ( ! [X64,X65] : (s(bool,X64) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X64)),bool),X65,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(forward_demodulation,[],[f4886,f994])).
fof(f4886,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X64)),bool),X65,bool)) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f2868,f3818])).
fof(f5411,plain,(
  ( ! [X64,X63] : (s(bool,X63) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X63)),bool),X64,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X63)) ) | $spl0),
  inference(forward_demodulation,[],[f5391,f994])).
fof(f5391,plain,(
  ( ! [X64,X63] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X63)),bool),X64,bool)) | s(bool,'T_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f196,f3818])).
fof(f6039,plain,(
  ( ! [X72,X71] : (s(bool,X71) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X71)),bool),X72,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X72),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X71)) ) | $spl0),
  inference(forward_demodulation,[],[f5960,f994])).
fof(f5960,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X72),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X71)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X71)),bool),X72,bool)) | s(bool,'T_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f1907,f3818])).
fof(f17598,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X3) = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f525,f208])).
fof(f17601,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | s(bool,X15) = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f525,f994])).
fof(f17662,plain,(
  ( ! [X39,X40] : (s(bool,X40) = s(bool,sK7(X40,X39,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f17661,f143])).
fof(f17661,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | s(bool,X40) = s(bool,sK7(X40,X39,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f17639,f994])).
fof(f17639,plain,(
  ( ! [X39,X40] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X40) = s(bool,sK7(X40,X39,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(superposition,[],[f525,f7614])).
fof(f19465,plain,(
  ( ! [X177,X176] : (s(bool,X177) = s(bool,sK7(X177,X176,bool)) | s(bool,'T_0') = s(bool,X177) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X176),s(bool,'F_0')))))) ) | $spl0),
  inference(subsumption_resolution,[],[f19464,f143])).
fof(f19464,plain,(
  ( ! [X177,X176] : (~p(s(bool,'T_0')) | s(bool,X177) = s(bool,sK7(X177,X176,bool)) | s(bool,'T_0') = s(bool,X177) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X176),s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f19121,f994])).
fof(f19121,plain,(
  ( ! [X177,X176] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X177) = s(bool,sK7(X177,X176,bool)) | s(bool,'T_0') = s(bool,X177) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X176),s(bool,'F_0')))))) ) | $spl0),
  inference(superposition,[],[f525,f8126])).
fof(f19567,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,sK7(X20,X21,bool)))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f620,f146])).
fof(f19572,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,sK7(X34,X35,bool)))) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f620,f1778])).
fof(f19602,plain,(
  ( ! [X118,X119,X117] : (~p(s(bool,happ(s(fun(bool,bool),X119),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X119),s(bool,sK7('const.bool.IN_2'(s(X117,X118),s(fun(X117,bool),'const.pred_set.EMPTY_0')),X119,bool))))) )),
  inference(superposition,[],[f620,f261])).
fof(f19603,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,happ(s(fun(bool,bool),X123),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X123),s(bool,sK7(happ(s(fun(X120,bool),X121),s(X120,X122)),X123,bool)))) | s(X120,X122) = s(X120,sK7(X122,X121,X120))) ) | $spl0),
  inference(superposition,[],[f620,f1907])).
fof(f19606,plain,(
  ( ! [X130,X128,X129] : (~p(s(bool,happ(s(fun(bool,bool),X129),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X129),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool)))) | s(bool,X128) = s(bool,X130) | s(bool,'F_0') = s(bool,X130)) ) | $spl0),
  inference(superposition,[],[f620,f1987])).
fof(f19674,plain,(
  ( ! [X127,X126] : (s(bool,'T_0') = s(bool,X126) | ~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X127),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f19605,f994])).
fof(f19605,plain,(
  ( ! [X127,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X127),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool)))) | s(bool,X126) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f620,f7614])).
fof(f21197,plain,(
  ( ! [X192,X193] : (s(bool,X192) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X192)),bool),X193,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X193),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X192)))) ) | $spl0),
  inference(forward_demodulation,[],[f21059,f994])).
fof(f21059,plain,(
  ( ! [X192,X193] : (~p(s(bool,happ(s(fun(bool,bool),X193),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X192)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X192)),bool),X193,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X192)))) ) | $spl0),
  inference(superposition,[],[f196,f8256])).
fof(f21198,plain,(
  ( ! [X216,X215] : (s(bool,X215) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X215)),bool),X216,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215)))) ) | $spl0),
  inference(forward_demodulation,[],[f21069,f994])).
fof(f21069,plain,(
  ( ! [X216,X215] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X215)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X215)),bool),X216,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215)))) ) | $spl0),
  inference(superposition,[],[f1907,f8256])).
fof(f21199,plain,(
  ( ! [X218,X217] : (s(bool,X217) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X217)),bool),X218,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X218),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X217)))) ) | $spl0),
  inference(forward_demodulation,[],[f21070,f994])).
fof(f21070,plain,(
  ( ! [X218,X217] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X218),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X217)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X217)),bool),X218,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X217)))) ) | $spl0),
  inference(superposition,[],[f2868,f8256])).
fof(f23328,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,sK7(X20,X21,bool)) = s(bool,sK7(sK7(X20,X21,bool),X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f2867,f146])).
fof(f23333,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,sK7(X34,X35,bool)) = s(bool,sK7(sK7(X34,X35,bool),X35,bool)) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f2867,f1778])).
fof(f23364,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X121),s(bool,'F_0')))) | s(bool,sK7('const.bool.IN_2'(s(X119,X120),s(fun(X119,bool),'const.pred_set.EMPTY_0')),X121,bool)) = s(bool,sK7(sK7('const.bool.IN_2'(s(X119,X120),s(fun(X119,bool),'const.pred_set.EMPTY_0')),X121,bool),X121,bool))) ) | $spl0),
  inference(superposition,[],[f2867,f261])).
fof(f23365,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,happ(s(fun(bool,bool),X125),s(bool,'F_0')))) | s(bool,sK7(happ(s(fun(X122,bool),X123),s(X122,X124)),X125,bool)) = s(bool,sK7(sK7(happ(s(fun(X122,bool),X123),s(X122,X124)),X125,bool),X125,bool)) | s(X122,X124) = s(X122,sK7(X124,X123,X122))) ) | $spl0),
  inference(superposition,[],[f2867,f1907])).
fof(f23366,plain,(
  ( ! [X127,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool),X127,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126)))) ) | $spl0),
  inference(superposition,[],[f2867,f8256])).
fof(f23369,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,happ(s(fun(bool,bool),X133),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X132)),bool),X133,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X132)),bool),X133,bool),X133,bool)) | s(bool,X132) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl0),
  inference(superposition,[],[f2867,f1987])).
fof(f23438,plain,(
  ( ! [X130,X131] : (s(bool,'T_0') = s(bool,X130) | ~p(s(bool,happ(s(fun(bool,bool),X131),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool),X131,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f23368,f994])).
fof(f23368,plain,(
  ( ! [X130,X131] : (~p(s(bool,happ(s(fun(bool,bool),X131),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool),X131,bool)) | s(bool,X130) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f7614])).
fof(f23798,plain,(
  ( ! [X127,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X127),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126)))) ) | $spl0),
  inference(superposition,[],[f620,f8256])).
fof(f27118,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,'F_0')))) | s(bool,X28) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31)),X29,bool)) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f532,f146])).
fof(f27123,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'F_0')))) | s(bool,X52) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X52),s(fun(X54,bool),X55)),X53,bool)) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f532,f1778])).
fof(f30181,plain,(
  ( ! [X534,X533,X535] : (~p(s(bool,happ(s(fun(bool,bool),X534),s(bool,'F_0')))) | s(bool,X533) = s(bool,sK7(X533,X534,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X535))) | s(bool,X533) = s(bool,X535)) ) | $spl0),
  inference(superposition,[],[f196,f3984])).
fof(f30191,plain,(
  ( ! [X573,X575,X571,X572,X574] : (~p(s(bool,happ(s(fun(bool,bool),X572),s(bool,'F_0')))) | s(bool,X571) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X573),'const.option.NONE_0'),s(bool,X571),s(fun(X573,bool),X574)),X572,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X575))) | s(bool,X571) = s(bool,X575)) ) | $spl0),
  inference(superposition,[],[f532,f3984])).
fof(f30193,plain,(
  ( ! [X580,X581,X579] : (~p(s(bool,happ(s(fun(bool,bool),X580),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X580),s(bool,sK7(X579,X580,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X581))) | s(bool,X579) = s(bool,X581)) ) | $spl0),
  inference(superposition,[],[f620,f3984])).
fof(f30196,plain,(
  ( ! [X588,X589,X587] : (~p(s(bool,happ(s(fun(bool,bool),X588),s(bool,'F_0')))) | s(bool,sK7(X587,X588,bool)) = s(bool,sK7(sK7(X587,X588,bool),X588,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X589))) | s(bool,X587) = s(bool,X589)) ) | $spl0),
  inference(superposition,[],[f2867,f3984])).
fof(f31413,plain,(
  ( ! [X175,X176,X174] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174))),s(bool,X175),s(fun(bool,bool),X176))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X176),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X174)) )),
  inference(superposition,[],[f657,f146])).
fof(f31414,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))),s(bool,X178),s(fun(bool,bool),X179))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X179),s(bool,'F_0'))) | s(bool,X177) = s(bool,X180) | s(bool,'F_0') = s(bool,X180)) ) | $spl0),
  inference(superposition,[],[f657,f1778])).
fof(f31416,plain,(
  ( ! [X187,X185,X188,X186] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))),s(bool,X186),s(fun(bool,bool),X187))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X187),s(bool,'F_0'))) | s(bool,X185) = s(bool,X188) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X188)),bool))) ) | $spl0),
  inference(superposition,[],[f657,f1987])).
fof(f31417,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))),s(bool,X190),s(fun(bool,bool),X191))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X191),s(bool,'F_0'))) | s(bool,X192) = s(bool,'const.bool.IN_2'(s(X193,X194),s(fun(X193,bool),'const.pred_set.EMPTY_0'))) | s(bool,X189) = s(bool,X192)) ) | $spl0),
  inference(superposition,[],[f657,f3053])).
fof(f31418,plain,(
  ( ! [X198,X196,X197,X195] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))),s(bool,X196),s(fun(bool,bool),X197))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X197),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198))) | s(bool,X195) = s(bool,X198)) ) | $spl0),
  inference(superposition,[],[f657,f3984])).
fof(f31457,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),X20),s(bool,X21),s(fun(bool,bool),X22))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X20,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X20)) )),
  inference(superposition,[],[f657,f543])).
fof(f32448,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'F_0')))) | s(bool,X52) = s(bool,sK7(X52,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(fun(bool,bool),X53),s(fun(X54,fun(bool,bool)),X55)),bool)) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f519,f1778])).
fof(f32459,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,'F_0')))) | s(bool,X115) = s(bool,sK7(X115,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(fun(bool,bool),X116),s(fun(X117,fun(bool,bool)),X118)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X115) = s(bool,X119)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f32599,plain,(
  ( ! [X285,X287,X283,X284,X286] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X283,X284),s(fun(X283,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X286),'const.option.NONE_0'),s(fun(bool,bool),X285),s(fun(X286,fun(bool,bool)),X287)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X285),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f32493,f261])).
fof(f32493,plain,(
  ( ! [X285,X287,X283,X284,X286] : (~p(s(bool,happ(s(fun(bool,bool),X285),s(bool,'F_0')))) | s(bool,'const.bool.IN_2'(s(X283,X284),s(fun(X283,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X283,X284),s(fun(X283,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X286),'const.option.NONE_0'),s(fun(bool,bool),X285),s(fun(X286,fun(bool,bool)),X287)),bool))) )),
  inference(superposition,[],[f519,f261])).
fof(f32602,plain,(
  ( ! [X300,X302,X301,X303] : (s(bool,X300) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X300)),bool),'const.option.option_CASE_3'(s('type.option.option'(X302),'const.option.NONE_0'),s(fun(bool,bool),X301),s(fun(X302,fun(bool,bool)),X303)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X301),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X300)))) ) | $spl0),
  inference(forward_demodulation,[],[f32496,f994])).
fof(f32496,plain,(
  ( ! [X300,X302,X301,X303] : (~p(s(bool,happ(s(fun(bool,bool),X301),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X300)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X300)),bool),'const.option.option_CASE_3'(s('type.option.option'(X302),'const.option.NONE_0'),s(fun(bool,bool),X301),s(fun(X302,fun(bool,bool)),X303)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X300)))) ) | $spl0),
  inference(superposition,[],[f519,f8256])).
fof(f32606,plain,(
  ( ! [X308,X310,X309,X311] : (s(bool,'T_0') = s(bool,X308) | s(bool,X308) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X308)),bool),'const.option.option_CASE_3'(s('type.option.option'(X310),'const.option.NONE_0'),s(fun(bool,bool),X309),s(fun(X310,fun(bool,bool)),X311)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X309),s(bool,'F_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f32605,f994])).
fof(f32605,plain,(
  ( ! [X308,X310,X309,X311] : (s(bool,X308) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X308)),bool),'const.option.option_CASE_3'(s('type.option.option'(X310),'const.option.NONE_0'),s(fun(bool,bool),X309),s(fun(X310,fun(bool,bool)),X311)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X309),s(bool,'F_0')))) | s(bool,X308) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f32498,f994])).
fof(f32498,plain,(
  ( ! [X308,X310,X309,X311] : (~p(s(bool,happ(s(fun(bool,bool),X309),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X308)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X308)),bool),'const.option.option_CASE_3'(s('type.option.option'(X310),'const.option.NONE_0'),s(fun(bool,bool),X309),s(fun(X310,fun(bool,bool)),X311)),bool)) | s(bool,X308) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f519,f7614])).
fof(f32607,plain,(
  ( ! [X313,X315,X316,X312,X314] : (s(bool,X312) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X312)),bool),'const.option.option_CASE_3'(s('type.option.option'(X314),'const.option.NONE_0'),s(fun(bool,bool),X313),s(fun(X314,fun(bool,bool)),X315)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X313),s(bool,'F_0')))) | s(bool,X312) = s(bool,X316) | s(bool,'F_0') = s(bool,X316)) ) | $spl0),
  inference(forward_demodulation,[],[f32499,f994])).
fof(f32499,plain,(
  ( ! [X313,X315,X316,X312,X314] : (~p(s(bool,happ(s(fun(bool,bool),X313),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X312)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X312)),bool),'const.option.option_CASE_3'(s('type.option.option'(X314),'const.option.NONE_0'),s(fun(bool,bool),X313),s(fun(X314,fun(bool,bool)),X315)),bool)) | s(bool,X312) = s(bool,X316) | s(bool,'F_0') = s(bool,X316)) ) | $spl0),
  inference(superposition,[],[f519,f1987])).
fof(f28912,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | s(bool,'T_0') = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool))) )),
  inference(forward_demodulation,[],[f28811,f211])).
fof(f28811,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool))) )),
  inference(superposition,[],[f617,f211])).
fof(f17600,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | s(bool,X13) = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f525,f211])).
fof(f15472,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | s(bool,'F_0') = s(bool,sK7('F_0',happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f524,f211])).
fof(f23680,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'T_0')))) | s(bool,X13) = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'F_0') = s(bool,X13)) ) | $spl0),
  inference(superposition,[],[f1912,f211])).
fof(f28911,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | s(bool,'T_0') = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool))) )),
  inference(forward_demodulation,[],[f28810,f210])).
fof(f28810,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool))) )),
  inference(superposition,[],[f617,f210])).
fof(f17599,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'F_0')))) | s(bool,X8) = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f525,f210])).
fof(f15471,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f524,f210])).
fof(f23679,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'T_0')))) | s(bool,X8) = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f1912,f210])).
fof(f18042,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),X34)))) | s('type.option.option'(bool),X32) != s('type.option.option'(bool),X34) | s(bool,'T_0') = s(bool,sK6(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f195,f543])).
fof(f18060,plain,(
  ( ! [X80,X79] : (p(s(bool,happ(s(fun('type.option.option'(bool),bool),X80),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X80),s('type.option.option'(bool),X79)))) | s(bool,'T_0') = s(bool,sK6(sK7(X79,X80,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK7(X79,X80,'type.option.option'(bool)))) )),
  inference(superposition,[],[f197,f543])).
fof(f18077,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),X32)))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),X34)))) | s('type.option.option'(bool),X34) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f195,f543])).
fof(f18078,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X36,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35)) )),
  inference(superposition,[],[f196,f543])).
fof(f19375,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') = s(bool,X39) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X40),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X40),s('type.option.option'(bool),X41)))) | s('type.option.option'(bool),X41) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f18985,f994])).
fof(f18985,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X40),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X40),s('type.option.option'(bool),X41)))) | s('type.option.option'(bool),X41) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X39) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f195,f8126])).
fof(f19386,plain,(
  ( ! [X39,X38,X40] : (s(bool,'T_0') = s(bool,X38) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),X40)))) | s('type.option.option'(bool),X40) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38)))) ) | $spl0),
  inference(forward_demodulation,[],[f19017,f994])).
fof(f19017,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),X40)))) | s('type.option.option'(bool),X40) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X38) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f195,f8126])).
fof(f19618,plain,(
  ( ! [X156,X157] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X157),s('type.option.option'(bool),X156)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X157),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X157,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(X156,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X156)) )),
  inference(superposition,[],[f620,f543])).
fof(f23384,plain,(
  ( ! [X165,X166] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),X165)))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool)),X166,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X165,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | $spl0),
  inference(superposition,[],[f2867,f543])).
fof(f27180,plain,(
  ( ! [X327,X329,X328,X330] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X328),s('type.option.option'(bool),X327)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X329),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X329,'type.option.option'(bool)),X330)),X328,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X327,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X327)) )),
  inference(superposition,[],[f532,f543])).
fof(f29299,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X76),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X76),s('type.option.option'(bool),X77)))) | s('type.option.option'(bool),X77) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X75) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl0),
  inference(superposition,[],[f195,f3984])).
fof(f29344,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X76),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X76),s('type.option.option'(bool),X77)))) | s('type.option.option'(bool),X77) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) | s(bool,X75) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl0),
  inference(superposition,[],[f195,f3984])).
fof(f32516,plain,(
  ( ! [X385,X387,X388,X386] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X386),s('type.option.option'(bool),X385)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X387),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X386),s(fun(X387,fun('type.option.option'(bool),bool)),X388)),'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X385,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X385)) )),
  inference(superposition,[],[f519,f543])).
fof(f554,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun('type.option.option'(X26),bool),X28),s('type.option.option'(X26),X27)))) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,sK6(X27,X26)))) = s('type.option.option'(X26),sK7('const.option.SOME_1'(s(X26,sK6(X27,X26))),X28,'type.option.option'(X26))) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),X27)) )),
  inference(superposition,[],[f196,f186])).
fof(f831,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,happ(s(fun('type.option.option'(X25),bool),X27),s('type.option.option'(X25),X26)))) | p(s(bool,happ(s(fun('type.option.option'(X25),bool),X27),s('type.option.option'(X25),X28)))) | s('type.option.option'(X25),X28) != s('type.option.option'(X25),'const.option.SOME_1'(s(X25,sK6(X26,X25)))) | s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),X26)) )),
  inference(superposition,[],[f195,f186])).
fof(f908,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(X25),bool),X27),s('type.option.option'(X25),X26))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(X25)),'const.option.SOME_1'(s('type.option.option'(X25),'const.option.SOME_1'(s(X25,sK6(X26,X25)))))),s(bool,X28),s(fun('type.option.option'(X25),bool),X27))) | s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),X26)) ) | $spl0),
  inference(superposition,[],[f897,f186])).
fof(f2794,plain,(
  ( ! [X80,X78,X79] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X78),bool),X80),s('type.option.option'(X78),X79))) | s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | $spl0),
  inference(superposition,[],[f1907,f186])).
fof(f3088,plain,(
  ( ! [X80,X78,X79] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(X78),bool),X80),s('type.option.option'(X78),X79))) | s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | $spl0),
  inference(superposition,[],[f2868,f186])).
fof(f19616,plain,(
  ( ! [X152,X151,X153] : (~p(s(bool,happ(s(fun('type.option.option'(X151),bool),X153),s('type.option.option'(X151),X152)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X151),bool),X153),s('type.option.option'(X151),sK7('const.option.SOME_1'(s(X151,sK6(X152,X151))),X153,'type.option.option'(X151))))) | s('type.option.option'(X151),'const.option.NONE_0') = s('type.option.option'(X151),X152)) )),
  inference(superposition,[],[f620,f186])).
fof(f23385,plain,(
  ( ! [X167,X169,X168] : (~p(s(bool,happ(s(fun('type.option.option'(X167),bool),X169),s('type.option.option'(X167),X168)))) | s('type.option.option'(X167),sK7('const.option.SOME_1'(s(X167,sK6(X168,X167))),X169,'type.option.option'(X167))) = s('type.option.option'(X167),sK7(sK7('const.option.SOME_1'(s(X167,sK6(X168,X167))),X169,'type.option.option'(X167)),X169,'type.option.option'(X167))) | s('type.option.option'(X167),'const.option.NONE_0') = s('type.option.option'(X167),X168)) ) | $spl0),
  inference(superposition,[],[f2867,f186])).
fof(f27181,plain,(
  ( ! [X333,X335,X331,X332,X334] : (~p(s(bool,happ(s(fun('type.option.option'(X331),bool),X333),s('type.option.option'(X331),X332)))) | s('type.option.option'(X331),'const.option.SOME_1'(s(X331,sK6(X332,X331)))) = s('type.option.option'(X331),sK7('const.option.option_CASE_3'(s('type.option.option'(X334),'const.option.NONE_0'),s('type.option.option'(X331),'const.option.SOME_1'(s(X331,sK6(X332,X331)))),s(fun(X334,'type.option.option'(X331)),X335)),X333,'type.option.option'(X331))) | s('type.option.option'(X331),'const.option.NONE_0') = s('type.option.option'(X331),X332)) )),
  inference(superposition,[],[f532,f186])).
fof(f32517,plain,(
  ( ! [X389,X391,X393,X390,X392] : (~p(s(bool,happ(s(fun('type.option.option'(X389),bool),X391),s('type.option.option'(X389),X390)))) | s('type.option.option'(X389),'const.option.SOME_1'(s(X389,sK6(X390,X389)))) = s('type.option.option'(X389),sK7('const.option.SOME_1'(s(X389,sK6(X390,X389))),'const.option.option_CASE_3'(s('type.option.option'(X392),'const.option.NONE_0'),s(fun('type.option.option'(X389),bool),X391),s(fun(X392,fun('type.option.option'(X389),bool)),X393)),'type.option.option'(X389))) | s('type.option.option'(X389),'const.option.NONE_0') = s('type.option.option'(X389),X390)) )),
  inference(superposition,[],[f519,f186])).
fof(f18043,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X35) = s('type.option.option'(bool),sK7(X35,X36,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35)) )),
  inference(superposition,[],[f196,f543])).
fof(f19387,plain,(
  ( ! [X41,X42] : (s(bool,'T_0') = s(bool,X41) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X42),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X41)),X42,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f19018,f994])).
fof(f19018,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X42),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X41)),X42,'type.option.option'(bool))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f196,f8126])).
fof(f19620,plain,(
  ( ! [X161,X160] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X161),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X161),s('type.option.option'(bool),sK7(X160,X161,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(X160,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X160)) )),
  inference(superposition,[],[f620,f543])).
fof(f19678,plain,(
  ( ! [X158,X159] : (s(bool,'T_0') = s(bool,X158) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X159),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X159),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X158)),X159,'type.option.option'(bool)))))) ) | $spl0),
  inference(forward_demodulation,[],[f19619,f994])).
fof(f19619,plain,(
  ( ! [X158,X159] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X159),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X159),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X158)),X159,'type.option.option'(bool))))) | s(bool,X158) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f620,f8126])).
fof(f23386,plain,(
  ( ! [X171,X170] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X171),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7(X170,X171,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7(X170,X171,'type.option.option'(bool)),X171,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X170,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170)) ) | $spl0),
  inference(superposition,[],[f2867,f543])).
fof(f23442,plain,(
  ( ! [X159,X160] : (s(bool,'T_0') = s(bool,X159) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X160),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X159)),X160,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X159)),X160,'type.option.option'(bool)),X160,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f23381,f994])).
fof(f23381,plain,(
  ( ! [X159,X160] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X160),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X159)),X160,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X159)),X160,'type.option.option'(bool)),X160,'type.option.option'(bool))) | s(bool,X159) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f8126])).
fof(f27182,plain,(
  ( ! [X337,X339,X336,X338] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X337),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X336) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X338),'const.option.NONE_0'),s('type.option.option'(bool),X336),s(fun(X338,'type.option.option'(bool)),X339)),X337,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X336,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X336)) )),
  inference(superposition,[],[f532,f543])).
fof(f27268,plain,(
  ( ! [X315,X316,X318,X317] : (s(bool,'T_0') = s(bool,X315) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X316),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X317),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))),s(fun(X317,'type.option.option'(bool)),X318)),X316,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f27177,f994])).
fof(f27177,plain,(
  ( ! [X315,X316,X318,X317] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X316),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X317),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))),s(fun(X317,'type.option.option'(bool)),X318)),X316,'type.option.option'(bool))) | s(bool,X315) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f532,f8126])).
fof(f29345,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X80),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X79)),X80,'type.option.option'(bool))) | s(bool,X79) = s(bool,X81) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f196,f3984])).
fof(f29355,plain,(
  ( ! [X121,X118,X120,X119,X117] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X118),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X117))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X119),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X117))),s(fun(X119,'type.option.option'(bool)),X120)),X118,'type.option.option'(bool))) | s(bool,X117) = s(bool,X121) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f532,f3984])).
fof(f29357,plain,(
  ( ! [X127,X125,X126] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X126),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X126),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X125)),X126,'type.option.option'(bool))))) | s(bool,X125) = s(bool,X127) | s(bool,'F_0') = s(bool,X127)) ) | $spl0),
  inference(superposition,[],[f620,f3984])).
fof(f29360,plain,(
  ( ! [X134,X135,X133] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X134),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X133)),X134,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X133)),X134,'type.option.option'(bool)),X134,'type.option.option'(bool))) | s(bool,X133) = s(bool,X135) | s(bool,'F_0') = s(bool,X135)) ) | $spl0),
  inference(superposition,[],[f2867,f3984])).
fof(f31446,plain,(
  ( ! [X300,X302,X301,X299] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X299))))),s(bool,X300),s(fun('type.option.option'(bool),bool),X301))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X301),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X299) = s(bool,X302) | s(bool,'F_0') = s(bool,X302)) ) | $spl0),
  inference(superposition,[],[f657,f3984])).
fof(f31448,plain,(
  ( ! [X308,X306,X307] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X306))),s(bool,X307),s(fun('type.option.option'(bool),bool),X308))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X308),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK6(X306,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X306)) )),
  inference(superposition,[],[f657,f543])).
fof(f31813,plain,(
  ( ! [X304,X303,X305] : (s(bool,'T_0') = s(bool,X303) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X303))))),s(bool,X304),s(fun('type.option.option'(bool),bool),X305))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X305),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f31447,f994])).
fof(f31447,plain,(
  ( ! [X304,X303,X305] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X303))))),s(bool,X304),s(fun('type.option.option'(bool),bool),X305))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X305),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X303) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f657,f8126])).
fof(f32510,plain,(
  ( ! [X360,X362,X359,X361,X363] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X360),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X359))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X359)),'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X360),s(fun(X361,fun('type.option.option'(bool),bool)),X362)),'type.option.option'(bool))) | s(bool,X359) = s(bool,X363) | s(bool,'F_0') = s(bool,X363)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f32518,plain,(
  ( ! [X397,X395,X396,X394] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X395),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X394) = s('type.option.option'(bool),sK7(X394,'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X395),s(fun(X396,fun('type.option.option'(bool),bool)),X397)),'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X394,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X394)) )),
  inference(superposition,[],[f519,f543])).
fof(f32620,plain,(
  ( ! [X368,X370,X369,X371] : (s(bool,'T_0') = s(bool,X368) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X369),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X368))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X368)),'const.option.option_CASE_3'(s('type.option.option'(X370),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X369),s(fun(X370,fun('type.option.option'(bool),bool)),X371)),'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f32512,f994])).
fof(f32512,plain,(
  ( ! [X368,X370,X369,X371] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X369),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X368))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X368)),'const.option.option_CASE_3'(s('type.option.option'(X370),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X369),s(fun(X370,fun('type.option.option'(bool),bool)),X371)),'type.option.option'(bool))) | s(bool,X368) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f519,f8126])).
fof(f19376,plain,(
  ( ! [X43,X42] : (s(bool,'T_0') = s(bool,X42) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X43),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X43,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f18986,f994])).
fof(f18986,plain,(
  ( ! [X43,X42] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X43),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X43,'type.option.option'(bool))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f196,f8126])).
fof(f19677,plain,(
  ( ! [X154,X155] : (s(bool,'T_0') = s(bool,X154) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X155),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X154)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X155),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X155,'type.option.option'(bool)))))) ) | $spl0),
  inference(forward_demodulation,[],[f19617,f994])).
fof(f19617,plain,(
  ( ! [X154,X155] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X155),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X154)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X155),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X155,'type.option.option'(bool))))) | s(bool,X154) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f620,f8126])).
fof(f23444,plain,(
  ( ! [X163,X164] : (s(bool,'T_0') = s(bool,X163) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X164),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X163)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool)),X164,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f23383,f994])).
fof(f23383,plain,(
  ( ! [X163,X164] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X164),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X163)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool)),X164,'type.option.option'(bool))) | s(bool,X163) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f8126])).
fof(f27270,plain,(
  ( ! [X325,X323,X324,X326] : (s(bool,'T_0') = s(bool,X323) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X324),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X323)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X325),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X325,'type.option.option'(bool)),X326)),X324,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f27179,f994])).
fof(f27179,plain,(
  ( ! [X325,X323,X324,X326] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X324),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X323)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X325),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X325,'type.option.option'(bool)),X326)),X324,'type.option.option'(bool))) | s(bool,X323) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f532,f8126])).
fof(f29300,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X80),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X80,'type.option.option'(bool))) | s(bool,X79) = s(bool,X81) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f196,f3984])).
fof(f29310,plain,(
  ( ! [X121,X118,X120,X119,X117] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X118),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X117)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X119),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X119,'type.option.option'(bool)),X120)),X118,'type.option.option'(bool))) | s(bool,X117) = s(bool,X121) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f532,f3984])).
fof(f29312,plain,(
  ( ! [X127,X125,X126] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X126),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X126),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X126,'type.option.option'(bool))))) | s(bool,X125) = s(bool,X127) | s(bool,'F_0') = s(bool,X127)) ) | $spl0),
  inference(superposition,[],[f620,f3984])).
fof(f29315,plain,(
  ( ! [X134,X135,X133] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X134),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X133)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X134,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X134,'type.option.option'(bool)),X134,'type.option.option'(bool))) | s(bool,X133) = s(bool,X135) | s(bool,'F_0') = s(bool,X135)) ) | $spl0),
  inference(superposition,[],[f2867,f3984])).
fof(f32514,plain,(
  ( ! [X377,X379,X380,X376,X378] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X377),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X376)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X378),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X377),s(fun(X378,fun('type.option.option'(bool),bool)),X379)),'type.option.option'(bool))) | s(bool,X376) = s(bool,X380) | s(bool,'F_0') = s(bool,X380)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f32622,plain,(
  ( ! [X383,X382,X384,X381] : (s(bool,'T_0') = s(bool,X381) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X382),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X381)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X383),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X382),s(fun(X383,fun('type.option.option'(bool),bool)),X384)),'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f32515,f994])).
fof(f32515,plain,(
  ( ! [X383,X382,X384,X381] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X382),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X381)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X383),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X382),s(fun(X383,fun('type.option.option'(bool),bool)),X384)),'type.option.option'(bool))) | s(bool,X381) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f519,f8126])).
fof(f3392,plain,(
  ( ! [X253,X252] : (s('type.option.option'(bool),X252) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X253))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252) | s(bool,'F_0') = s(bool,X253) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X252,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f186,f1987])).
fof(f8218,plain,(
  ( ! [X148] : (s('type.option.option'(bool),X148) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X148) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X148,bool))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7964,f994])).
fof(f7964,plain,(
  ( ! [X148] : (s('type.option.option'(bool),X148) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X148) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X148,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f186,f7614])).
fof(f18040,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),X29) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X28))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X29))) | s(bool,'T_0') = s(bool,sK6(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28)) )),
  inference(superposition,[],[f194,f543])).
fof(f18052,plain,(
  ( ! [X57,X56] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X57),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X56) = s('type.option.option'(bool),sK7(X56,X57,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X56,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X56)) ) | $spl0),
  inference(superposition,[],[f1907,f543])).
fof(f18053,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X59),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X58) = s('type.option.option'(bool),sK7(X58,X59,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X58,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X58)) ) | $spl0),
  inference(superposition,[],[f2868,f543])).
fof(f18067,plain,(
  ( ! [X12,X10,X13,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,'F_0'))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(bool),X10),s(X11,X13),s(fun(bool,X11),X12))) | s(bool,'T_0') = s(bool,sK6(X10,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X10)) )),
  inference(superposition,[],[f210,f543])).
fof(f18073,plain,(
  ( ! [X24,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X24))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X25))) | s('type.option.option'(bool),X25) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X24,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X24)) )),
  inference(superposition,[],[f193,f543])).
fof(f18087,plain,(
  ( ! [X57,X56] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X57),s('type.option.option'(bool),X56))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X57,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X56,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X56)) ) | $spl0),
  inference(superposition,[],[f1907,f543])).
fof(f18088,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X59),s('type.option.option'(bool),X58))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X59,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X58,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X58)) ) | $spl0),
  inference(superposition,[],[f2868,f543])).
fof(f18166,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,'T_0') != s(bool,X133) | s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,sK6(X132,bool)),s(fun(X134,bool),X135))) | s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | $spl0),
  inference(superposition,[],[f8919,f543])).
fof(f18188,plain,(
  ( ! [X171,X172] : (s(bool,'T_0') != s(bool,X172) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X171,bool)))) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) )),
  inference(superposition,[],[f194,f543])).
fof(f18200,plain,(
  ( ! [X200,X199] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X200),s(bool,'T_0'))) | s(bool,sK6(X199,bool)) = s(bool,sK7(sK6(X199,bool),X200,bool)) | s('type.option.option'(bool),X199) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X199)) ) | $spl0),
  inference(superposition,[],[f1907,f543])).
fof(f18201,plain,(
  ( ! [X202,X201] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X202),s(bool,'T_0'))) | s(bool,sK6(X201,bool)) = s(bool,sK7(sK6(X201,bool),X202,bool)) | s('type.option.option'(bool),X201) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X201)) ) | $spl0),
  inference(superposition,[],[f2868,f543])).
fof(f18208,plain,(
  ( ! [X118,X116,X117] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,sK6(X116,bool)),s(fun(X117,bool),X118))) | s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f18156])).
fof(f18156,plain,(
  ( ! [X118,X116,X117] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,sK6(X116,bool)),s(fun(X117,bool),X118))) | s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116)) ) | $spl0),
  inference(superposition,[],[f5281,f543])).
fof(f18210,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X90,bool))),bool)) | s(bool,'F_0') = s(bool,X91) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f18141])).
fof(f18141,plain,(
  ( ! [X90,X91] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X90,bool))),bool)) | s(bool,'F_0') = s(bool,X91) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | $spl0),
  inference(superposition,[],[f2635,f543])).
fof(f18249,plain,(
  ( ! [X35,X34] : (~p(s(bool,X35)) | s(bool,X35) = s(bool,sK6(X34,bool)) | s('type.option.option'(bool),X34) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X34)) )),
  inference(subsumption_resolution,[],[f18115,f143])).
fof(f18115,plain,(
  ( ! [X35,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | s(bool,X35) = s(bool,sK6(X34,bool)) | s('type.option.option'(bool),X34) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X34)) )),
  inference(superposition,[],[f201,f543])).
fof(f18250,plain,(
  ( ! [X37,X36] : (p(s(bool,X37)) | s(bool,X37) != s(bool,sK6(X36,bool)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) )),
  inference(subsumption_resolution,[],[f18116,f143])).
fof(f18116,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | p(s(bool,X37)) | s(bool,X37) != s(bool,sK6(X36,bool)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) )),
  inference(superposition,[],[f203,f543])).
fof(f18645,plain,(
  ( ! [X146,X145] : (s('type.option.option'(bool),X146) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X145,bool)) = s(bool,sK6(X146,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X146) | s('type.option.option'(bool),X145) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X145)) )),
  inference(superposition,[],[f544,f543])).
fof(f18647,plain,(
  ( ! [X151,X150] : (s('type.option.option'('type.option.option'(bool)),X151) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X151,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X151) | s(bool,'T_0') = s(bool,sK6(X150,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150)) )),
  inference(superposition,[],[f544,f543])).
fof(f19508,plain,(
  ( ! [X260] : (s('type.option.option'(bool),X260) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X260) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X260,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f19165,f994])).
fof(f19165,plain,(
  ( ! [X260] : (s('type.option.option'(bool),X260) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X260) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X260,bool))))) ) | $spl0),
  inference(superposition,[],[f186,f8126])).
fof(f21126,plain,(
  ( ! [X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X79,bool)))) | s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | $spl0),
  inference(subsumption_resolution,[],[f21125,f250])).
fof(f21125,plain,(
  ( ! [X79] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X79,bool)))) | s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | $spl0),
  inference(forward_demodulation,[],[f20916,f994])).
fof(f20916,plain,(
  ( ! [X79] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X79,bool)))) | s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | $spl0),
  inference(superposition,[],[f8256,f543])).
fof(f24228,plain,(
  ( ! [X265,X267,X268,X266] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X266))) | s(bool,X266) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X267),'const.option.NONE_0'),s(bool,sK6(X265,bool)),s(fun(X267,bool),X268))) | s('type.option.option'(bool),X265) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X265)) )),
  inference(superposition,[],[f443,f543])).
fof(f24233,plain,(
  ( ! [X288,X285,X287,X286] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X285))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X286))) | s('type.option.option'(bool),X286) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X287),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X287,'type.option.option'(bool)),X288))) | s(bool,'T_0') = s(bool,sK6(X285,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X285)) )),
  inference(superposition,[],[f443,f543])).
fof(f24235,plain,(
  ( ! [X294,X296,X295,X297] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X295))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X295) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X296),'const.option.NONE_0'),s('type.option.option'(bool),X294),s(fun(X296,'type.option.option'(bool)),X297))) | s(bool,'T_0') = s(bool,sK6(X294,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X294)) )),
  inference(superposition,[],[f443,f543])).
fof(f24303,plain,(
  ( ! [X288,X285,X287,X286] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X285))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X286))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X287),'const.option.NONE_0'),s('type.option.option'(bool),X286),s(fun(X287,'type.option.option'(bool)),X288))) | s(bool,'T_0') = s(bool,sK6(X285,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X285)) )),
  inference(superposition,[],[f443,f543])).
fof(f29606,plain,(
  ( ! [X720,X719] : (s('type.option.option'(bool),X719) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X720))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X719) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X719,bool)))) | s(bool,'F_0') = s(bool,X720)) ) | $spl0),
  inference(superposition,[],[f186,f3984])).
fof(f31441,plain,(
  ( ! [X285,X283,X284] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X284),s(fun(bool,bool),X285))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X285),s(bool,sK6(X283,bool)))) | s('type.option.option'(bool),X283) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X283)) )),
  inference(superposition,[],[f657,f543])).
fof(f31450,plain,(
  ( ! [X313,X315,X314] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X314),s(fun('type.option.option'(bool),bool),X315))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X315),s('type.option.option'(bool),X313))) | s(bool,'T_0') = s(bool,sK6(X313,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X313)) )),
  inference(superposition,[],[f657,f543])).
fof(f2783,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X49),s(bool,X48))) | s(bool,'T_0') = s(bool,sK7('T_0',X49,bool)) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f1907,f278])).
fof(f3077,plain,(
  ( ! [X50,X48,X49] : (s(bool,X48) != s(bool,happ(s(fun(bool,bool),X49),s(bool,X48))) | s(bool,'T_0') = s(bool,sK7('T_0',X49,bool)) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f2868,f278])).
fof(f2785,plain,(
  ( ! [X54,X56,X55] : (s(bool,X54) = s(bool,happ(s(fun(bool,bool),X55),s(bool,X54))) | s(bool,'F_0') = s(bool,sK7('F_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f1907,f1778])).
fof(f2787,plain,(
  ( ! [X61,X60] : (s(bool,X60) = s(bool,happ(s(fun(bool,bool),X61),s(bool,X60))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f1907,f146])).
fof(f3079,plain,(
  ( ! [X54,X56,X55] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X55),s(bool,X54))) | s(bool,'F_0') = s(bool,sK7('F_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f2868,f1778])).
fof(f3081,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X61),s(bool,X60))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f2868,f146])).
fof(f3529,plain,(
  ( ! [X152,X151,X153] : (s(bool,X151) = s(bool,happ(s(fun(bool,bool),X152),s(bool,X151))) | s(bool,'F_0') = s(bool,sK7('F_0',X152,bool)) | s(bool,X151) = s(bool,X153) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X153)),bool))) ) | $spl0),
  inference(superposition,[],[f1907,f1987])).
fof(f3530,plain,(
  ( ! [X156,X154,X155] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X155),s(bool,X154))) | s(bool,'F_0') = s(bool,sK7('F_0',X155,bool)) | s(bool,X154) = s(bool,X156) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X156)),bool))) ) | $spl0),
  inference(superposition,[],[f2868,f1987])).
fof(f15568,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,sK7('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f15520,f143])).
fof(f15520,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f524,f278])).
fof(f15577,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,sK7('F_0',X0,bool)) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) ) | $spl0),
  inference(condensation,[],[f15576])).
fof(f15576,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X36) | s(bool,'F_0') = s(bool,sK7('F_0',X34,bool)) | s(bool,'T_0') = s(bool,X35) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X35)))) ) | $spl0),
  inference(subsumption_resolution,[],[f15575,f153])).
fof(f15575,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X36) | ~p(s(bool,X36)) | s(bool,'F_0') = s(bool,sK7('F_0',X34,bool)) | s(bool,'T_0') = s(bool,X35) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X35)))) ) | $spl0),
  inference(forward_demodulation,[],[f15530,f994])).
fof(f15530,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X36)) | s(bool,'F_0') = s(bool,sK7('F_0',X34,bool)) | s(bool,'T_0') = s(bool,X35) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X35))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl0),
  inference(superposition,[],[f524,f1987])).
fof(f25610,plain,(
  ( ! [X629,X631,X632,X628,X630] : (s(bool,X628) = s(bool,happ(s(fun(bool,bool),X629),s(bool,X628))) | s(bool,'F_0') = s(bool,sK7('F_0',X629,bool)) | s(bool,X630) = s(bool,'const.bool.IN_2'(s(X631,X632),s(fun(X631,bool),'const.pred_set.EMPTY_0'))) | s(bool,X628) = s(bool,X630)) ) | $spl0),
  inference(superposition,[],[f1907,f3053])).
fof(f25612,plain,(
  ( ! [X639,X640,X642,X638,X641] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X639),s(bool,X638))) | s(bool,'F_0') = s(bool,sK7('F_0',X639,bool)) | s(bool,X640) = s(bool,'const.bool.IN_2'(s(X641,X642),s(fun(X641,bool),'const.pred_set.EMPTY_0'))) | s(bool,X638) = s(bool,X640)) ) | $spl0),
  inference(superposition,[],[f2868,f3053])).
fof(f29993,plain,(
  ( ! [X445,X444,X446] : (s(bool,X444) = s(bool,happ(s(fun(bool,bool),X445),s(bool,X444))) | s(bool,'F_0') = s(bool,sK7('F_0',X445,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X446))) | s(bool,X444) = s(bool,X446)) ) | $spl0),
  inference(superposition,[],[f1907,f3984])).
fof(f29995,plain,(
  ( ! [X451,X452,X450] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X451),s(bool,X450))) | s(bool,'F_0') = s(bool,sK7('F_0',X451,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X452))) | s(bool,X450) = s(bool,X452)) ) | $spl0),
  inference(superposition,[],[f2868,f3984])).
fof(f3395,plain,(
  ( ! [X261,X259,X260,X262] : (s(X261,f(s(bool,X262))) != s(X261,g(s(bool,X262))) | s(fun(bool,X261),X259) = s(fun(bool,X261),X260) | s(bool,'F_0') = s(bool,X262) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X259,X260,X261,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f209,f1987])).
fof(f8223,plain,(
  ( ! [X154,X152,X153] : (s(X154,f(s(bool,'T_0'))) != s(X154,g(s(bool,'T_0'))) | s(fun(bool,X154),X152) = s(fun(bool,X154),X153) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X152,X153,X154,bool))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7967,f994])).
fof(f7967,plain,(
  ( ! [X154,X152,X153] : (s(X154,f(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) != s(X154,g(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(fun(bool,X154),X152) = s(fun(bool,X154),X153) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X152,X153,X154,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f209,f7614])).
fof(f19512,plain,(
  ( ! [X265,X264,X266] : (s(X266,f(s(bool,'T_0'))) != s(X266,g(s(bool,'T_0'))) | s(fun(bool,X266),X264) = s(fun(bool,X266),X265) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X264,X265,X266,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f19168,f994])).
fof(f19168,plain,(
  ( ! [X265,X264,X266] : (s(X266,f(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) != s(X266,g(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(fun(bool,X266),X264) = s(fun(bool,X266),X265) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X264,X265,X266,bool))))) ) | $spl0),
  inference(superposition,[],[f209,f8126])).
fof(f29609,plain,(
  ( ! [X728,X726,X729,X727] : (s(X728,f(s(bool,X729))) != s(X728,g(s(bool,X729))) | s(fun(bool,X728),X726) = s(fun(bool,X728),X727) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X726,X727,X728,bool)))) | s(bool,'F_0') = s(bool,X729)) ) | $spl0),
  inference(superposition,[],[f209,f3984])).
fof(f876,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f209,f146])).
fof(f933,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),X6),s(bool,X7),s(fun(X5,bool),X8))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X5,bool),bool),happ(s(fun(bool,fun(fun(X5,bool),bool)),happ(s(fun('type.option.option'(X5),fun(bool,fun(fun(X5,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X5),X6))),s(bool,X7))),s(fun(X5,bool),X8)))) )),
  inference(superposition,[],[f211,f146])).
fof(f657,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X6))),s(bool,X7),s(fun(X5,bool),X8))) | s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X8),s(X5,X6)))) )),
  inference(superposition,[],[f210,f146])).
fof(f525,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0')))) | s(bool,X8) = s(bool,sK7(X8,X9,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f196,f146])).
fof(f31458,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X23),X24),s(bool,X25),s(fun(X23,bool),X26))) | s(bool,'F_0') = s(bool,happ(s(fun(X23,bool),X26),s(X23,sK6(X24,X23)))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) )),
  inference(superposition,[],[f657,f186])).
fof(f31449,plain,(
  ( ! [X310,X312,X309,X311] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(X309)),'const.option.SOME_1'(s('type.option.option'(X309),X310))),s(bool,X311),s(fun('type.option.option'(X309),bool),X312))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X309),bool),X312),s('type.option.option'(X309),'const.option.SOME_1'(s(X309,sK6(X310,X309)))))) | s('type.option.option'(X309),'const.option.NONE_0') = s('type.option.option'(X309),X310)) )),
  inference(superposition,[],[f657,f186])).
fof(f31811,plain,(
  ( ! [X294,X293,X295] : (s(bool,'T_0') = s(bool,X293) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X294),s(fun('type.option.option'(bool),bool),X295))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X295),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X293)))))) ) | $spl0),
  inference(forward_demodulation,[],[f31444,f994])).
fof(f31444,plain,(
  ( ! [X294,X293,X295] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X294),s(fun('type.option.option'(bool),bool),X295))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X295),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X293))))) | s(bool,X293) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f657,f8126])).
fof(f31442,plain,(
  ( ! [X288,X287,X289,X286] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X287),s(fun('type.option.option'(bool),bool),X288))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X288),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X286))))) | s(bool,X286) = s(bool,X289) | s(bool,'F_0') = s(bool,X289)) ) | $spl0),
  inference(superposition,[],[f657,f3984])).
fof(f31768,plain,(
  ( ! [X114,X115,X113] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X114),s(fun(bool,bool),X115))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X115),s(bool,X113))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113)))) ) | $spl0),
  inference(forward_demodulation,[],[f31397,f994])).
fof(f31397,plain,(
  ( ! [X114,X115,X113] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))),s(bool,X114),s(fun(bool,bool),X115))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X115),s(bool,X113))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113)))) ) | $spl0),
  inference(superposition,[],[f657,f8126])).
fof(f31765,plain,(
  ( ! [X109,X107,X108] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X108),s(fun(bool,bool),X109))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X109),s(bool,X107))) | s(bool,'F_0') = s(bool,X107)) ) | $spl0),
  inference(forward_demodulation,[],[f31395,f994])).
fof(f31395,plain,(
  ( ! [X109,X107,X108] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))),s(bool,X108),s(fun(bool,bool),X109))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X109),s(bool,X107))) | s(bool,'F_0') = s(bool,X107)) ) | $spl0),
  inference(superposition,[],[f657,f7381])).
fof(f31394,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))),s(bool,X105),s(fun(bool,bool),X106))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X106),s(bool,X103))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) | s(bool,'F_0') = s(bool,X103)) ) | $spl0),
  inference(superposition,[],[f657,f3984])).
fof(f31393,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100))),s(bool,X101),s(fun(bool,bool),X102))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X102),s(bool,X99))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) | s(bool,'F_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f657,f3984])).
fof(f31392,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X96),s(fun(bool,bool),X97))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X97),s(bool,X95))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,X95) = s(bool,X98)) ) | $spl0),
  inference(superposition,[],[f657,f3984])).
fof(f31391,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X90))),s(bool,X91),s(fun(bool,bool),X92))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X92),s(bool,X89))) | s(bool,X90) = s(bool,'const.bool.IN_2'(s(X93,X94),s(fun(X93,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X89)) ) | $spl0),
  inference(superposition,[],[f657,f3053])).
fof(f31390,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))),s(bool,X85),s(fun(bool,bool),X86))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X86),s(bool,X83))) | s(bool,X83) = s(bool,'const.bool.IN_2'(s(X87,X88),s(fun(X87,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X84)) ) | $spl0),
  inference(superposition,[],[f657,f3053])).
fof(f31389,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X78),s(fun(bool,bool),X79))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X79),s(bool,X77))) | s(bool,X80) = s(bool,'const.bool.IN_2'(s(X81,X82),s(fun(X81,bool),'const.pred_set.EMPTY_0'))) | s(bool,X77) = s(bool,X80)) ) | $spl0),
  inference(superposition,[],[f657,f3053])).
fof(f31385,plain,(
  ( ! [X61,X59,X62,X60] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X60),s(fun(bool,bool),X61))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X61),s(bool,X59))) | s(bool,X59) = s(bool,X62) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl0),
  inference(superposition,[],[f657,f1987])).
fof(f31382,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))),s(bool,X49),s(fun(bool,bool),X50))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X50),s(bool,X47))) | s(bool,'F_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X47)) ) | $spl0),
  inference(superposition,[],[f657,f1778])).
fof(f31381,plain,(
  ( ! [X45,X43,X46,X44] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X44),s(fun(bool,bool),X45))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,X43))) | s(bool,X43) = s(bool,X46) | s(bool,'F_0') = s(bool,X46)) ) | $spl0),
  inference(superposition,[],[f657,f1778])).
fof(f31378,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))),s(bool,X33),s(fun(bool,bool),X34))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f657,f278])).
fof(f31377,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X28),s(fun(bool,bool),X29))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X29),s(bool,X27))) | s(bool,X27) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f657,f278])).
fof(f31376,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X25),s(fun(bool,bool),X26))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X26),s(bool,X24))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f657,f146])).
fof(f30980,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(X27,f(s(bool,X26))) != s(X27,g(s(bool,X26))) | s(fun(bool,X27),X28) = s(fun(bool,X27),X29) | s(bool,'T_0') = s(bool,sK8(X28,X29,X27,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,X26) = s(bool,X30)) ) | $spl0),
  inference(superposition,[],[f875,f3984])).
fof(f30979,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s(X20,f(s(bool,X19))) != s(X20,g(s(bool,X19))) | s(fun(bool,X20),X21) = s(fun(bool,X20),X22) | s(bool,'T_0') = s(bool,sK8(X21,X22,X20,bool)) | s(bool,X23) = s(bool,'const.bool.IN_2'(s(X24,X25),s(fun(X24,bool),'const.pred_set.EMPTY_0'))) | s(bool,X19) = s(bool,X23)) ) | $spl0),
  inference(superposition,[],[f875,f3053])).
fof(f30978,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(X15,f(s(bool,X14))) != s(X15,g(s(bool,X14))) | s(fun(bool,X15),X16) = s(fun(bool,X15),X17) | s(bool,'T_0') = s(bool,sK8(X16,X17,X15,bool)) | s(bool,X14) = s(bool,X18) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X18)),bool))) ) | $spl0),
  inference(superposition,[],[f875,f1987])).
fof(f30976,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(X5,f(s(bool,X4))) != s(X5,g(s(bool,X4))) | s(fun(bool,X5),X6) = s(fun(bool,X5),X7) | s(bool,'T_0') = s(bool,sK8(X6,X7,X5,bool)) | s(bool,X4) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f875,f1778])).
fof(f30922,plain,(
  ( ! [X344,X341,X343,X342] : (s(bool,'T_0') != s(bool,X341) | s(bool,X342) = s(bool,'const.bool.IN_2'(s(X343,X344),s(fun(X343,bool),'const.pred_set.EMPTY_0'))) | s(bool,X342) = s(bool,sK6('const.option.SOME_1'(s(bool,X341)),bool))) ) | $spl0),
  inference(superposition,[],[f25483,f994])).
fof(f30919,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s(bool,'T_0') != s(bool,X322) | s(bool,X324) = s(bool,'const.bool.IN_2'(s(X325,X326),s(fun(X325,bool),'const.pred_set.EMPTY_0'))) | s(bool,X324) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X321),'const.option.NONE_0'),s(bool,X322),s(fun(X321,bool),X323)))) ) | $spl0),
  inference(superposition,[],[f25483,f208])).
fof(f30208,plain,(
  ( ! [X633,X631,X632,X634] : (s(X633,f(s(bool,'F_0'))) != s(X633,g(s(bool,'F_0'))) | s(fun(bool,X633),X631) = s(fun(bool,X633),X632) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X634))) | s(bool,X634) = s(bool,sK8(X631,X632,X633,bool))) ) | $spl0),
  inference(superposition,[],[f209,f3984])).
fof(f30197,plain,(
  ( ! [X592,X590,X591] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X591),s(bool,'F_0'))) | s(bool,X590) = s(bool,sK7(X590,X591,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X592))) | s(bool,X590) = s(bool,X592)) ) | $spl0),
  inference(superposition,[],[f2868,f3984])).
fof(f30195,plain,(
  ( ! [X584,X586,X585] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X585),s(bool,'F_0'))) | s(bool,X584) = s(bool,sK7(X584,X585,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X586))) | s(bool,X584) = s(bool,X586)) ) | $spl0),
  inference(superposition,[],[f1907,f3984])).
fof(f30192,plain,(
  ( ! [X576,X578,X577] : (s('type.option.option'(bool),X577) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X576) = s(bool,sK6(X577,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X577) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X578))) | s(bool,X576) = s(bool,X578)) ) | $spl0),
  inference(superposition,[],[f544,f3984])).
fof(f30190,plain,(
  ( ! [X569,X567,X568,X570,X566] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X567))) | s(bool,X566) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X568),'const.option.NONE_0'),s(bool,X567),s(fun(X568,bool),X569))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X570))) | s(bool,X566) = s(bool,X570)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f30189,plain,(
  ( ! [X565,X561,X563,X564,X562] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X562))) | s(bool,X562) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X563),'const.option.NONE_0'),s(bool,X561),s(fun(X563,bool),X564))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X565))) | s(bool,X561) = s(bool,X565)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f30178,plain,(
  ( ! [X524,X525,X523] : (s(bool,'F_0') != s(bool,X524) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X523))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X524))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X525))) | s(bool,X523) = s(bool,X525)) ) | $spl0),
  inference(superposition,[],[f194,f3984])).
fof(f30176,plain,(
  ( ! [X518,X517,X519] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X518))) | s(bool,X517) = s(bool,X518) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X519))) | s(bool,X517) = s(bool,X519)) ) | $spl0),
  inference(superposition,[],[f193,f3984])).
fof(f30807,plain,(
  ( ! [X292,X290,X291] : (s(bool,X290) = s(bool,X291) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X291))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X292))) | s(bool,X290) = s(bool,X292)) ) | $spl0),
  inference(subsumption_resolution,[],[f30097,f145])).
fof(f30097,plain,(
  ( ! [X292,X290,X291] : (p(s(bool,'F_0')) | s(bool,X290) = s(bool,X291) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X291))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X292))) | s(bool,X290) = s(bool,X292)) ) | $spl0),
  inference(superposition,[],[f21149,f3984])).
fof(f30069,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s(bool,'F_0') != s(bool,X216) | s(bool,X215) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,X216),s(fun(X217,bool),X218))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X215) = s(bool,X219)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f30068,plain,(
  ( ! [X212,X210,X213,X211,X214] : (s(bool,'F_0') != s(bool,X211) | s(bool,X211) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X212),'const.option.NONE_0'),s(bool,X210),s(fun(X212,bool),X213))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,X210) = s(bool,X214)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f30789,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,X118) = s(bool,happ(s(fun(X119,bool),X120),s(X119,X121))) | s(X119,X121) = s(X119,sK7(X121,X120,X119)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X118) = s(bool,X122)) ) | $spl0),
  inference(subsumption_resolution,[],[f30037,f145])).
fof(f30037,plain,(
  ( ! [X121,X118,X122,X120,X119] : (p(s(bool,'F_0')) | s(bool,X118) = s(bool,happ(s(fun(X119,bool),X120),s(X119,X121))) | s(X119,X121) = s(X119,sK7(X121,X120,X119)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X118) = s(bool,X122)) ) | $spl0),
  inference(superposition,[],[f2869,f3984])).
fof(f30234,plain,(
  ( ! [X59,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'T_0') = s(bool,X59) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,X58) = s(bool,X60)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f30019])).
fof(f30019,plain,(
  ( ! [X59,X60,X58] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'T_0') = s(bool,X59) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,X58) = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f480,f3984])).
fof(f30777,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X9) = s(bool,X11)) ) | $spl0),
  inference(subsumption_resolution,[],[f30003,f145])).
fof(f30003,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X9) = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f198,f3984])).
fof(f29990,plain,(
  ( ! [X436,X438,X437] : (s('type.option.option'(bool),X437) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X436))) | s(bool,'F_0') = s(bool,sK6(X437,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X437) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X438))) | s(bool,X436) = s(bool,X438)) ) | $spl0),
  inference(superposition,[],[f544,f3984])).
fof(f29988,plain,(
  ( ! [X428,X430,X426,X429,X427] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X426))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X427))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X428),'const.option.NONE_0'),s(bool,X427),s(fun(X428,bool),X429))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X430))) | s(bool,X426) = s(bool,X430)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29987,plain,(
  ( ! [X422,X424,X421,X423,X425] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X421))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X422))) | s(bool,X422) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X423),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X423,bool),X424))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X425))) | s(bool,X421) = s(bool,X425)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29976,plain,(
  ( ! [X383,X385,X384] : (s(bool,X383) != s(bool,X384) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X384))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X385))) | s(bool,X383) = s(bool,X385)) ) | $spl0),
  inference(superposition,[],[f194,f3984])).
fof(f29944,plain,(
  ( ! [X288,X290,X287,X289,X286] : (s(bool,X286) != s(bool,X287) | s(bool,X287) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X288),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X288,bool),X289))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X290))) | s(bool,X286) = s(bool,X290)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f30758,plain,(
  ( ! [X175,X173,X174] : (s(bool,X173) != s(bool,X174) | s(bool,'F_0') = s(bool,X174) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X175))) | s(bool,X173) = s(bool,X175)) ) | $spl0),
  inference(subsumption_resolution,[],[f29910,f454])).
fof(f29910,plain,(
  ( ! [X175,X173,X174] : (s(bool,X173) != s(bool,X174) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X174) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X175))) | s(bool,X173) = s(bool,X175)) ) | $spl0),
  inference(superposition,[],[f1927,f3984])).
fof(f29882,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,X93) != s(bool,X94) | s(bool,X94) = s(bool,'const.bool.IN_2'(s(X95,X96),s(fun(X95,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X93) = s(bool,X97)) ) | $spl0),
  inference(superposition,[],[f26749,f3984])).
fof(f29880,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,X86) != s(bool,X87) | s(bool,X88) = s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)) | s(bool,'T_0') = s(bool,X88) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X89))) | s(bool,X86) = s(bool,X89)) ) | $spl0),
  inference(superposition,[],[f15417,f3984])).
fof(f29879,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X82) != s(bool,X83) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X84) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,X82) = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f15050,f3984])).
fof(f29872,plain,(
  ( ! [X61,X59,X60] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,X59) = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f8126,f3984])).
fof(f29871,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X54) != s(bool,X55) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X55),s(fun(X56,bool),X57))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,X54) = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f4072,f3984])).
fof(f29870,plain,(
  ( ! [X52,X53,X51] : (s(bool,X52) != s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X51) = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f4063,f3984])).
fof(f29868,plain,(
  ( ! [X47,X48,X46] : (s(bool,X46) != s(bool,X47) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X47)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f3992,f3984])).
fof(f29867,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) != s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,X44) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X43) = s(bool,X45)) ) | $spl0),
  inference(superposition,[],[f3674,f3984])).
fof(f29862,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(bool),X23) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,sK6(X23,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f543,f3984])).
fof(f29860,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,X15) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X16) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X14) = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f480,f3984])).
fof(f29859,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,X10) = s(bool,X13)) ) | $spl0),
  inference(superposition,[],[f442,f3984])).
fof(f29858,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f250,f3984])).
fof(f29857,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,X6) | ~p(s(bool,X6)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X5) = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f152,f3984])).
fof(f29854,plain,(
  ( ! [X728,X726,X729,X727] : (s(X728,f(s(bool,X729))) != s(X728,g(s(bool,X729))) | s(fun(bool,X728),X726) = s(fun(bool,X728),X727) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X729))) | s(bool,'F_0') = s(bool,sK8(X726,X727,X728,bool))) ) | $spl0),
  inference(superposition,[],[f209,f3984])).
fof(f29851,plain,(
  ( ! [X720,X719] : (s('type.option.option'(bool),X719) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X720))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X719) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X720))) | s(bool,'F_0') = s(bool,sK6(X719,bool))) ) | $spl0),
  inference(superposition,[],[f186,f3984])).
fof(f29843,plain,(
  ( ! [X685,X684,X686] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X686),s(bool,X685))) | s(bool,X684) = s(bool,sK7(X684,X686,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X685))) | s(bool,'F_0') = s(bool,X684)) ) | $spl0),
  inference(superposition,[],[f2868,f3984])).
fof(f29841,plain,(
  ( ! [X679,X680,X678] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X680),s(bool,X679))) | s(bool,X678) = s(bool,sK7(X678,X680,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X679))) | s(bool,'F_0') = s(bool,X678)) ) | $spl0),
  inference(superposition,[],[f1907,f3984])).
fof(f29838,plain,(
  ( ! [X670,X671,X672] : (s('type.option.option'(bool),X672) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X671))) | s(bool,X670) = s(bool,sK6(X672,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X672) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X671))) | s(bool,'F_0') = s(bool,X670)) ) | $spl0),
  inference(superposition,[],[f544,f3984])).
fof(f29836,plain,(
  ( ! [X660,X662,X664,X661,X663] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X661))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X662))) | s(bool,X660) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X663),'const.option.NONE_0'),s(bool,X662),s(fun(X663,bool),X664))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X661))) | s(bool,'F_0') = s(bool,X660)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29835,plain,(
  ( ! [X656,X658,X657,X659,X655] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X656))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X657))) | s(bool,X657) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X658),'const.option.NONE_0'),s(bool,X655),s(fun(X658,bool),X659))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X656))) | s(bool,'F_0') = s(bool,X655)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29824,plain,(
  ( ! [X617,X619,X618] : (s(bool,X618) != s(bool,X619) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X617))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X619))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X618))) | s(bool,'F_0') = s(bool,X617)) ) | $spl0),
  inference(superposition,[],[f194,f3984])).
fof(f30722,plain,(
  ( ! [X391,X393,X392] : (s(bool,X392) != s(bool,sK6('const.option.SOME_1'(s(bool,X391)),bool)) | s(bool,'F_0') = s(bool,X393) | s(bool,X392) = s(bool,X393) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X391)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29741,f250])).
fof(f29741,plain,(
  ( ! [X391,X393,X392] : (s(bool,X392) != s(bool,sK6('const.option.SOME_1'(s(bool,X391)),bool)) | s(bool,'F_0') = s(bool,X393) | s(bool,X392) = s(bool,X393) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X391))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f19529,f3984])).
fof(f30718,plain,(
  ( ! [X374,X376,X375] : (s(bool,X375) = s(bool,sK6('const.option.SOME_1'(s(bool,X374)),bool)) | s(bool,X375) = s(bool,X376) | s(bool,'T_0') = s(bool,X376) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X374)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29734,f250])).
fof(f29734,plain,(
  ( ! [X374,X376,X375] : (s(bool,X375) = s(bool,sK6('const.option.SOME_1'(s(bool,X374)),bool)) | s(bool,X375) = s(bool,X376) | s(bool,'T_0') = s(bool,X376) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X374))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8334,f3984])).
fof(f30717,plain,(
  ( ! [X370,X371] : (s(bool,X371) = s(bool,sK6('const.option.SOME_1'(s(bool,X370)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X371))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X370)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29732,f250])).
fof(f29732,plain,(
  ( ! [X370,X371] : (s(bool,X371) = s(bool,sK6('const.option.SOME_1'(s(bool,X370)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X371))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X370))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8126,f3984])).
fof(f30716,plain,(
  ( ! [X366,X367] : (s(bool,X367) = s(bool,sK6('const.option.SOME_1'(s(bool,X366)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X367)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X366)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29731,f250])).
fof(f29731,plain,(
  ( ! [X366,X367] : (s(bool,X367) = s(bool,sK6('const.option.SOME_1'(s(bool,X366)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X367)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X366))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f7614,f3984])).
fof(f30715,plain,(
  ( ! [X346,X345,X347] : (s(bool,X345) != s(bool,X346) | s(bool,X347) = s(bool,sK6('const.option.SOME_1'(s(bool,X346)),bool)) | s(bool,'F_0') = s(bool,X347) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X345)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29727,f250])).
fof(f29727,plain,(
  ( ! [X346,X345,X347] : (s(bool,X345) != s(bool,X346) | s(bool,X347) = s(bool,sK6('const.option.SOME_1'(s(bool,X346)),bool)) | s(bool,'F_0') = s(bool,X347) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X345))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f2635,f3984])).
fof(f30713,plain,(
  ( ! [X337,X336,X338] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X336))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) | s(bool,X337) = s(bool,X338) | s(bool,'F_0') = s(bool,X338) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X336)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29724,f250])).
fof(f29724,plain,(
  ( ! [X337,X336,X338] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X336))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) | s(bool,X337) = s(bool,X338) | s(bool,'F_0') = s(bool,X338) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X336))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f1909,f3984])).
fof(f29686,plain,(
  ( ! [X231,X229,X227,X230,X228] : (s(bool,X228) != s(bool,X229) | s(bool,X227) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X230),'const.option.NONE_0'),s(bool,X229),s(fun(X230,bool),X231))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X228))) | s(bool,'F_0') = s(bool,X227)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f29685,plain,(
  ( ! [X222,X225,X223,X226,X224] : (s(bool,X223) != s(bool,X224) | s(bool,X224) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X225),'const.option.NONE_0'),s(bool,X222),s(fun(X225,bool),X226))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X223))) | s(bool,'F_0') = s(bool,X222)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f29598,plain,(
  ( ! [X685,X684,X686] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X686),s(bool,X685))) | s(bool,X684) = s(bool,sK7(X684,X686,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X684))) | s(bool,'F_0') = s(bool,X685)) ) | $spl0),
  inference(superposition,[],[f2868,f3984])).
fof(f29596,plain,(
  ( ! [X679,X680,X678] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X680),s(bool,X679))) | s(bool,X678) = s(bool,sK7(X678,X680,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X678))) | s(bool,'F_0') = s(bool,X679)) ) | $spl0),
  inference(superposition,[],[f1907,f3984])).
fof(f29593,plain,(
  ( ! [X670,X671,X672] : (s('type.option.option'(bool),X672) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X671))) | s(bool,X670) = s(bool,sK6(X672,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X672) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X670))) | s(bool,'F_0') = s(bool,X671)) ) | $spl0),
  inference(superposition,[],[f544,f3984])).
fof(f29591,plain,(
  ( ! [X660,X662,X664,X661,X663] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X661))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X662))) | s(bool,X660) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X663),'const.option.NONE_0'),s(bool,X662),s(fun(X663,bool),X664))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X660))) | s(bool,'F_0') = s(bool,X661)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29590,plain,(
  ( ! [X656,X658,X657,X659,X655] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X656))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X657))) | s(bool,X657) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X658),'const.option.NONE_0'),s(bool,X655),s(fun(X658,bool),X659))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X655))) | s(bool,'F_0') = s(bool,X656)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29579,plain,(
  ( ! [X617,X619,X618] : (s(bool,X618) != s(bool,X619) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X617))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X619))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X617))) | s(bool,'F_0') = s(bool,X618)) ) | $spl0),
  inference(superposition,[],[f194,f3984])).
fof(f29577,plain,(
  ( ! [X613,X611,X612] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X612))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X613))) | s(bool,X611) = s(bool,X613) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X611))) | s(bool,'F_0') = s(bool,X612)) ) | $spl0),
  inference(superposition,[],[f193,f3984])).
fof(f29441,plain,(
  ( ! [X231,X229,X227,X230,X228] : (s(bool,X228) != s(bool,X229) | s(bool,X227) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X230),'const.option.NONE_0'),s(bool,X229),s(fun(X230,bool),X231))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X227))) | s(bool,'F_0') = s(bool,X228)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f29440,plain,(
  ( ! [X222,X225,X223,X226,X224] : (s(bool,X223) != s(bool,X224) | s(bool,X224) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X225),'const.option.NONE_0'),s(bool,X222),s(fun(X225,bool),X226))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X222))) | s(bool,'F_0') = s(bool,X223)) ) | $spl0),
  inference(superposition,[],[f8919,f3984])).
fof(f29361,plain,(
  ( ! [X138,X136,X137] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X137),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X136)),X137,'type.option.option'(bool))) | s(bool,X136) = s(bool,X138) | s(bool,'F_0') = s(bool,X138)) ) | $spl0),
  inference(superposition,[],[f2868,f3984])).
fof(f29359,plain,(
  ( ! [X132,X130,X131] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X131),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X130)),X131,'type.option.option'(bool))) | s(bool,X130) = s(bool,X132) | s(bool,'F_0') = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f1907,f3984])).
fof(f29356,plain,(
  ( ! [X123,X124,X122] : (s('type.option.option'('type.option.option'(bool)),X123) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),sK6(X123,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X123) | s(bool,X122) = s(bool,X124) | s(bool,'F_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f544,f3984])).
fof(f29354,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X113))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s('type.option.option'(bool),X113),s(fun(X114,'type.option.option'(bool)),X115))) | s(bool,X112) = s(bool,X116) | s(bool,'F_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29353,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X108))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))),s(fun(X109,'type.option.option'(bool)),X110))) | s(bool,X107) = s(bool,X111) | s(bool,'F_0') = s(bool,X111)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29342,plain,(
  ( ! [X70,X71,X69] : (s('type.option.option'(bool),X70) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X70))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))))) | s(bool,X69) = s(bool,X71) | s(bool,'F_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f194,f3984])).
fof(f29340,plain,(
  ( ! [X64,X65,X63] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X64))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X64) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,X63) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f193,f3984])).
fof(f29331,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(X31,happ(s(fun(bool,X31),X32),s(bool,X30))) = s(X31,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X31,X33),s(fun(bool,X31),X32))) | s(bool,X30) = s(bool,X34) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(superposition,[],[f210,f3984])).
fof(f29316,plain,(
  ( ! [X138,X136,X137] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X137),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X137,'type.option.option'(bool))) | s(bool,X136) = s(bool,X138) | s(bool,'F_0') = s(bool,X138)) ) | $spl0),
  inference(superposition,[],[f2868,f3984])).
fof(f29314,plain,(
  ( ! [X132,X130,X131] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X131),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X131,'type.option.option'(bool))) | s(bool,X130) = s(bool,X132) | s(bool,'F_0') = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f1907,f3984])).
fof(f29311,plain,(
  ( ! [X123,X124,X122] : (s('type.option.option'('type.option.option'(bool)),X123) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X123,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X123) | s(bool,X122) = s(bool,X124) | s(bool,'F_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f544,f3984])).
fof(f29309,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X113))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s('type.option.option'(bool),X113),s(fun(X114,'type.option.option'(bool)),X115))) | s(bool,X112) = s(bool,X116) | s(bool,'F_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29308,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X108))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))))) | s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X109,'type.option.option'(bool)),X110))) | s(bool,X107) = s(bool,X111) | s(bool,'F_0') = s(bool,X111)) ) | $spl0),
  inference(superposition,[],[f443,f3984])).
fof(f29297,plain,(
  ( ! [X70,X71,X69] : (s('type.option.option'(bool),X70) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X70))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X69) = s(bool,X71) | s(bool,'F_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f194,f3984])).
fof(f29295,plain,(
  ( ! [X64,X65,X63] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X64))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))))) | s('type.option.option'(bool),X64) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X63) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f193,f3984])).
fof(f29287,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(X33,happ(s(fun(bool,X33),X34),s(bool,'F_0'))) = s(X33,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))),s(X33,X35),s(fun(bool,X33),X34))) | s(bool,X32) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f210,f3984])).
fof(f29204,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X21) = s(bool,X22) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,X22) = s(bool,X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X21) = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f3984,f3984])).
fof(f29203,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,X15) = s(bool,X16) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f3984,f3053])).
fof(f29202,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,X12) = s(bool,X13) | s(bool,X11) = s(bool,X14) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X14)),bool))) ) | $spl0),
  inference(superposition,[],[f3984,f1987])).
fof(f29200,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X3) = s(bool,X4) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X4) = s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3984,f1778])).
fof(f29195,plain,(
  ( ! [X185,X186,X184,X183] : (s(bool,X184) = s(bool,X186) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X186))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),'const.option.NONE_0'),s(bool,X184),s(fun(X183,bool),X185)))) ) | $spl0),
  inference(superposition,[],[f3984,f208])).
fof(f29055,plain,(
  ( ! [X151,X149,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,X149),s(fun(X148,bool),X150))) | s(bool,'F_0') = s(bool,X151)) ) | $spl0),
  inference(superposition,[],[f3984,f208])).
fof(f28980,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,X22) = s(bool,X23) | s(bool,'F_0') = s(bool,X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X21) = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f3984,f3984])).
fof(f28979,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,X16) = s(bool,X17) | s(bool,'F_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f3984,f3053])).
fof(f28978,plain,(
  ( ! [X14,X12,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) | s(bool,X12) = s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,X11) = s(bool,X14) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X14)),bool))) ) | $spl0),
  inference(superposition,[],[f3984,f1987])).
fof(f28976,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3984,f1778])).
fof(f26946,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,X4) = s(bool,'const.bool.IN_2'(s(X5,X6),s(fun(X5,bool),'const.pred_set.EMPTY_0'))) | s(bool,X0) = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f26749,f3053])).
fof(f25802,plain,(
  ( ! [X926,X924,X928,X927,X925,X929] : (s(X926,f(s(bool,'F_0'))) != s(X926,g(s(bool,'F_0'))) | s(fun(bool,X926),X924) = s(fun(bool,X926),X925) | s(bool,X927) = s(bool,'const.bool.IN_2'(s(X928,X929),s(fun(X928,bool),'const.pred_set.EMPTY_0'))) | s(bool,X927) = s(bool,sK8(X924,X925,X926,bool))) ) | $spl0),
  inference(superposition,[],[f209,f3053])).
fof(f25794,plain,(
  ( ! [X881,X878,X880,X879,X877] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X878),s(bool,'F_0'))) | s(bool,X877) = s(bool,sK7(X877,X878,bool)) | s(bool,X879) = s(bool,'const.bool.IN_2'(s(X880,X881),s(fun(X880,bool),'const.pred_set.EMPTY_0'))) | s(bool,X877) = s(bool,X879)) ) | $spl0),
  inference(superposition,[],[f2868,f3053])).
fof(f25792,plain,(
  ( ! [X870,X868,X867,X871,X869] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X868),s(bool,'F_0'))) | s(bool,X867) = s(bool,sK7(X867,X868,bool)) | s(bool,X869) = s(bool,'const.bool.IN_2'(s(X870,X871),s(fun(X870,bool),'const.pred_set.EMPTY_0'))) | s(bool,X867) = s(bool,X869)) ) | $spl0),
  inference(superposition,[],[f1907,f3053])).
fof(f25789,plain,(
  ( ! [X854,X857,X855,X853,X856] : (s('type.option.option'(bool),X854) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X853) = s(bool,sK6(X854,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X854) | s(bool,X855) = s(bool,'const.bool.IN_2'(s(X856,X857),s(fun(X856,bool),'const.pred_set.EMPTY_0'))) | s(bool,X853) = s(bool,X855)) ) | $spl0),
  inference(superposition,[],[f544,f3053])).
fof(f25788,plain,(
  ( ! [X850,X848,X852,X847,X851,X849,X846] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X847))) | s(bool,X846) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X848),'const.option.NONE_0'),s(bool,X847),s(fun(X848,bool),X849))) | s(bool,X850) = s(bool,'const.bool.IN_2'(s(X851,X852),s(fun(X851,bool),'const.pred_set.EMPTY_0'))) | s(bool,X846) = s(bool,X850)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25787,plain,(
  ( ! [X843,X841,X845,X839,X842,X840,X844] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X840))) | s(bool,X840) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X841),'const.option.NONE_0'),s(bool,X839),s(fun(X841,bool),X842))) | s(bool,X843) = s(bool,'const.bool.IN_2'(s(X844,X845),s(fun(X844,bool),'const.pred_set.EMPTY_0'))) | s(bool,X839) = s(bool,X843)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25776,plain,(
  ( ! [X779,X783,X781,X782,X780] : (s(bool,'F_0') != s(bool,X780) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X779))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X780))) | s(bool,X781) = s(bool,'const.bool.IN_2'(s(X782,X783),s(fun(X782,bool),'const.pred_set.EMPTY_0'))) | s(bool,X779) = s(bool,X781)) ) | $spl0),
  inference(superposition,[],[f194,f3053])).
fof(f25774,plain,(
  ( ! [X771,X769,X773,X770,X772] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X770))) | s(bool,X769) = s(bool,X770) | s(bool,X771) = s(bool,'const.bool.IN_2'(s(X772,X773),s(fun(X772,bool),'const.pred_set.EMPTY_0'))) | s(bool,X769) = s(bool,X771)) ) | $spl0),
  inference(superposition,[],[f193,f3053])).
fof(f26907,plain,(
  ( ! [X461,X463,X459,X460,X462] : (s(bool,X459) = s(bool,X460) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X460))) | s(bool,X461) = s(bool,'const.bool.IN_2'(s(X462,X463),s(fun(X462,bool),'const.pred_set.EMPTY_0'))) | s(bool,X459) = s(bool,X461)) ) | $spl0),
  inference(subsumption_resolution,[],[f25707,f145])).
fof(f25707,plain,(
  ( ! [X461,X463,X459,X460,X462] : (p(s(bool,'F_0')) | s(bool,X459) = s(bool,X460) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X460))) | s(bool,X461) = s(bool,'const.bool.IN_2'(s(X462,X463),s(fun(X462,bool),'const.pred_set.EMPTY_0'))) | s(bool,X459) = s(bool,X461)) ) | $spl0),
  inference(superposition,[],[f21149,f3053])).
fof(f25679,plain,(
  ( ! [X333,X329,X331,X332,X334,X328,X330] : (s(bool,'F_0') != s(bool,X329) | s(bool,X328) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X330),'const.option.NONE_0'),s(bool,X329),s(fun(X330,bool),X331))) | s(bool,X332) = s(bool,'const.bool.IN_2'(s(X333,X334),s(fun(X333,bool),'const.pred_set.EMPTY_0'))) | s(bool,X328) = s(bool,X332)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f25678,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X322] : (s(bool,'F_0') != s(bool,X322) | s(bool,X322) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X323),'const.option.NONE_0'),s(bool,X321),s(fun(X323,bool),X324))) | s(bool,X325) = s(bool,'const.bool.IN_2'(s(X326,X327),s(fun(X326,bool),'const.pred_set.EMPTY_0'))) | s(bool,X321) = s(bool,X325)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f26888,plain,(
  ( ! [X191,X189,X194,X192,X190,X195,X193] : (s(bool,X189) = s(bool,happ(s(fun(X190,bool),X191),s(X190,X192))) | s(X190,X192) = s(X190,sK7(X192,X191,X190)) | s(bool,X193) = s(bool,'const.bool.IN_2'(s(X194,X195),s(fun(X194,bool),'const.pred_set.EMPTY_0'))) | s(bool,X189) = s(bool,X193)) ) | $spl0),
  inference(subsumption_resolution,[],[f25650,f145])).
fof(f25650,plain,(
  ( ! [X191,X189,X194,X192,X190,X195,X193] : (p(s(bool,'F_0')) | s(bool,X189) = s(bool,happ(s(fun(X190,bool),X191),s(X190,X192))) | s(X190,X192) = s(X190,sK7(X192,X191,X190)) | s(bool,X193) = s(bool,'const.bool.IN_2'(s(X194,X195),s(fun(X194,bool),'const.pred_set.EMPTY_0'))) | s(bool,X189) = s(bool,X193)) ) | $spl0),
  inference(superposition,[],[f2869,f3053])).
fof(f25607,plain,(
  ( ! [X617,X615,X616,X618,X614] : (s('type.option.option'(bool),X615) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X614))) | s(bool,'F_0') = s(bool,sK6(X615,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X615) | s(bool,X616) = s(bool,'const.bool.IN_2'(s(X617,X618),s(fun(X617,bool),'const.pred_set.EMPTY_0'))) | s(bool,X614) = s(bool,X616)) ) | $spl0),
  inference(superposition,[],[f544,f3053])).
fof(f25606,plain,(
  ( ! [X613,X609,X611,X607,X612,X608,X610] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X607))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X608))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X609),'const.option.NONE_0'),s(bool,X608),s(fun(X609,bool),X610))) | s(bool,X611) = s(bool,'const.bool.IN_2'(s(X612,X613),s(fun(X612,bool),'const.pred_set.EMPTY_0'))) | s(bool,X607) = s(bool,X611)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25605,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X604] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X600))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X601))) | s(bool,X601) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X602),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X602,bool),X603))) | s(bool,X604) = s(bool,'const.bool.IN_2'(s(X605,X606),s(fun(X605,bool),'const.pred_set.EMPTY_0'))) | s(bool,X600) = s(bool,X604)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25602,plain,(
  ( ! [X588,X590,X589,X591] : (s(bool,X588) = s(bool,'const.bool.IN_2'(s(bool,X588),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X589) = s(bool,'const.bool.IN_2'(s(X590,X591),s(fun(X590,bool),'const.pred_set.EMPTY_0'))) | s(bool,X588) = s(bool,X589)) ) | $spl0),
  inference(superposition,[],[f261,f3053])).
fof(f25594,plain,(
  ( ! [X540,X542,X541,X543,X544] : (s(bool,X540) != s(bool,X541) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X541))) | s(bool,X542) = s(bool,'const.bool.IN_2'(s(X543,X544),s(fun(X543,bool),'const.pred_set.EMPTY_0'))) | s(bool,X540) = s(bool,X542)) ) | $spl0),
  inference(superposition,[],[f194,f3053])).
fof(f25564,plain,(
  ( ! [X412,X408,X410,X407,X413,X409,X411] : (s(bool,X407) != s(bool,X408) | s(bool,X408) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X409),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X409,bool),X410))) | s(bool,X411) = s(bool,'const.bool.IN_2'(s(X412,X413),s(fun(X412,bool),'const.pred_set.EMPTY_0'))) | s(bool,X407) = s(bool,X411)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f25504,plain,(
  ( ! [X132,X130,X128,X133,X131,X129] : (s(bool,X128) != s(bool,X129) | s(bool,X130) = s(bool,sK6('const.option.SOME_1'(s(bool,X129)),bool)) | s(bool,'T_0') = s(bool,X130) | s(bool,X131) = s(bool,'const.bool.IN_2'(s(X132,X133),s(fun(X132,bool),'const.pred_set.EMPTY_0'))) | s(bool,X128) = s(bool,X131)) ) | $spl0),
  inference(superposition,[],[f15417,f3053])).
fof(f25503,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X122) != s(bool,X123) | s(bool,X123) = s(bool,X124) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.bool.IN_2'(s(X126,X127),s(fun(X126,bool),'const.pred_set.EMPTY_0'))) | s(bool,X122) = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f15050,f3053])).
fof(f26843,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,'T_0') = s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,X87) = s(bool,'const.bool.IN_2'(s(X88,X89),s(fun(X88,bool),'const.pred_set.EMPTY_0'))) | s(bool,X85) = s(bool,X87)) ) | $spl0),
  inference(forward_demodulation,[],[f25496,f994])).
fof(f25496,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,X86) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X87) = s(bool,'const.bool.IN_2'(s(X88,X89),s(fun(X88,bool),'const.pred_set.EMPTY_0'))) | s(bool,X85) = s(bool,X87)) ) | $spl0),
  inference(superposition,[],[f8126,f3053])).
fof(f25495,plain,(
  ( ! [X80,X78,X83,X81,X79,X84,X82] : (s(bool,X78) != s(bool,X79) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X79),s(fun(X80,bool),X81))) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X83,X84),s(fun(X83,bool),'const.pred_set.EMPTY_0'))) | s(bool,X78) = s(bool,X82)) ) | $spl0),
  inference(superposition,[],[f4072,f3053])).
fof(f25494,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s(bool,X74) != s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,X75) = s(bool,'const.bool.IN_2'(s(X76,X77),s(fun(X76,bool),'const.pred_set.EMPTY_0'))) | s(bool,X73) = s(bool,X75)) ) | $spl0),
  inference(superposition,[],[f4063,f3053])).
fof(f25493,plain,(
  ( ! [X70,X72,X71,X69] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X69)),bool)) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0'))) | s(bool,X69) = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f3993,f3053])).
fof(f25492,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X64) != s(bool,X65) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool)) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f3992,f3053])).
fof(f25491,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,X60) != s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool)) | s(bool,'F_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.bool.IN_2'(s(X62,X63),s(fun(X62,bool),'const.pred_set.EMPTY_0'))) | s(bool,X59) = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f3674,f3053])).
fof(f25487,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.option.option'(bool),X37) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) | s(bool,'T_0') = s(bool,sK6(X37,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X37) | s(bool,X38) = s(bool,'const.bool.IN_2'(s(X39,X40),s(fun(X39,bool),'const.pred_set.EMPTY_0'))) | s(bool,X36) = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f543,f3053])).
fof(f25485,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(bool,X24) != s(bool,X25) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,'const.bool.IN_2'(s(X28,X29),s(fun(X28,bool),'const.pred_set.EMPTY_0'))) | s(bool,X24) = s(bool,X27)) ) | $spl0),
  inference(superposition,[],[f480,f3053])).
fof(f25484,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.IN_2'(s(X22,X23),s(fun(X22,bool),'const.pred_set.EMPTY_0'))) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f442,f3053])).
fof(f25483,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') != s(bool,X14) | s(bool,X15) = s(bool,'const.bool.IN_2'(s(X16,X17),s(fun(X16,bool),'const.pred_set.EMPTY_0'))) | s(bool,X14) = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f250,f3053])).
fof(f25479,plain,(
  ( ! [X1087,X1085,X1086,X1084,X1088,X1083] : (s(X1085,f(s(bool,X1086))) != s(X1085,g(s(bool,X1086))) | s(fun(bool,X1085),X1083) = s(fun(bool,X1085),X1084) | s(bool,X1086) = s(bool,'const.bool.IN_2'(s(X1087,X1088),s(fun(X1087,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK8(X1083,X1084,X1085,bool))) ) | $spl0),
  inference(superposition,[],[f209,f3053])).
fof(f25476,plain,(
  ( ! [X1073,X1070,X1072,X1071] : (s('type.option.option'(bool),X1070) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1071))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1070) | s(bool,X1071) = s(bool,'const.bool.IN_2'(s(X1072,X1073),s(fun(X1072,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6(X1070,bool))) ) | $spl0),
  inference(superposition,[],[f186,f3053])).
fof(f25471,plain,(
  ( ! [X1035,X1039,X1037,X1038,X1036] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X1037),s(bool,X1036))) | s(bool,X1035) = s(bool,sK7(X1035,X1037,bool)) | s(bool,X1036) = s(bool,'const.bool.IN_2'(s(X1038,X1039),s(fun(X1038,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1035)) ) | $spl0),
  inference(superposition,[],[f2868,f3053])).
fof(f25469,plain,(
  ( ! [X1027,X1025,X1029,X1026,X1028] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X1027),s(bool,X1026))) | s(bool,X1025) = s(bool,sK7(X1025,X1027,bool)) | s(bool,X1026) = s(bool,'const.bool.IN_2'(s(X1028,X1029),s(fun(X1028,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1025)) ) | $spl0),
  inference(superposition,[],[f1907,f3053])).
fof(f25466,plain,(
  ( ! [X1011,X1015,X1013,X1014,X1012] : (s('type.option.option'(bool),X1013) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1012))) | s(bool,X1011) = s(bool,sK6(X1013,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1013) | s(bool,X1012) = s(bool,'const.bool.IN_2'(s(X1014,X1015),s(fun(X1014,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1011)) ) | $spl0),
  inference(superposition,[],[f544,f3053])).
fof(f25465,plain,(
  ( ! [X1009,X1006,X1004,X1010,X1008,X1007,X1005] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1005))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1006))) | s(bool,X1004) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X1007),'const.option.NONE_0'),s(bool,X1006),s(fun(X1007,bool),X1008))) | s(bool,X1005) = s(bool,'const.bool.IN_2'(s(X1009,X1010),s(fun(X1009,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1004)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25464,plain,(
  ( ! [X1002,X1000,X998,X1003,X1001,X999,X997] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X998))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X999))) | s(bool,X999) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X1000),'const.option.NONE_0'),s(bool,X997),s(fun(X1000,bool),X1001))) | s(bool,X998) = s(bool,'const.bool.IN_2'(s(X1002,X1003),s(fun(X1002,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X997)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25453,plain,(
  ( ! [X938,X940,X939,X937,X941] : (s(bool,X938) != s(bool,X939) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X937))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X939))) | s(bool,X938) = s(bool,'const.bool.IN_2'(s(X940,X941),s(fun(X940,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X937)) ) | $spl0),
  inference(superposition,[],[f194,f3053])).
fof(f26809,plain,(
  ( ! [X600,X596,X598,X597,X599] : (s(bool,X597) != s(bool,sK6('const.option.SOME_1'(s(bool,X596)),bool)) | s(bool,'F_0') = s(bool,X598) | s(bool,X597) = s(bool,X598) | s(bool,X596) = s(bool,'const.bool.IN_2'(s(X599,X600),s(fun(X599,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25378,f250])).
fof(f25378,plain,(
  ( ! [X600,X596,X598,X597,X599] : (s(bool,X597) != s(bool,sK6('const.option.SOME_1'(s(bool,X596)),bool)) | s(bool,'F_0') = s(bool,X598) | s(bool,X597) = s(bool,X598) | s(bool,X596) = s(bool,'const.bool.IN_2'(s(X599,X600),s(fun(X599,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f19529,f3053])).
fof(f26800,plain,(
  ( ! [X569,X565,X567,X568,X566] : (s(bool,X566) = s(bool,sK6('const.option.SOME_1'(s(bool,X565)),bool)) | s(bool,X566) = s(bool,X567) | s(bool,'T_0') = s(bool,X567) | s(bool,X565) = s(bool,'const.bool.IN_2'(s(X568,X569),s(fun(X568,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25371,f250])).
fof(f25371,plain,(
  ( ! [X569,X565,X567,X568,X566] : (s(bool,X566) = s(bool,sK6('const.option.SOME_1'(s(bool,X565)),bool)) | s(bool,X566) = s(bool,X567) | s(bool,'T_0') = s(bool,X567) | s(bool,X565) = s(bool,'const.bool.IN_2'(s(X568,X569),s(fun(X568,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8334,f3053])).
fof(f26799,plain,(
  ( ! [X561,X563,X564,X562] : (s(bool,'T_0') = s(bool,X562) | s(bool,X561) != s(bool,X562) | s(bool,X561) = s(bool,'const.bool.IN_2'(s(X563,X564),s(fun(X563,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f26798,f994])).
fof(f26798,plain,(
  ( ! [X561,X563,X564,X562] : (s(bool,X561) != s(bool,X562) | s(bool,X562) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X561) = s(bool,'const.bool.IN_2'(s(X563,X564),s(fun(X563,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25370,f250])).
fof(f25370,plain,(
  ( ! [X561,X563,X564,X562] : (s(bool,X561) != s(bool,X562) | s(bool,X562) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X561) = s(bool,'const.bool.IN_2'(s(X563,X564),s(fun(X563,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8329,f3053])).
fof(f26797,plain,(
  ( ! [X557,X559,X560,X558] : (s(bool,X558) = s(bool,sK6('const.option.SOME_1'(s(bool,X557)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X558))) | s(bool,X557) = s(bool,'const.bool.IN_2'(s(X559,X560),s(fun(X559,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25369,f250])).
fof(f25369,plain,(
  ( ! [X557,X559,X560,X558] : (s(bool,X558) = s(bool,sK6('const.option.SOME_1'(s(bool,X557)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X558))) | s(bool,X557) = s(bool,'const.bool.IN_2'(s(X559,X560),s(fun(X559,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8126,f3053])).
fof(f26796,plain,(
  ( ! [X553,X551,X552,X554] : (s(bool,X552) = s(bool,sK6('const.option.SOME_1'(s(bool,X551)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X552)),bool)) | s(bool,X551) = s(bool,'const.bool.IN_2'(s(X553,X554),s(fun(X553,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25368,f250])).
fof(f25368,plain,(
  ( ! [X553,X551,X552,X554] : (s(bool,X552) = s(bool,sK6('const.option.SOME_1'(s(bool,X551)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X552)),bool)) | s(bool,X551) = s(bool,'const.bool.IN_2'(s(X553,X554),s(fun(X553,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f7614,f3053])).
fof(f26795,plain,(
  ( ! [X532,X534,X533,X535,X531] : (s(bool,X531) != s(bool,X532) | s(bool,X532) = s(bool,X533) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X533)),bool)) | s(bool,X531) = s(bool,'const.bool.IN_2'(s(X534,X535),s(fun(X534,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25365,f250])).
fof(f25365,plain,(
  ( ! [X532,X534,X533,X535,X531] : (s(bool,X531) != s(bool,X532) | s(bool,X532) = s(bool,X533) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X533)),bool)) | s(bool,X531) = s(bool,'const.bool.IN_2'(s(X534,X535),s(fun(X534,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f3482,f3053])).
fof(f26794,plain,(
  ( ! [X524,X526,X522,X525,X523] : (s(bool,X522) != s(bool,X523) | s(bool,X524) = s(bool,sK6('const.option.SOME_1'(s(bool,X523)),bool)) | s(bool,'F_0') = s(bool,X524) | s(bool,X522) = s(bool,'const.bool.IN_2'(s(X525,X526),s(fun(X525,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25364,f250])).
fof(f25364,plain,(
  ( ! [X524,X526,X522,X525,X523] : (s(bool,X522) != s(bool,X523) | s(bool,X524) = s(bool,sK6('const.option.SOME_1'(s(bool,X523)),bool)) | s(bool,'F_0') = s(bool,X524) | s(bool,X522) = s(bool,'const.bool.IN_2'(s(X525,X526),s(fun(X525,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f2635,f3053])).
fof(f25327,plain,(
  ( ! [X350,X346,X352,X349,X351,X347,X348] : (s(bool,X347) != s(bool,X348) | s(bool,X346) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X349),'const.option.NONE_0'),s(bool,X348),s(fun(X349,bool),X350))) | s(bool,X347) = s(bool,'const.bool.IN_2'(s(X351,X352),s(fun(X351,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X346)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f25326,plain,(
  ( ! [X344,X341,X343,X339,X345,X340,X342] : (s(bool,X340) != s(bool,X341) | s(bool,X341) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X342),'const.option.NONE_0'),s(bool,X339),s(fun(X342,bool),X343))) | s(bool,X340) = s(bool,'const.bool.IN_2'(s(X344,X345),s(fun(X344,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X339)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f26749,plain,(
  ( ! [X261,X262,X258] : (s(bool,'F_0') != s(bool,X258) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(global_subsumption,[],[f26748,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4169,f4126,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2759,f2723,f2681,f1761,f1192,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f10479,f10478,f13706,f17656,f18228,f18229,f18230,f18231,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18646,f18648,f18649,f18650,f15568,f18647,f18645,f18250,f18249,f18188,f18073,f18067,f18040,f18631,f19620,f18043,f19616,f831,f554,f19618,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19602,f19567,f17601,f17598,f531,f525,f19615,f19600,f19568,f18191,f2763,f1432,f1173,f19599,f19569,f18190,f15473,f15470,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f19649,f990,f966,f19650,f693,f19564,f973,f19565,f19679,f19651,f19648,f19566,f19563,f4124,f3148,f2979,f2953,f2682,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f4125,f3149,f2980,f2954,f2683,f1248,f1218,f1163,f976,f975,f949,f933,f1441,f1310,f876,f24177,f24178,f24179,f24210,f24228,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24281,f24298,f24303,f24304,f24305,f24310])).
fof(f26748,plain,(
  ( ! [X261,X257,X259,X260,X262,X258] : (s(bool,'F_0') != s(bool,X258) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X259),'const.option.NONE_0'),s(bool,X257),s(fun(X259,bool),X260))) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25308,f4072])).
fof(f25308,plain,(
  ( ! [X261,X257,X259,X260,X262,X258] : (s(bool,'F_0') != s(bool,X258) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X259),'const.option.NONE_0'),s(bool,X257),s(fun(X259,bool),X260))) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X257)) ) | $spl0),
  inference(superposition,[],[f4072,f3053])).
fof(f25893,plain,(
  ( ! [X218,X216,X220,X219,X217] : (s(bool,X217) != s(bool,sK6('const.option.SOME_1'(s(bool,X218)),bool)) | s(bool,X216) = s(bool,X218) | s(bool,'F_0') = s(bool,X216) | s(bool,X217) = s(bool,'const.bool.IN_2'(s(X219,X220),s(fun(X219,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25299])).
fof(f25299,plain,(
  ( ! [X218,X216,X220,X219,X217] : (s(bool,X217) != s(bool,sK6('const.option.SOME_1'(s(bool,X218)),bool)) | s(bool,X216) = s(bool,X218) | s(bool,'F_0') = s(bool,X216) | s(bool,X217) = s(bool,'const.bool.IN_2'(s(X219,X220),s(fun(X219,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X216)) ) | $spl0),
  inference(superposition,[],[f3662,f3053])).
fof(f25895,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(condensation,[],[f25894])).
fof(f25894,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s(bool,X194) != s(bool,X195) | s(bool,'F_0') = s(bool,X193) | s(bool,X195) = s(bool,X196) | s(bool,'F_0') = s(bool,X196) | s(bool,X194) = s(bool,'const.bool.IN_2'(s(X197,X198),s(fun(X197,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25295])).
fof(f25295,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s(bool,X194) != s(bool,X195) | s(bool,'F_0') = s(bool,X193) | s(bool,X195) = s(bool,X196) | s(bool,'F_0') = s(bool,X196) | s(bool,X194) = s(bool,'const.bool.IN_2'(s(X197,X198),s(fun(X197,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X193)) ) | $spl0),
  inference(superposition,[],[f2590,f3053])).
fof(f25247,plain,(
  ( ! [X1035,X1039,X1037,X1038,X1036] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X1037),s(bool,X1036))) | s(bool,X1035) = s(bool,sK7(X1035,X1037,bool)) | s(bool,X1035) = s(bool,'const.bool.IN_2'(s(X1038,X1039),s(fun(X1038,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1036)) ) | $spl0),
  inference(superposition,[],[f2868,f3053])).
fof(f25245,plain,(
  ( ! [X1027,X1025,X1029,X1026,X1028] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X1027),s(bool,X1026))) | s(bool,X1025) = s(bool,sK7(X1025,X1027,bool)) | s(bool,X1025) = s(bool,'const.bool.IN_2'(s(X1028,X1029),s(fun(X1028,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1026)) ) | $spl0),
  inference(superposition,[],[f1907,f3053])).
fof(f25242,plain,(
  ( ! [X1011,X1015,X1013,X1014,X1012] : (s('type.option.option'(bool),X1013) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1012))) | s(bool,X1011) = s(bool,sK6(X1013,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1013) | s(bool,X1011) = s(bool,'const.bool.IN_2'(s(X1014,X1015),s(fun(X1014,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1012)) ) | $spl0),
  inference(superposition,[],[f544,f3053])).
fof(f25241,plain,(
  ( ! [X1009,X1006,X1004,X1010,X1008,X1007,X1005] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1005))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1006))) | s(bool,X1004) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X1007),'const.option.NONE_0'),s(bool,X1006),s(fun(X1007,bool),X1008))) | s(bool,X1004) = s(bool,'const.bool.IN_2'(s(X1009,X1010),s(fun(X1009,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1005)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25240,plain,(
  ( ! [X1002,X1000,X998,X1003,X1001,X999,X997] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X998))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X999))) | s(bool,X999) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X1000),'const.option.NONE_0'),s(bool,X997),s(fun(X1000,bool),X1001))) | s(bool,X997) = s(bool,'const.bool.IN_2'(s(X1002,X1003),s(fun(X1002,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X998)) ) | $spl0),
  inference(superposition,[],[f443,f3053])).
fof(f25229,plain,(
  ( ! [X938,X940,X939,X937,X941] : (s(bool,X938) != s(bool,X939) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X937))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X939))) | s(bool,X937) = s(bool,'const.bool.IN_2'(s(X940,X941),s(fun(X940,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X938)) ) | $spl0),
  inference(superposition,[],[f194,f3053])).
fof(f25227,plain,(
  ( ! [X930,X928,X927,X931,X929] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X928))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X929))) | s(bool,X927) = s(bool,X929) | s(bool,X927) = s(bool,'const.bool.IN_2'(s(X930,X931),s(fun(X930,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X928)) ) | $spl0),
  inference(superposition,[],[f193,f3053])).
fof(f25103,plain,(
  ( ! [X350,X346,X352,X349,X351,X347,X348] : (s(bool,X347) != s(bool,X348) | s(bool,X346) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X349),'const.option.NONE_0'),s(bool,X348),s(fun(X349,bool),X350))) | s(bool,X346) = s(bool,'const.bool.IN_2'(s(X351,X352),s(fun(X351,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X347)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f25102,plain,(
  ( ! [X344,X341,X343,X339,X345,X340,X342] : (s(bool,X340) != s(bool,X341) | s(bool,X341) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X342),'const.option.NONE_0'),s(bool,X339),s(fun(X342,bool),X343))) | s(bool,X339) = s(bool,'const.bool.IN_2'(s(X344,X345),s(fun(X344,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X340)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f26492,plain,(
  ( ! [X613,X611,X612,X614,X610] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X610,X611),s(fun(X610,bool),'const.pred_set.EMPTY_0')),X613,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X613),s(bool,X612))) | s(bool,X612) = s(bool,X614) | s(bool,'F_0') = s(bool,X614)) ) | $spl0),
  inference(forward_demodulation,[],[f25031,f261])).
fof(f25031,plain,(
  ( ! [X613,X611,X612,X614,X610] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X613),s(bool,X612))) | s(bool,'const.bool.IN_2'(s(X610,X611),s(fun(X610,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X610,X611),s(fun(X610,bool),'const.pred_set.EMPTY_0')),X613,bool)) | s(bool,X612) = s(bool,X614) | s(bool,'F_0') = s(bool,X614)) ) | $spl0),
  inference(superposition,[],[f2868,f3053])).
fof(f26491,plain,(
  ( ! [X600,X602,X601,X603,X604] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X600,X601),s(fun(X600,bool),'const.pred_set.EMPTY_0')),X603,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X603),s(bool,X602))) | s(bool,X602) = s(bool,X604) | s(bool,'F_0') = s(bool,X604)) ) | $spl0),
  inference(forward_demodulation,[],[f25029,f261])).
fof(f25029,plain,(
  ( ! [X600,X602,X601,X603,X604] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X603),s(bool,X602))) | s(bool,'const.bool.IN_2'(s(X600,X601),s(fun(X600,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X600,X601),s(fun(X600,bool),'const.pred_set.EMPTY_0')),X603,bool)) | s(bool,X602) = s(bool,X604) | s(bool,'F_0') = s(bool,X604)) ) | $spl0),
  inference(superposition,[],[f1907,f3053])).
fof(f25011,plain,(
  ( ! [X505,X502,X504,X506,X503] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X504))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X505))) | s(bool,X505) = s(bool,'const.bool.IN_2'(s(X502,X503),s(fun(X502,bool),'const.pred_set.EMPTY_0'))) | s(bool,X504) = s(bool,X506) | s(bool,'F_0') = s(bool,X506)) ) | $spl0),
  inference(superposition,[],[f193,f3053])).
fof(f24879,plain,(
  ( ! [X786,X788,X787,X785,X789] : (s(bool,X788) != s(bool,'const.bool.IN_2'(s(X786,X787),s(fun(X786,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X785))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X788))) | s(bool,X785) = s(bool,X789) | s(bool,'F_0') = s(bool,X789)) ) | $spl0),
  inference(superposition,[],[f194,f3053])).
fof(f24817,plain,(
  ( ! [X350,X346,X352,X349,X351,X347,X348] : (s(bool,X349) != s(bool,'const.bool.IN_2'(s(X347,X348),s(fun(X347,bool),'const.pred_set.EMPTY_0'))) | s(bool,X346) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,X349),s(fun(X350,bool),X351))) | s(bool,X346) = s(bool,X352) | s(bool,'F_0') = s(bool,X352)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f24816,plain,(
  ( ! [X344,X341,X343,X339,X345,X340,X342] : (s(bool,X342) != s(bool,'const.bool.IN_2'(s(X340,X341),s(fun(X340,bool),'const.pred_set.EMPTY_0'))) | s(bool,X342) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X343),'const.option.NONE_0'),s(bool,X339),s(fun(X343,bool),X344))) | s(bool,X339) = s(bool,X345) | s(bool,'F_0') = s(bool,X345)) ) | $spl0),
  inference(superposition,[],[f8919,f3053])).
fof(f26310,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f26309])).
fof(f26309,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl0),
  inference(condensation,[],[f26308])).
fof(f26308,plain,(
  ( ! [X269,X271,X267,X268,X270] : (s(bool,X270) != s(bool,'const.bool.IN_2'(s(X268,X269),s(fun(X268,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X270)),bool)) | s(bool,X267) = s(bool,X271) | s(bool,'F_0') = s(bool,X271)) ) | $spl0),
  inference(subsumption_resolution,[],[f24800,f2192])).
fof(f24800,plain,(
  ( ! [X269,X271,X267,X268,X270] : (s(bool,X270) != s(bool,'const.bool.IN_2'(s(X268,X269),s(fun(X268,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X270)),bool)) | s(bool,'T_0') = s(bool,X267) | s(bool,X267) = s(bool,X271) | s(bool,'F_0') = s(bool,X271)) ) | $spl0),
  inference(superposition,[],[f4952,f3053])).
fof(f26260,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,X199) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,X199) = s(bool,sK6(X198,bool)) | s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | $spl0),
  inference(subsumption_resolution,[],[f24741,f250])).
fof(f24741,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X199) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,X199) = s(bool,sK6(X198,bool)) | s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | $spl0),
  inference(superposition,[],[f3053,f543])).
fof(f26249,plain,(
  ( ! [X142,X143,X141] : (s(bool,X141) = s(bool,'const.bool.IN_2'(s(X142,X143),s(fun(X142,bool),'const.pred_set.EMPTY_0'))) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f24730,f250])).
fof(f24730,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X141) = s(bool,'const.bool.IN_2'(s(X142,X143),s(fun(X142,bool),'const.pred_set.EMPTY_0'))) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) ) | $spl0),
  inference(superposition,[],[f3053,f778])).
fof(f26248,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (s(bool,X138) = s(bool,'const.bool.IN_2'(s(X139,X140),s(fun(X139,bool),'const.pred_set.EMPTY_0'))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X135),'const.option.NONE_0'),s(bool,X136),s(fun(X135,bool),X137))) | s(bool,'F_0') = s(bool,X136)) ) | $spl0),
  inference(subsumption_resolution,[],[f24729,f250])).
fof(f24729,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X138) = s(bool,'const.bool.IN_2'(s(X139,X140),s(fun(X139,bool),'const.pred_set.EMPTY_0'))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X135),'const.option.NONE_0'),s(bool,X136),s(fun(X135,bool),X137))) | s(bool,'F_0') = s(bool,X136)) ) | $spl0),
  inference(superposition,[],[f3053,f368])).
fof(f24680,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X16) | s(bool,X14) = s(bool,X19) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) ) | $spl0),
  inference(superposition,[],[f3053,f1987])).
fof(f24678,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.pred_set.EMPTY_0'))) | s(bool,X0) = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f3053,f3053])).
fof(f24674,plain,(
  ( ! [X280,X277,X279,X281,X276,X278] : (s(bool,X277) = s(bool,X279) | s(bool,X279) = s(bool,'const.bool.IN_2'(s(X280,X281),s(fun(X280,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X276),'const.option.NONE_0'),s(bool,X277),s(fun(X276,bool),X278)))) ) | $spl0),
  inference(superposition,[],[f3053,f208])).
fof(f26240,plain,(
  ( ! [X241,X239,X240,X238] : (s(bool,X238) = s(bool,X239) | s(bool,X239) = s(bool,'const.bool.IN_2'(s(X240,X241),s(fun(X240,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X238)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26239,f250])).
fof(f26239,plain,(
  ( ! [X241,X239,X240,X238] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X238) = s(bool,X239) | s(bool,X239) = s(bool,'const.bool.IN_2'(s(X240,X241),s(fun(X240,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X238)))) ) | $spl0),
  inference(forward_demodulation,[],[f24665,f994])).
fof(f24665,plain,(
  ( ! [X241,X239,X240,X238] : (s(bool,X238) = s(bool,X239) | s(bool,X239) = s(bool,'const.bool.IN_2'(s(X240,X241),s(fun(X240,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X238)))) ) | $spl0),
  inference(superposition,[],[f3053,f8126])).
fof(f26226,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,'T_0') = s(bool,X155) | s(bool,X151) = s(bool,X152) | s(bool,X152) = s(bool,'const.bool.IN_2'(s(X153,X154),s(fun(X153,bool),'const.pred_set.EMPTY_0'))) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(forward_demodulation,[],[f26225,f994])).
fof(f26225,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,X151) = s(bool,X152) | s(bool,X152) = s(bool,'const.bool.IN_2'(s(X153,X154),s(fun(X153,bool),'const.pred_set.EMPTY_0'))) | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(subsumption_resolution,[],[f24646,f250])).
fof(f24646,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,X151) = s(bool,X152) | s(bool,X152) = s(bool,'const.bool.IN_2'(s(X153,X154),s(fun(X153,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(superposition,[],[f3053,f8334])).
fof(f26037,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f26036])).
fof(f26036,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,'const.bool.IN_2'(s(X46,X47),s(fun(X46,bool),'const.pred_set.EMPTY_0'))) | s(bool,X44) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f24563])).
fof(f24563,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,'const.bool.IN_2'(s(X46,X47),s(fun(X46,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(superposition,[],[f3053,f1987])).
fof(f24452,plain,(
  ( ! [X277,X275,X276,X274] : (s(bool,X274) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0'))) | s(bool,X277) = s(bool,sK6('const.option.SOME_1'(s(bool,X274)),bool)) | s(bool,'F_0') = s(bool,X277)) ) | $spl0),
  inference(superposition,[],[f3053,f994])).
fof(f24449,plain,(
  ( ! [X255,X257,X259,X254,X256,X258] : (s(bool,X255) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0'))) | s(bool,X259) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,X255),s(fun(X254,bool),X256))) | s(bool,'F_0') = s(bool,X259)) ) | $spl0),
  inference(superposition,[],[f3053,f208])).
fof(f24310,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.option.option'(bool),X16) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.NONE_0'),s(bool,X17),s(fun(X18,bool),X19))) | s(bool,'T_0') = s(bool,sK6(X16,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X16)) )),
  inference(superposition,[],[f443,f543])).
fof(f24305,plain,(
  ( ! [X294,X296,X295,X297] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X295))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X294) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X296),'const.option.NONE_0'),s('type.option.option'(bool),X295),s(fun(X296,'type.option.option'(bool)),X297))) | s(bool,'T_0') = s(bool,sK6(X294,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X294)) )),
  inference(superposition,[],[f443,f543])).
fof(f24304,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s('type.option.option'('type.option.option'(X289)),'const.option.SOME_1'(s('type.option.option'(X289),X290))) != s('type.option.option'('type.option.option'(X289)),'const.option.SOME_1'(s('type.option.option'(X289),X291))) | s('type.option.option'(X289),'const.option.SOME_1'(s(X289,sK6(X290,X289)))) = s('type.option.option'(X289),'const.option.option_CASE_3'(s('type.option.option'(X292),'const.option.NONE_0'),s('type.option.option'(X289),X291),s(fun(X292,'type.option.option'(X289)),X293))) | s('type.option.option'(X289),'const.option.NONE_0') = s('type.option.option'(X289),X290)) )),
  inference(superposition,[],[f443,f186])).
fof(f24396,plain,(
  ( ! [X282,X281,X283,X284] : (s(bool,'T_0') = s(bool,X281) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X282))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X281))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.NONE_0'),s('type.option.option'(bool),X282),s(fun(X283,'type.option.option'(bool)),X284)))) ) | $spl0),
  inference(forward_demodulation,[],[f24302,f994])).
fof(f24302,plain,(
  ( ! [X282,X281,X283,X284] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X282))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X281))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.NONE_0'),s('type.option.option'(bool),X282),s(fun(X283,'type.option.option'(bool)),X284))) | s(bool,X281) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24394,plain,(
  ( ! [X273,X275,X276,X274] : (s(bool,'T_0') = s(bool,X273) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X274))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X273))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s('type.option.option'(bool),X274),s(fun(X275,'type.option.option'(bool)),X276)))) ) | $spl0),
  inference(forward_demodulation,[],[f24300,f994])).
fof(f24300,plain,(
  ( ! [X273,X275,X276,X274] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X274))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X273))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s('type.option.option'(bool),X274),s(fun(X275,'type.option.option'(bool)),X276))) | s(bool,X273) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24387,plain,(
  ( ! [X243,X241,X242,X240] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X242),'const.option.NONE_0'),s(bool,X241),s(fun(X242,bool),X243))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X240)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f24292,f994])).
fof(f24292,plain,(
  ( ! [X243,X241,X242,X240] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X242),'const.option.NONE_0'),s(bool,X241),s(fun(X242,bool),X243))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X240)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f7614])).
fof(f24385,plain,(
  ( ! [X231,X233,X234,X232] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),'const.option.NONE_0'),s(bool,X232),s(fun(X233,bool),X234))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) | $spl0),
  inference(forward_demodulation,[],[f24290,f994])).
fof(f24290,plain,(
  ( ! [X231,X233,X234,X232] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),'const.option.NONE_0'),s(bool,X232),s(fun(X233,bool),X234))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24277,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X171))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X172),s(fun(X173,bool),X174))) | s(bool,X171) = s(bool,X175) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X175)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24379,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,'T_0') = s(bool,X155) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X152))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X153),'const.option.NONE_0'),s(bool,X152),s(fun(X153,bool),X154))) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(forward_demodulation,[],[f24273,f994])).
fof(f24273,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X152))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X153),'const.option.NONE_0'),s(bool,X152),s(fun(X153,bool),X154))) | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(superposition,[],[f443,f8334])).
fof(f24367,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X96),s(fun(X97,bool),X98))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | $spl0),
  inference(forward_demodulation,[],[f24261,f994])).
fof(f24261,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X96),s(fun(X97,bool),X98))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24366,plain,(
  ( ! [X94,X92,X93,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X91) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.NONE_0'),s(bool,X92),s(fun(X93,bool),X94))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f24260,f994])).
fof(f24260,plain,(
  ( ! [X94,X92,X93,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X91) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.NONE_0'),s(bool,X92),s(fun(X93,bool),X94))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f7614])).
fof(f24258,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))) | s(bool,X82) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X84),s(fun(X85,bool),X86))) | s(bool,'F_0') = s(bool,X82) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24257,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) | s(bool,X77) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X79),s(fun(X80,bool),X81))) | s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X77)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24256,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) | s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.NONE_0'),s(bool,X73),s(fun(X74,bool),X75))) | s(bool,X72) = s(bool,X76) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24253,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X59),s(fun(X60,bool),X61))) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f443,f1778])).
fof(f24252,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X53),s(fun(X54,bool),X55))) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f443,f1778])).
fof(f24249,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X37) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X39),s(fun(X40,bool),X41))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f443,f278])).
fof(f24248,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X33),s(fun(X34,bool),X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f443,f278])).
fof(f24246,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X24))) != s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X25))) | s(X23,sK6('const.option.SOME_1'(s(X23,X24)),X23)) = s(X23,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)))) )),
  inference(superposition,[],[f443,f994])).
fof(f24245,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s('type.option.option'(X15),'const.option.SOME_1'(s(X15,X20))) != s('type.option.option'(X15),'const.option.SOME_1'(s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))))) | s(X15,'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22))) = s(X15,happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)))) )),
  inference(superposition,[],[f443,f211])).
fof(f24244,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X12))) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))))) | s(X7,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)))) )),
  inference(superposition,[],[f443,f210])).
fof(f24243,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)))) )),
  inference(superposition,[],[f443,f208])).
fof(f24241,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.option.option'(X20),X21) != s('type.option.option'(X20),'const.option.SOME_1'(s(X20,X22))) | s(X20,X22) = s(X20,'const.option.option_CASE_3'(s('type.option.option'(X23),'const.option.NONE_0'),s(X20,sK6(X21,X20)),s(fun(X23,X20),X24))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),X21)) )),
  inference(superposition,[],[f443,f186])).
fof(f24240,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.option.option'(bool),X16) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X18,bool),X19))) | s(bool,'T_0') = s(bool,sK6(X16,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X16)) )),
  inference(superposition,[],[f443,f543])).
fof(f24234,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s('type.option.option'('type.option.option'(X289)),'const.option.SOME_1'(s('type.option.option'(X289),X290))) != s('type.option.option'('type.option.option'(X289)),'const.option.SOME_1'(s('type.option.option'(X289),X291))) | s('type.option.option'(X289),X291) = s('type.option.option'(X289),'const.option.option_CASE_3'(s('type.option.option'(X292),'const.option.NONE_0'),s('type.option.option'(X289),'const.option.SOME_1'(s(X289,sK6(X290,X289)))),s(fun(X292,'type.option.option'(X289)),X293))) | s('type.option.option'(X289),'const.option.NONE_0') = s('type.option.option'(X289),X290)) )),
  inference(superposition,[],[f443,f186])).
fof(f24358,plain,(
  ( ! [X282,X281,X283,X284] : (s(bool,'T_0') = s(bool,X281) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X282))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X281))))) | s('type.option.option'(bool),X282) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X283,'type.option.option'(bool)),X284)))) ) | $spl0),
  inference(forward_demodulation,[],[f24232,f994])).
fof(f24232,plain,(
  ( ! [X282,X281,X283,X284] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X282))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X281))))) | s('type.option.option'(bool),X282) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X283,'type.option.option'(bool)),X284))) | s(bool,X281) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24356,plain,(
  ( ! [X273,X275,X276,X274] : (s(bool,'T_0') = s(bool,X273) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X274))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X274) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X273))),s(fun(X275,'type.option.option'(bool)),X276)))) ) | $spl0),
  inference(forward_demodulation,[],[f24230,f994])).
fof(f24230,plain,(
  ( ! [X273,X275,X276,X274] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X274))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X274) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X273))),s(fun(X275,'type.option.option'(bool)),X276))) | s(bool,X273) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24350,plain,(
  ( ! [X246,X244,X247,X245] : (s(bool,X245) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X246),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X246,bool),X247))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))) | s(bool,'F_0') = s(bool,X244)) ) | $spl0),
  inference(forward_demodulation,[],[f24223,f994])).
fof(f24223,plain,(
  ( ! [X246,X244,X247,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))) | s(bool,X245) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X246),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X246,bool),X247))) | s(bool,'F_0') = s(bool,X244)) ) | $spl0),
  inference(superposition,[],[f443,f7381])).
fof(f24349,plain,(
  ( ! [X243,X241,X242,X240] : (s(bool,X241) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X242),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X242,bool),X243))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X240)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f24222,f994])).
fof(f24222,plain,(
  ( ! [X243,X241,X242,X240] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241))) | s(bool,X241) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X242),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X242,bool),X243))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X240)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f7614])).
fof(f24347,plain,(
  ( ! [X231,X233,X234,X232] : (s(bool,X232) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X233,bool),X234))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) | $spl0),
  inference(forward_demodulation,[],[f24220,f994])).
fof(f24220,plain,(
  ( ! [X231,X233,X234,X232] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) | s(bool,X232) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X233,bool),X234))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24210,plain,(
  ( ! [X189,X187,X188,X186] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X186))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s(bool,X187) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X188),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X188,bool),X189))) | s(bool,'T_0') = s(bool,X186)) )),
  inference(superposition,[],[f443,f146])).
fof(f24207,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X171))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,X172) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X173,bool),X174))) | s(bool,X171) = s(bool,X175) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X175)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24335,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,'T_0') = s(bool,X155) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X152))) | s(bool,X152) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X153),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X153,bool),X154))) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(forward_demodulation,[],[f24203,f994])).
fof(f24203,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X152))) | s(bool,X152) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X153),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X153,bool),X154))) | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(superposition,[],[f443,f8334])).
fof(f24322,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X95),s(fun(X97,bool),X98))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | $spl0),
  inference(forward_demodulation,[],[f24191,f994])).
fof(f24191,plain,(
  ( ! [X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X95),s(fun(X97,bool),X98))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | $spl0),
  inference(superposition,[],[f443,f8126])).
fof(f24188,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))) | s(bool,X84) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X82),s(fun(X85,bool),X86))) | s(bool,'F_0') = s(bool,X82) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24186,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) | s(bool,X73) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.NONE_0'),s(bool,X72),s(fun(X74,bool),X75))) | s(bool,X72) = s(bool,X76) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool))) ) | $spl0),
  inference(superposition,[],[f443,f1987])).
fof(f24183,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X57),s(fun(X60,bool),X61))) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f443,f1778])).
fof(f24182,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X52),s(fun(X54,bool),X55))) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f443,f1778])).
fof(f24179,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X37),s(fun(X40,bool),X41))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f443,f278])).
fof(f24178,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X32),s(fun(X34,bool),X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f443,f278])).
fof(f24177,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f443,f146])).
fof(f24122,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,X44) = s(bool,happ(s(fun(X45,bool),X46),s(X45,X47))) | s(X45,X47) = s(X45,sK7(X47,X46,X45)) | s(bool,X44) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f24069,f145])).
fof(f24069,plain,(
  ( ! [X47,X45,X48,X46,X44] : (p(s(bool,'F_0')) | s(bool,X44) = s(bool,happ(s(fun(X45,bool),X46),s(X45,X47))) | s(X45,X47) = s(X45,sK7(X47,X46,X45)) | s(bool,X44) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(superposition,[],[f2869,f1987])).
fof(f23732,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(subsumption_resolution,[],[f23700,f143])).
fof(f23700,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f1912,f278])).
fof(f23617,plain,(
  ( ! [X152,X151] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X152) = s(bool,sK6('const.option.SOME_1'(s(bool,X151)),bool)) | s(bool,'F_0') = s(bool,X152)) ) | $spl0),
  inference(superposition,[],[f1909,f994])).
fof(f23614,plain,(
  ( ! [X140,X138,X139,X137] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138))) | s(bool,X140) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,X138),s(fun(X137,bool),X139))) | s(bool,'F_0') = s(bool,X140)) ) | $spl0),
  inference(superposition,[],[f1909,f208])).
fof(f23544,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1909,f8334])).
fof(f23453,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(X0,sK7(X2,X1,X0)) = s(X0,sK7(sK7(X2,X1,X0),X1,X0))) ) | $spl0),
  inference(condensation,[],[f23452])).
fof(f23452,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'F_0') = s(bool,X49) | s(X46,sK7(X48,X47,X46)) = s(X46,sK7(sK7(X48,X47,X46),X47,X46)) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48)))) ) | $spl0),
  inference(subsumption_resolution,[],[f23451,f153])).
fof(f23451,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'F_0') = s(bool,X49) | ~p(s(bool,X49)) | s(X46,sK7(X48,X47,X46)) = s(X46,sK7(sK7(X48,X47,X46),X47,X46)) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48)))) ) | $spl0),
  inference(forward_demodulation,[],[f23399,f994])).
fof(f23399,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,X49)) | s(X46,sK7(X48,X47,X46)) = s(X46,sK7(sK7(X48,X47,X46),X47,X46)) | s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X47),s(X46,X48))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f1987])).
fof(f23445,plain,(
  ( ! [X6,X8,X7,X9] : (s(X6,sK7(X8,X7,X6)) = s(X6,sK7(sK7(X8,X7,X6),X7,X6)) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(subsumption_resolution,[],[f23389,f143])).
fof(f23389,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s(X6,sK7(X8,X7,X6)) = s(X6,sK7(sK7(X8,X7,X6),X7,X6)) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f2867,f278])).
fof(f21478,plain,(
  ( ! [X114,X113] : (s(bool,X114) = s(bool,sK6('const.option.SOME_1'(s(bool,X113)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,'T_0') = s(bool,X113)) ) | $spl0),
  inference(subsumption_resolution,[],[f21427,f145])).
fof(f21427,plain,(
  ( ! [X114,X113] : (p(s(bool,'F_0')) | s(bool,X114) = s(bool,sK6('const.option.SOME_1'(s(bool,X113)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,'T_0') = s(bool,X113)) ) | $spl0),
  inference(superposition,[],[f21149,f3818])).
fof(f21477,plain,(
  ( ! [X111,X112,X110] : (s(bool,X111) = s(bool,sK6('const.option.SOME_1'(s(bool,X110)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) | s(bool,X110) = s(bool,X112) | s(bool,'F_0') = s(bool,X112)) ) | $spl0),
  inference(subsumption_resolution,[],[f21426,f145])).
fof(f21426,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,'F_0')) | s(bool,X111) = s(bool,sK6('const.option.SOME_1'(s(bool,X110)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) | s(bool,X110) = s(bool,X112) | s(bool,'F_0') = s(bool,X112)) ) | $spl0),
  inference(superposition,[],[f21149,f1987])).
fof(f21476,plain,(
  ( ! [X109,X108] : (s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X108) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f21425,f145])).
fof(f21425,plain,(
  ( ! [X109,X108] : (p(s(bool,'F_0')) | s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X108) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f21149,f7614])).
fof(f21475,plain,(
  ( ! [X105,X104] : (s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104)))) ) | $spl0),
  inference(subsumption_resolution,[],[f21423,f145])).
fof(f21423,plain,(
  ( ! [X105,X104] : (p(s(bool,'F_0')) | s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104)))) ) | $spl0),
  inference(superposition,[],[f21149,f8256])).
fof(f21474,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X103) = s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | $spl0),
  inference(subsumption_resolution,[],[f21422,f145])).
fof(f21422,plain,(
  ( ! [X103,X101,X102,X100] : (p(s(bool,'F_0')) | s(bool,X103) = s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | $spl0),
  inference(superposition,[],[f21149,f1907])).
fof(f21473,plain,(
  ( ! [X99,X97,X98] : (s(bool,X99) = s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | $spl0),
  inference(subsumption_resolution,[],[f21421,f145])).
fof(f21421,plain,(
  ( ! [X99,X97,X98] : (p(s(bool,'F_0')) | s(bool,X99) = s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | $spl0),
  inference(superposition,[],[f21149,f261])).
fof(f21443,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) = s(bool,X27) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,X26) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f21395,f145])).
fof(f21395,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,'F_0')) | s(bool,X26) = s(bool,X27) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,X26) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f21149,f1987])).
fof(f21442,plain,(
  ( ! [X14,X15,X16] : (s(bool,X14) = s(bool,X15) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X14) = s(bool,X16) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(subsumption_resolution,[],[f21391,f145])).
fof(f21391,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,X15) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X14) = s(bool,X16) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f21149,f1778])).
fof(f21195,plain,(
  ( ! [X189,X188] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s(bool,'F_0') != s(bool,X189) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188)))) ) | $spl0),
  inference(forward_demodulation,[],[f21057,f994])).
fof(f21057,plain,(
  ( ! [X189,X188] : (s(bool,'F_0') != s(bool,X189) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X188)),bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188)))) ) | $spl0),
  inference(superposition,[],[f194,f8256])).
fof(f21055,plain,(
  ( ! [X185,X184] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) | s(bool,X185) = s(bool,sK6('const.option.SOME_1'(s(bool,X184)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | $spl0),
  inference(superposition,[],[f193,f8256])).
fof(f21191,plain,(
  ( ! [X177,X176] : (s(bool,X177) != s(bool,sK6('const.option.SOME_1'(s(bool,X176)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176)))) ) | $spl0),
  inference(subsumption_resolution,[],[f21049,f145])).
fof(f21049,plain,(
  ( ! [X177,X176] : (p(s(bool,'F_0')) | s(bool,X177) != s(bool,sK6('const.option.SOME_1'(s(bool,X176)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176)))) ) | $spl0),
  inference(superposition,[],[f19401,f8256])).
fof(f21177,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,X135),s(fun(X137,bool),X138))) | s(bool,'F_0') != s(bool,X136) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X135)))) ) | $spl0),
  inference(forward_demodulation,[],[f21028,f994])).
fof(f21028,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,'F_0') != s(bool,X136) | s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,X135)),bool)),s(fun(X137,bool),X138))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X135)))) ) | $spl0),
  inference(superposition,[],[f8919,f8256])).
fof(f21168,plain,(
  ( ! [X109,X110,X108] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s(bool,X108),s(fun(X109,bool),X110))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108)))) ) | $spl0),
  inference(forward_demodulation,[],[f21075,f994])).
fof(f21075,plain,(
  ( ! [X109,X110,X108] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)),s(fun(X109,bool),X110))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108)))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f21012])).
fof(f21012,plain,(
  ( ! [X109,X110,X108] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)),s(fun(X109,bool),X110))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108)))) ) | $spl0),
  inference(superposition,[],[f4072,f8256])).
fof(f21161,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) = s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)) | s(bool,X88) = s(bool,X89) | s(bool,'F_0') = s(bool,X89) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87)))) ) | $spl0),
  inference(subsumption_resolution,[],[f21000,f145])).
fof(f21000,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,'F_0')) | s(bool,X88) = s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)) | s(bool,X88) = s(bool,X89) | s(bool,'F_0') = s(bool,X89) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87)))) ) | $spl0),
  inference(superposition,[],[f2586,f8256])).
fof(f21155,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66)))) ) | $spl0),
  inference(forward_demodulation,[],[f21083,f994])).
fof(f21083,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool)))) | s(bool,'T_0') = s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66)))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f20991])).
fof(f20991,plain,(
  ( ! [X66,X67] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool)))) | s(bool,'T_0') = s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66)))) ) | $spl0),
  inference(superposition,[],[f480,f8256])).
fof(f21149,plain,(
  ( ! [X33,X34] : (p(s(bool,X34)) | s(bool,X33) = s(bool,X34) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) | $spl0),
  inference(forward_demodulation,[],[f21148,f994])).
fof(f21148,plain,(
  ( ! [X33,X34] : (p(s(bool,X34)) | s(bool,X34) = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20975,f145])).
fof(f20975,plain,(
  ( ! [X33,X34] : (p(s(bool,'F_0')) | p(s(bool,X34)) | s(bool,X34) = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) | $spl0),
  inference(superposition,[],[f198,f8256])).
fof(f21147,plain,(
  ( ! [X31] : (~p(s(bool,X31)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31)))) ) | $spl0),
  inference(forward_demodulation,[],[f21085,f994])).
fof(f21085,plain,(
  ( ! [X31] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,X31)),bool))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31)))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f20973])).
fof(f20973,plain,(
  ( ! [X31] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,sK6('const.option.SOME_1'(s(bool,X31)),bool))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31)))) ) | $spl0),
  inference(superposition,[],[f152,f8256])).
fof(f21146,plain,(
  ( ! [X29] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20971,f145])).
fof(f20971,plain,(
  ( ! [X29] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29)))) ) | $spl0),
  inference(superposition,[],[f148,f8256])).
fof(f21141,plain,(
  ( ! [X39,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20942,f250])).
fof(f20942,plain,(
  ( ! [X39,X40] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool))) ) | $spl0),
  inference(superposition,[],[f8256,f8334])).
fof(f21133,plain,(
  ( ! [X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) | s(bool,'T_0') = s(bool,X16)) ) | $spl0),
  inference(subsumption_resolution,[],[f20930,f250])).
fof(f20930,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) | s(bool,'T_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f8256,f278])).
fof(f21104,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X28) = s(bool,X29)) ) | $spl0),
  inference(subsumption_resolution,[],[f21103,f250])).
fof(f21103,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X28) = s(bool,X29)) ) | $spl0),
  inference(forward_demodulation,[],[f20883,f994])).
fof(f20883,plain,(
  ( ! [X28,X29] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X28) = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f8256,f8334])).
fof(f20718,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X5) != s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f19529,f278])).
fof(f20717,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f19529,f8334])).
fof(f20716,plain,(
  ( ! [X136,X137] : (s(bool,X136) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X137) | s(bool,X137) = s(bool,sK6('const.option.SOME_1'(s(bool,X136)),bool))) ) | $spl0),
  inference(superposition,[],[f19529,f994])).
fof(f20501,plain,(
  ( ! [X109,X110,X108] : (s(bool,X109) != s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(subsumption_resolution,[],[f20459,f145])).
fof(f20459,plain,(
  ( ! [X109,X110,X108] : (p(s(bool,'F_0')) | s(bool,X109) != s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f19401,f1987])).
fof(f20500,plain,(
  ( ! [X107,X106] : (s(bool,X107) != s(bool,sK6('const.option.SOME_1'(s(bool,X106)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20458,f145])).
fof(f20458,plain,(
  ( ! [X107,X106] : (p(s(bool,'F_0')) | s(bool,X107) != s(bool,sK6('const.option.SOME_1'(s(bool,X106)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f19401,f7614])).
fof(f20499,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X103) != s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | $spl0),
  inference(subsumption_resolution,[],[f20456,f145])).
fof(f20456,plain,(
  ( ! [X103,X101,X102,X100] : (p(s(bool,'F_0')) | s(bool,X103) != s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | $spl0),
  inference(superposition,[],[f19401,f1907])).
fof(f20498,plain,(
  ( ! [X99,X97,X98] : (s(bool,X99) != s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20455,f145])).
fof(f20455,plain,(
  ( ! [X99,X97,X98] : (p(s(bool,'F_0')) | s(bool,X99) != s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | $spl0),
  inference(superposition,[],[f19401,f261])).
fof(f20412,plain,(
  ( ! [X130,X129] : (s(bool,X130) = s(bool,sK6(X129,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) | s('type.option.option'(bool),X129) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X129)) ) | $spl0),
  inference(subsumption_resolution,[],[f20372,f143])).
fof(f20372,plain,(
  ( ! [X130,X129] : (~p(s(bool,'T_0')) | s(bool,X130) = s(bool,sK6(X129,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) | s('type.option.option'(bool),X129) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X129)) ) | $spl0),
  inference(superposition,[],[f19399,f543])).
fof(f20406,plain,(
  ( ! [X96] : (s(bool,X96) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20358,f143])).
fof(f20358,plain,(
  ( ! [X96] : (~p(s(bool,'T_0')) | s(bool,X96) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96)))) ) | $spl0),
  inference(superposition,[],[f19399,f778])).
fof(f20405,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),'const.option.NONE_0'),s(bool,X93),s(fun(X92,bool),X94))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,'F_0') = s(bool,X93)) ) | $spl0),
  inference(subsumption_resolution,[],[f20357,f143])).
fof(f20357,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),'const.option.NONE_0'),s(bool,X93),s(fun(X92,bool),X94))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,'F_0') = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f19399,f368])).
fof(f20380,plain,(
  ( ! [X45,X46,X44] : (s(bool,X44) = s(bool,X45) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,X46)) ) | $spl0),
  inference(subsumption_resolution,[],[f20340,f143])).
fof(f20340,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'T_0')) | s(bool,X44) = s(bool,X45) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,X46)) ) | $spl0),
  inference(superposition,[],[f19399,f8334])).
fof(f19558,plain,(
  ( ! [X212,X213] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X213,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X213),s(bool,X212))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212)))) ) | $spl0),
  inference(forward_demodulation,[],[f19276,f994])).
fof(f19276,plain,(
  ( ! [X212,X213] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X213),s(bool,X212))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X213,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212)))) ) | $spl0),
  inference(superposition,[],[f2868,f8126])).
fof(f19557,plain,(
  ( ! [X210,X211] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X211,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X211),s(bool,X210))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210)))) ) | $spl0),
  inference(forward_demodulation,[],[f19275,f994])).
fof(f19275,plain,(
  ( ! [X210,X211] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X211),s(bool,X210))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X211,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210)))) ) | $spl0),
  inference(superposition,[],[f1907,f8126])).
fof(f19556,plain,(
  ( ! [X208,X207] : (s(bool,'T_0') = s(bool,sK6(X208,bool)) | s('type.option.option'(bool),X208) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X208) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207)))) ) | $spl0),
  inference(forward_demodulation,[],[f19273,f994])).
fof(f19273,plain,(
  ( ! [X208,X207] : (s('type.option.option'(bool),X208) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207))) | s(bool,sK6(X208,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X208) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207)))) ) | $spl0),
  inference(superposition,[],[f544,f8126])).
fof(f19552,plain,(
  ( ! [X180,X181] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181))) | s(bool,X180) != s(bool,X181) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180)))) ) | $spl0),
  inference(forward_demodulation,[],[f19262,f994])).
fof(f19262,plain,(
  ( ! [X180,X181] : (s(bool,X180) != s(bool,X181) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180)))) ) | $spl0),
  inference(superposition,[],[f194,f8126])).
fof(f19260,plain,(
  ( ! [X177,X176] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s(bool,X177) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176)))) ) | $spl0),
  inference(superposition,[],[f193,f8126])).
fof(f19551,plain,(
  ( ! [X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19258,f189])).
fof(f19258,plain,(
  ( ! [X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X174)))) ) | $spl0),
  inference(superposition,[],[f186,f8126])).
fof(f19541,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,X135) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X136),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X136,bool),X137))) | s(bool,X134) != s(bool,X135) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134)))) ) | $spl0),
  inference(forward_demodulation,[],[f19239,f994])).
fof(f19239,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,X134) != s(bool,X135) | s(bool,X135) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X136),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X136,bool),X137))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134)))) ) | $spl0),
  inference(superposition,[],[f8919,f8126])).
fof(f19535,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') = s(bool,X97) | s(bool,X96) != s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19534,f250])).
fof(f19534,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X97) | s(bool,X96) != s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96)))) ) | $spl0),
  inference(forward_demodulation,[],[f19533,f994])).
fof(f19533,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') = s(bool,X97) | s(bool,X96) != s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96)))) ) | $spl0),
  inference(forward_demodulation,[],[f19220,f994])).
fof(f19220,plain,(
  ( ! [X97,X96] : (s(bool,X96) != s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) | s(bool,X97) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96)))) ) | $spl0),
  inference(superposition,[],[f3662,f8126])).
fof(f19529,plain,(
  ( ! [X85,X86] : (s(bool,X85) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,X86)) ) | $spl0),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f3395,f8223,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f8218,f3392,f554,f831,f908,f3088,f2794,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f990,f966,f3061,f2767,f702,f679,f3060,f2766,f693,f3105,f2858,f973,f3106,f2859,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3104,f3086,f3062,f3059,f2869,f2867,f2857,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f8921,f8640,f4125,f4074,f3270,f3237,f3100,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f8593,f5359,f3148,f2979,f2953,f2845,f3149,f2980,f2954,f8803,f8802,f11911,f12885,f12886,f12887,f13008,f13009,f13010,f13139,f13140,f13142,f13195,f13278,f13279,f13280,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13438,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13473,f13476,f13533,f13479,f13485,f13486,f13487,f13488,f13638,f13639,f13706,f13705,f13703,f13694,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15098,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15415,f15416,f15417,f15470,f15471,f15472,f15473,f15568,f15569,f15572,f15574,f15577,f15579,f17598,f17599,f17600,f17601,f17656,f17662,f17962,f17963,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18040,f18042,f18043,f18052,f18053,f18054,f18058,f18060,f18061,f18062,f18067,f18073,f18075,f18077,f18078,f18087,f18088,f18249,f18250,f18251,f18255,f18210,f18208,f18166,f18167,f18204,f18186,f18188,f18190,f18191,f18200,f18201,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18631,f18634,f18636,f18637,f18638,f18669,f18645,f18646,f18647,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18758,f18817,f18818,f19296,f19316,f19317,f19318,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19375,f19376,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19386,f19387,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19460,f19463,f19465,f19494,f19146,f19496,f19497,f19498,f19499,f19500,f19501,f19508,f19511,f19512,f19514,f19527,f19528])).
fof(f19528,plain,(
  ( ! [X85,X86,X84] : (s(bool,X85) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X85) = s(bool,X86) | s(bool,'F_0') = s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19215,f19514])).
fof(f19215,plain,(
  ( ! [X85,X86,X84] : (~p(s(bool,X84)) | s(bool,X85) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X85) = s(bool,X86) | s(bool,'F_0') = s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84)))) ) | $spl0),
  inference(superposition,[],[f2191,f8126])).
fof(f19527,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19526,f250])).
fof(f19526,plain,(
  ( ! [X56,X55] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) | $spl0),
  inference(forward_demodulation,[],[f19201,f994])).
fof(f19201,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) | $spl0),
  inference(superposition,[],[f441,f8126])).
fof(f19514,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19185,f994])).
fof(f19185,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26)))) ) | $spl0),
  inference(superposition,[],[f148,f8126])).
fof(f19500,plain,(
  ( ! [X241,X242] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X242),s(bool,'T_0'))) | s(bool,X241) = s(bool,sK7(X241,X242,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241)))) ) | $spl0),
  inference(forward_demodulation,[],[f19160,f994])).
fof(f19160,plain,(
  ( ! [X241,X242] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X242),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X241) = s(bool,sK7(X241,X242,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X241)))) ) | $spl0),
  inference(superposition,[],[f2868,f8126])).
fof(f19499,plain,(
  ( ! [X239,X240] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X240),s(bool,'T_0'))) | s(bool,X239) = s(bool,sK7(X239,X240,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))) ) | $spl0),
  inference(forward_demodulation,[],[f19159,f994])).
fof(f19159,plain,(
  ( ! [X239,X240] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X240),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X239) = s(bool,sK7(X239,X240,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))) ) | $spl0),
  inference(superposition,[],[f1907,f8126])).
fof(f19498,plain,(
  ( ! [X237,X236] : (s('type.option.option'(bool),X237) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X236) = s(bool,sK6(X237,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X237) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236)))) ) | $spl0),
  inference(forward_demodulation,[],[f19157,f994])).
fof(f19157,plain,(
  ( ! [X237,X236] : (s('type.option.option'(bool),X237) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X236) = s(bool,sK6(X237,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X237) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236)))) ) | $spl0),
  inference(superposition,[],[f544,f8126])).
fof(f19146,plain,(
  ( ! [X210,X209] : (s(bool,X210) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209)))) ) | $spl0),
  inference(superposition,[],[f194,f8126])).
fof(f19494,plain,(
  ( ! [X206,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) | s(bool,X205) = s(bool,X206) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(forward_demodulation,[],[f19144,f994])).
fof(f19144,plain,(
  ( ! [X206,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X205) = s(bool,X206) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(superposition,[],[f193,f8126])).
fof(f19441,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'T_0') != s(bool,X114) | s(bool,X113) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X115),'const.option.NONE_0'),s(bool,X114),s(fun(X115,bool),X116))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113)))) ) | $spl0),
  inference(forward_demodulation,[],[f19089,f994])).
fof(f19089,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X114) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X113) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X115),'const.option.NONE_0'),s(bool,X114),s(fun(X115,bool),X116))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113)))) ) | $spl0),
  inference(superposition,[],[f8919,f8126])).
fof(f19440,plain,(
  ( ! [X111,X109,X112,X110] : (s(bool,'T_0') != s(bool,X110) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(bool,X109),s(fun(X111,bool),X112))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109)))) ) | $spl0),
  inference(forward_demodulation,[],[f19088,f994])).
fof(f19088,plain,(
  ( ! [X111,X109,X112,X110] : (s(bool,X110) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(bool,X109),s(fun(X111,bool),X112))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109)))) ) | $spl0),
  inference(superposition,[],[f8919,f8126])).
fof(f19427,plain,(
  ( ! [X72,X71] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool)) | s(bool,X71) = s(bool,X72) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71)))) ) | $spl0),
  inference(forward_demodulation,[],[f19426,f994])).
fof(f19426,plain,(
  ( ! [X72,X71] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool)) | s(bool,X71) = s(bool,X72) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19067,f194])).
fof(f19067,plain,(
  ( ! [X72,X71] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool)) | s(bool,X71) = s(bool,X72) | s(bool,'F_0') = s(bool,X71) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71)))) ) | $spl0),
  inference(superposition,[],[f3662,f8126])).
fof(f19425,plain,(
  ( ! [X68,X67] : (s(bool,X68) = s(bool,sK6('const.option.SOME_1'(s(bool,X67)),bool)) | s(bool,'F_0') = s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19065,f994])).
fof(f19065,plain,(
  ( ! [X68,X67] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X68) = s(bool,sK6('const.option.SOME_1'(s(bool,X67)),bool)) | s(bool,'F_0') = s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | $spl0),
  inference(superposition,[],[f2635,f8126])).
fof(f19401,plain,(
  ( ! [X12,X11] : (p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19400,f143])).
fof(f19400,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11)))) ) | $spl0),
  inference(forward_demodulation,[],[f19038,f994])).
fof(f19038,plain,(
  ( ! [X12,X11] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11)))) ) | $spl0),
  inference(superposition,[],[f203,f8126])).
fof(f19399,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19398,f143])).
fof(f19398,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) ) | $spl0),
  inference(forward_demodulation,[],[f19037,f994])).
fof(f19037,plain,(
  ( ! [X10,X9] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) ) | $spl0),
  inference(superposition,[],[f201,f8126])).
fof(f19390,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X67),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X66)),X67,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f19029,f994])).
fof(f19029,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X67),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X66)),X67,'type.option.option'(bool))) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2868,f8126])).
fof(f19389,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,X64) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X65),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X64)),X65,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f19028,f994])).
fof(f19028,plain,(
  ( ! [X64,X65] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X65),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X64)),X65,'type.option.option'(bool))) | s(bool,X64) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f1907,f8126])).
fof(f19388,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,X61) | s('type.option.option'('type.option.option'(bool)),X62) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) = s('type.option.option'(bool),sK6(X62,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X62)) ) | $spl0),
  inference(forward_demodulation,[],[f19026,f994])).
fof(f19026,plain,(
  ( ! [X61,X62] : (s('type.option.option'('type.option.option'(bool)),X62) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) = s('type.option.option'(bool),sK6(X62,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X62) | s(bool,X61) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f544,f8126])).
fof(f19384,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') = s(bool,X34) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X35))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))))) ) | $spl0),
  inference(forward_demodulation,[],[f19015,f994])).
fof(f19015,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X35))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))))) | s(bool,X34) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f194,f8126])).
fof(f19382,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') = s(bool,X30) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X31))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X31) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30)))) ) | $spl0),
  inference(forward_demodulation,[],[f19013,f994])).
fof(f19013,plain,(
  ( ! [X30,X31] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X31))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X31) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,X30) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f193,f8126])).
fof(f19006,plain,(
  ( ! [X17,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f193,f8126])).
fof(f19003,plain,(
  ( ! [X10,X9] : (s('type.option.option'(bool),X10) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X9) = s(bool,sK6(X10,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X10) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f544,f8126])).
fof(f19379,plain,(
  ( ! [X68,X67] : (s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X68),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X68,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f18997,f994])).
fof(f18997,plain,(
  ( ! [X68,X67] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X68),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X68,'type.option.option'(bool))) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2868,f8126])).
fof(f19378,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X66),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X66,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f18996,f994])).
fof(f18996,plain,(
  ( ! [X66,X65] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X66),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X66,'type.option.option'(bool))) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f1907,f8126])).
fof(f19377,plain,(
  ( ! [X62,X63] : (s(bool,'T_0') = s(bool,X62) | s('type.option.option'('type.option.option'(bool)),X63) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X63,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X63)) ) | $spl0),
  inference(forward_demodulation,[],[f18994,f994])).
fof(f18994,plain,(
  ( ! [X62,X63] : (s('type.option.option'('type.option.option'(bool)),X63) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X63,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X63) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f544,f8126])).
fof(f19373,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') = s(bool,X35) | s('type.option.option'(bool),X36) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X36))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f18983,f994])).
fof(f18983,plain,(
  ( ! [X35,X36] : (s('type.option.option'(bool),X36) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X36))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X35) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f194,f8126])).
fof(f19371,plain,(
  ( ! [X31,X32] : (s(bool,'T_0') = s(bool,X31) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X32))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))))) | s('type.option.option'(bool),X32) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f18981,f994])).
fof(f18981,plain,(
  ( ! [X31,X32] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X32))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))))) | s('type.option.option'(bool),X32) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f193,f8126])).
fof(f19368,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') = s(bool,X14) | s(X15,happ(s(fun(bool,X15),X16),s(bool,'F_0'))) = s(X15,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(X15,X17),s(fun(bool,X15),X16)))) ) | $spl0),
  inference(forward_demodulation,[],[f18974,f994])).
fof(f18974,plain,(
  ( ! [X14,X17,X15,X16] : (s(X15,happ(s(fun(bool,X15),X16),s(bool,'F_0'))) = s(X15,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(X15,X17),s(fun(bool,X15),X16))) | s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f210,f8126])).
fof(f18972,plain,(
  ( ! [X12,X11] : (s('type.option.option'(bool),X12) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,'F_0') = s(bool,sK6(X12,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f544,f8126])).
fof(f18936,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f8126,f8334])).
fof(f18935,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | $spl0),
  inference(superposition,[],[f8126,f8126])).
fof(f18920,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f8126,f278])).
fof(f18919,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f8126,f8334])).
fof(f19316,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),'const.option.NONE_0'),s(bool,X70),s(fun(X69,bool),X71))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70)))) ) | $spl0),
  inference(forward_demodulation,[],[f18874,f994])).
fof(f18874,plain,(
  ( ! [X70,X71,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),'const.option.NONE_0'),s(bool,X70),s(fun(X69,bool),X71)))) ) | $spl0),
  inference(superposition,[],[f8126,f208])).
fof(f19296,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f18835,f250])).
fof(f18835,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8126,f8334])).
fof(f18818,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X6) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f8126,f1778])).
fof(f18817,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl0),
  inference(superposition,[],[f8126,f1987])).
fof(f18789,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool)) | s(bool,'T_0') = s(bool,X62) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f18702,f250])).
fof(f18702,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool)) | s(bool,'T_0') = s(bool,X62) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f15417,f8334])).
fof(f18687,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) != s(bool,X17) | s(bool,X18) = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f15417,f146])).
fof(f18685,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X8) != s(bool,X9) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,X8) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f15417,f1778])).
fof(f18684,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool))) ) | $spl0),
  inference(superposition,[],[f15417,f1987])).
fof(f18650,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),X4) | s(bool,'F_0') = s(bool,sK6(X4,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,'T_0') = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) )),
  inference(superposition,[],[f544,f543])).
fof(f18649,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),X2) | s(X0,sK6(X1,X0)) = s(X0,sK6(X2,X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f544,f186])).
fof(f18648,plain,(
  ( ! [X152,X153] : (s('type.option.option'('type.option.option'(bool)),X153) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X152) = s('type.option.option'(bool),sK6(X153,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X153) | s(bool,'T_0') = s(bool,sK6(X152,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X152)) )),
  inference(superposition,[],[f544,f543])).
fof(f18646,plain,(
  ( ! [X149,X147,X148] : (s('type.option.option'('type.option.option'(X147)),X149) != s('type.option.option'('type.option.option'(X147)),'const.option.SOME_1'(s('type.option.option'(X147),X148))) | s('type.option.option'(X147),sK6(X149,'type.option.option'(X147))) = s('type.option.option'(X147),'const.option.SOME_1'(s(X147,sK6(X148,X147)))) | s('type.option.option'('type.option.option'(X147)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X147)),X149) | s('type.option.option'(X147),'const.option.NONE_0') = s('type.option.option'(X147),X148)) )),
  inference(superposition,[],[f544,f186])).
fof(f18669,plain,(
  ( ! [X134,X135] : (s(bool,'T_0') = s(bool,sK6(X135,bool)) | s('type.option.option'(bool),X135) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X135) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X134)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f18640,f994])).
fof(f18640,plain,(
  ( ! [X134,X135] : (s('type.option.option'(bool),X135) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(bool,sK6(X135,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X135) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X134)),bool))) ) | $spl0),
  inference(superposition,[],[f544,f7614])).
fof(f18628,plain,(
  ( ! [X103,X102,X104] : (s('type.option.option'(bool),X103) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,'F_0') = s(bool,sK6(X103,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X103) | s(bool,X102) = s(bool,X104) | s(bool,'F_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f544,f1778])).
fof(f18627,plain,(
  ( ! [X101,X99,X100] : (s('type.option.option'(bool),X100) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) | s(bool,'F_0') = s(bool,sK6(X100,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X100) | s(bool,X99) = s(bool,X101) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X101)),bool))) ) | $spl0),
  inference(superposition,[],[f544,f1987])).
fof(f18623,plain,(
  ( ! [X88,X87,X89] : (s('type.option.option'(bool),X88) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,'T_0') = s(bool,sK6(X88,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X88) | s(bool,X89) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X87) = s(bool,X89)) ) | $spl0),
  inference(superposition,[],[f544,f8334])).
fof(f18616,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),X70) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X68) = s(bool,sK6(X70,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X70) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X68)) ) | $spl0),
  inference(superposition,[],[f544,f8334])).
fof(f18615,plain,(
  ( ! [X66,X67,X65] : (s('type.option.option'(bool),X67) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) | s(bool,X65) = s(bool,sK6(X67,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X67) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f544,f8334])).
fof(f18614,plain,(
  ( ! [X64,X62,X63] : (s('type.option.option'(bool),X63) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X62) = s(bool,sK6(X63,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X63) | s(bool,X64) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X62) = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f544,f8334])).
fof(f18661,plain,(
  ( ! [X57,X58] : (s('type.option.option'(bool),X58) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X57) = s(bool,sK6(X58,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f18612,f994])).
fof(f18612,plain,(
  ( ! [X57,X58] : (s('type.option.option'(bool),X58) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X57) = s(bool,sK6(X58,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) ) | $spl0),
  inference(superposition,[],[f544,f7614])).
fof(f18660,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),X56) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X55) = s(bool,sK6(X56,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X56) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(forward_demodulation,[],[f18611,f994])).
fof(f18611,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),X56) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X55) = s(bool,sK6(X56,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X56) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f544,f7381])).
fof(f18610,plain,(
  ( ! [X54,X52,X53] : (s('type.option.option'(bool),X54) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X52) = s(bool,sK6(X54,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X54) | s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool))) ) | $spl0),
  inference(superposition,[],[f544,f1987])).
fof(f18609,plain,(
  ( ! [X50,X51,X49] : (s('type.option.option'(bool),X51) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X50))) | s(bool,X49) = s(bool,sK6(X51,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X51) | s(bool,'F_0') = s(bool,X50) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl0),
  inference(superposition,[],[f544,f1987])).
fof(f18608,plain,(
  ( ! [X47,X48,X46] : (s('type.option.option'(bool),X47) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X46) = s(bool,sK6(X47,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X47) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(superposition,[],[f544,f1987])).
fof(f18605,plain,(
  ( ! [X39,X37,X38] : (s('type.option.option'(bool),X39) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X37) = s(bool,sK6(X39,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f544,f1778])).
fof(f18604,plain,(
  ( ! [X35,X36,X34] : (s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X34) = s(bool,sK6(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f544,f1778])).
fof(f18601,plain,(
  ( ! [X26,X27,X25] : (s('type.option.option'(bool),X27) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,X25) = s(bool,sK6(X27,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f544,f278])).
fof(f18600,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(bool),X23) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X22) = s(bool,sK6(X23,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f544,f278])).
fof(f18598,plain,(
  ( ! [X19,X17,X18] : (s('type.option.option'(X17),X19) != s('type.option.option'(X17),'const.option.SOME_1'(s(X17,X18))) | s(X17,sK6(X19,X17)) = s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),X19)) )),
  inference(superposition,[],[f544,f994])).
fof(f18597,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.option.option'(X11),X16) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,sK6(X16,X11)) = s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) | s('type.option.option'(X11),'const.option.NONE_0') = s('type.option.option'(X11),X16)) )),
  inference(superposition,[],[f544,f211])).
fof(f18596,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),X10) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,sK6(X10,X5)) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) | s('type.option.option'(X5),'const.option.NONE_0') = s('type.option.option'(X5),X10)) )),
  inference(superposition,[],[f544,f210])).
fof(f18595,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),X4) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,sK6(X4,X0)) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X4)) )),
  inference(superposition,[],[f544,f208])).
fof(f18659,plain,(
  ( ! [X26,X24,X25] : (s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X25) | s('type.option.option'(X24),X25) != s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X26))) | s(X24,X26) = s(X24,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X24),X25)),'type.option.option'(X24)),X24))) )),
  inference(forward_demodulation,[],[f18594,f994])).
fof(f18594,plain,(
  ( ! [X26,X24,X25] : (s('type.option.option'(X24),X25) != s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X26))) | s(X24,X26) = s(X24,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X24),X25)),'type.option.option'(X24)),X24)) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),sK6('const.option.SOME_1'(s('type.option.option'(X24),X25)),'type.option.option'(X24)))) )),
  inference(superposition,[],[f544,f994])).
fof(f18658,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),'const.option.option_CASE_3'(s('type.option.option'(X19),X20),s('type.option.option'(X18),X21),s(fun(X19,'type.option.option'(X18)),X22))) | s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X23))) != s('type.option.option'(X18),'const.option.option_CASE_3'(s('type.option.option'(X19),X20),s('type.option.option'(X18),X21),s(fun(X19,'type.option.option'(X18)),X22))) | s(X18,X23) = s(X18,sK6(happ(s(fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)),happ(s(fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18))),happ(s(fun('type.option.option'(X19),fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)))),'const.option.option_CASE_0'),s('type.option.option'(X19),X20))),s('type.option.option'(X18),X21))),s(fun(X19,'type.option.option'(X18)),X22)),X18))) )),
  inference(forward_demodulation,[],[f18593,f211])).
fof(f18593,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X23))) != s('type.option.option'(X18),'const.option.option_CASE_3'(s('type.option.option'(X19),X20),s('type.option.option'(X18),X21),s(fun(X19,'type.option.option'(X18)),X22))) | s(X18,X23) = s(X18,sK6(happ(s(fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)),happ(s(fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18))),happ(s(fun('type.option.option'(X19),fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)))),'const.option.option_CASE_0'),s('type.option.option'(X19),X20))),s('type.option.option'(X18),X21))),s(fun(X19,'type.option.option'(X18)),X22)),X18)) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),happ(s(fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)),happ(s(fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18))),happ(s(fun('type.option.option'(X19),fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)))),'const.option.option_CASE_0'),s('type.option.option'(X19),X20))),s('type.option.option'(X18),X21))),s(fun(X19,'type.option.option'(X18)),X22)))) )),
  inference(superposition,[],[f544,f211])).
fof(f18657,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),happ(s(fun(X13,'type.option.option'(X12)),X16),s(X13,X14))) | s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X17))) != s('type.option.option'(X12),happ(s(fun(X13,'type.option.option'(X12)),X16),s(X13,X14))) | s(X12,X17) = s(X12,sK6('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X14))),s('type.option.option'(X12),X15),s(fun(X13,'type.option.option'(X12)),X16)),X12))) )),
  inference(forward_demodulation,[],[f18592,f210])).
fof(f18592,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X17))) != s('type.option.option'(X12),happ(s(fun(X13,'type.option.option'(X12)),X16),s(X13,X14))) | s(X12,X17) = s(X12,sK6('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X14))),s('type.option.option'(X12),X15),s(fun(X13,'type.option.option'(X12)),X16)),X12)) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X14))),s('type.option.option'(X12),X15),s(fun(X13,'type.option.option'(X12)),X16)))) )),
  inference(superposition,[],[f544,f210])).
fof(f18656,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9) | s('type.option.option'(X7),X9) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) | s(X7,X11) = s(X7,sK6('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.NONE_0'),s('type.option.option'(X7),X9),s(fun(X8,'type.option.option'(X7)),X10)),X7))) )),
  inference(forward_demodulation,[],[f18591,f208])).
fof(f18591,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.option.option'(X7),X9) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) | s(X7,X11) = s(X7,sK6('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.NONE_0'),s('type.option.option'(X7),X9),s(fun(X8,'type.option.option'(X7)),X10)),X7)) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.NONE_0'),s('type.option.option'(X7),X9),s(fun(X8,'type.option.option'(X7)),X10)))) )),
  inference(superposition,[],[f544,f208])).
fof(f18655,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) )),
  inference(subsumption_resolution,[],[f18589,f189])).
fof(f18589,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) )),
  inference(superposition,[],[f544,f543])).
fof(f18654,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK6('const.option.SOME_1'(s(X0,sK6(X1,X0))),X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(subsumption_resolution,[],[f18588,f189])).
fof(f18588,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK6('const.option.SOME_1'(s(X0,sK6(X1,X0))),X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f544,f186])).
fof(f18186,plain,(
  ( ! [X167,X168] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X168))) | s(bool,X168) = s(bool,sK6(X167,bool)) | s('type.option.option'(bool),X167) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X167)) )),
  inference(superposition,[],[f193,f543])).
fof(f18204,plain,(
  ( ! [X164] : (s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X164) | s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f18183])).
fof(f18183,plain,(
  ( ! [X164] : (s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X164) | s('type.option.option'(bool),X164) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X164)) )),
  inference(superposition,[],[f186,f543])).
fof(f18255,plain,(
  ( ! [X83,X84,X82] : (s(bool,X83) != s(bool,sK6(X82,bool)) | s(bool,X83) = s(bool,X84) | s(bool,'F_0') = s(bool,X84) | s('type.option.option'(bool),X82) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X82)) ) | $spl0),
  inference(subsumption_resolution,[],[f18138,f143])).
fof(f18138,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'T_0')) | s(bool,X83) != s(bool,sK6(X82,bool)) | s(bool,X83) = s(bool,X84) | s(bool,'F_0') = s(bool,X84) | s('type.option.option'(bool),X82) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X82)) ) | $spl0),
  inference(superposition,[],[f2191,f543])).
fof(f18251,plain,(
  ( ! [X45,X44] : (s(bool,X45) != s(bool,sK6(X44,bool)) | s(bool,'T_0') = s(bool,X45) | s('type.option.option'(bool),X44) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X44)) )),
  inference(subsumption_resolution,[],[f18119,f143])).
fof(f18119,plain,(
  ( ! [X45,X44] : (~p(s(bool,'T_0')) | s(bool,X45) != s(bool,sK6(X44,bool)) | s(bool,'T_0') = s(bool,X45) | s('type.option.option'(bool),X44) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X44)) )),
  inference(superposition,[],[f281,f543])).
fof(f18075,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),X28) != s('type.option.option'(bool),X29) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X29))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK6(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28)) )),
  inference(superposition,[],[f194,f543])).
fof(f18062,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f442,f543])).
fof(f18061,plain,(
  ( ! [X83,X81,X82] : (s(X83,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s(X83,g(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(fun('type.option.option'(bool),X83),X81) = s(fun('type.option.option'(bool),X83),X82) | s(bool,'T_0') = s(bool,sK6(sK8(X81,X82,X83,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X81,X82,X83,'type.option.option'(bool)))) )),
  inference(superposition,[],[f209,f543])).
fof(f18058,plain,(
  ( ! [X77] : (s('type.option.option'('type.option.option'(bool)),X77) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X77) | s(bool,'T_0') = s(bool,sK6(sK6(X77,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X77,'type.option.option'(bool)))) )),
  inference(superposition,[],[f186,f543])).
fof(f18054,plain,(
  ( ! [X64,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),f(s(X63,sK8(X64,X65,'type.option.option'(bool),X63)))) | s(fun(X63,'type.option.option'(bool)),X64) = s(fun(X63,'type.option.option'(bool)),X65) | s(bool,'T_0') = s(bool,sK6(g(s(X63,sK8(X64,X65,'type.option.option'(bool),X63))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),g(s(X63,sK8(X64,X65,'type.option.option'(bool),X63))))) )),
  inference(superposition,[],[f209,f543])).
fof(f18038,plain,(
  ( ! [X24,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X25))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X24) = s('type.option.option'(bool),X25) | s(bool,'T_0') = s(bool,sK6(X24,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X24)) )),
  inference(superposition,[],[f193,f543])).
fof(f18243,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,'T_0') = s(bool,X13) | s(X14,happ(s(fun(bool,X14),X15),s(bool,X13))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X14,X16),s(fun(bool,X14),X15)))) )),
  inference(forward_demodulation,[],[f18242,f994])).
fof(f18242,plain,(
  ( ! [X14,X15,X13,X16] : (s(X14,happ(s(fun(bool,X14),X15),s(bool,X13))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X14,X16),s(fun(bool,X14),X15))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) )),
  inference(subsumption_resolution,[],[f18032,f189])).
fof(f18032,plain,(
  ( ! [X14,X15,X13,X16] : (s(X14,happ(s(fun(bool,X14),X15),s(bool,X13))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X14,X16),s(fun(bool,X14),X15))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13)))) )),
  inference(superposition,[],[f210,f543])).
fof(f17993,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f543,f543])).
fof(f17972,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(bool),X7) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,sK6(X7,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X7) | s(bool,X6) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f543,f1778])).
fof(f17971,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,sK6(X4,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl0),
  inference(superposition,[],[f543,f1987])).
fof(f18231,plain,(
  ( ! [X14] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X14) | s('type.option.option'(bool),X14) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X14)),'type.option.option'(bool)),bool))) )),
  inference(forward_demodulation,[],[f17969,f994])).
fof(f17969,plain,(
  ( ! [X14] : (s('type.option.option'(bool),X14) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X14)),'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6('const.option.SOME_1'(s('type.option.option'(bool),X14)),'type.option.option'(bool)))) )),
  inference(superposition,[],[f543,f994])).
fof(f18230,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),X11),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),X11),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13))) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X10),fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X10),X11))),s('type.option.option'(bool),X12))),s(fun(X10,'type.option.option'(bool)),X13)),bool))) )),
  inference(forward_demodulation,[],[f17968,f211])).
fof(f17968,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),X11),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13))) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X10),fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X10),X11))),s('type.option.option'(bool),X12))),s(fun(X10,'type.option.option'(bool)),X13)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X10),fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X10),X11))),s('type.option.option'(bool),X12))),s(fun(X10,'type.option.option'(bool)),X13)))) )),
  inference(superposition,[],[f543,f211])).
fof(f18229,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X6,'type.option.option'(bool)),X9),s(X6,X7))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X6,'type.option.option'(bool)),X9),s(X6,X7))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.option.option'(bool),X8),s(fun(X6,'type.option.option'(bool)),X9)),bool))) )),
  inference(forward_demodulation,[],[f17967,f210])).
fof(f17967,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X6,'type.option.option'(bool)),X9),s(X6,X7))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.option.option'(bool),X8),s(fun(X6,'type.option.option'(bool)),X9)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.option.option'(bool),X8),s(fun(X6,'type.option.option'(bool)),X9)))) )),
  inference(superposition,[],[f543,f210])).
fof(f18228,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s('type.option.option'(bool),X4),s(fun(X3,'type.option.option'(bool)),X5)),bool))) )),
  inference(forward_demodulation,[],[f17966,f208])).
fof(f17966,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s('type.option.option'(bool),X4),s(fun(X3,'type.option.option'(bool)),X5)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s('type.option.option'(bool),X4),s(fun(X3,'type.option.option'(bool)),X5)))) )),
  inference(superposition,[],[f543,f208])).
fof(f17656,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f17627,f143])).
fof(f17627,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f525,f278])).
fof(f15417,plain,(
  ( ! [X116,X115] : (s(bool,'F_0') != s(bool,X115) | s(bool,X116) = s(bool,sK6('const.option.SOME_1'(s(bool,X115)),bool)) | s(bool,'T_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f15050,f994])).
fof(f14657,plain,(
  ( ! [X405,X403,X404,X402] : (s(X404,f(s(bool,'T_0'))) != s(X404,g(s(bool,'T_0'))) | s(fun(bool,X404),X402) = s(fun(bool,X404),X403) | s(bool,X405) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X405) = s(bool,sK8(X402,X403,X404,bool))) ) | $spl0),
  inference(superposition,[],[f209,f8334])).
fof(f14654,plain,(
  ( ! [X395,X396] : (s('type.option.option'(bool),X395) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X395) | s(bool,X396) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X396) = s(bool,sK6(X395,bool))) ) | $spl0),
  inference(superposition,[],[f186,f8334])).
fof(f14636,plain,(
  ( ! [X329,X328,X330] : (s(bool,'T_0') != s(bool,X329) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X328))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X329))) | s(bool,X330) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X328) = s(bool,X330)) ) | $spl0),
  inference(superposition,[],[f194,f8334])).
fof(f14634,plain,(
  ( ! [X323,X324,X322] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X323))) | s(bool,X322) = s(bool,X323) | s(bool,X324) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X322) = s(bool,X324)) ) | $spl0),
  inference(superposition,[],[f193,f8334])).
fof(f15293,plain,(
  ( ! [X146,X147] : (s(bool,X146) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X147) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X146) = s(bool,X147)) ) | $spl0),
  inference(subsumption_resolution,[],[f14568,f994])).
fof(f14568,plain,(
  ( ! [X146,X147] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X146) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X147) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X146) = s(bool,X147)) ) | $spl0),
  inference(superposition,[],[f8110,f8334])).
fof(f14503,plain,(
  ( ! [X208,X209,X207] : (s(bool,X207) != s(bool,X208) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208))) | s(bool,X209) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X207) = s(bool,X209)) ) | $spl0),
  inference(superposition,[],[f194,f8334])).
fof(f15270,plain,(
  ( ! [X103,X105,X104] : (s(bool,X103) != s(bool,X104) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X103) = s(bool,X105)) ) | $spl0),
  inference(subsumption_resolution,[],[f14470,f454])).
fof(f14470,plain,(
  ( ! [X103,X105,X104] : (s(bool,X103) != s(bool,X104) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X103) = s(bool,X105)) ) | $spl0),
  inference(superposition,[],[f479,f8334])).
fof(f14452,plain,(
  ( ! [X52,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool)) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X51) = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f8593,f8334])).
fof(f14451,plain,(
  ( ! [X50,X48,X49] : (s(bool,X48) != s(bool,X49) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X48) = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f8329,f8334])).
fof(f14450,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,X45) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X43) = s(bool,X45)) ) | $spl0),
  inference(superposition,[],[f7614,f8334])).
fof(f14449,plain,(
  ( ! [X41,X42,X40] : (s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,X40)),bool)) | s(bool,'F_0') = s(bool,X41) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X40) = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f7381,f8334])).
fof(f14447,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) != s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X26) = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f3482,f8334])).
fof(f14446,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X18) != s(bool,X19) | s(bool,X20) = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool)) | s(bool,'F_0') = s(bool,X20) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f2635,f8334])).
fof(f14445,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,X15) | s(bool,X15) = s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s(bool,X17) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X14) = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f2192,f8334])).
fof(f14441,plain,(
  ( ! [X420,X418,X417,X419] : (s(X419,f(s(bool,X420))) != s(X419,g(s(bool,X420))) | s(fun(bool,X419),X417) = s(fun(bool,X419),X418) | s(bool,X420) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK8(X417,X418,X419,bool))) ) | $spl0),
  inference(superposition,[],[f209,f8334])).
fof(f14438,plain,(
  ( ! [X410,X411] : (s('type.option.option'(bool),X410) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X411))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X410) | s(bool,X411) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X410,bool))) ) | $spl0),
  inference(superposition,[],[f186,f8334])).
fof(f15236,plain,(
  ( ! [X302,X301] : (s(bool,X301) != s(bool,X302) | s(bool,'F_0') = s(bool,X302) | s(bool,X301) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f14402,f3993])).
fof(f14402,plain,(
  ( ! [X302,X301] : (s(bool,X301) != s(bool,X302) | s(bool,'F_0') = s(bool,X302) | s(bool,X301) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl0),
  inference(superposition,[],[f3674,f8334])).
fof(f15222,plain,(
  ( ! [X249,X250] : (s(bool,X250) != s(bool,sK6('const.option.SOME_1'(s(bool,X249)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X250)),bool)) | s(bool,X249) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f14384,f250])).
fof(f14384,plain,(
  ( ! [X249,X250] : (s(bool,X250) != s(bool,sK6('const.option.SOME_1'(s(bool,X249)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X250)),bool)) | s(bool,X249) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f4063,f8334])).
fof(f15221,plain,(
  ( ! [X233,X234,X232] : (s(bool,X232) != s(bool,X233) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234))) | s(bool,'T_0') = s(bool,X234) | s(bool,X232) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f14377,f250])).
fof(f14377,plain,(
  ( ! [X233,X234,X232] : (s(bool,X232) != s(bool,X233) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234))) | s(bool,'T_0') = s(bool,X234) | s(bool,X232) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f480,f8334])).
fof(f15209,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(condensation,[],[f15208])).
fof(f15208,plain,(
  ( ! [X109,X110,X108] : (s(bool,X110) != s(bool,sK6('const.option.SOME_1'(s(bool,X109)),bool)) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110) | s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f14333,f2192])).
fof(f14333,plain,(
  ( ! [X109,X110,X108] : (s(bool,X110) != s(bool,sK6('const.option.SOME_1'(s(bool,X109)),bool)) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110) | s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f3662,f8334])).
fof(f14274,plain,(
  ( ! [X344,X343,X342] : (s(bool,X343) != s(bool,X344) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X342))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X344))) | s(bool,X342) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X343)) ) | $spl0),
  inference(superposition,[],[f194,f8334])).
fof(f14272,plain,(
  ( ! [X337,X336,X338] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X338))) | s(bool,X336) = s(bool,X338) | s(bool,X336) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X337)) ) | $spl0),
  inference(superposition,[],[f193,f8334])).
fof(f15100,plain,(
  ( ! [X253,X254,X252] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X253,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X253),s(bool,X252))) | s(bool,X252) = s(bool,X254) | s(bool,'T_0') = s(bool,X254)) ) | $spl0),
  inference(forward_demodulation,[],[f14149,f994])).
fof(f14149,plain,(
  ( ! [X253,X254,X252] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X253),s(bool,X252))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X253,bool)) | s(bool,X252) = s(bool,X254) | s(bool,'T_0') = s(bool,X254)) ) | $spl0),
  inference(superposition,[],[f2868,f8334])).
fof(f15099,plain,(
  ( ! [X251,X249,X250] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X250,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X250),s(bool,X249))) | s(bool,X249) = s(bool,X251) | s(bool,'T_0') = s(bool,X251)) ) | $spl0),
  inference(forward_demodulation,[],[f14148,f994])).
fof(f14148,plain,(
  ( ! [X251,X249,X250] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X250),s(bool,X249))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X250,bool)) | s(bool,X249) = s(bool,X251) | s(bool,'T_0') = s(bool,X251)) ) | $spl0),
  inference(superposition,[],[f1907,f8334])).
fof(f14134,plain,(
  ( ! [X204,X205,X203] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X203))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204))) | s(bool,X204) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X203) = s(bool,X205) | s(bool,'T_0') = s(bool,X205)) ) | $spl0),
  inference(superposition,[],[f193,f8334])).
fof(f15094,plain,(
  ( ! [X200,X199] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) ) | $spl0),
  inference(subsumption_resolution,[],[f14132,f189])).
fof(f14132,plain,(
  ( ! [X200,X199] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X199) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) ) | $spl0),
  inference(superposition,[],[f186,f8334])).
fof(f15076,plain,(
  ( ! [X136,X135,X137] : (s(bool,'T_0') = s(bool,X136) | s(bool,X135) != s(bool,sK6('const.option.SOME_1'(s(bool,X136)),bool)) | s(bool,X135) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) ) | $spl0),
  inference(subsumption_resolution,[],[f15075,f250])).
fof(f15075,plain,(
  ( ! [X136,X135,X137] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X136) | s(bool,X135) != s(bool,sK6('const.option.SOME_1'(s(bool,X136)),bool)) | s(bool,X135) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) ) | $spl0),
  inference(forward_demodulation,[],[f15074,f994])).
fof(f15074,plain,(
  ( ! [X136,X135,X137] : (s(bool,'T_0') = s(bool,X136) | s(bool,X135) != s(bool,sK6('const.option.SOME_1'(s(bool,X136)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X135) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) ) | $spl0),
  inference(forward_demodulation,[],[f14110,f994])).
fof(f14110,plain,(
  ( ! [X136,X135,X137] : (s(bool,X135) != s(bool,sK6('const.option.SOME_1'(s(bool,X136)),bool)) | s(bool,X136) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X135) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) ) | $spl0),
  inference(superposition,[],[f3662,f8334])).
fof(f15050,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') != s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(subsumption_resolution,[],[f15049,f143])).
fof(f15049,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(forward_demodulation,[],[f14078,f994])).
fof(f14078,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') != s(bool,X37) | ~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f152,f8334])).
fof(f14040,plain,(
  ( ! [X257,X259,X258] : (s(bool,X258) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X257))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X258))) | s(bool,X257) = s(bool,X259) | s(bool,'T_0') = s(bool,X259)) ) | $spl0),
  inference(superposition,[],[f194,f8334])).
fof(f13946,plain,(
  ( ! [X107,X106] : (s(bool,'T_0') = s(bool,X106) | s(bool,X107) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X107) = s(bool,sK6('const.option.SOME_1'(s(bool,X106)),bool))) ) | $spl0),
  inference(superposition,[],[f8334,f994])).
fof(f14948,plain,(
  ( ! [X78,X76,X77] : (s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl0),
  inference(subsumption_resolution,[],[f13936,f250])).
fof(f13936,plain,(
  ( ! [X78,X76,X77] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl0),
  inference(superposition,[],[f8334,f1987])).
fof(f14947,plain,(
  ( ! [X74,X75] : (s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,X74) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f13935,f250])).
fof(f13935,plain,(
  ( ! [X74,X75] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,X74) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f8334,f7614])).
fof(f13899,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f8334,f278])).
fof(f13898,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f8334,f8334])).
fof(f14929,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) = s(bool,X65) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X64) = s(bool,X66) | s(bool,'F_0') = s(bool,X66)) ) | $spl0),
  inference(subsumption_resolution,[],[f13878,f250])).
fof(f13878,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) = s(bool,X65) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X64) = s(bool,X66) | s(bool,'F_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f8334,f1778])).
fof(f14928,plain,(
  ( ! [X61,X62,X63] : (s(bool,X61) = s(bool,X62) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X61) = s(bool,X63) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f13877,f250])).
fof(f13877,plain,(
  ( ! [X61,X62,X63] : (s(bool,X61) = s(bool,X62) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X61) = s(bool,X63) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl0),
  inference(superposition,[],[f8334,f1987])).
fof(f13771,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f8334,f278])).
fof(f13770,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f8334,f8334])).
fof(f13721,plain,(
  ( ! [X70,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,'T_0') = s(bool,X71) | s(bool,X70) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f13693,f994])).
fof(f13693,plain,(
  ( ! [X70,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)))) | s(bool,'T_0') = s(bool,X71) | s(bool,X70) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f13679])).
fof(f13679,plain,(
  ( ! [X70,X71] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)))) | s(bool,'T_0') = s(bool,X71) | s(bool,X70) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f480,f7614])).
fof(f13703,plain,(
  ( ! [X28,X26,X27] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f13663])).
fof(f13663,plain,(
  ( ! [X28,X26,X27] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f480,f1987])).
fof(f13705,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f13659])).
fof(f13659,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f480,f1778])).
fof(f13706,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(trivial_inequality_removal,[],[f13654])).
fof(f13654,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f480,f146])).
fof(f13639,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) != s(bool,X5) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f480,f1778])).
fof(f13638,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl0),
  inference(superposition,[],[f480,f1987])).
fof(f13467,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X75) != s(bool,X76) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,X76),s(fun(X77,bool),X78))) | s(bool,X75) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f8919,f278])).
fof(f13462,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X56),s(fun(X57,bool),X58))) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13461,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X50) != s(bool,X51) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.NONE_0'),s(bool,X51),s(fun(X52,bool),X53))) | s(bool,'F_0') = s(bool,X50) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13460,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') != s(bool,X45) | s(bool,X44) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(bool,X45),s(fun(X46,bool),X47))) | s(bool,X44) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13457,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) != s(bool,X31) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(bool,X31),s(fun(X32,bool),X33))) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f8919,f1778])).
fof(f13456,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,X25) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X25),s(fun(X26,bool),X27))) | s(bool,X24) = s(bool,X28) | s(bool,'F_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f8919,f1778])).
fof(f13453,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s(bool,X9) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X11),s(fun(X12,bool),X13))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f8919,f278])).
fof(f13452,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X4) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(bool,X5),s(fun(X6,bool),X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f8919,f278])).
fof(f13451,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f8919,f146])).
fof(f13519,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,X146) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X147,bool),X148))) | s(bool,X145) != s(bool,X146) | s(bool,'F_0') = s(bool,X145)) ) | $spl0),
  inference(forward_demodulation,[],[f13444,f994])).
fof(f13444,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,X145) != s(bool,X146) | s(bool,X146) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X147,bool),X148))) | s(bool,'F_0') = s(bool,X145)) ) | $spl0),
  inference(superposition,[],[f8919,f7381])).
fof(f13518,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X142) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X143),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X143,bool),X144))) | s(bool,X141) != s(bool,X142) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f13443,f994])).
fof(f13443,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X141) != s(bool,X142) | s(bool,X142) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X143),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X143,bool),X144))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f7614])).
fof(f13434,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X100) != s(bool,X101) | s(bool,X101) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X102,bool),X103))) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f8919,f146])).
fof(f13432,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(bool,X90) != s(bool,X91) | s(bool,X91) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X92,bool),X93))) | s(bool,X90) = s(bool,X94) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f8919,f1778])).
fof(f13431,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,X85) != s(bool,X86) | s(bool,X86) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X87,bool),X88))) | s(bool,X85) = s(bool,X89) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X89)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13429,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X75) != s(bool,X76) | s(bool,X76) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X77,bool),X78))) | s(bool,X75) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f8919,f278])).
fof(f13503,plain,(
  ( ! [X61,X59,X62,X60] : (s(bool,'T_0') != s(bool,X60) | s(bool,X60) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X61),'const.option.NONE_0'),s(bool,X59),s(fun(X61,bool),X62))) | s(bool,'F_0') = s(bool,X59)) ) | $spl0),
  inference(forward_demodulation,[],[f13425,f994])).
fof(f13425,plain,(
  ( ! [X61,X59,X62,X60] : (s(bool,X60) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X60) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X61),'const.option.NONE_0'),s(bool,X59),s(fun(X61,bool),X62))) | s(bool,'F_0') = s(bool,X59)) ) | $spl0),
  inference(superposition,[],[f8919,f7381])).
fof(f13424,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,X56) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X54),s(fun(X57,bool),X58))) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13422,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') != s(bool,X45) | s(bool,X45) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(bool,X44),s(fun(X46,bool),X47))) | s(bool,X44) = s(bool,X48) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl0),
  inference(superposition,[],[f8919,f1987])).
fof(f13419,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) != s(bool,X31) | s(bool,X31) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(bool,X29),s(fun(X32,bool),X33))) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f8919,f1778])).
fof(f13418,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,X25) | s(bool,X25) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X24),s(fun(X26,bool),X27))) | s(bool,X24) = s(bool,X28) | s(bool,'F_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f8919,f1778])).
fof(f13415,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s(bool,X11) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X9),s(fun(X12,bool),X13))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f8919,f278])).
fof(f13414,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(bool,X4),s(fun(X6,bool),X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f8919,f278])).
fof(f13413,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X0),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f8919,f146])).
fof(f13278,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,X88) != s(bool,X90) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X90)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,X88),s(fun(X87,bool),X89)))) ) | $spl0),
  inference(superposition,[],[f4952,f208])).
fof(f13142,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,X15) != s(bool,X16) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X17),'const.option.NONE_0'),s(bool,X16),s(fun(X17,bool),X18))) | s(bool,'T_0') = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f4072,f146])).
fof(f13140,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) != s(bool,X6) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s(bool,X6),s(fun(X7,bool),X8))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f4072,f1778])).
fof(f13139,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool))) ) | $spl0),
  inference(superposition,[],[f4072,f1987])).
fof(f13008,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,X88) != s(bool,X90) | s(bool,'F_0') = s(bool,X90) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,X88),s(fun(X87,bool),X89)))) ) | $spl0),
  inference(forward_demodulation,[],[f12923,f994])).
fof(f12923,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,X90) != s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool)) | s(bool,'F_0') = s(bool,X90) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,X88),s(fun(X87,bool),X89)))) ) | $spl0),
  inference(superposition,[],[f4028,f208])).
fof(f12885,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X85) != s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.NONE_0'),s(bool,X85),s(fun(X84,bool),X86))) | s(bool,'T_0') = s(bool,X87)) ) | $spl0),
  inference(superposition,[],[f4028,f208])).
fof(f11911,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f8593,f278])).
fof(f5359,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(subsumption_resolution,[],[f5329,f3818])).
fof(f5329,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') != s(bool,X10) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f4063,f278])).
fof(f8593,plain,(
  ( ! [X66] : (s(bool,'T_0') != s(bool,X66) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8569,f994])).
fof(f8569,plain,(
  ( ! [X66] : (s(bool,'T_0') != s(bool,X66) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool))) ) | $spl0),
  inference(superposition,[],[f8329,f994])).
fof(f4699,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f4689])).
fof(f4689,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f3993,f278])).
fof(f10478,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s(bool,X85) != s(bool,happ(s(fun(X81,bool),X84),s(X81,X82))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X81),'const.option.SOME_1'(s(X81,X82))),s(bool,X83),s(fun(X81,bool),X84)))) )),
  inference(superposition,[],[f479,f210])).
fof(f10479,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X90) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X86),X87),s(bool,X88),s(fun(X86,bool),X89))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X90))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X86,bool),bool),happ(s(fun(bool,fun(fun(X86,bool),bool)),happ(s(fun('type.option.option'(X86),fun(bool,fun(fun(X86,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X86),X87))),s(bool,X88))),s(fun(X86,bool),X89)))) )),
  inference(superposition,[],[f479,f211])).
fof(f4952,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3992,f146])).
fof(f9292,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f9291,f143])).
fof(f9291,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7899,f994])).
fof(f7899,plain,(
  ( ! [X21,X22] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | $spl0),
  inference(superposition,[],[f281,f7614])).
fof(f8919,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X90) != s(bool,X92) | s(bool,X92) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,X90),s(fun(X89,bool),X91)))) ) | $spl0),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f3149,f2980,f2954,f3148,f2979,f2953,f2845,f3077,f554,f831,f908,f3088,f3112,f1439,f1432,f818,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f3061,f702,f679,f3060,f693,f3105,f973,f3106,f3104,f3062,f3059,f2869,f2867,f1720,f1247,f1217,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f3100,f1248,f1218,f987,f976,f975,f949,f947,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f4074,f4073,f4072,f4063,f4028,f4025,f3993,f3992,f3991,f3990,f3988,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3799,f3674,f3662,f3637,f3604,f3601,f3597,f3596,f3595,f3593,f3582,f3580,f3530,f3529,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3471,f3456,f3454,f3395,f3392,f3388,f3387,f3386,f3373,f3371,f3270,f3269,f3240,f3239,f3237,f3236,f3235,f3151,f3150,f3147,f3116,f3113,f3111,f3110,f3109,f3108,f3086,f3081,f3079,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2866,f2865,f2864,f2863,f2862,f2861,f2860,f2859,f2858,f2857,f2837,f2836,f2834,f2832,f2802,f2794,f2792,f2787,f2785,f2783,f2780,f2779,f2775,f2774,f2773,f2768,f2767,f2766,f2765,f2763,f2759,f2723,f2683,f2682,f2681,f2635,f2634,f2633,f2632,f2592,f2586,f2284,f2283,f2281,f2277,f2275,f2267,f2266,f2264,f2262,f2225,f2217,f2216,f2214,f2191,f2125,f2124,f2122,f2118,f2116,f2108,f2107,f2105,f2103,f2035,f2034,f2033,f1987,f1986,f1985,f1984,f1931,f1930,f1929,f1927,f1919,f1918,f1917,f1914,f1912,f1909,f1907,f1905,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1174,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f907,f906,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f4915,f5281,f5311,f5313,f5411,f6039,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7684,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8211,f8218,f8223,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8639,f8640,f8641,f8801,f8802,f8803,f8804,f8918])).
fof(f8918,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X90) != s(bool,X92) | s(bool,X92) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,X90),s(fun(X89,bool),X91))) | s(bool,'F_0') = s(bool,X92)) ) | $spl0),
  inference(forward_demodulation,[],[f8839,f994])).
fof(f8839,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,X92) != s(bool,sK6('const.option.SOME_1'(s(bool,X90)),bool)) | s(bool,X92) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,X90),s(fun(X89,bool),X91))) | s(bool,'F_0') = s(bool,X92)) ) | $spl0),
  inference(superposition,[],[f3662,f208])).
fof(f8804,plain,(
  ( ! [X99,X98] : (s(bool,X98) != s(bool,sK6('const.option.SOME_1'(s(bool,X99)),bool)) | s(bool,X99) = s(bool,sK6('const.option.SOME_1'(s(bool,X98)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X98)),bool))) ) | $spl0),
  inference(superposition,[],[f3662,f994])).
fof(f8801,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X85) != s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)) | s(bool,X87) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.NONE_0'),s(bool,X85),s(fun(X84,bool),X86))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.NONE_0'),s(bool,X85),s(fun(X84,bool),X86)))) ) | $spl0),
  inference(superposition,[],[f3662,f208])).
fof(f8641,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,X103) | s(bool,X104) = s(bool,sK6('const.option.SOME_1'(s(bool,X103)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool))) ) | $spl0),
  inference(superposition,[],[f3482,f994])).
fof(f8638,plain,(
  ( ! [X92,X90,X91,X89] : (s(bool,'T_0') != s(bool,X90) | s(bool,X92) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,X90),s(fun(X89,bool),X91))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X92)),bool))) ) | $spl0),
  inference(superposition,[],[f3482,f208])).
fof(f8594,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f3482,f278])).
fof(f8586,plain,(
  ( ! [X21,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f8531,f250])).
fof(f8531,plain,(
  ( ! [X21,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(superposition,[],[f8329,f1987])).
fof(f8522,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f8329,f278])).
fof(f8329,plain,(
  ( ! [X36] : (s(bool,'T_0') != s(bool,X36) | s(bool,X36) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f8110,f994])).
fof(f8334,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f8269,f994])).
fof(f8269,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f8110,f278])).
fof(f8257,plain,(
  ( ! [X76,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X76) != s(bool,X77) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8010,f994])).
fof(f8010,plain,(
  ( ! [X76,X77] : (s(bool,X76) != s(bool,X77) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool))) ) | $spl0),
  inference(superposition,[],[f194,f7614])).
fof(f8008,plain,(
  ( ! [X72,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) | s(bool,X73) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool))) ) | $spl0),
  inference(superposition,[],[f193,f7614])).
fof(f8256,plain,(
  ( ! [X70] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70)))) ) | $spl0),
  inference(subsumption_resolution,[],[f8006,f189])).
fof(f8006,plain,(
  ( ! [X70] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool))) ) | $spl0),
  inference(superposition,[],[f186,f7614])).
fof(f8210,plain,(
  ( ! [X130,X129] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X130),s(bool,'T_0'))) | s(bool,X129) = s(bool,sK7(X129,X130,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X129)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7959,f994])).
fof(f7959,plain,(
  ( ! [X130,X129] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X130),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X129) = s(bool,sK7(X129,X130,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X129)),bool))) ) | $spl0),
  inference(superposition,[],[f2868,f7614])).
fof(f8209,plain,(
  ( ! [X127,X128] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X128),s(bool,'T_0'))) | s(bool,X127) = s(bool,sK7(X127,X128,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X127)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7958,f994])).
fof(f7958,plain,(
  ( ! [X127,X128] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X128),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X127) = s(bool,sK7(X127,X128,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X127)),bool))) ) | $spl0),
  inference(superposition,[],[f1907,f7614])).
fof(f7946,plain,(
  ( ! [X99,X100] : (s(bool,X100) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X99)),bool))) ) | $spl0),
  inference(superposition,[],[f194,f7614])).
fof(f8127,plain,(
  ( ! [X76,X75] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) | s(bool,'F_0') != s(bool,X76) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f7872,f994])).
fof(f7872,plain,(
  ( ! [X76,X75] : (s(bool,'F_0') != s(bool,X76) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X75)),bool)))) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f194,f7614])).
fof(f7870,plain,(
  ( ! [X72,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,X71)),bool)) | s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f193,f7614])).
fof(f8126,plain,(
  ( ! [X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f7868,f189])).
fof(f7868,plain,(
  ( ! [X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f186,f7614])).
fof(f8122,plain,(
  ( ! [X54,X55,X53] : (s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool)) | s(bool,X54) = s(bool,X55) | s(bool,'F_0') = s(bool,X55) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f7855,f145])).
fof(f7855,plain,(
  ( ! [X54,X55,X53] : (p(s(bool,'F_0')) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool)) | s(bool,X54) = s(bool,X55) | s(bool,'F_0') = s(bool,X55) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2586,f7614])).
fof(f8110,plain,(
  ( ! [X10] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f7833,f145])).
fof(f7833,plain,(
  ( ! [X10] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f148,f7614])).
fof(f7794,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f7614,f278])).
fof(f8066,plain,(
  ( ! [X10,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(subsumption_resolution,[],[f7752,f250])).
fof(f7752,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(superposition,[],[f7614,f278])).
fof(f7686,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X104,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X104),s(bool,X103))) | s(bool,'F_0') = s(bool,X103)) ) | $spl0),
  inference(forward_demodulation,[],[f7578,f994])).
fof(f7578,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X104),s(bool,X103))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X104,bool)) | s(bool,'F_0') = s(bool,X103)) ) | $spl0),
  inference(superposition,[],[f2868,f7381])).
fof(f7685,plain,(
  ( ! [X101,X102] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X102,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X102),s(bool,X101))) | s(bool,'F_0') = s(bool,X101)) ) | $spl0),
  inference(forward_demodulation,[],[f7577,f994])).
fof(f7577,plain,(
  ( ! [X101,X102] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X102),s(bool,X101))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X102,bool)) | s(bool,'F_0') = s(bool,X101)) ) | $spl0),
  inference(superposition,[],[f1907,f7381])).
fof(f7563,plain,(
  ( ! [X70,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X70) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f193,f7381])).
fof(f7502,plain,(
  ( ! [X97,X96] : (s(bool,X97) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,'F_0') = s(bool,X96)) ) | $spl0),
  inference(superposition,[],[f194,f7381])).
fof(f7614,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(condensation,[],[f7613])).
fof(f7613,plain,(
  ( ! [X21,X22] : (s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f7399])).
fof(f7399,plain,(
  ( ! [X21,X22] : (s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool))) ) | $spl0),
  inference(superposition,[],[f7381,f1987])).
fof(f7381,plain,(
  ( ! [X56] : (s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(forward_demodulation,[],[f7364,f778])).
fof(f7364,plain,(
  ( ! [X56] : (s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))),bool)) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7350])).
fof(f7350,plain,(
  ( ! [X56] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))),bool)) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f2635,f778])).
fof(f7370,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7331])).
fof(f7331,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f2635,f278])).
fof(f7377,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,'F_0') = s(bool,X31) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f7329,f250])).
fof(f7329,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,'F_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) | $spl0),
  inference(superposition,[],[f2635,f1987])).
fof(f7320,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f2635,f278])).
fof(f6566,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) != s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,X26) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f4063,f1987])).
fof(f6565,plain,(
  ( ! [X24,X25] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,X24) = s(bool,X25) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool))) ) | $spl0),
  inference(superposition,[],[f3993,f1987])).
fof(f6564,plain,(
  ( ! [X23,X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,X21) = s(bool,X23) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool))) ) | $spl0),
  inference(superposition,[],[f3992,f1987])).
fof(f6227,plain,(
  ( ! [X70,X72,X71] : (s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,X71) = s(bool,X72) | s(bool,'F_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(subsumption_resolution,[],[f6207,f145])).
fof(f6207,plain,(
  ( ! [X70,X72,X71] : (p(s(bool,'F_0')) | s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,X71) = s(bool,X72) | s(bool,'F_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f2586,f3818])).
fof(f5313,plain,(
  ( ! [X6,X7] : (s(bool,X7) != s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f4063,f146])).
fof(f5311,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f4063,f1778])).
fof(f5281,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') != s(bool,X28) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),'const.option.NONE_0'),s(bool,X28),s(fun(X27,bool),X29)))) ) | $spl0),
  inference(forward_demodulation,[],[f5252,f994])).
fof(f5252,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),'const.option.NONE_0'),s(bool,X28),s(fun(X27,bool),X29)))) ) | $spl0),
  inference(superposition,[],[f4678,f208])).
fof(f4875,plain,(
  ( ! [X39,X38] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X39) = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f193,f3818])).
fof(f4678,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f3993,f146])).
fof(f145,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.misc.IN_option_rwt',aHL_FALSITY)).
fof(f152,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.misc.IN_option_rwt','thm.bool.EQ_CLAUSES|split|2')).
fof(f153,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f103])).
fof(f261,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) )),
  inference(unit_resulting_resolution,[],[f190,f153])).
fof(f368,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f208,f146])).
fof(f440,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) )),
  inference(superposition,[],[f193,f261])).
fof(f441,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f193,f146])).
fof(f442,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f193,f146])).
fof(f454,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),
  inference(forward_demodulation,[],[f434,f261])).
fof(f434,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))))) )),
  inference(unit_resulting_resolution,[],[f262,f193])).
fof(f479,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f194,f146])).
fof(f480,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,X9) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f194,f146])).
fof(f503,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f454,f193])).
fof(f543,plain,(
  ( ! [X0] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f186,f146])).
fof(f875,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,X2,bool))) )),
  inference(superposition,[],[f209,f146])).
fof(f906,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X20),s(bool,X19))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X21),s(fun(bool,bool),X20))) | s(bool,'T_0') = s(bool,X19)) ) | $spl0),
  inference(superposition,[],[f897,f146])).
fof(f1005,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(superposition,[],[f540,f146])).
fof(f1054,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f994,f146])).
fof(f1146,plain,(
  ( ! [X21,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool)) | s(bool,'F_0') = s(bool,X21)) )),
  inference(superposition,[],[f193,f1054])).
fof(f1161,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(bool,X6),s(fun(X5,bool),X7)))) )),
  inference(forward_demodulation,[],[f1125,f994])).
fof(f1125,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(bool,X6),s(fun(X5,bool),X7)))) )),
  inference(superposition,[],[f1054,f208])).
fof(f1165,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f1164,f994])).
fof(f1164,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1138,f143])).
fof(f1138,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f201,f1054])).
fof(f1167,plain,(
  ( ! [X12,X11] : (p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,'F_0') = s(bool,X11)) )),
  inference(forward_demodulation,[],[f1166,f994])).
fof(f1166,plain,(
  ( ! [X12,X11] : (p(s(bool,X12)) | s(bool,X12) != s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f1139,f143])).
fof(f1139,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X12)) | s(bool,X12) != s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f203,f1054])).
fof(f1168,plain,(
  ( ! [X14,X13] : (s(bool,X14) != s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f1140,f143])).
fof(f1140,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s(bool,X14) != s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f281,f1054])).
fof(f1169,plain,(
  ( ! [X19] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f1144,f189])).
fof(f1144,plain,(
  ( ! [X19] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f186,f1054])).
fof(f1170,plain,(
  ( ! [X26,X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,'T_0') != s(bool,X26) | s(bool,'F_0') = s(bool,X25)) )),
  inference(forward_demodulation,[],[f1148,f994])).
fof(f1148,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') != s(bool,X26) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool)))) | s(bool,'F_0') = s(bool,X25)) )),
  inference(superposition,[],[f194,f1054])).
fof(f1191,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'F_0') = s(bool,X7)) ) | $spl0),
  inference(subsumption_resolution,[],[f1183,f143])).
fof(f1183,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s(bool,X7) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'F_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f1165,f778])).
fof(f1192,plain,(
  ( ! [X8,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool)) | s(bool,'F_0') = s(bool,X9) | s(bool,'F_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f1184,f143])).
fof(f1184,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool)) | s(bool,'F_0') = s(bool,X9) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f1165,f1054])).
fof(f1761,plain,(
  ( ! [X24,X23,X22] : (s(bool,X24) != s(bool,'const.bool.IN_2'(s(X22,X23),s(fun(X22,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1744,f145])).
fof(f1744,plain,(
  ( ! [X24,X23,X22] : (p(s(bool,'F_0')) | s(bool,X24) != s(bool,'const.bool.IN_2'(s(X22,X23),s(fun(X22,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X24)) )),
  inference(superposition,[],[f1167,f261])).
fof(f1774,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X17),'const.option.NONE_0'),s(bool,X18),s(fun(X17,bool),X19)))) ) | $spl0),
  inference(superposition,[],[f1191,f208])).
fof(f1777,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f1191,f994])).
fof(f1818,plain,(
  ( ! [X57,X58] : (s(bool,X58) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f194,f1191])).
fof(f1860,plain,(
  ( ! [X35,X36] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) | s(bool,X36) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'F_0') = s(bool,X35)) ) | $spl0),
  inference(superposition,[],[f193,f1191])).
fof(f1907,plain,(
  ( ! [X47,X45,X46] : (s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),X46),s(X45,X47))) | s(X45,X47) = s(X45,sK7(X47,X46,X45))) ) | $spl0),
  inference(subsumption_resolution,[],[f1906,f143])).
fof(f1906,plain,(
  ( ! [X47,X45,X46] : (~p(s(bool,'T_0')) | s(X45,X47) = s(X45,sK7(X47,X46,X45)) | s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) ) | $spl0),
  inference(forward_demodulation,[],[f1812,f778])).
fof(f1812,plain,(
  ( ! [X47,X45,X46] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) | s(X45,X47) = s(X45,sK7(X47,X46,X45)) | s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) ) | $spl0),
  inference(superposition,[],[f196,f1191])).
fof(f1909,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X53) = s(bool,X54) | s(bool,'F_0') = s(bool,X53)) ) | $spl0),
  inference(forward_demodulation,[],[f1816,f778])).
fof(f1816,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) | s(bool,X53) = s(bool,X54) | s(bool,'F_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f193,f1191])).
fof(f1917,plain,(
  ( ! [X104] : (s('type.option.option'(bool),X104) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X104) | s(bool,'F_0') = s(bool,sK6(X104,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f1834,f778])).
fof(f1834,plain,(
  ( ! [X104] : (s('type.option.option'(bool),X104) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X104) | s(bool,'F_0') = s(bool,sK6(X104,bool))) ) | $spl0),
  inference(superposition,[],[f186,f1191])).
fof(f1919,plain,(
  ( ! [X109,X110,X108] : (s(X110,f(s(bool,'T_0'))) != s(X110,g(s(bool,'T_0'))) | s(fun(bool,X110),X108) = s(fun(bool,X110),X109) | s(bool,'F_0') = s(bool,sK8(X108,X109,X110,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f1837,f778])).
fof(f1837,plain,(
  ( ! [X109,X110,X108] : (s(X110,f(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) != s(X110,g(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) | s(fun(bool,X110),X108) = s(fun(bool,X110),X109) | s(bool,'F_0') = s(bool,sK8(X108,X109,X110,bool))) ) | $spl0),
  inference(superposition,[],[f209,f1191])).
fof(f1927,plain,(
  ( ! [X39,X40] : (s(bool,X39) != s(bool,X40) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X40))) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(forward_demodulation,[],[f1862,f778])).
fof(f1862,plain,(
  ( ! [X39,X40] : (s(bool,X39) != s(bool,X40) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X40))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f194,f1191])).
fof(f1931,plain,(
  ( ! [X66,X67,X65] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X67),s(fun(bool,bool),X66))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X66),s(bool,X65))) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(forward_demodulation,[],[f1872,f778])).
fof(f1872,plain,(
  ( ! [X66,X67,X65] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X66),s(bool,X65))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))),s(bool,X67),s(fun(bool,bool),X66))) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f897,f1191])).
fof(f1984,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X49) = s(bool,X51) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X48),'const.option.NONE_0'),s(bool,X49),s(fun(X48,bool),X50)))) ) | $spl0),
  inference(superposition,[],[f1778,f208])).
fof(f1987,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,'F_0') = s(bool,X63) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl0),
  inference(superposition,[],[f1778,f994])).
fof(f2033,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'F_0') = s(bool,X36) | s(bool,X38) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X35),'const.option.NONE_0'),s(bool,X36),s(fun(X35,bool),X37))) | s(bool,'F_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f1778,f208])).
fof(f2103,plain,(
  ( ! [X111,X112,X110] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))) | s(bool,X110) = s(bool,X112) | s(bool,'F_0') = s(bool,X111) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f193,f1778])).
fof(f2105,plain,(
  ( ! [X118,X116,X117] : (s(bool,X117) != s(bool,X118) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X116))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X118))) | s(bool,'F_0') = s(bool,X117) | s(bool,'F_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f194,f1778])).
fof(f2116,plain,(
  ( ! [X156,X154,X157,X155] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X156),s(bool,X155))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X154))),s(bool,X157),s(fun(bool,bool),X156))) | s(bool,'F_0') = s(bool,X155) | s(bool,'F_0') = s(bool,X154)) ) | $spl0),
  inference(superposition,[],[f897,f1778])).
fof(f2122,plain,(
  ( ! [X182,X183] : (s('type.option.option'(bool),X182) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X182) | s(bool,'F_0') = s(bool,X183) | s(bool,'F_0') = s(bool,sK6(X182,bool))) ) | $spl0),
  inference(superposition,[],[f186,f1778])).
fof(f2125,plain,(
  ( ! [X191,X189,X192,X190] : (s(X191,f(s(bool,X192))) != s(X191,g(s(bool,X192))) | s(fun(bool,X191),X189) = s(fun(bool,X191),X190) | s(bool,'F_0') = s(bool,X192) | s(bool,'F_0') = s(bool,sK8(X189,X190,X191,bool))) ) | $spl0),
  inference(superposition,[],[f209,f1778])).
fof(f2191,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,X6)) | s(bool,X5) != s(bool,X6) | s(bool,X5) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f152,f1778])).
fof(f2214,plain,(
  ( ! [X68,X69,X67] : (s(bool,X67) != s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) | s(bool,X67) = s(bool,X69) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f194,f1778])).
fof(f2225,plain,(
  ( ! [X107,X105,X108,X106] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X106),s(bool,X105))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X107),s(fun(bool,bool),X106))) | s(bool,X105) = s(bool,X108) | s(bool,'F_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f897,f1778])).
fof(f2262,plain,(
  ( ! [X94,X92,X93] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93))) | s(bool,X92) = s(bool,X93) | s(bool,X92) = s(bool,X94) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f193,f1778])).
fof(f2264,plain,(
  ( ! [X99,X100,X98] : (s(bool,'F_0') != s(bool,X99) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) | s(bool,X98) = s(bool,X100) | s(bool,'F_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f194,f1778])).
fof(f2281,plain,(
  ( ! [X163,X164] : (s('type.option.option'(bool),X163) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X163) | s(bool,X164) = s(bool,sK6(X163,bool)) | s(bool,'F_0') = s(bool,X164)) ) | $spl0),
  inference(superposition,[],[f186,f1778])).
fof(f2284,plain,(
  ( ! [X173,X171,X172,X170] : (s(X172,f(s(bool,'F_0'))) != s(X172,g(s(bool,'F_0'))) | s(fun(bool,X172),X170) = s(fun(bool,X172),X171) | s(bool,X173) = s(bool,sK8(X170,X171,X172,bool)) | s(bool,'F_0') = s(bool,X173)) ) | $spl0),
  inference(superposition,[],[f209,f1778])).
fof(f2586,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(subsumption_resolution,[],[f2231,f145])).
fof(f2231,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f198,f1778])).
fof(f2632,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,'T_0') != s(bool,X51) | s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X50),'const.option.NONE_0'),s(bool,X51),s(fun(X50,bool),X52))) | s(bool,'F_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f2192,f208])).
fof(f2635,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') != s(bool,X64) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool)) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f2192,f994])).
fof(f2681,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),'const.option.NONE_0'),s(bool,X73),s(fun(X75,bool),X76))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74)))) )),
  inference(superposition,[],[f368,f208])).
fof(f2723,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) | s(bool,X99) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.NONE_0'),s(bool,X97),s(fun(X96,bool),X98))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(superposition,[],[f193,f368])).
fof(f2759,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X48) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X45),'const.option.NONE_0'),s(bool,X46),s(fun(X45,bool),X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f2709,f143])).
fof(f2709,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X48) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X45),'const.option.NONE_0'),s(bool,X46),s(fun(X45,bool),X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f281,f368])).
fof(f2773,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0'))) | s(bool,X20) = s(bool,sK7(X20,X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f1907,f146])).
fof(f2774,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))) | s(bool,X22) = s(bool,sK7(X22,X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f1907,f278])).
fof(f2775,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X27),s(bool,X26))) | s(bool,X25) = s(bool,sK7(X25,X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f1907,f278])).
fof(f2779,plain,(
  ( ! [X37,X38,X36] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))) | s(bool,X36) = s(bool,sK7(X36,X37,bool)) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f1907,f1778])).
fof(f2780,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X41),s(bool,X40))) | s(bool,X39) = s(bool,sK7(X39,X41,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f1907,f1778])).
fof(f2832,plain,(
  ( ! [X118,X116,X119,X117] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | $spl0),
  inference(superposition,[],[f193,f1907])).
fof(f2860,plain,(
  ( ! [X19,X17,X18] : (s(X17,X18) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) | s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) ) | $spl0),
  inference(forward_demodulation,[],[f2772,f994])).
fof(f2772,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,X18))) | s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f1907,f994])).
fof(f2861,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0'))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(forward_demodulation,[],[f2778,f778])).
fof(f2778,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(superposition,[],[f1907,f1191])).
fof(f2864,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X70,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(forward_demodulation,[],[f2790,f778])).
fof(f2790,plain,(
  ( ! [X70,X69] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X70,bool)) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f1907,f1191])).
fof(f2872,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X87) != s(bool,happ(s(fun(X84,bool),X85),s(X84,X86))) | s(bool,'F_0') = s(bool,X87) | s(X84,X86) = s(X84,sK7(X86,X85,X84))) ) | $spl0),
  inference(subsumption_resolution,[],[f2825,f145])).
fof(f2825,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,'F_0')) | s(bool,X87) != s(bool,happ(s(fun(X84,bool),X85),s(X84,X86))) | s(bool,'F_0') = s(bool,X87) | s(X84,X86) = s(X84,sK7(X86,X85,X84))) ) | $spl0),
  inference(superposition,[],[f1167,f1907])).
fof(f2920,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X60) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59))) | s(bool,X60) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(subsumption_resolution,[],[f2899,f143])).
fof(f2899,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59))) | s(bool,X60) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f2191,f368])).
fof(f2923,plain,(
  ( ! [X70,X69] : (s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(subsumption_resolution,[],[f2902,f143])).
fof(f2902,plain,(
  ( ! [X70,X69] : (~p(s(bool,'T_0')) | s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f2191,f778])).
fof(f2924,plain,(
  ( ! [X78,X76,X77] : (s(bool,X77) != s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,X77) = s(bool,X78) | s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(subsumption_resolution,[],[f2904,f143])).
fof(f2904,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,'T_0')) | s(bool,X77) != s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,X77) = s(bool,X78) | s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f2191,f1054])).
fof(f2952,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'F_0') = s(bool,X59) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X57),s(fun(X56,bool),X58)))) )),
  inference(superposition,[],[f441,f208])).
fof(f2955,plain,(
  ( ! [X70,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,'F_0') = s(bool,X71) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool))) )),
  inference(superposition,[],[f441,f994])).
fof(f2956,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f441,f186])).
fof(f2978,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X57),s(fun(X56,bool),X58))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f441,f208])).
fof(f2981,plain,(
  ( ! [X70,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f441,f994])).
fof(f2982,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f441,f186])).
fof(f3053,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X64) = s(bool,'const.bool.IN_2'(s(X62,X63),s(fun(X62,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(subsumption_resolution,[],[f3025,f145])).
fof(f3025,plain,(
  ( ! [X64,X62,X65,X63] : (p(s(bool,'F_0')) | s(bool,X64) = s(bool,'const.bool.IN_2'(s(X62,X63),s(fun(X62,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f2586,f261])).
fof(f3054,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,X74) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,X74) = s(bool,X75) | s(bool,'F_0') = s(bool,X75) | s(X71,X73) = s(X71,sK7(X73,X72,X71))) ) | $spl0),
  inference(subsumption_resolution,[],[f3028,f145])).
fof(f3028,plain,(
  ( ! [X74,X72,X71,X75,X73] : (p(s(bool,'F_0')) | s(bool,X74) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,X74) = s(bool,X75) | s(bool,'F_0') = s(bool,X75) | s(X71,X73) = s(X71,sK7(X73,X72,X71))) ) | $spl0),
  inference(superposition,[],[f2586,f1907])).
fof(f3067,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0'))) | s(bool,X20) = s(bool,sK7(X20,X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f2868,f146])).
fof(f3073,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))) | s(bool,X36) = s(bool,sK7(X36,X37,bool)) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f2868,f1778])).
fof(f3074,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X41),s(bool,X40))) | s(bool,X39) = s(bool,sK7(X39,X41,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f2868,f1778])).
fof(f3108,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0'))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(forward_demodulation,[],[f3072,f778])).
fof(f3072,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X35),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(superposition,[],[f2868,f1191])).
fof(f3111,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X70,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(forward_demodulation,[],[f3084,f778])).
fof(f3084,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))),X70,bool)) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f2868,f1191])).
fof(f3116,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f442,f1778])).
fof(f3147,plain,(
  ( ! [X57,X54,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X55),s(fun(X54,bool),X56))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f442,f208])).
fof(f3150,plain,(
  ( ! [X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f442,f994])).
fof(f3151,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X1) = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f442,f186])).
fof(f3235,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,X71) = s(bool,X73) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X70),'const.option.NONE_0'),s(bool,X71),s(fun(X70,bool),X72))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f208])).
fof(f3239,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f1987])).
fof(f3240,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f1987,f1778])).
fof(f3371,plain,(
  ( ! [X175,X176,X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X175))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s(bool,X174) = s(bool,X176) | s(bool,'F_0') = s(bool,X175) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X174)),bool))) ) | $spl0),
  inference(superposition,[],[f193,f1987])).
fof(f3373,plain,(
  ( ! [X182,X180,X181] : (s(bool,X181) != s(bool,X182) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) | s(bool,'F_0') = s(bool,X181) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X180)),bool))) ) | $spl0),
  inference(superposition,[],[f194,f1987])).
fof(f3386,plain,(
  ( ! [X225,X226,X224] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X226),s(bool,X225))) | s(bool,X224) = s(bool,sK7(X224,X226,bool)) | s(bool,'F_0') = s(bool,X225) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X224)),bool))) ) | $spl0),
  inference(superposition,[],[f1907,f1987])).
fof(f3387,plain,(
  ( ! [X229,X227,X228] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X229),s(bool,X228))) | s(bool,X227) = s(bool,sK7(X227,X229,bool)) | s(bool,'F_0') = s(bool,X228) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X227)),bool))) ) | $spl0),
  inference(superposition,[],[f2868,f1987])).
fof(f3454,plain,(
  ( ! [X175,X176,X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X175))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s(bool,X174) = s(bool,X176) | s(bool,'F_0') = s(bool,X174) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X175)),bool))) ) | $spl0),
  inference(superposition,[],[f193,f1987])).
fof(f3456,plain,(
  ( ! [X182,X180,X181] : (s(bool,X181) != s(bool,X182) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) | s(bool,'F_0') = s(bool,X180) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X181)),bool))) ) | $spl0),
  inference(superposition,[],[f194,f1987])).
fof(f3475,plain,(
  ( ! [X253,X252] : (s('type.option.option'(bool),X252) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X253))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252) | s(bool,'F_0') = s(bool,sK6(X252,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool))) ) | $spl0),
  inference(superposition,[],[f186,f1987])).
fof(f3478,plain,(
  ( ! [X261,X259,X260,X262] : (s(X261,f(s(bool,X262))) != s(X261,g(s(bool,X262))) | s(fun(bool,X261),X259) = s(fun(bool,X261),X260) | s(bool,'F_0') = s(bool,sK8(X259,X260,X261,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X262)),bool))) ) | $spl0),
  inference(superposition,[],[f209,f1987])).
fof(f3482,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool))) ) | $spl0),
  inference(superposition,[],[f250,f1987])).
fof(f3483,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X10) = s(bool,X13) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | $spl0),
  inference(superposition,[],[f442,f1987])).
fof(f3484,plain,(
  ( ! [X14,X15] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) | s(bool,X14) = s(bool,X15) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool))) ) | $spl0),
  inference(superposition,[],[f454,f1987])).
fof(f3516,plain,(
  ( ! [X109,X107,X108] : (s(bool,X107) != s(bool,X108) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X109)),bool))) ) | $spl0),
  inference(superposition,[],[f194,f1987])).
fof(f3524,plain,(
  ( ! [X140,X139] : (s(bool,X139) = s(bool,'const.bool.IN_2'(s(bool,X139),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X139) = s(bool,X140) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X140)),bool))) ) | $spl0),
  inference(superposition,[],[f261,f1987])).
fof(f3527,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X146),s(bool,X145))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X147),s(fun(bool,bool),X146))) | s(bool,X145) = s(bool,X148) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X148)),bool))) ) | $spl0),
  inference(superposition,[],[f897,f1987])).
fof(f3580,plain,(
  ( ! [X146,X144,X145] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X145))) | s(bool,X144) = s(bool,X145) | s(bool,X144) = s(bool,X146) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X146)),bool))) ) | $spl0),
  inference(superposition,[],[f193,f1987])).
fof(f3582,plain,(
  ( ! [X152,X151,X150] : (s(bool,'F_0') != s(bool,X151) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X150) = s(bool,X152) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X152)),bool))) ) | $spl0),
  inference(superposition,[],[f194,f1987])).
fof(f3595,plain,(
  ( ! [X196,X194,X195] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X195),s(bool,'F_0'))) | s(bool,X194) = s(bool,sK7(X194,X195,bool)) | s(bool,X194) = s(bool,X196) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X196)),bool))) ) | $spl0),
  inference(superposition,[],[f1907,f1987])).
fof(f3596,plain,(
  ( ! [X198,X199,X197] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X198),s(bool,'F_0'))) | s(bool,X197) = s(bool,sK7(X197,X198,bool)) | s(bool,X197) = s(bool,X199) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X199)),bool))) ) | $spl0),
  inference(superposition,[],[f2868,f1987])).
fof(f3601,plain,(
  ( ! [X222,X221] : (s('type.option.option'(bool),X221) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X221) | s(bool,X222) = s(bool,sK6(X221,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X222)),bool))) ) | $spl0),
  inference(superposition,[],[f186,f1987])).
fof(f3604,plain,(
  ( ! [X231,X229,X230,X228] : (s(X230,f(s(bool,'F_0'))) != s(X230,g(s(bool,'F_0'))) | s(fun(bool,X230),X228) = s(fun(bool,X230),X229) | s(bool,X231) = s(bool,sK8(X228,X229,X230,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X231)),bool))) ) | $spl0),
  inference(superposition,[],[f209,f1987])).
fof(f3637,plain,(
  ( ! [X92,X93,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X92) = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool)) | s(bool,X91) = s(bool,X93) | s(bool,'F_0') = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f193,f1987])).
fof(f3662,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(equality_factoring,[],[f1987])).
fof(f3674,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3656])).
fof(f3656,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(equality_factoring,[],[f1987])).
fof(f3812,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(condensation,[],[f3811])).
fof(f3811,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,X28) = s(bool,X30) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3189])).
fof(f3189,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,X28) = s(bool,X30) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool))) ) | $spl0),
  inference(superposition,[],[f1987,f1987])).
fof(f3818,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(condensation,[],[f3817])).
fof(f3817,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3179])).
fof(f3179,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1987,f146])).
fof(f3841,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X38) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl0),
  inference(subsumption_resolution,[],[f3222,f250])).
fof(f3222,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f1987,f278])).
fof(f3842,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,X37),s(fun(X36,bool),X38))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(subsumption_resolution,[],[f3264,f250])).
fof(f3264,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,X37),s(fun(X36,bool),X38))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f1987,f368])).
fof(f3843,plain,(
  ( ! [X50,X49] : (s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool)) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(subsumption_resolution,[],[f3267,f250])).
fof(f3267,plain,(
  ( ! [X50,X49] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool)) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f1987,f1054])).
fof(f3851,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(subsumption_resolution,[],[f3303,f250])).
fof(f3303,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f1987,f278])).
fof(f3926,plain,(
  ( ! [X105,X106,X104] : (s(bool,X104) != s(bool,X105) | s(bool,X105) = s(bool,X106) | s(bool,'F_0') = s(bool,X106) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f3430,f250])).
fof(f3430,plain,(
  ( ! [X105,X106,X104] : (s(bool,X104) != s(bool,X105) | s(bool,X105) = s(bool,X106) | s(bool,'F_0') = s(bool,X106) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool))) ) | $spl0),
  inference(superposition,[],[f2192,f1987])).
fof(f3960,plain,(
  ( ! [X61,X59,X60] : (s(bool,X59) != s(bool,X60) | s(bool,'F_0') = s(bool,X60) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f3552,f145])).
fof(f3552,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,'F_0')) | s(bool,X59) != s(bool,X60) | s(bool,'F_0') = s(bool,X60) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool))) ) | $spl0),
  inference(superposition,[],[f1167,f1987])).
fof(f3967,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(subsumption_resolution,[],[f3606,f145])).
fof(f3606,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f148,f1987])).
fof(f3982,plain,(
  ( ! [X61,X62,X63] : (s(bool,X62) != s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool)) | s(bool,'F_0') = s(bool,X62) | s(bool,X61) = s(bool,X63) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(subsumption_resolution,[],[f3627,f145])).
fof(f3627,plain,(
  ( ! [X61,X62,X63] : (p(s(bool,'F_0')) | s(bool,X62) != s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool)) | s(bool,'F_0') = s(bool,X62) | s(bool,X61) = s(bool,X63) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f1167,f1987])).
fof(f3983,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,X82) = s(bool,sK6('const.option.SOME_1'(s(bool,X81)),bool)) | s(bool,X82) = s(bool,X83) | s(bool,'F_0') = s(bool,X83) | s(bool,X81) = s(bool,X84) | s(bool,'F_0') = s(bool,X84)) ) | $spl0),
  inference(subsumption_resolution,[],[f3633,f145])).
fof(f3633,plain,(
  ( ! [X83,X81,X84,X82] : (p(s(bool,'F_0')) | s(bool,X82) = s(bool,sK6('const.option.SOME_1'(s(bool,X81)),bool)) | s(bool,X82) = s(bool,X83) | s(bool,'F_0') = s(bool,X83) | s(bool,X81) = s(bool,X84) | s(bool,'F_0') = s(bool,X84)) ) | $spl0),
  inference(superposition,[],[f2586,f1987])).
fof(f3984,plain,(
  ( ! [X88,X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,X88) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(subsumption_resolution,[],[f3635,f189])).
fof(f3635,plain,(
  ( ! [X88,X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,X88) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(superposition,[],[f186,f1987])).
fof(f3992,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f243,f778,f800,f818,f829,f830,f831,f857,f871,f875,f876,f884,f897,f906,f907,f908,f933,f935,f973,f947,f975,f949,f976,f987,f990,f966,f994,f1005,f1007,f1054,f1101,f1080,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1174,f1191,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1308,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1396,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1439,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1774,f1777,f1778,f1905,f1907,f1909,f1818,f1912,f1914,f1917,f1918,f1919,f1860,f1927,f1929,f1930,f1931,f1936,f1984,f1985,f1986,f1987,f2011,f2033,f2034,f2035,f2103,f2105,f2107,f2108,f2116,f2118,f2122,f2124,f2125,f2191,f2192,f2214,f2216,f2217,f2222,f2225,f2586,f2590,f2592,f2262,f2264,f2266,f2267,f2275,f2277,f2281,f2283,f2284,f2605,f2632,f2633,f2634,f2635,f2681,f2682,f2683,f2759,f2723,f2763,f2765,f2766,f2767,f2768,f2857,f2858,f2859,f2860,f2773,f2774,f2775,f2861,f2779,f2780,f2783,f2785,f2787,f2862,f2863,f2864,f2865,f2792,f2866,f2794,f2802,f2867,f2868,f2869,f2872,f2832,f2834,f2836,f2837,f2845,f2920,f2923,f2924,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3053,f3054,f3059,f3060,f3061,f3062,f3104,f3105,f3106,f3107,f3067,f3068,f3069,f3108,f3073,f3074,f3077,f3079,f3081,f3109,f3110,f3111,f3112,f3086,f3113,f3088,f3100,f3116,f3147,f3148,f3149,f3150,f3151,f3818,f3812,f3799,f3841,f3235,f3236,f3237,f3239,f3240,f3842,f3843,f3269,f3270,f3851,f3371,f3373,f3386,f3387,f3388,f3392,f3395,f3926,f3454,f3456,f3471,f3475,f3478,f3482,f3483,f3484,f3516,f3524,f3527,f3529,f3530,f3960,f3580,f3582,f3593,f3595,f3596,f3597,f3601,f3604,f3967,f3982,f3983,f3984,f3637,f3988,f3990,f3991,f3674,f3658])).
fof(f3993,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | $spl0),
  inference(unit_resulting_resolution,[],[f250,f3674])).
fof(f4025,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl0),
  inference(superposition,[],[f3674,f1987])).
fof(f4028,plain,(
  ( ! [X10,X9] : (s(bool,X10) != s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f3674,f146])).
fof(f4063,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl0),
  inference(condensation,[],[f4062])).
fof(f4062,plain,(
  ( ! [X23,X22] : (s(bool,X23) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f4009])).
fof(f4009,plain,(
  ( ! [X23,X22] : (s(bool,X23) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool))) ) | $spl0),
  inference(superposition,[],[f3674,f1987])).
fof(f4072,plain,(
  ( ! [X43,X44,X42] : (s(bool,'F_0') != s(bool,X43) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X42),'const.option.NONE_0'),s(bool,X43),s(fun(X42,bool),X44)))) ) | $spl0),
  inference(forward_demodulation,[],[f4021,f994])).
fof(f4021,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X42),'const.option.NONE_0'),s(bool,X43),s(fun(X42,bool),X44)))) ) | $spl0),
  inference(superposition,[],[f3674,f208])).
fof(f4123,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,X72) != s(bool,X74) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X74))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),'const.option.NONE_0'),s(bool,X72),s(fun(X71,bool),X73)))) )),
  inference(superposition,[],[f479,f208])).
fof(f4126,plain,(
  ( ! [X85,X86] : (s(bool,X85) != s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X85)),bool))) )),
  inference(superposition,[],[f479,f994])).
fof(f4169,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) )),
  inference(condensation,[],[f4168])).
fof(f4168,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f4167])).
fof(f4167,plain,(
  ( ! [X6,X7,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f4129,f278])).
fof(f4129,plain,(
  ( ! [X6,X7,X5] : (s(bool,X6) != s(bool,X7) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f479,f278])).
fof(f3658,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(equality_factoring,[],[f1987])).
fof(f3069,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X27),s(bool,X26))) | s(bool,X25) = s(bool,sK7(X25,X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f2868,f278])).
fof(f3068,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))) | s(bool,X22) = s(bool,sK7(X22,X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f2868,f278])).
fof(f3107,plain,(
  ( ! [X19,X17,X18] : (s(X17,X18) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) | s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) ) | $spl0),
  inference(forward_demodulation,[],[f3066,f994])).
fof(f3066,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X19),s(X17,X18))) | s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f2868,f994])).
fof(f2868,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,X18,X17))) ) | $spl0),
  inference(subsumption_resolution,[],[f2807,f145])).
fof(f2807,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,X18,X17))) ) | $spl0),
  inference(superposition,[],[f148,f1907])).
fof(f2605,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f2192,f278])).
fof(f2590,plain,(
  ( ! [X47,X48,X46] : (s(bool,X46) != s(bool,X47) | s(bool,'F_0') = s(bool,X47) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,X48)) ) | $spl0),
  inference(subsumption_resolution,[],[f2244,f145])).
fof(f2244,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,'F_0')) | s(bool,X46) != s(bool,X47) | s(bool,'F_0') = s(bool,X47) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f1167,f1778])).
fof(f2222,plain,(
  ( ! [X99,X100] : (s(bool,X99) = s(bool,'const.bool.IN_2'(s(bool,X99),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X99) = s(bool,X100) | s(bool,'F_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f261,f1778])).
fof(f2192,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f250,f1778])).
fof(f2011,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1778,f1778])).
fof(f1936,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))))) )),
  inference(unit_resulting_resolution,[],[f435,f193])).
fof(f1778,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1191,f1191])).
fof(f1758,plain,(
  ( ! [X12,X13] : (s(bool,X12) != s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f1740,f145])).
fof(f1740,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X12) != s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1167,f146])).
fof(f1448,plain,(
  ( ! [X158,X156,X157,X155] : (s(X157,f(s(bool,'T_0'))) != s(X157,g(s(bool,'T_0'))) | s(fun(bool,X157),X155) = s(fun(bool,X157),X156) | s(bool,X158) = s(bool,sK8(X155,X156,X157,bool)) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f209,f278])).
fof(f1445,plain,(
  ( ! [X149,X148] : (s('type.option.option'(bool),X148) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X148) | s(bool,X149) = s(bool,sK6(X148,bool)) | s(bool,'T_0') = s(bool,X149)) )),
  inference(superposition,[],[f186,f278])).
fof(f1429,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') != s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,X85) = s(bool,X87) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f194,f278])).
fof(f1427,plain,(
  ( ! [X80,X81,X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X80) | s(bool,X79) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f193,f278])).
fof(f1721,plain,(
  ( ! [X70,X68,X71,X69] : (s(X68,X70) = s(X68,sK7(X70,X69,X68)) | s(bool,X71) = s(bool,happ(s(fun(X68,bool),X69),s(X68,X70))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(subsumption_resolution,[],[f1424,f143])).
fof(f1424,plain,(
  ( ! [X70,X68,X71,X69] : (~p(s(bool,'T_0')) | s(X68,X70) = s(X68,sK7(X70,X69,X68)) | s(bool,X71) = s(bool,happ(s(fun(X68,bool),X69),s(X68,X70))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f196,f278])).
fof(f1717,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) = s(bool,X33) | s(bool,'F_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f1411,f143])).
fof(f1411,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X32) = s(bool,X33) | s(bool,'F_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1165,f278])).
fof(f1716,plain,(
  ( ! [X24,X23,X22] : (s(bool,X22) != s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1407,f143])).
fof(f1407,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s(bool,X22) != s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f281,f278])).
fof(f1715,plain,(
  ( ! [X21,X19,X20] : (p(s(bool,X20)) | s(bool,X19) != s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f1406,f143])).
fof(f1406,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | s(bool,X19) != s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f203,f278])).
fof(f1714,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f1405,f143])).
fof(f1405,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f201,f278])).
fof(f1396,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,X86) != s(bool,happ(s(fun(bool,bool),X87),s(bool,X86))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X88),s(fun(bool,bool),X87))) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) ) | $spl0),
  inference(superposition,[],[f897,f278])).
fof(f1395,plain,(
  ( ! [X85,X84] : (s(bool,X84) != s(bool,'const.bool.IN_2'(s(bool,X84),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f262,f278])).
fof(f1386,plain,(
  ( ! [X52,X50,X51] : (s(bool,X50) != s(bool,X51) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X50) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f194,f278])).
fof(f1317,plain,(
  ( ! [X165,X163,X164,X162] : (s(X164,f(s(bool,X165))) != s(X164,g(s(bool,X165))) | s(fun(bool,X164),X162) = s(fun(bool,X164),X163) | s(bool,'T_0') = s(bool,X165) | s(bool,'T_0') = s(bool,sK8(X162,X163,X164,bool))) )),
  inference(superposition,[],[f209,f278])).
fof(f1314,plain,(
  ( ! [X156,X155] : (s('type.option.option'(bool),X155) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X156))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X155) | s(bool,'T_0') = s(bool,X156) | s(bool,'T_0') = s(bool,sK6(X155,bool))) )),
  inference(superposition,[],[f186,f278])).
fof(f1308,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X129),s(bool,X128))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))),s(bool,X130),s(fun(bool,bool),X129))) | s(bool,'T_0') = s(bool,X128) | s(bool,'T_0') = s(bool,X127)) ) | $spl0),
  inference(superposition,[],[f897,f278])).
fof(f1298,plain,(
  ( ! [X92,X93,X91] : (s(bool,X92) != s(bool,X93) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93))) | s(bool,'T_0') = s(bool,X92) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f194,f278])).
fof(f1296,plain,(
  ( ! [X87,X85,X86] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X85) = s(bool,X87) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f193,f278])).
fof(f1249,plain,(
  ( ! [X33,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool)) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f278,f994])).
fof(f1246,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X21) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.NONE_0'),s(bool,X19),s(fun(X18,bool),X20))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f278,f208])).
fof(f1235,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f278,f278])).
fof(f1219,plain,(
  ( ! [X41,X40] : (s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X40)),bool))) )),
  inference(superposition,[],[f278,f994])).
fof(f1216,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X27),s(fun(X26,bool),X28)))) )),
  inference(superposition,[],[f278,f208])).
fof(f1080,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X67)),bool))) ) | $spl0),
  inference(superposition,[],[f857,f994])).
fof(f1007,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))) | s(X7,X9) = s(X7,sK6('const.option.SOME_1'(s(X7,X8)),X7))) )),
  inference(superposition,[],[f193,f540])).
fof(f994,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,sK6('const.option.SOME_1'(s(X0,X1)),X0))) )),
  inference(unit_resulting_resolution,[],[f540,f193])).
fof(f935,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X10))) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),X7),s(X5,X8),s(fun(X6,X5),X9))))) | s(X5,X10) = s(X5,happ(s(fun(fun(X6,X5),X5),happ(s(fun(X5,fun(fun(X6,X5),X5)),happ(s(fun('type.option.option'(X6),fun(X5,fun(fun(X6,X5),X5))),'const.option.option_CASE_0'),s('type.option.option'(X6),X7))),s(X5,X8))),s(fun(X6,X5),X9)))) )),
  inference(superposition,[],[f193,f211])).
fof(f884,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.NONE_0'),s(bool,X5),s(fun(X4,bool),X6)))) ) | $spl0),
  inference(superposition,[],[f857,f208])).
fof(f871,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f865,f145])).
fof(f865,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f313,f261])).
fof(f857,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(subsumption_resolution,[],[f848,f143])).
fof(f848,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f281,f778])).
fof(f800,plain,(
  ( ! [X4] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) ) | $spl0),
  inference(superposition,[],[f193,f778])).
fof(f778,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | $spl0),
  inference(unit_resulting_resolution,[],[f243,f149])).
fof(f659,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X10))) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,X10) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)))) )),
  inference(superposition,[],[f193,f210])).
fof(f644,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X5,happ(s(fun(X3,X5),X6),s(X3,sK6(X4,X3)))) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X3),X4),s(X5,X7),s(fun(X3,X5),X6))) | s('type.option.option'(X3),'const.option.NONE_0') = s('type.option.option'(X3),X4)) )),
  inference(superposition,[],[f210,f186])).
fof(f552,plain,(
  ( ! [X21,X22,X20] : (s('type.option.option'(X20),X21) != s('type.option.option'(X20),X22) | s('type.option.option'('type.option.option'(X20)),'const.option.SOME_1'(s('type.option.option'(X20),X22))) = s('type.option.option'('type.option.option'(X20)),'const.option.SOME_1'(s('type.option.option'(X20),'const.option.SOME_1'(s(X20,sK6(X21,X20)))))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),X21)) )),
  inference(superposition,[],[f194,f186])).
fof(f550,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),X15))) != s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),X16))) | s('type.option.option'(X14),X16) = s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK6(X15,X14)))) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X15)) )),
  inference(superposition,[],[f193,f186])).
fof(f544,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK6(X1,X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f193,f186])).
fof(f540,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6('const.option.SOME_1'(s(X0,X1)),X0))))) )),
  inference(unit_resulting_resolution,[],[f189,f186])).
fof(f443,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X12))) != s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X14))) | s(X10,X14) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)))) )),
  inference(superposition,[],[f193,f208])).
fof(f435,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(unit_resulting_resolution,[],[f189,f193])).
fof(f338,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(bool,X2),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f261,f146])).
fof(f313,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f309,f145])).
fof(f309,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f198,f146])).
fof(f281,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f152,f146])).
fof(f278,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f146,f146])).
fof(f262,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) )),
  inference(unit_resulting_resolution,[],[f190,f148])).
fof(f250,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f145,f148])).
fof(f211,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6,X7] : ! [X22,X23,X24] : s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X22),s(X7,X23),s(fun(X6,X7),X24))) = s(X7,happ(s(fun(fun(X6,X7),X7),happ(s(fun(X7,fun(fun(X6,X7),X7)),happ(s(fun('type.option.option'(X6),fun(X7,fun(fun(X6,X7),X7))),'const.option.option_CASE_0'),s('type.option.option'(X6),X22))),s(X7,X23))),s(fun(X6,X7),X24)))),
  file('thm.misc.IN_option_rwt','ARITY_0_3_const.option.option_CASE')).
fof(f210,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X7,X6] : ! [X8,X20,X21] : s(X7,happ(s(fun(X6,X7),X21),s(X6,X8))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))),s(X7,X20),s(fun(X6,X7),X21)))),
  file('thm.misc.IN_option_rwt','thm.option.option_case_def|split|1')).
fof(f209,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK8(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK8(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK8(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK8(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.misc.IN_option_rwt',aHL_EXT)).
fof(f208,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X7] : ! [X20,X21] : s(X7,X20) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X7,X20),s(fun(X6,X7),X21)))),
  file('thm.misc.IN_option_rwt','thm.option.option_case_def|split|0')).
fof(f203,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & (((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0)))) | s(bool,X0) = s(bool,X1)))),
  inference(nnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) => p(s(bool,X1))) & (p(s(bool,X1)) => p(s(bool,X0)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X12,X13] : (s(bool,X12) = s(bool,X13) <=> ((p(s(bool,X12)) => p(s(bool,X13))) & (p(s(bool,X13)) => p(s(bool,X12)))))),
  file('thm.misc.IN_option_rwt','thm.bool.EQ_IMP_THM')).
fof(f198,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.misc.IN_option_rwt','thm.bool.IMP_ANTISYM_AX')).
fof(f201,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f91])).
fof(f193,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8,X11] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) <=> s(X6,X8) = s(X6,X11))),
  file('thm.misc.IN_option_rwt','thm.option.SOME_|49||49|')).
fof(f194,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f129])).
fof(f190,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1] : ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X8] : ~p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),'const.pred_set.EMPTY_0'))))),
  file('thm.misc.IN_option_rwt','thm.pred_set.NOT_IN_EMPTY')).
fof(f189,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8)))),
  file('thm.misc.IN_option_rwt','thm.option.NOT_NONE_SOME')).
fof(f148,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.misc.IN_option_rwt','thm.bool.EQ_CLAUSES|split|0')).
fof(f149,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f146,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.misc.IN_option_rwt',aHL_BOOL_CASES)).
fof(f50841,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376,f50838,f50359,f50361])).
fof(f50840,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376,f50838,f50359])).
fof(f50839,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376,f50838])).
fof(f50831,plain,(
  $false | ($spl0 | $spl12 | $spl108 | $spl146 | $spl212)),
  inference(global_subsumption,[],[f50830,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50830,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl108 | $spl146 | $spl212)),
  inference(condensation,[],[f50829])).
fof(f50829,plain,(
  ( ! [X14,X13] : (s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X13) = s(bool,X14)) ) | ($spl0 | $spl12 | $spl108 | $spl146 | $spl212)),
  inference(subsumption_resolution,[],[f50272,f34370])).
fof(f34370,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f34226,f8334])).
fof(f34226,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl146),
  inference(subsumption_resolution,[],[f34056,f145])).
fof(f34056,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl146),
  inference(superposition,[],[f148,f31351])).
fof(f50272,plain,(
  ( ! [X14,X13] : (s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X13) = s(bool,g(s(bool,X13))) | s(bool,X13) = s(bool,X14)) ) | ($spl0 | $spl12 | $spl108 | $spl212)),
  inference(backward_demodulation,[],[f49420,f45035])).
fof(f45035,plain,(
  ( ! [X14,X13] : (s(bool,X13) = s(bool,g(s(bool,X13))) | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl108)),
  inference(superposition,[],[f44709,f12813])).
fof(f12813,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f12482,f146])).
fof(f12482,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X6) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3662,f11477])).
fof(f11477,plain,(
  ( ! [X61] : (s(bool,X61) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f11311,f994])).
fof(f11311,plain,(
  ( ! [X11] : (s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X11)) ) | ($spl0 | $spl12)),
  inference(global_subsumption,[],[f5359,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4169,f4126,f4123,f4076,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2759,f2723,f2681,f1761,f1192,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f5024,f5084,f5130,f5440,f5450,f5721,f5760,f5544,f5596,f5819,f5820,f5643,f5821,f5831,f5775,f5772,f5412,f5765,f3148,f2979,f2953,f3149,f2980,f2954,f10479,f10478,f554,f831,f531,f525,f2763,f1432,f1173,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f990,f966,f702,f679,f693,f973,f4124,f2682,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f657,f620,f619,f532,f519,f197,f196,f195,f4125,f2683,f1248,f1218,f1163,f976,f975,f949,f933,f1441,f1310,f876])).
fof(f5765,plain,(
  ( ! [X92,X90,X91] : (s(bool,'F_0') != s(bool,f(s(X90,sK8(X91,X92,bool,X90)))) | s(fun(X90,bool),X91) = s(fun(X90,bool),X92) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X90,sK8(X91,X92,bool,X90))))),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f5555,f994])).
fof(f5555,plain,(
  ( ! [X92,X90,X91] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X90,sK8(X91,X92,bool,X90)))) | s(fun(X90,bool),X91) = s(fun(X90,bool),X92) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X90,sK8(X91,X92,bool,X90))))),bool))) ) | $spl12),
  inference(superposition,[],[f209,f5024])).
fof(f5412,plain,(
  ( ! [X66,X65] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X66,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,X65)))) | s(bool,'T_0') = s(bool,X65)) ) | $spl12),
  inference(forward_demodulation,[],[f5392,f994])).
fof(f5392,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,X65)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X66,bool)) | s(bool,'T_0') = s(bool,X65)) ) | $spl12),
  inference(superposition,[],[f196,f4076])).
fof(f5772,plain,(
  ( ! [X104] : (s('type.option.option'(bool),X104) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X104) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X104,bool))),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f5559,f994])).
fof(f5559,plain,(
  ( ! [X104] : (s('type.option.option'(bool),X104) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X104) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X104,bool))),bool))) ) | $spl12),
  inference(superposition,[],[f186,f5024])).
fof(f5775,plain,(
  ( ! [X107,X108,X106] : (s(X108,f(s(bool,'F_0'))) != s(X108,g(s(bool,'F_0'))) | s(fun(bool,X108),X106) = s(fun(bool,X108),X107) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X106,X107,X108,bool))),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f5561,f994])).
fof(f5561,plain,(
  ( ! [X107,X108,X106] : (s(X108,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X108,g(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X108),X106) = s(fun(bool,X108),X107) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X106,X107,X108,bool))),bool))) ) | $spl12),
  inference(superposition,[],[f209,f5024])).
fof(f5831,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(superposition,[],[f5721,f278])).
fof(f5821,plain,(
  ( ! [X52,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') != s(bool,X53) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f5645,f994])).
fof(f5645,plain,(
  ( ! [X52,X53] : (s(bool,'T_0') != s(bool,X53) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool)))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(superposition,[],[f194,f5024])).
fof(f5643,plain,(
  ( ! [X48,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool)) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(superposition,[],[f193,f5024])).
fof(f5820,plain,(
  ( ! [X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f5641,f189])).
fof(f5641,plain,(
  ( ! [X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(superposition,[],[f186,f5024])).
fof(f5819,plain,(
  ( ! [X24,X25] : (s(bool,X25) != s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,'T_0') = s(bool,X25) | s(bool,X24) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f5626,f143])).
fof(f5626,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | s(bool,X25) != s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,'T_0') = s(bool,X25) | s(bool,X24) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(superposition,[],[f281,f5024])).
fof(f5596,plain,(
  ( ! [X54,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X54)),bool))) ) | $spl12),
  inference(superposition,[],[f193,f5024])).
fof(f5544,plain,(
  ( ! [X61,X62] : (s(bool,X62) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool))) ) | $spl12),
  inference(superposition,[],[f194,f5024])).
fof(f5760,plain,(
  ( ! [X57,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f5542,f994])).
fof(f5542,plain,(
  ( ! [X57,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) ) | $spl12),
  inference(superposition,[],[f193,f5024])).
fof(f5721,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f5720,f145])).
fof(f5720,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f5505,f994])).
fof(f5505,plain,(
  ( ! [X1] : (p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl12),
  inference(superposition,[],[f148,f5024])).
fof(f5450,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl12),
  inference(superposition,[],[f5024,f5024])).
fof(f5440,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl12),
  inference(superposition,[],[f5024,f146])).
fof(f5130,plain,(
  ( ! [X47,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,X47) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X46)) ) | $spl12),
  inference(superposition,[],[f193,f4076])).
fof(f5084,plain,(
  ( ! [X52,X53] : (s(bool,X53) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X52)) ) | $spl12),
  inference(superposition,[],[f194,f4076])).
fof(f5024,plain,(
  ( ! [X38] : (s(bool,X38) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool))) ) | $spl12),
  inference(superposition,[],[f4076,f994])).
fof(f44709,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | ($spl0 | $spl12 | $spl108)),
  inference(forward_demodulation,[],[f44708,f994])).
fof(f44708,plain,(
  s(bool,g(s(bool,'F_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl12 | $spl108)),
  inference(forward_demodulation,[],[f44432,f994])).
fof(f44432,plain,(
  s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | ($spl0 | $spl12 | $spl108)),
  inference(unit_resulting_resolution,[],[f250,f31046,f17276])).
fof(f17276,plain,(
  ( ! [X57,X58] : (s(bool,X57) != s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(global_subsumption,[],[f17275,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4169,f4126,f4123,f4076,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2759,f2723,f2681,f1761,f1192,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f5024,f5084,f5130,f5440,f5450,f5721,f5760,f5544,f5596,f5819,f5820,f5643,f5821,f5831,f5775,f5772,f5412,f5765,f10479,f10478,f554,f831,f531,f525,f2763,f1432,f1173,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f990,f966,f702,f679,f693,f973,f4124,f2682,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f657,f620,f619,f532,f519,f197,f196,f195,f4125,f2683,f1248,f1218,f1163,f976,f975,f949,f933,f1441,f1310,f876,f3148,f2979,f2953,f3149,f2980,f2954,f13706,f15470,f15471,f15472,f15473,f15568])).
fof(f17275,plain,(
  ( ! [X57,X58,X56] : (s(bool,X57) != s(bool,X58) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f16185,f194])).
fof(f16185,plain,(
  ( ! [X57,X58,X56] : (s(bool,X57) != s(bool,X58) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X56) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f479,f12813])).
fof(f50828,plain,(
  $false | ($spl0 | $spl12 | $spl108 | $spl212)),
  inference(global_subsumption,[],[f50271,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50271,plain,(
  ( ! [X12,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) | s(bool,X11) = s(bool,g(s(bool,X11))) | s(bool,X11) = s(bool,X12)) ) | ($spl0 | $spl12 | $spl108 | $spl212)),
  inference(backward_demodulation,[],[f49420,f45034])).
fof(f45034,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,g(s(bool,X11))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) | s(bool,X11) = s(bool,X12)) ) | ($spl0 | $spl12 | $spl108)),
  inference(superposition,[],[f44709,f3984])).
fof(f50826,plain,(
  $false | ($spl0 | $spl146 | $spl212)),
  inference(global_subsumption,[],[f50825,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50825,plain,(
  ( ! [X112] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112)))) ) | ($spl0 | $spl146 | $spl212)),
  inference(subsumption_resolution,[],[f50824,f143])).
fof(f50824,plain,(
  ( ! [X112] : (~p(s(bool,'T_0')) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112)))) ) | ($spl0 | $spl146 | $spl212)),
  inference(forward_demodulation,[],[f50263,f49420])).
fof(f50263,plain,(
  ( ! [X112] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))) | ~p(s(bool,g(s(bool,X112))))) ) | ($spl0 | $spl146 | $spl212)),
  inference(backward_demodulation,[],[f49420,f44149])).
fof(f44149,plain,(
  ( ! [X112] : (~p(s(bool,g(s(bool,X112)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112)))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f44148,f250])).
fof(f44148,plain,(
  ( ! [X112] : (s(bool,'T_0') = s(bool,'F_0') | ~p(s(bool,g(s(bool,X112)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112)))) ) | ($spl0 | $spl146)),
  inference(forward_demodulation,[],[f44044,f994])).
fof(f44044,plain,(
  ( ! [X112] : (~p(s(bool,g(s(bool,X112)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112)))) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f41523,f8126])).
fof(f41523,plain,(
  ( ! [X9] : (~p(s(bool,g(s(bool,X9)))) | s(bool,'F_0') = s(bool,X9)) ) | ($spl0 | $spl146)),
  inference(trivial_inequality_removal,[],[f41361])).
fof(f41361,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,g(s(bool,X9)))) | s(bool,'F_0') = s(bool,X9)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f152,f34215])).
fof(f34215,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,g(s(bool,X16))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34030,f262])).
fof(f34030,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') = s(bool,g(s(bool,X16))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f31351,f3053])).
fof(f50820,plain,(
  $false | ($spl0 | $spl202 | $spl212)),
  inference(global_subsumption,[],[f50255,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50255,plain,(
  ( ! [X287,X286] : (s(bool,X287) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X287) != s(bool,g(s(bool,X286)))) ) | ($spl0 | $spl202 | $spl212)),
  inference(backward_demodulation,[],[f49420,f43268])).
fof(f50805,plain,(
  $false | ($spl0 | $spl12 | $spl137 | $spl212)),
  inference(global_subsumption,[],[f50194,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50194,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X28) = s(bool,f(s(bool,X28)))) ) | ($spl0 | $spl12 | $spl137 | $spl212)),
  inference(backward_demodulation,[],[f49420,f34919])).
fof(f34919,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl137)),
  inference(subsumption_resolution,[],[f34748,f250])).
fof(f34748,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl137)),
  inference(superposition,[],[f33961,f12813])).
fof(f33961,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(condensation,[],[f33960])).
fof(f33960,plain,(
  ( ! [X26] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33959,f994])).
fof(f33959,plain,(
  ( ! [X26] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl137)),
  inference(subsumption_resolution,[],[f33130,f146])).
fof(f33130,plain,(
  ( ! [X26] : (s(bool,'F_0') != s(bool,X26) | s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f8334])).
fof(f50803,plain,(
  $false | ($spl0 | $spl12 | $spl108 | $spl146 | $spl212)),
  inference(global_subsumption,[],[f50802,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50802,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl108 | $spl146 | $spl212)),
  inference(subsumption_resolution,[],[f50190,f45256])).
fof(f45256,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl108)),
  inference(subsumption_resolution,[],[f45056,f250])).
fof(f45056,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl12 | $spl108)),
  inference(superposition,[],[f44709,f8334])).
fof(f50190,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X28) != s(bool,g(s(bool,X28)))) ) | ($spl0 | $spl12 | $spl146 | $spl212)),
  inference(backward_demodulation,[],[f49420,f34491])).
fof(f34491,plain,(
  ( ! [X28] : (s(bool,X28) != s(bool,g(s(bool,X28))) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl146)),
  inference(subsumption_resolution,[],[f34389,f250])).
fof(f34389,plain,(
  ( ! [X28] : (s(bool,X28) != s(bool,g(s(bool,X28))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl146)),
  inference(superposition,[],[f34226,f12813])).
fof(f50796,plain,(
  $false | ($spl0 | $spl137 | $spl206 | $spl212)),
  inference(global_subsumption,[],[f50795,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50795,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl137 | $spl206 | $spl212)),
  inference(subsumption_resolution,[],[f50178,f47071])).
fof(f50178,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') != s(bool,f(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl137 | $spl212)),
  inference(backward_demodulation,[],[f49420,f33239])).
fof(f33239,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,f(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl137)),
  inference(subsumption_resolution,[],[f33103,f250])).
fof(f33103,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,f(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f3053])).
fof(f50794,plain,(
  $false | ($spl0 | $spl137 | $spl212)),
  inference(global_subsumption,[],[f50793,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50793,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl137 | $spl212)),
  inference(subsumption_resolution,[],[f50177,f49420])).
fof(f50177,plain,(
  ( ! [X16] : (s(bool,'T_0') != s(bool,f(s(bool,X16))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl137 | $spl212)),
  inference(backward_demodulation,[],[f49420,f33238])).
fof(f33238,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl137)),
  inference(subsumption_resolution,[],[f33102,f262])).
fof(f33102,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f3053])).
fof(f50792,plain,(
  $false | ($spl0 | $spl137 | $spl212)),
  inference(global_subsumption,[],[f50791,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50791,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl137 | $spl212)),
  inference(condensation,[],[f50790])).
fof(f50790,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl137 | $spl212)),
  inference(subsumption_resolution,[],[f50173,f49420])).
fof(f50173,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl137 | $spl212)),
  inference(backward_demodulation,[],[f49420,f33091])).
fof(f33091,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f8334])).
fof(f50788,plain,(
  $false | ($spl0 | $spl97 | $spl212)),
  inference(subsumption_resolution,[],[f50146,f49420])).
fof(f50146,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl97 | $spl212)),
  inference(backward_demodulation,[],[f49420,f31038])).
fof(f50787,plain,(
  $false | ($spl0 | $spl93 | $spl212)),
  inference(subsumption_resolution,[],[f50145,f49420])).
fof(f50145,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl93 | $spl212)),
  inference(backward_demodulation,[],[f49420,f31035])).
fof(f50786,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139,f50376])).
fof(f50785,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138,f50139])).
fof(f50784,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770,f50138])).
fof(f50782,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50781,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770])).
fof(f50781,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(condensation,[],[f50780])).
fof(f50780,plain,(
  ( ! [X397,X396] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X397)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f50136,f21475])).
fof(f50136,plain,(
  ( ! [X397,X396] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))) | s(bool,X397) != s(bool,sK6('const.option.SOME_1'(s(bool,X396)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X397)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30723])).
fof(f30723,plain,(
  ( ! [X397,X396] : (s(bool,X397) != s(bool,sK6('const.option.SOME_1'(s(bool,X396)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X397))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396)))) ) | ($spl0 | $spl12 | $spl30)),
  inference(subsumption_resolution,[],[f29742,f250])).
fof(f29742,plain,(
  ( ! [X397,X396] : (s(bool,X397) != s(bool,sK6('const.option.SOME_1'(s(bool,X396)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X397))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f22580,f3984])).
fof(f22580,plain,(
  ( ! [X148] : (s(bool,X148) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148)))) ) | ($spl0 | $spl12 | $spl30)),
  inference(subsumption_resolution,[],[f22268,f3993])).
fof(f22268,plain,(
  ( ! [X148] : (s(bool,X148) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148)))) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f9250,f12835])).
fof(f12835,plain,(
  ( ! [X103] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X103) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f12543,f189])).
fof(f12543,plain,(
  ( ! [X103] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X103) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f186,f11477])).
fof(f50778,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50777,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770])).
fof(f50777,plain,(
  ( ! [X387,X386] : (s(bool,X387) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(forward_demodulation,[],[f50134,f49420])).
fof(f50134,plain,(
  ( ! [X387,X386] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387))) | s(bool,X387) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f30721])).
fof(f30721,plain,(
  ( ! [X387,X386] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387))) | s(bool,X387) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386)))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f29739,f250])).
fof(f29739,plain,(
  ( ! [X387,X386] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387))) | s(bool,X387) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12835,f3984])).
fof(f50771,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767,f50770])).
fof(f50768,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763,f50767])).
fof(f50764,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761,f50763])).
fof(f50762,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759,f50761])).
fof(f50760,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757,f50759])).
fof(f50758,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754,f50757])).
fof(f50755,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752,f50754])).
fof(f50753,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749,f50752])).
fof(f50750,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742,f50749])).
fof(f50743,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740,f50742])).
fof(f50741,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738,f50740])).
fof(f50739,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736,f50738])).
fof(f50737,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098,f50736])).
fof(f50735,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50734,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098])).
fof(f50734,plain,(
  ( ! [X92,X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X90) != s(bool,X91) | s(bool,X90) = s(bool,X92)) ) | ($spl0 | $spl12 | $spl212)),
  inference(forward_demodulation,[],[f50106,f49420])).
fof(f50106,plain,(
  ( ! [X92,X90,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X90) != s(bool,X91) | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X90) = s(bool,X92)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29881])).
fof(f29881,plain,(
  ( ! [X92,X90,X91] : (s(bool,X90) != s(bool,X91) | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X90) = s(bool,X92)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f17278,f3984])).
fof(f17278,plain,(
  ( ! [X60] : (s(bool,'F_0') != s(bool,X60) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(global_subsumption,[],[f17277,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f3395,f8223,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f8218,f3392,f554,f831,f908,f3088,f2794,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f990,f966,f3061,f2767,f702,f679,f3060,f2766,f693,f3105,f2858,f973,f3106,f2859,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3104,f3086,f3062,f3059,f2869,f2867,f2857,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f8921,f8640,f4125,f4074,f3270,f3237,f3100,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f8593,f5359,f3148,f2979,f2953,f2845,f3149,f2980,f2954,f8803,f8802,f11911,f12885,f12886,f12887,f13008,f13009,f13010,f13139,f13140,f13142,f13195,f13278,f13279,f13280,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13438,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13473,f13476,f13533,f13479,f13485,f13486,f13487,f13488,f13638,f13639,f13706,f13705,f13703,f13694,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15098,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15415,f15416,f15417,f15470,f15471,f15472,f15473,f15568,f15569,f15572,f15574,f15577,f15579])).
fof(f17277,plain,(
  ( ! [X61,X59,X60] : (s(bool,'F_0') != s(bool,X60) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f16186,f480])).
fof(f16186,plain,(
  ( ! [X61,X59,X60] : (s(bool,'F_0') != s(bool,X60) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X59) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f480,f12813])).
fof(f50733,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50103,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098])).
fof(f50103,plain,(
  ( ! [X80,X81,X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X80) = s(bool,sK6('const.option.SOME_1'(s(bool,X79)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29878])).
fof(f29878,plain,(
  ( ! [X80,X81,X79] : (s(bool,X80) = s(bool,sK6('const.option.SOME_1'(s(bool,X79)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12835,f3984])).
fof(f50731,plain,(
  $false | ($spl0 | $spl36 | $spl212)),
  inference(global_subsumption,[],[f50730,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098])).
fof(f50730,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X69) != s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s(bool,X68) = s(bool,X70)) ) | ($spl0 | $spl36 | $spl212)),
  inference(forward_demodulation,[],[f50101,f49420])).
fof(f50101,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X69) != s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X68) = s(bool,X70)) ) | ($spl0 | $spl36 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29875])).
fof(f29875,plain,(
  ( ! [X70,X68,X69] : (s(bool,X69) != s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X68) = s(bool,X70)) ) | ($spl0 | $spl36)),
  inference(superposition,[],[f11745,f3984])).
fof(f50729,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724,f50098])).
fof(f50725,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089,f50724])).
fof(f50723,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681,f50089])).
fof(f50684,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50683,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681])).
fof(f50683,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,X25) = s(bool,X28)) ) | ($spl0 | $spl12 | $spl212)),
  inference(forward_demodulation,[],[f50049,f49420])).
fof(f50049,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,X25) = s(bool,X28) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f29205])).
fof(f29205,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X25) = s(bool,X26) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) | s(bool,X26) = s(bool,X27) | s(bool,X25) = s(bool,X28) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3984,f12813])).
fof(f50682,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047,f50681])).
fof(f50680,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669,f50047])).
fof(f50672,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50671,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669])).
fof(f50671,plain,(
  ( ! [X557,X559,X560,X558] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X558))) | s(bool,X557) = s(bool,'const.bool.IN_2'(s(X559,X560),s(fun(X559,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f50032,f26810])).
fof(f26810,plain,(
  ( ! [X606,X605,X603,X604] : (s(bool,X604) != s(bool,sK6('const.option.SOME_1'(s(bool,X603)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X604))) | s(bool,X603) = s(bool,'const.bool.IN_2'(s(X605,X606),s(fun(X605,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12 | $spl30)),
  inference(subsumption_resolution,[],[f25379,f250])).
fof(f25379,plain,(
  ( ! [X606,X605,X603,X604] : (s(bool,X604) != s(bool,sK6('const.option.SOME_1'(s(bool,X603)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X604))) | s(bool,X603) = s(bool,'const.bool.IN_2'(s(X605,X606),s(fun(X605,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f22580,f3053])).
fof(f50032,plain,(
  ( ! [X557,X559,X560,X558] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X558))) | s(bool,X558) = s(bool,sK6('const.option.SOME_1'(s(bool,X557)),bool)) | s(bool,X557) = s(bool,'const.bool.IN_2'(s(X559,X560),s(fun(X559,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f26797])).
fof(f50670,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024,f50669])).
fof(f50668,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016,f50024])).
fof(f50667,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50666,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016])).
fof(f50666,plain,(
  ( ! [X241,X239,X240,X238] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X238))) | s(bool,X239) = s(bool,'const.bool.IN_2'(s(X240,X241),s(fun(X240,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f50020,f26834])).
fof(f26834,plain,(
  ( ! [X918,X916,X915,X917] : (s(bool,X915) != s(bool,X916) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X916))) | s(bool,X915) = s(bool,'const.bool.IN_2'(s(X917,X918),s(fun(X917,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12 | $spl30)),
  inference(subsumption_resolution,[],[f26833,f250])).
fof(f26833,plain,(
  ( ! [X918,X916,X915,X917] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X915) != s(bool,X916) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X916))) | s(bool,X915) = s(bool,'const.bool.IN_2'(s(X917,X918),s(fun(X917,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12 | $spl30)),
  inference(forward_demodulation,[],[f25448,f994])).
fof(f25448,plain,(
  ( ! [X918,X916,X915,X917] : (s(bool,X915) != s(bool,X916) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X916))) | s(bool,X915) = s(bool,'const.bool.IN_2'(s(X917,X918),s(fun(X917,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f22580,f3053])).
fof(f50020,plain,(
  ( ! [X241,X239,X240,X238] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X238))) | s(bool,X238) = s(bool,X239) | s(bool,X239) = s(bool,'const.bool.IN_2'(s(X240,X241),s(fun(X240,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f26240])).
fof(f50665,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663,f50016])).
fof(f50664,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661,f50663])).
fof(f50662,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012,f50661])).
fof(f50660,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011,f50012])).
fof(f50659,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010,f50011])).
fof(f50658,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656,f50010])).
fof(f50657,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654,f50656])).
fof(f50655,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650,f50654])).
fof(f50651,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648,f50650])).
fof(f50649,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001,f50648])).
fof(f50647,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645,f50001])).
fof(f50646,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999,f50645])).
fof(f50643,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951,f49999])).
fof(f50642,plain,(
  $false | ($spl0 | $spl12 | $spl36 | $spl212)),
  inference(global_subsumption,[],[f50641,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951])).
fof(f50641,plain,(
  ( ! [X4,X2,X5,X3] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | ($spl0 | $spl12 | $spl36 | $spl212)),
  inference(condensation,[],[f50640])).
fof(f50640,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X103,X104),s(fun(X103,bool),'const.pred_set.EMPTY_0'))) | s(bool,X100) = s(bool,X102)) ) | ($spl0 | $spl12 | $spl36 | $spl212)),
  inference(subsumption_resolution,[],[f49997,f25502])).
fof(f25502,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,X118) = s(bool,sK6('const.option.SOME_1'(s(bool,X117)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X118))) | s(bool,X119) = s(bool,'const.bool.IN_2'(s(X120,X121),s(fun(X120,bool),'const.pred_set.EMPTY_0'))) | s(bool,X117) = s(bool,X119)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12835,f3053])).
fof(f49997,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,X101) != s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X103,X104),s(fun(X103,bool),'const.pred_set.EMPTY_0'))) | s(bool,X100) = s(bool,X102)) ) | ($spl0 | $spl36 | $spl212)),
  inference(backward_demodulation,[],[f49420,f25499])).
fof(f25499,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s(bool,X101) != s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X103,X104),s(fun(X103,bool),'const.pred_set.EMPTY_0'))) | s(bool,X100) = s(bool,X102)) ) | ($spl0 | $spl36)),
  inference(superposition,[],[f11745,f3053])).
fof(f50639,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49953,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951])).
fof(f49953,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))) | s(bool,X147) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X148),s(fun(X149,bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24378])).
fof(f24378,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))) | s(bool,X147) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X148),s(fun(X149,bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f24272,f994])).
fof(f24272,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X147) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X148),s(fun(X149,bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f443,f12835])).
fof(f50638,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941,f49951])).
fof(f50637,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49944,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941])).
fof(f49944,plain,(
  ( ! [X251,X249,X250,X248] : (s(bool,X249) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X250,bool),X251))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X249))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24351])).
fof(f24351,plain,(
  ( ! [X251,X249,X250,X248] : (s(bool,X249) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X250,bool),X251))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X249))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f24224,f994])).
fof(f24224,plain,(
  ( ! [X251,X249,X250,X248] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X249))) | s(bool,X249) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X250,bool),X251))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f443,f12835])).
fof(f50636,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938,f49941])).
fof(f50634,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49939,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938])).
fof(f49939,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))) | s(bool,X148) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X147),s(fun(X149,bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24334])).
fof(f24334,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))) | s(bool,X148) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X147),s(fun(X149,bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f24202,f994])).
fof(f24202,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X148) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X147),s(fun(X149,bool),X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f443,f12835])).
fof(f50633,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587,f49938])).
fof(f50622,plain,(
  $false | ($spl0 | $spl62 | $spl212)),
  inference(global_subsumption,[],[f50621,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50621,plain,(
  ( ! [X68,X67] : (s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68)))) ) | ($spl0 | $spl62 | $spl212)),
  inference(subsumption_resolution,[],[f49912,f21104])).
fof(f49912,plain,(
  ( ! [X68,X67] : (s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X67) != s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68)))) ) | ($spl0 | $spl62 | $spl212)),
  inference(backward_demodulation,[],[f49420,f24033])).
fof(f50620,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50619,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50619,plain,(
  ( ! [X33,X34] : (s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f49906,f21476])).
fof(f49906,plain,(
  ( ! [X33,X34] : (s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22937])).
fof(f22937,plain,(
  ( ! [X33,X34] : (s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl30)),
  inference(subsumption_resolution,[],[f22842,f250])).
fof(f22842,plain,(
  ( ! [X33,X34] : (s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f22580,f12813])).
fof(f50618,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49900,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f49900,plain,(
  ( ! [X142,X140,X143,X141] : (s(bool,X141) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X142,bool),X143))) | s(bool,X140) != s(bool,X141) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22578])).
fof(f22578,plain,(
  ( ! [X142,X140,X143,X141] : (s(bool,X141) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X142,bool),X143))) | s(bool,X140) != s(bool,X141) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22266,f994])).
fof(f22266,plain,(
  ( ! [X142,X140,X143,X141] : (s(bool,X140) != s(bool,X141) | s(bool,X141) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X142,bool),X143))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f8919,f12835])).
fof(f50617,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50616,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50616,plain,(
  ( ! [X101,X100] : (s(bool,X101) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49898,f21141])).
fof(f49898,plain,(
  ( ! [X101,X100] : (s(bool,X101) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X101) != s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22561])).
fof(f22561,plain,(
  ( ! [X101,X100] : (s(bool,X101) != s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s(bool,X101) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100)))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f22240,f17278])).
fof(f22240,plain,(
  ( ! [X101,X100] : (s(bool,X101) != s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s(bool,X101) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X101) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3662,f12835])).
fof(f50614,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50613,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50613,plain,(
  ( ! [X244,X245] : (s(bool,X244) = s(bool,sK7(X244,X245,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49894,f49420])).
fof(f49894,plain,(
  ( ! [X244,X245] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X245),s(bool,'T_0'))) | s(bool,X244) = s(bool,sK7(X244,X245,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22524])).
fof(f22524,plain,(
  ( ! [X244,X245] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X245),s(bool,'F_0'))) | s(bool,X244) = s(bool,sK7(X244,X245,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22177,f994])).
fof(f22177,plain,(
  ( ! [X244,X245] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X245),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X244) = s(bool,sK7(X244,X245,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f2868,f12835])).
fof(f50612,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49892,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f49892,plain,(
  ( ! [X239,X240] : (s('type.option.option'(bool),X240) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X239) = s(bool,sK6(X240,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X240) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22522])).
fof(f22522,plain,(
  ( ! [X239,X240] : (s('type.option.option'(bool),X240) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X239) = s(bool,sK6(X240,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X240) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22174,f994])).
fof(f22174,plain,(
  ( ! [X239,X240] : (s('type.option.option'(bool),X240) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X239) = s(bool,sK6(X240,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X240) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f544,f12835])).
fof(f50611,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50610,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50610,plain,(
  ( ! [X208,X209] : (s(bool,X208) = s(bool,X209) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49891,f21944])).
fof(f21944,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12835,f12835])).
fof(f49891,plain,(
  ( ! [X208,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) | s(bool,X208) = s(bool,X209) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22518])).
fof(f22518,plain,(
  ( ! [X208,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) | s(bool,X208) = s(bool,X209) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22161,f994])).
fof(f22161,plain,(
  ( ! [X208,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X208) = s(bool,X209) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f193,f12835])).
fof(f50609,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50608,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50608,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X116),s(fun(X117,bool),X118))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49890,f49420])).
fof(f49890,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,'T_0') != s(bool,X116) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X116),s(fun(X117,bool),X118))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22490])).
fof(f22490,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,'F_0') != s(bool,X116) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X116),s(fun(X117,bool),X118))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22108,f994])).
fof(f22108,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,X116) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X116),s(fun(X117,bool),X118))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f8919,f12835])).
fof(f50603,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49873,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f49873,plain,(
  ( ! [X194,X193] : (s(bool,X194) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22294])).
fof(f22294,plain,(
  ( ! [X194,X193] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194))) | s(bool,X194) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f193,f12835])).
fof(f50602,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f49872,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f49872,plain,(
  ( ! [X212,X213] : (s(bool,X213) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X213))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22163])).
fof(f22163,plain,(
  ( ! [X212,X213] : (s(bool,X213) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X213))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212)))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f194,f12835])).
fof(f50601,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50600,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50600,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(condensation,[],[f50599])).
fof(f50599,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X18) = s(bool,X19)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49871,f21104])).
fof(f49871,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,X18) = s(bool,X19)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22019])).
fof(f22019,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f193,f12835])).
fof(f50598,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50597,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50597,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X11) = s(bool,sK6(X12,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49870,f14654])).
fof(f49870,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),X12) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X11) = s(bool,sK6(X12,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f22016])).
fof(f22016,plain,(
  ( ! [X12,X11] : (s('type.option.option'(bool),X12) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X11) = s(bool,sK6(X12,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f544,f12835])).
fof(f50596,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50595,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50595,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(condensation,[],[f50594])).
fof(f50594,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f49868,f22827])).
fof(f22827,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f22580,f8334])).
fof(f49868,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f21921])).
fof(f21921,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X0) = s(bool,X2) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12835,f12813])).
fof(f50591,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50590,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50590,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(condensation,[],[f50589])).
fof(f50589,plain,(
  ( ! [X61,X62,X60] : (s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,X60) = s(bool,X62)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49864,f14503])).
fof(f49864,plain,(
  ( ! [X61,X62,X60] : (s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X60) = s(bool,X61) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,X60) = s(bool,X62)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f21460])).
fof(f21460,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) = s(bool,X61) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,X60) = s(bool,X62) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f21408,f145])).
fof(f21408,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,'F_0')) | s(bool,X60) = s(bool,X61) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,X60) = s(bool,X62) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f21149,f12813])).
fof(f50588,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584,f50587])).
fof(f50585,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581,f50584])).
fof(f50582,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578,f50581])).
fof(f50579,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573,f50578])).
fof(f50574,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571,f50573])).
fof(f50572,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569,f50571])).
fof(f50570,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567,f50569])).
fof(f50568,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564,f50567])).
fof(f50565,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377,f50564])).
fof(f50562,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50561,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377])).
fof(f50561,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(condensation,[],[f50560])).
fof(f50560,plain,(
  ( ! [X180,X181] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49839,f21944])).
fof(f49839,plain,(
  ( ! [X180,X181] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181))) | s(bool,X180) != s(bool,X181)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19552])).
fof(f50559,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837,f50377])).
fof(f50558,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554,f49837])).
fof(f50555,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551,f50554])).
fof(f50552,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827,f50551])).
fof(f50549,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545,f49827])).
fof(f50548,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50547,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545])).
fof(f50547,plain,(
  ( ! [X206,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s(bool,X205) = s(bool,X206)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49826,f21944])).
fof(f49826,plain,(
  ( ! [X206,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) | s(bool,X205) = s(bool,X206)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19494])).
fof(f50546,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543,f50545])).
fof(f50544,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538,f50543])).
fof(f50542,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50541,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538])).
fof(f50541,plain,(
  ( ! [X72,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,X71) = s(bool,X72)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49823,f21459])).
fof(f21459,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f21458,f145])).
fof(f21458,plain,(
  ( ! [X56,X55] : (p(s(bool,'F_0')) | s(bool,X55) = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f21406,f994])).
fof(f21406,plain,(
  ( ! [X56,X55] : (p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,X55) = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f21149,f11477])).
fof(f49823,plain,(
  ( ! [X72,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool)) | s(bool,X71) = s(bool,X72)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f19427])).
fof(f50539,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536,f50538])).
fof(f50537,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805,f50536])).
fof(f50533,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804,f49805])).
fof(f50532,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530,f49804])).
fof(f50531,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527,f50530])).
fof(f50528,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378,f50527])).
fof(f50523,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50522,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378])).
fof(f50522,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(condensation,[],[f50521])).
fof(f50521,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f49797,f22827])).
fof(f49797,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f18919])).
fof(f50508,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50507,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378])).
fof(f50507,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(condensation,[],[f50506])).
fof(f50506,plain,(
  ( ! [X142,X141] : (s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49764,f13946])).
fof(f49764,plain,(
  ( ! [X142,X141] : (s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') != s(bool,X141) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f18344])).
fof(f18344,plain,(
  ( ! [X142,X141] : (s(bool,'T_0') != s(bool,X141) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool)) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f16327,f994])).
fof(f16327,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f250,f12813])).
fof(f50500,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496,f50378])).
fof(f50497,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748,f50496])).
fof(f50494,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490,f49748])).
fof(f50491,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427,f50490])).
fof(f50462,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50461,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50461,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(condensation,[],[f50460])).
fof(f50460,plain,(
  ( ! [X37,X36] : (s(bool,X37) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X36) = s(bool,X37)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49696,f49420])).
fof(f49696,plain,(
  ( ! [X37,X36] : (s(bool,X37) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,X36) = s(bool,X37)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f16335])).
fof(f16335,plain,(
  ( ! [X37,X36] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,X36) = s(bool,X37) | s(bool,X37) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3993,f12813])).
fof(f50458,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50457,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50457,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(condensation,[],[f50456])).
fof(f50456,plain,(
  ( ! [X8,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49691,f49420])).
fof(f49691,plain,(
  ( ! [X8,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f16327])).
fof(f50445,plain,(
  $false | ($spl0 | $spl40 | $spl212)),
  inference(global_subsumption,[],[f50444,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50444,plain,(
  ( ! [X54,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl40 | $spl212)),
  inference(subsumption_resolution,[],[f49672,f21104])).
fof(f49672,plain,(
  ( ! [X54,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X54) != s(bool,X55) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl40 | $spl212)),
  inference(backward_demodulation,[],[f49420,f15192])).
fof(f50439,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50438,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50438,plain,(
  ( ! [X109,X110] : (s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49629,f13721])).
fof(f49629,plain,(
  ( ! [X109,X110] : (s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,'T_0') != s(bool,X110)) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f12836])).
fof(f12836,plain,(
  ( ! [X109,X110] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,'T_0') != s(bool,X110) | s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f12547,f994])).
fof(f12547,plain,(
  ( ! [X109,X110] : (s(bool,'T_0') != s(bool,X110) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X109)),bool)))) | s(bool,X109) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f194,f11477])).
fof(f50437,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50436,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50436,plain,(
  ( ! [X103] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f49628,f22580])).
fof(f49628,plain,(
  ( ! [X103] : (s(bool,X103) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103)))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f12835])).
fof(f50432,plain,(
  $false | ($spl0 | $spl12 | $spl212)),
  inference(global_subsumption,[],[f50431,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50431,plain,(
  ( ! [X105,X106] : (s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,X105)),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f49615,f21476])).
fof(f49615,plain,(
  ( ! [X105,X106] : (s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,X105)),bool))) ) | ($spl0 | $spl12 | $spl212)),
  inference(backward_demodulation,[],[f49420,f12545])).
fof(f12545,plain,(
  ( ! [X105,X106] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) | s(bool,X106) = s(bool,sK6('const.option.SOME_1'(s(bool,X105)),bool)) | s(bool,X105) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f193,f11477])).
fof(f50428,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423,f50427])).
fof(f50426,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(global_subsumption,[],[f50425,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423])).
fof(f50425,plain,(
  ( ! [X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69)))) ) | ($spl0 | $spl12 | $spl30 | $spl212)),
  inference(subsumption_resolution,[],[f49586,f22580])).
fof(f49586,plain,(
  ( ! [X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f8126])).
fof(f50424,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420,f50423])).
fof(f50421,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402,f50420])).
fof(f50418,plain,(
  $false | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49555,f49420])).
fof(f49555,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f3993])).
fof(f50403,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391,f50402])).
fof(f50392,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387,f50391])).
fof(f50388,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385,f50387])).
fof(f50386,plain,(
  $false | ($spl0 | $spl212)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f47266,f47831,f47268,f47269,f47270,f47271,f47274,f47275,f47278,f47279,f47280,f47282,f47284,f47285,f47286,f47287,f47836,f47837,f47306,f47855,f47863,f47876,f47877,f47318,f47878,f47320,f47879,f47432,f47439,f47884,f47885,f47459,f47462,f47464,f47466,f47467,f47475,f47476,f47477,f47478,f47479,f47480,f47482,f47483,f47487,f47488,f47489,f47490,f47491,f47493,f47495,f47496,f47497,f47498,f47499,f47501,f47502,f47507,f47508,f47509,f47510,f47511,f47512,f47513,f47514,f47515,f47516,f47517,f47901,f47523,f47524,f47525,f47530,f47531,f47532,f47533,f47534,f47535,f47540,f47541,f47542,f47904,f47545,f47550,f47551,f47552,f47554,f47555,f47556,f47557,f47558,f47565,f47571,f47572,f47573,f47588,f47929,f47930,f47591,f47596,f47597,f47598,f47600,f47601,f47602,f47604,f47620,f47621,f47622,f47623,f47624,f47626,f47627,f47628,f47629,f47630,f47635,f47641,f47643,f47645,f47646,f47654,f47655,f47656,f47657,f47658,f47659,f47661,f47662,f47668,f47669,f47670,f47671,f47672,f47674,f47675,f47680,f47681,f47682,f47683,f47684,f47685,f47686,f47687,f47688,f47689,f47690,f47947,f47696,f47697,f47698,f47703,f47704,f47705,f47706,f47707,f47708,f47713,f47714,f47715,f47950,f47718,f47723,f47724,f47725,f47727,f47728,f47729,f47730,f47731,f47738,f47744,f47745,f47746,f47761,f47975,f47976,f47764,f47769,f47770,f47771,f47773,f47774,f47775,f47777,f47793,f47794,f47795,f47796,f47797,f47798,f47799,f47801,f47802,f47803,f47804,f47805,f47810,f47993,f48034,f48803,f48820,f48833,f48844,f48854,f48861,f48874,f48889,f48927,f48984,f48994,f48997,f48998,f49004,f49420,f50385])).
fof(f50384,plain,(
  $false | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f49421,f143])).
fof(f49421,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f145])).
fof(f50383,plain,(
  $false | ($spl0 | $spl212)),
  inference(trivial_inequality_removal,[],[f49429])).
fof(f49429,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f454])).
fof(f50382,plain,(
  $false | ($spl0 | $spl212)),
  inference(trivial_inequality_removal,[],[f49432])).
fof(f49432,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f49420,f503])).
fof(f48988,plain,(
  ( ! [X420,X418,X417,X419] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) | $spl218),
  inference(cnf_transformation,[],[f48988_D])).
fof(f48988_D,plain,(
  ( ! [X420,X418,X417,X419] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f48995,plain,(
  ( ! [X540,X541] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X540),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X540,bool),X541)))) ) | $spl220),
  inference(cnf_transformation,[],[f48995_D])).
fof(f48995_D,plain,(
  ( ! [X540,X541] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X540),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X540,bool),X541)))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f48994,plain,(
  ( ! [X540,X536,X538,X541,X537,X539] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X540),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X540,bool),X541))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48323,f261])).
fof(f48323,plain,(
  ( ! [X540,X536,X538,X541,X537,X539] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X540),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X540,bool),X541))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47558])).
fof(f4077,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4)) ) | $spl14),
  inference(cnf_transformation,[],[f4077_D])).
fof(f4077_D,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f48987,plain,(
  ( ! [X420,X418,X421,X417,X419] : (s(bool,'F_0') = s(bool,X421) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) | ($spl0 | $spl12 | $spl212)),
  inference(forward_demodulation,[],[f48986,f994])).
fof(f48986,plain,(
  ( ! [X420,X418,X421,X417,X419] : (s(bool,X421) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) | ($spl0 | $spl12 | $spl212)),
  inference(subsumption_resolution,[],[f48985,f17278])).
fof(f48985,plain,(
  ( ! [X420,X418,X421,X417,X419] : (s(bool,X421) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s(bool,'F_0') = s(bool,X421) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48319,f261])).
fof(f48319,plain,(
  ( ! [X420,X418,X421,X417,X419] : (s(bool,X421) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),X419),s(bool,X420),s(fun(X417,bool),X418))) | s(bool,'F_0') = s(bool,X421) | s('type.option.option'(X417),'const.option.NONE_0') = s('type.option.option'(X417),X419)) ) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f48034,f47535])).
fof(f48032,plain,(
  $false | ($spl0 | $spl212)),
  inference(subsumption_resolution,[],[f48031,f262])).
fof(f48031,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | ($spl0 | $spl212)),
  inference(forward_demodulation,[],[f48002,f208])).
fof(f48002,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | ($spl0 | $spl212)),
  inference(backward_demodulation,[],[f47993,f778])).
fof(f47993,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | $spl212),
  inference(cnf_transformation,[],[f47993_D])).
fof(f47993_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f47996,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1)))))) | $spl216),
  inference(cnf_transformation,[],[f47996_D])).
fof(f47996_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1)))))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f47794,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1)))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | $spl0),
  inference(superposition,[],[f778,f644])).
fof(f47994,plain,(
  ( ! [X791] : (s(bool,X791) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1)))))) | s(bool,'T_0') = s(bool,X791)) ) | $spl214),
  inference(cnf_transformation,[],[f47994_D])).
fof(f47994_D,plain,(
  ( ! [X791] : (s(bool,X791) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1)))))) | s(bool,'T_0') = s(bool,X791)) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f47793,plain,(
  ( ! [X791] : (s(bool,X791) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1)))))) | s(bool,'T_0') = s(bool,X791) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3)) ) | $spl0),
  inference(superposition,[],[f857,f644])).
fof(f47082,plain,(
  ( ! [X65] : (s(bool,'T_0') = s(bool,f(s(bool,X65))) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl210),
  inference(cnf_transformation,[],[f47082_D])).
fof(f47082_D,plain,(
  ( ! [X65] : (s(bool,'T_0') = s(bool,f(s(bool,X65))) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f47055,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,f(s(bool,X65))) | s(bool,'F_0') = s(bool,X64) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl137)),
  inference(duplicate_literal_removal,[],[f46798])).
fof(f46798,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,f(s(bool,X65))) | s(bool,'F_0') = s(bool,X64) | s(bool,'F_0') = s(bool,X64) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl137)),
  inference(superposition,[],[f41173,f12813])).
fof(f41173,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,f(s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl0 | $spl137)),
  inference(trivial_inequality_removal,[],[f41130])).
fof(f41130,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f33238,f146])).
fof(f47072,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | $spl208),
  inference(cnf_transformation,[],[f47072_D])).
fof(f47072_D,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f47057,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,'F_0') = s(bool,X43) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | ($spl0 | $spl137)),
  inference(duplicate_literal_removal,[],[f46785])).
fof(f46785,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,'F_0') = s(bool,X43) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'F_0') = s(bool,X43)) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f41173,f3984])).
fof(f47071,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') = s(bool,f(s(bool,X36))) | s(bool,X36) = s(bool,'const.bool.IN_2'(s(X37,X38),s(fun(X37,bool),'const.pred_set.EMPTY_0')))) ) | $spl206),
  inference(cnf_transformation,[],[f47071_D])).
fof(f47071_D,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') = s(bool,f(s(bool,X36))) | s(bool,X36) = s(bool,'const.bool.IN_2'(s(X37,X38),s(fun(X37,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f47058,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,f(s(bool,X36))) | s(bool,'F_0') = s(bool,X35) | s(bool,X36) = s(bool,'const.bool.IN_2'(s(X37,X38),s(fun(X37,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl137)),
  inference(duplicate_literal_removal,[],[f46782])).
fof(f46782,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,f(s(bool,X36))) | s(bool,'F_0') = s(bool,X35) | s(bool,X36) = s(bool,'const.bool.IN_2'(s(X37,X38),s(fun(X37,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X35)) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f41173,f3053])).
fof(f44118,plain,(
  ( ! [X44] : (~p(s(bool,g(s(bool,X44)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | $spl204),
  inference(cnf_transformation,[],[f44118_D])).
fof(f44118_D,plain,(
  ( ! [X44] : (~p(s(bool,g(s(bool,X44)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f44100,plain,(
  ( ! [X43,X44] : (~p(s(bool,g(s(bool,X44)))) | s(bool,'F_0') = s(bool,X43) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | ($spl0 | $spl146)),
  inference(duplicate_literal_removal,[],[f43999])).
fof(f43999,plain,(
  ( ! [X43,X44] : (~p(s(bool,g(s(bool,X44)))) | s(bool,'F_0') = s(bool,X43) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'F_0') = s(bool,X43)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f41523,f3984])).
fof(f43861,plain,(
  $false | ($spl0 | $spl103 | $spl108)),
  inference(subsumption_resolution,[],[f43860,f250])).
fof(f43860,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl103 | $spl108)),
  inference(forward_demodulation,[],[f43859,f994])).
fof(f43859,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl103 | $spl108)),
  inference(backward_demodulation,[],[f43857,f31046])).
fof(f43857,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | ($spl0 | $spl103)),
  inference(forward_demodulation,[],[f43783,f994])).
fof(f43783,plain,(
  s(bool,g(s(bool,'F_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl103)),
  inference(unit_resulting_resolution,[],[f250,f31041,f8334])).
fof(f31041,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | $spl103),
  inference(cnf_transformation,[],[f31041_D])).
fof(f31041_D,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl103),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl103])])).
fof(f43856,plain,(
  $false | ($spl0 | $spl103 | $spl118)),
  inference(subsumption_resolution,[],[f43855,f454])).
fof(f43855,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | ($spl0 | $spl103 | $spl118)),
  inference(backward_demodulation,[],[f43785,f31053])).
fof(f43785,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | ($spl0 | $spl103)),
  inference(unit_resulting_resolution,[],[f145,f31041,f21149])).
fof(f43854,plain,(
  $false | ($spl103 | $spl118)),
  inference(subsumption_resolution,[],[f43786,f31053])).
fof(f43786,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | $spl103),
  inference(unit_resulting_resolution,[],[f31041,f193])).
fof(f4176,plain,(
  ( ! [X29] : (s(bool,'T_0') = s(bool,X29)) ) | $spl16),
  inference(cnf_transformation,[],[f4176_D])).
fof(f4176_D,plain,(
  ( ! [X29] : (s(bool,'T_0') = s(bool,X29)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f43268,plain,(
  ( ! [X287,X286] : (s(bool,X287) != s(bool,g(s(bool,X286))) | s(bool,X287) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl202),
  inference(cnf_transformation,[],[f43268_D])).
fof(f43268_D,plain,(
  ( ! [X287,X286] : (s(bool,X287) != s(bool,g(s(bool,X286))) | s(bool,X287) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f43088,plain,(
  ( ! [X285,X287,X286] : (s(bool,X287) != s(bool,g(s(bool,X286))) | s(bool,'T_0') = s(bool,X285) | s(bool,X287) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl102 | $spl146)),
  inference(duplicate_literal_removal,[],[f42787])).
fof(f42787,plain,(
  ( ! [X285,X287,X286] : (s(bool,X287) != s(bool,g(s(bool,X286))) | s(bool,'T_0') = s(bool,X285) | s(bool,X287) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X285)) ) | ($spl0 | $spl12 | $spl102 | $spl146)),
  inference(superposition,[],[f17276,f39315])).
fof(f39315,plain,(
  ( ! [X4,X5] : (s(bool,X5) = s(bool,g(s(bool,X4))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl0 | $spl102 | $spl146)),
  inference(subsumption_resolution,[],[f39069,f250])).
fof(f39069,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X5) = s(bool,g(s(bool,X4))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl0 | $spl102 | $spl146)),
  inference(superposition,[],[f38610,f278])).
fof(f38610,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,X0)))) ) | ($spl0 | $spl102 | $spl146)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f8593,f5359,f11911,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31042,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f31934,f31935,f31937,f31938,f31939,f32149,f32150,f32158,f32167,f32303,f32304,f32306,f32307,f32308,f32423,f32631,f31351,f525,f657,f933,f876,f34019,f34020,f34215,f34216,f34226,f34235,f34370,f34371,f34486,f34487,f29609,f19512,f8223,f3395,f32207,f32208,f34269,f34270,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f19508,f18647,f18645,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f34658,f32607,f32606,f32602,f32599,f32592,f32459,f32448,f32201,f32092,f32088,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15415,f13694,f13438,f13279,f13195,f13009,f8920,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15416,f13280,f13010,f8921,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f34488,f34485,f34217,f34214,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31694,f31643,f24298,f24284,f24281,f18631,f18167,f13487,f13486,f13485,f13476,f13473,f24384,f24288,f24285,f24156,f24155,f24153,f21067,f21029,f18638,f18637,f18636,f13533,f13488,f13479,f12887,f12886,f8803,f8802,f38384,f38385,f38386,f38574,f38609])).
fof(f38609,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,g(s(bool,X0)))) ) | ($spl0 | $spl102)),
  inference(condensation,[],[f38608])).
fof(f38608,plain,(
  ( ! [X14,X13] : (s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,g(s(bool,X13)))) ) | ($spl0 | $spl102)),
  inference(subsumption_resolution,[],[f38396,f15050])).
fof(f38396,plain,(
  ( ! [X14,X13] : (s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,X14) | s(bool,'F_0') = s(bool,g(s(bool,X13)))) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f31934,f1778])).
fof(f38574,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl102),
  inference(duplicate_literal_removal,[],[f38391])).
fof(f38391,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl102),
  inference(superposition,[],[f31934,f278])).
fof(f38386,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X135),X136),s(bool,X137),s(fun(X135,bool),X138))) = s(bool,g(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X135),X136),s(bool,X137),s(fun(X135,bool),X138))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X135,bool),bool),happ(s(fun(bool,fun(fun(X135,bool),bool)),happ(s(fun('type.option.option'(X135),fun(bool,fun(fun(X135,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X135),X136))),s(bool,X137))),s(fun(X135,bool),X138)))) ) | $spl102),
  inference(superposition,[],[f31934,f211])).
fof(f38385,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,happ(s(fun(X131,bool),X134),s(X131,X132))) = s(bool,g(s(bool,happ(s(fun(X131,bool),X134),s(X131,X132))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X131),'const.option.SOME_1'(s(X131,X132))),s(bool,X133),s(fun(X131,bool),X134)))) ) | $spl102),
  inference(superposition,[],[f31934,f210])).
fof(f38384,plain,(
  ( ! [X130,X128,X129] : (s(bool,X129) = s(bool,g(s(bool,X129))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X129),s(fun(X128,bool),X130)))) ) | $spl102),
  inference(superposition,[],[f31934,f208])).
fof(f34214,plain,(
  ( ! [X13] : (s(bool,'F_0') = s(bool,g(s(bool,X13))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34029,f250])).
fof(f34029,plain,(
  ( ! [X13] : (s(bool,'F_0') = s(bool,g(s(bool,X13))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f31351,f1987])).
fof(f34217,plain,(
  ( ! [X23] : (s(bool,'F_0') = s(bool,g(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34033,f250])).
fof(f34033,plain,(
  ( ! [X23] : (s(bool,'F_0') = s(bool,g(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f31351,f3984])).
fof(f34485,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,g(s(bool,X13))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34380,f250])).
fof(f34380,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,g(s(bool,X13))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f34226,f1987])).
fof(f34488,plain,(
  ( ! [X23] : (s(bool,X23) != s(bool,g(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34384,f250])).
fof(f34384,plain,(
  ( ! [X23] : (s(bool,X23) != s(bool,g(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f34226,f3984])).
fof(f32088,plain,(
  ( ! [X130] : (~p(s(bool,happ(s(fun(bool,bool),X130),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X130),s(bool,sK7(g(s(bool,'F_0')),X130,bool))))) ) | $spl102),
  inference(superposition,[],[f620,f31042])).
fof(f32092,plain,(
  ( ! [X134] : (~p(s(bool,happ(s(fun(bool,bool),X134),s(bool,'F_0')))) | s(bool,sK7(g(s(bool,'F_0')),X134,bool)) = s(bool,sK7(sK7(g(s(bool,'F_0')),X134,bool),X134,bool))) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f2867,f31042])).
fof(f32201,plain,(
  ( ! [X108] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'F_0')),X108,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0'))))) ) | $spl102),
  inference(forward_demodulation,[],[f32076,f31042])).
fof(f32076,plain,(
  ( ! [X108] : (~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK7(g(s(bool,'F_0')),X108,bool))) ) | $spl102),
  inference(superposition,[],[f196,f31042])).
fof(f32592,plain,(
  ( ! [X253,X251,X252] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X252),'const.option.NONE_0'),s(fun(bool,bool),X251),s(fun(X252,fun(bool,bool)),X253)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X251),s(bool,'F_0'))))) ) | $spl102),
  inference(forward_demodulation,[],[f32487,f31042])).
fof(f32487,plain,(
  ( ! [X253,X251,X252] : (~p(s(bool,happ(s(fun(bool,bool),X251),s(bool,'F_0')))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK7(g(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X252),'const.option.NONE_0'),s(fun(bool,bool),X251),s(fun(X252,fun(bool,bool)),X253)),bool))) ) | $spl102),
  inference(superposition,[],[f519,f31042])).
fof(f34658,plain,(
  ( ! [X156] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'T_0')),X156,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X156),s(bool,'F_0'))))) ) | $spl146),
  inference(forward_demodulation,[],[f34556,f31351])).
fof(f34556,plain,(
  ( ! [X156] : (~p(s(bool,happ(s(fun(bool,bool),X156),s(bool,'F_0')))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X156,bool))) ) | $spl146),
  inference(superposition,[],[f196,f31351])).
fof(f34270,plain,(
  ( ! [X115] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'T_0')),X115,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X115),s(bool,'F_0')))) ) | ($spl0 | $spl146)),
  inference(forward_demodulation,[],[f34156,f31351])).
fof(f34156,plain,(
  ( ! [X115] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X115),s(bool,'F_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X115,bool))) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f2868,f31351])).
fof(f34269,plain,(
  ( ! [X114] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'T_0')),X114,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X114),s(bool,'F_0')))) ) | ($spl0 | $spl146)),
  inference(forward_demodulation,[],[f34155,f31351])).
fof(f34155,plain,(
  ( ! [X114] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X114),s(bool,'F_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X114,bool))) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f1907,f31351])).
fof(f32208,plain,(
  ( ! [X135] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'F_0')),X135,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))) ) | ($spl0 | $spl102)),
  inference(forward_demodulation,[],[f32093,f31042])).
fof(f32093,plain,(
  ( ! [X135] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK7(g(s(bool,'F_0')),X135,bool))) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f2868,f31042])).
fof(f32207,plain,(
  ( ! [X133] : (s(bool,'F_0') = s(bool,sK7(g(s(bool,'F_0')),X133,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X133),s(bool,'F_0')))) ) | ($spl0 | $spl102)),
  inference(forward_demodulation,[],[f32091,f31042])).
fof(f32091,plain,(
  ( ! [X133] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X133),s(bool,'F_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK7(g(s(bool,'F_0')),X133,bool))) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f1907,f31042])).
fof(f34487,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,g(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34382,f250])).
fof(f34382,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,g(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f34226,f3053])).
fof(f34486,plain,(
  ( ! [X16] : (s(bool,X16) != s(bool,g(s(bool,X16))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34381,f262])).
fof(f34381,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) != s(bool,g(s(bool,X16))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f34226,f3053])).
fof(f34371,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,g(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl146),
  inference(superposition,[],[f34226,f278])).
fof(f34235,plain,(
  ( ! [X30,X29] : (s(bool,X29) = s(bool,g(s(bool,'T_0'))) | s(bool,X29) = s(bool,X30) | s(bool,'F_0') = s(bool,X30)) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34087,f145])).
fof(f34087,plain,(
  ( ! [X30,X29] : (p(s(bool,'F_0')) | s(bool,X29) = s(bool,g(s(bool,'T_0'))) | s(bool,X29) = s(bool,X30) | s(bool,'F_0') = s(bool,X30)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f2586,f31351])).
fof(f34216,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl146)),
  inference(subsumption_resolution,[],[f34031,f250])).
fof(f34031,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f31351,f3053])).
fof(f34020,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,g(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl146),
  inference(superposition,[],[f31351,f278])).
fof(f34019,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl146)),
  inference(superposition,[],[f31351,f8334])).
fof(f32423,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl102)),
  inference(subsumption_resolution,[],[f32330,f250])).
fof(f32330,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f32158,f8334])).
fof(f32308,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,g(s(bool,X11))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) | s(bool,X11) = s(bool,X12)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f32158,f3984])).
fof(f32307,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') != s(bool,g(s(bool,X7))) | s(bool,X8) = s(bool,'const.bool.IN_2'(s(X9,X10),s(fun(X9,bool),'const.pred_set.EMPTY_0'))) | s(bool,X7) = s(bool,X8)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f32158,f3053])).
fof(f32306,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,g(s(bool,X5))) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool))) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f32158,f1987])).
fof(f32304,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f32158,f1778])).
fof(f32303,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl102),
  inference(superposition,[],[f32158,f146])).
fof(f32167,plain,(
  ( ! [X35,X34] : (s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X35) | s(bool,'F_0') = s(bool,X35)) ) | ($spl0 | $spl102)),
  inference(subsumption_resolution,[],[f32016,f145])).
fof(f32016,plain,(
  ( ! [X35,X34] : (p(s(bool,'F_0')) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X35) | s(bool,'F_0') = s(bool,X35)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f2586,f31042])).
fof(f32158,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl102),
  inference(subsumption_resolution,[],[f31982,f145])).
fof(f31982,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl102),
  inference(superposition,[],[f148,f31042])).
fof(f32150,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl102),
  inference(subsumption_resolution,[],[f31965,f250])).
fof(f31965,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl102),
  inference(superposition,[],[f31042,f278])).
fof(f32149,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl102)),
  inference(subsumption_resolution,[],[f31961,f250])).
fof(f31961,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f31042,f8334])).
fof(f31939,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,g(s(bool,X11))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) | s(bool,X11) = s(bool,X12)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f31042,f3984])).
fof(f31938,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X7) = s(bool,g(s(bool,X7))) | s(bool,X8) = s(bool,'const.bool.IN_2'(s(X9,X10),s(fun(X9,bool),'const.pred_set.EMPTY_0'))) | s(bool,X7) = s(bool,X8)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f31042,f3053])).
fof(f31937,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,g(s(bool,X5))) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool))) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f31042,f1987])).
fof(f31935,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl0 | $spl102)),
  inference(superposition,[],[f31042,f1778])).
fof(f31934,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl102),
  inference(superposition,[],[f31042,f146])).
fof(f43245,plain,(
  ( ! [X187,X188] : (s(bool,X188) != s(bool,g(s(bool,X187))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X188)),bool))) ) | $spl200),
  inference(cnf_transformation,[],[f43245_D])).
fof(f43245_D,plain,(
  ( ! [X187,X188] : (s(bool,X188) != s(bool,g(s(bool,X187))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X188)),bool))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f43092,plain,(
  ( ! [X187,X188,X186] : (s(bool,X188) != s(bool,g(s(bool,X187))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X188)),bool)) | s(bool,'T_0') = s(bool,X186)) ) | ($spl0 | $spl102 | $spl146)),
  inference(duplicate_literal_removal,[],[f42750])).
fof(f42750,plain,(
  ( ! [X187,X188,X186] : (s(bool,X188) != s(bool,g(s(bool,X187))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X188)),bool)) | s(bool,'T_0') = s(bool,X186) | s(bool,'T_0') = s(bool,X186)) ) | ($spl0 | $spl102 | $spl146)),
  inference(superposition,[],[f4952,f39315])).
fof(f35507,plain,(
  ( ! [X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53)))) ) | $spl184),
  inference(cnf_transformation,[],[f35507_D])).
fof(f35507_D,plain,(
  ( ! [X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53)))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f43213,plain,(
  ( ! [X87,X86] : (s(bool,X87) != s(bool,g(s(bool,X86))) | s(bool,'F_0') = s(bool,X87)) ) | $spl198),
  inference(cnf_transformation,[],[f43213_D])).
fof(f43213_D,plain,(
  ( ! [X87,X86] : (s(bool,X87) != s(bool,g(s(bool,X86))) | s(bool,'F_0') = s(bool,X87)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f43212,plain,(
  ( ! [X87,X85,X86] : (s(bool,X87) != s(bool,g(s(bool,X86))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,'F_0') = s(bool,X87)) ) | ($spl0 | $spl102 | $spl146)),
  inference(subsumption_resolution,[],[f42719,f194])).
fof(f42719,plain,(
  ( ! [X87,X85,X86] : (s(bool,X87) != s(bool,g(s(bool,X86))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,'F_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X85)) ) | ($spl0 | $spl102 | $spl146)),
  inference(superposition,[],[f1927,f39315])).
fof(f37571,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f37570,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387,f37563,f37565,f37394])).
fof(f37394,plain,(
  ( ! [X265,X267,X268,X266] : (s(bool,X266) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X267),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X267,bool),X268))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X266))) | s('type.option.option'(bool),X265) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X265)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f24228])).
fof(f37565,plain,(
  ( ! [X79] : (s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | ($spl0 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37393,f454])).
fof(f37393,plain,(
  ( ! [X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f21126])).
fof(f37563,plain,(
  ( ! [X37,X36] : (p(s(bool,X37)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) ) | ($spl0 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37390,f36898])).
fof(f37390,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') != s(bool,X37) | p(s(bool,X37)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f18250])).
fof(f37387,plain,(
  ( ! [X118,X116,X117] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X117,bool),X118))) | s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f18208])).
fof(f37558,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37384,f4169])).
fof(f37384,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,'T_0') != s(bool,X172) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f18188])).
fof(f37383,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X134,bool),X135))) | s(bool,'T_0') != s(bool,X133) | s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f18166])).
fof(f37479,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl0 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f37017])).
fof(f37017,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f15415])).
fof(f37481,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f37005])).
fof(f37005,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f3148])).
fof(f37484,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | ($spl0 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f36952])).
fof(f36952,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f15416])).
fof(f37486,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f36944])).
fof(f36944,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f3149])).
fof(f37490,plain,(
  ( ! [X606,X609,X607,X608] : (s(fun(X606,bool),X607) = s(fun(X606,bool),X608) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) | s(bool,X609) = s(bool,g(s(X606,sK8(X607,X608,bool,X606))))) ) | ($spl0 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f36924])).
fof(f36924,plain,(
  ( ! [X606,X609,X607,X608] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X606,bool),X607) = s(fun(X606,bool),X608) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) | s(bool,X609) = s(bool,g(s(X606,sK8(X607,X608,bool,X606))))) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f30201])).
fof(f37491,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | ($spl0 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f36921])).
fof(f36921,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f25795])).
fof(f37505,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl0 | $spl98 | $spl104)),
  inference(condensation,[],[f37504])).
fof(f37504,plain,(
  ( ! [X140,X138,X139,X137] : (s(fun(X137,bool),X138) = s(fun(X137,bool),X139) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,g(s(X137,sK8(X138,X139,bool,X137))))) ) | ($spl0 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f36908,f146])).
fof(f36908,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,'F_0') != s(bool,X140) | s(fun(X137,bool),X138) = s(fun(X137,bool),X139) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,g(s(X137,sK8(X138,X139,bool,X137))))) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f1310])).
fof(f37498,plain,(
  ( ! [X67] : (s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl98 | $spl104 | $spl124)),
  inference(subsumption_resolution,[],[f36899,f36898])).
fof(f36899,plain,(
  ( ! [X67] : (s(bool,'F_0') != s(bool,X67) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl98 | $spl104 | $spl124)),
  inference(backward_demodulation,[],[f36898,f31057])).
fof(f36898,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f36897,f36818])).
fof(f36897,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl104)),
  inference(condensation,[],[f36896])).
fof(f36896,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,'F_0') = s(bool,X30) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.bool.IN_2'(s(X31,X32),s(fun(X31,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X29)) ) | ($spl0 | $spl104)),
  inference(subsumption_resolution,[],[f36792,f1778])).
fof(f36792,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X29) != s(bool,X30) | s(bool,'F_0') = s(bool,X30) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.bool.IN_2'(s(X31,X32),s(fun(X31,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X29)) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f3053])).
fof(f36819,plain,(
  ( ! [X70,X69] : (s(bool,X70) != s(bool,f(s(bool,X69))) | s(bool,'F_0') = s(bool,X70) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl104)),
  inference(subsumption_resolution,[],[f36775,f250])).
fof(f36775,plain,(
  ( ! [X70,X69] : (s(bool,X70) != s(bool,f(s(bool,X69))) | s(bool,'F_0') = s(bool,X70) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f8334])).
fof(f36753,plain,(
  ( ! [X17,X18,X16] : (s(bool,X17) != s(bool,f(s(bool,X16))) | s(bool,'F_0') = s(bool,X17) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X16) = s(bool,X18)) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f3984])).
fof(f36752,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,X12) != s(bool,f(s(bool,X11))) | s(bool,'F_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.bool.IN_2'(s(X14,X15),s(fun(X14,bool),'const.pred_set.EMPTY_0'))) | s(bool,X11) = s(bool,X13)) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f3053])).
fof(f36751,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) != s(bool,f(s(bool,X8))) | s(bool,'F_0') = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool))) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f1987])).
fof(f36749,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) != s(bool,f(s(bool,X2))) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f1778])).
fof(f36748,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl104),
  inference(superposition,[],[f31043,f146])).
fof(f36818,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,f(s(bool,'F_0')))) ) | ($spl0 | $spl98 | $spl104)),
  inference(global_subsumption,[],[f36813,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4169,f4126,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2759,f2723,f2681,f1761,f1192,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f10479,f10478,f13706,f17656,f18228,f18229,f18230,f18231,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18646,f18648,f18649,f18650,f24177,f24178,f24179,f24210,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24304,f24305,f24310,f31006,f31007,f31008,f31009,f31010,f31043,f31039,f31376,f31377,f31378,f31449,f31458,f525,f657,f933,f876,f15568,f31450,f31441,f24303,f24235,f24233,f24228,f18647,f18645,f18250,f18249,f18188,f18073,f18067,f18040,f32518,f31448,f27182,f19620,f18043,f32517,f27181,f19616,f831,f554,f32516,f27180,f19618,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f17599,f15471,f28911,f32599,f31457,f31413,f27118,f19602,f19567,f17601,f17598,f531,f32593,f32509,f32444,f28873,f28853,f28814,f27175,f27119,f19615,f19600,f19568,f18191,f2763,f1432,f1173,f32445,f28945,f28913,f28910,f28877,f28874,f28852,f28815,f27156,f27120,f19599,f19569,f18190,f15473,f15470,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f19649,f702,f679,f27112,f19650,f990,f966,f693,f19564,f32560,f973,f19565,f32561,f32623,f32594,f32562,f31902,f31843,f31697,f31680,f31587,f28875,f27271,f27113,f27110,f19679,f19651,f19648,f19566,f19563,f4124,f3148,f2979,f2953,f2682,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f28876,f27214,f19700,f4125,f3149,f2980,f2954,f2683,f1248,f1218,f1163,f976,f975,f949,f31694,f24298,f24281,f18631,f1441,f1310,f36677,f36676])).
fof(f36813,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) != s(bool,f(s(bool,'F_0')))) ) | ($spl0 | $spl104)),
  inference(condensation,[],[f36812])).
fof(f36812,plain,(
  ( ! [X21,X22] : (s(bool,X22) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool))) ) | ($spl0 | $spl104)),
  inference(duplicate_literal_removal,[],[f36689])).
fof(f36689,plain,(
  ( ! [X21,X22] : (s(bool,X22) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool))) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f1987])).
fof(f36676,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,f(s(bool,'F_0'))),s(fun(X0,bool),X1)))) ) | $spl104),
  inference(unit_resulting_resolution,[],[f208,f31043])).
fof(f36677,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'F_0')))),bool)) | $spl104),
  inference(unit_resulting_resolution,[],[f994,f31043])).
fof(f15637,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,X117) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X113),X114),s(bool,X115),s(fun(X113,bool),X116))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X117)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X113,bool),bool),happ(s(fun(bool,fun(fun(X113,bool),bool)),happ(s(fun('type.option.option'(X113),fun(bool,fun(fun(X113,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X113),X114))),s(bool,X115))),s(fun(X113,bool),X116)))) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f12035,f211])).
fof(f15636,plain,(
  ( ! [X111,X109,X112,X110,X108] : (s(bool,X112) != s(bool,happ(s(fun(X108,bool),X111),s(X108,X109))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X108),'const.option.SOME_1'(s(X108,X109))),s(bool,X110),s(fun(X108,bool),X111)))) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f12035,f210])).
fof(f30720,plain,(
  ( ! [X385,X384] : (s(bool,X385) != s(bool,sK6('const.option.SOME_1'(s(bool,X384)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X385)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X384)))) ) | ($spl0 | $spl30)),
  inference(subsumption_resolution,[],[f29738,f250])).
fof(f29738,plain,(
  ( ! [X385,X384] : (s(bool,X385) != s(bool,sK6('const.option.SOME_1'(s(bool,X384)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X385)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X384))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f11355,f3984])).
fof(f30719,plain,(
  ( ! [X383,X382] : (s(bool,X383) != s(bool,sK6('const.option.SOME_1'(s(bool,X382)),bool)) | s(bool,'T_0') = s(bool,X383) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X382)))) ) | ($spl0 | $spl30)),
  inference(subsumption_resolution,[],[f29737,f250])).
fof(f29737,plain,(
  ( ! [X383,X382] : (s(bool,X383) != s(bool,sK6('const.option.SOME_1'(s(bool,X382)),bool)) | s(bool,'T_0') = s(bool,X383) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X382))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f9250,f3984])).
fof(f26804,plain,(
  ( ! [X584,X586,X585,X583] : (s(bool,X584) != s(bool,sK6('const.option.SOME_1'(s(bool,X583)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X584)),bool)) | s(bool,X583) = s(bool,'const.bool.IN_2'(s(X585,X586),s(fun(X585,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl30)),
  inference(subsumption_resolution,[],[f25375,f250])).
fof(f25375,plain,(
  ( ! [X584,X586,X585,X583] : (s(bool,X584) != s(bool,sK6('const.option.SOME_1'(s(bool,X583)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X584)),bool)) | s(bool,X583) = s(bool,'const.bool.IN_2'(s(X585,X586),s(fun(X585,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f11355,f3053])).
fof(f26803,plain,(
  ( ! [X580,X582,X581,X579] : (s(bool,X580) != s(bool,sK6('const.option.SOME_1'(s(bool,X579)),bool)) | s(bool,'T_0') = s(bool,X580) | s(bool,X579) = s(bool,'const.bool.IN_2'(s(X581,X582),s(fun(X581,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl30)),
  inference(subsumption_resolution,[],[f25374,f250])).
fof(f25374,plain,(
  ( ! [X580,X582,X581,X579] : (s(bool,X580) != s(bool,sK6('const.option.SOME_1'(s(bool,X579)),bool)) | s(bool,'T_0') = s(bool,X580) | s(bool,X579) = s(bool,'const.bool.IN_2'(s(X581,X582),s(fun(X581,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f9250,f3053])).
fof(f14454,plain,(
  ( ! [X59,X57,X58] : (s(bool,X58) != s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool)) | s(bool,X59) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X57) = s(bool,X59)) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f11355,f8334])).
fof(f14453,plain,(
  ( ! [X54,X56,X55] : (s(bool,X55) != s(bool,sK6('const.option.SOME_1'(s(bool,X54)),bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X54) = s(bool,X56)) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f9250,f8334])).
fof(f12035,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,'F_0') = s(bool,X2)) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f11355,f7381])).
fof(f12034,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f11355,f7614])).
fof(f12024,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl30),
  inference(superposition,[],[f11355,f278])).
fof(f11356,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl30),
  inference(superposition,[],[f9250,f278])).
fof(f11355,plain,(
  ( ! [X56] : (s(bool,X56) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool))) ) | $spl30),
  inference(superposition,[],[f9250,f994])).
fof(f37570,plain,(
  ( ! [X269,X267,X268] : (s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37407,f454])).
fof(f37407,plain,(
  ( ! [X269,X267,X268] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f22536])).
fof(f22536,plain,(
  ( ! [X269,X267,X268] : (s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X267,X268,X269,bool))))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22185,f994])).
fof(f22185,plain,(
  ( ! [X269,X267,X268] : (s(X269,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X269,g(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X267,X268,X269,bool))))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f209,f12835])).
fof(f37569,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f37568,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387,f37563,f37565,f37394])).
fof(f37568,plain,(
  ( ! [X177,X175,X176] : (s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37406,f3993])).
fof(f37406,plain,(
  ( ! [X177,X175,X176] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f12755])).
fof(f12755,plain,(
  ( ! [X177,X175,X176] : (s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X175,X176,X177,bool))),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f12397,f994])).
fof(f12397,plain,(
  ( ! [X177,X175,X176] : (s(X177,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X177,g(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X175,X176,X177,bool))),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f209,f11477])).
fof(f37567,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387,f37563,f37565,f37394])).
fof(f37566,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387,f37563,f37565])).
fof(f37564,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387,f37563])).
fof(f37562,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f37561,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387])).
fof(f37561,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37388,f17278])).
fof(f37388,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X91) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl0 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f18210])).
fof(f37560,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558,f37387])).
fof(f37559,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383,f37558])).
fof(f37557,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479,f37383])).
fof(f37556,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f37555,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479])).
fof(f37555,plain,(
  ( ! [X171] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37375,f3993])).
fof(f37375,plain,(
  ( ! [X171] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f12750])).
fof(f12750,plain,(
  ( ! [X171] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X171,bool))),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f12394,f994])).
fof(f12394,plain,(
  ( ! [X171] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X171,bool))),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f186,f11477])).
fof(f37526,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481,f37479])).
fof(f37525,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484,f37481])).
fof(f37517,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486,f37484])).
fof(f37516,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490,f37486])).
fof(f37515,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124 | $spl138 | $spl146)),
  inference(global_subsumption,[],[f37489,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490])).
fof(f37489,plain,(
  ( ! [X337,X336,X338] : (s(fun(X336,bool),X337) = s(fun(X336,bool),X338) | s(bool,'T_0') = s(bool,g(s(X336,sK8(X337,X338,bool,X336))))) ) | ($spl0 | $spl98 | $spl104 | $spl138 | $spl146)),
  inference(trivial_inequality_removal,[],[f36925])).
fof(f36925,plain,(
  ( ! [X337,X336,X338] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X336,bool),X337) = s(fun(X336,bool),X338) | s(bool,'T_0') = s(bool,g(s(X336,sK8(X337,X338,bool,X336))))) ) | ($spl0 | $spl98 | $spl104 | $spl138 | $spl146)),
  inference(backward_demodulation,[],[f36898,f36366])).
fof(f36366,plain,(
  ( ! [X337,X336,X338] : (s(bool,'F_0') != s(bool,f(s(X336,sK8(X337,X338,bool,X336)))) | s(fun(X336,bool),X337) = s(fun(X336,bool),X338) | s(bool,'T_0') = s(bool,g(s(X336,sK8(X337,X338,bool,X336))))) ) | ($spl138 | $spl146)),
  inference(forward_demodulation,[],[f35280,f31351])).
fof(f35280,plain,(
  ( ! [X337,X336,X338] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(X336,sK8(X337,X338,bool,X336)))) | s(fun(X336,bool),X337) = s(fun(X336,bool),X338) | s(bool,'T_0') = s(bool,g(s(X336,sK8(X337,X338,bool,X336))))) ) | $spl138),
  inference(superposition,[],[f209,f31345])).
fof(f37514,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491,f37490])).
fof(f37513,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505,f37491])).
fof(f37512,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f37511,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505])).
fof(f37511,plain,(
  ( ! [X251,X249,X250] : (s(fun(X249,bool),X250) = s(fun(X249,bool),X251)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37510,f454])).
fof(f37510,plain,(
  ( ! [X251,X249,X250] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(fun(X249,bool),X250) = s(fun(X249,bool),X251)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(forward_demodulation,[],[f37492,f36898])).
fof(f37492,plain,(
  ( ! [X251,X249,X250] : (s(fun(X249,bool),X250) = s(fun(X249,bool),X251) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X249,sK8(X250,X251,bool,X249))))))) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f36919])).
fof(f36919,plain,(
  ( ! [X251,X249,X250] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X249,bool),X250) = s(fun(X249,bool),X251) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X249,sK8(X250,X251,bool,X249))))))) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f22525])).
fof(f22525,plain,(
  ( ! [X251,X249,X250] : (s(bool,'F_0') != s(bool,f(s(X249,sK8(X250,X251,bool,X249)))) | s(fun(X249,bool),X250) = s(fun(X249,bool),X251) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X249,sK8(X250,X251,bool,X249))))))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f22178,f994])).
fof(f22178,plain,(
  ( ! [X251,X249,X250] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X249,sK8(X250,X251,bool,X249)))) | s(fun(X249,bool),X250) = s(fun(X249,bool),X251) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X249,sK8(X250,X251,bool,X249))))))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f209,f12835])).
fof(f37509,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f37508,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505])).
fof(f37508,plain,(
  ( ! [X158,X159,X157] : (s(fun(X157,bool),X158) = s(fun(X157,bool),X159)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(subsumption_resolution,[],[f37507,f3993])).
fof(f37507,plain,(
  ( ! [X158,X159,X157] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X157,bool),X158) = s(fun(X157,bool),X159)) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(forward_demodulation,[],[f37493,f36898])).
fof(f37493,plain,(
  ( ! [X158,X159,X157] : (s(fun(X157,bool),X158) = s(fun(X157,bool),X159) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X157,sK8(X158,X159,bool,X157))))),bool))) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(trivial_inequality_removal,[],[f36917])).
fof(f36917,plain,(
  ( ! [X158,X159,X157] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X157,bool),X158) = s(fun(X157,bool),X159) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X157,sK8(X158,X159,bool,X157))))),bool))) ) | ($spl0 | $spl12 | $spl98 | $spl104)),
  inference(backward_demodulation,[],[f36898,f12743])).
fof(f12743,plain,(
  ( ! [X158,X159,X157] : (s(bool,'F_0') != s(bool,f(s(X157,sK8(X158,X159,bool,X157)))) | s(fun(X157,bool),X158) = s(fun(X157,bool),X159) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X157,sK8(X158,X159,bool,X157))))),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f12390,f994])).
fof(f12390,plain,(
  ( ! [X158,X159,X157] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X157,sK8(X158,X159,bool,X157)))) | s(fun(X157,bool),X158) = s(fun(X157,bool),X159) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X157,sK8(X158,X159,bool,X157))))),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f209,f11477])).
fof(f37506,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498,f37505])).
fof(f37503,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124 | $spl142)),
  inference(global_subsumption,[],[f37502,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498])).
fof(f37502,plain,(
  ( ! [X37,X38] : (s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37)))) ) | ($spl0 | $spl98 | $spl104 | $spl142)),
  inference(subsumption_resolution,[],[f36907,f146])).
fof(f36907,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') != s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37)))) ) | ($spl0 | $spl98 | $spl104 | $spl142)),
  inference(backward_demodulation,[],[f36898,f36645])).
fof(f36645,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,f(s(bool,X37))) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37)))) ) | ($spl0 | $spl142)),
  inference(subsumption_resolution,[],[f36521,f250])).
fof(f36521,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,f(s(bool,X37))) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl142)),
  inference(superposition,[],[f31348,f3984])).
fof(f37500,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124 | $spl137)),
  inference(global_subsumption,[],[f37496,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498])).
fof(f37496,plain,(
  ( ! [X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl98 | $spl104 | $spl137)),
  inference(trivial_inequality_removal,[],[f36903])).
fof(f36903,plain,(
  ( ! [X23] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl98 | $spl104 | $spl137)),
  inference(backward_demodulation,[],[f36898,f33240])).
fof(f33240,plain,(
  ( ! [X23] : (s(bool,'F_0') != s(bool,f(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl137)),
  inference(subsumption_resolution,[],[f33105,f250])).
fof(f33105,plain,(
  ( ! [X23] : (s(bool,'F_0') != s(bool,f(s(bool,X23))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f3984])).
fof(f37499,plain,(
  $false | ($spl0 | $spl30 | $spl98 | $spl104 | $spl124)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31043,f31039,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f525,f657,f933,f876,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f28912,f23680,f17599,f15471,f28911,f23679,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27111,f23321,f19649,f3060,f2766,f702,f679,f27112,f23322,f19650,f3061,f2767,f990,f966,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f31696,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f31057,f36677,f36676,f36813,f36818,f36748,f36749,f36751,f36752,f36753,f36819,f36821,f36823,f36898,f37498])).
fof(f36895,plain,(
  ( ! [X660] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X660)))) ) | $spl196),
  inference(cnf_transformation,[],[f36895_D])).
fof(f36895_D,plain,(
  ( ! [X660] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X660)))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f36893,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.SOME_1'(s(X396,X397))),s(bool,X398),s(fun(X396,bool),X399)))) ) | $spl194),
  inference(cnf_transformation,[],[f36893_D])).
fof(f36893_D,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.SOME_1'(s(X396,X397))),s(bool,X398),s(fun(X396,bool),X399)))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f36894,plain,(
  ( ! [X660,X656,X658,X657,X659] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X656),'const.option.SOME_1'(s(X656,X657))),s(bool,X658),s(fun(X656,bool),X659))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X660)))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36886,f4073])).
fof(f36886,plain,(
  ( ! [X660,X656,X658,X657,X659] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X656),'const.option.SOME_1'(s(X656,X657))),s(bool,X658),s(fun(X656,bool),X659))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X660))) | s(bool,'F_0') = s(bool,happ(s(fun(X656,bool),X659),s(X656,X657)))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(backward_demodulation,[],[f36874,f31694])).
fof(f36874,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2)))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36859,f21168])).
fof(f36859,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(condensation,[],[f36854])).
fof(f36854,plain,(
  ( ! [X216,X215,X217,X214] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X216),'const.option.NONE_0'),s(bool,X215),s(fun(X216,bool),X217))) | s(bool,'F_0') = s(bool,X214) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215)))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(backward_demodulation,[],[f36834,f24383])).
fof(f24383,plain,(
  ( ! [X216,X215,X217,X214] : (s(bool,'F_0') = s(bool,X214) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) | s(bool,sK6('const.option.SOME_1'(s(bool,X214)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X216),'const.option.NONE_0'),s(bool,X215),s(fun(X216,bool),X217)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f24286,f994])).
fof(f24286,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) | s(bool,sK6('const.option.SOME_1'(s(bool,X214)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X216),'const.option.NONE_0'),s(bool,X215),s(fun(X216,bool),X217))) | s(bool,X214) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f443,f11477])).
fof(f36834,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl0 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36833,f31035])).
fof(f36833,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl0 | $spl104)),
  inference(condensation,[],[f36832])).
fof(f36832,plain,(
  ( ! [X21,X22] : (s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl104)),
  inference(subsumption_resolution,[],[f36790,f1987])).
fof(f36790,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f1987])).
fof(f36890,plain,(
  ( ! [X137] : (s(bool,'T_0') != s(bool,X137)) ) | $spl192),
  inference(cnf_transformation,[],[f36890_D])).
fof(f36890_D,plain,(
  ( ! [X137] : (s(bool,'T_0') != s(bool,X137)) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f36892,plain,(
  ( ! [X397,X399,X396,X398,X400] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.SOME_1'(s(X396,X397))),s(bool,X398),s(fun(X396,bool),X399))) | s(bool,'T_0') != s(bool,X400)) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36885,f4073])).
fof(f36885,plain,(
  ( ! [X397,X399,X396,X398,X400] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.SOME_1'(s(X396,X397))),s(bool,X398),s(fun(X396,bool),X399))) | s(bool,'T_0') != s(bool,X400) | s(bool,'F_0') = s(bool,happ(s(fun(X396,bool),X399),s(X396,X397)))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(backward_demodulation,[],[f36874,f31643])).
fof(f36873,plain,(
  ( ! [X123] : (s(bool,'F_0') = s(bool,sK6(X123,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X123)) ) | $spl190),
  inference(cnf_transformation,[],[f36873_D])).
fof(f36873_D,plain,(
  ( ! [X123] : (s(bool,'F_0') = s(bool,sK6(X123,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X123)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f36889,plain,(
  ( ! [X136,X137] : (s(bool,'F_0') = s(bool,sK6(X136,bool)) | s(bool,'T_0') != s(bool,X137) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X136)) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36880,f544])).
fof(f36880,plain,(
  ( ! [X136,X137] : (s(bool,'F_0') = s(bool,sK6(X136,bool)) | s(bool,'T_0') != s(bool,X137) | s('type.option.option'(bool),X136) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X136)) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(backward_demodulation,[],[f36874,f18167])).
fof(f36872,plain,(
  ( ! [X122] : (s(bool,X122) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl188),
  inference(cnf_transformation,[],[f36872_D])).
fof(f36872_D,plain,(
  ( ! [X122] : (s(bool,X122) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f36871,plain,(
  ( ! [X123,X122] : (s(bool,'F_0') = s(bool,sK6(X123,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X123) | s(bool,X122) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36843,f1917])).
fof(f36843,plain,(
  ( ! [X123,X122] : (s(bool,'F_0') = s(bool,sK6(X123,bool)) | s('type.option.option'(bool),X123) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X123) | s(bool,X122) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl93 | $spl104)),
  inference(backward_demodulation,[],[f36834,f18635])).
fof(f18635,plain,(
  ( ! [X123,X122] : (s('type.option.option'(bool),X123) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X123,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X122)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X123) | s(bool,X122) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f544,f11477])).
fof(f36831,plain,(
  $false | ($spl0 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36830,f31035])).
fof(f36830,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl0 | $spl104)),
  inference(condensation,[],[f36829])).
fof(f36829,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl104)),
  inference(condensation,[],[f36828])).
fof(f36828,plain,(
  ( ! [X14,X13] : (s(bool,'F_0') = s(bool,X14) | s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X13)) ) | ($spl0 | $spl104)),
  inference(subsumption_resolution,[],[f36786,f1778])).
fof(f36786,plain,(
  ( ! [X14,X13] : (s(bool,X13) != s(bool,X14) | s(bool,'F_0') = s(bool,X14) | s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X13)) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f1778])).
fof(f36827,plain,(
  $false | ($spl0 | $spl93 | $spl104)),
  inference(subsumption_resolution,[],[f36826,f31035])).
fof(f36826,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl0 | $spl104)),
  inference(condensation,[],[f36825])).
fof(f36825,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,f(s(bool,'F_0')))) ) | ($spl0 | $spl104)),
  inference(condensation,[],[f36824])).
fof(f36824,plain,(
  ( ! [X12,X11] : (s(bool,'F_0') = s(bool,X12) | s(bool,'F_0') = s(bool,X11) | s(bool,'F_0') = s(bool,f(s(bool,'F_0')))) ) | ($spl0 | $spl104)),
  inference(subsumption_resolution,[],[f36785,f1778])).
fof(f36785,plain,(
  ( ! [X12,X11] : (s(bool,X11) != s(bool,X12) | s(bool,'F_0') = s(bool,X12) | s(bool,'F_0') = s(bool,X11) | s(bool,'F_0') = s(bool,f(s(bool,'F_0')))) ) | ($spl0 | $spl104)),
  inference(superposition,[],[f31043,f1778])).
fof(f36823,plain,(
  ( ! [X8,X7] : (s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X8)) ) | ($spl98 | $spl104)),
  inference(subsumption_resolution,[],[f36822,f31039])).
fof(f36822,plain,(
  ( ! [X8,X7] : (s(bool,'F_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) ) | $spl104),
  inference(subsumption_resolution,[],[f36783,f146])).
fof(f36783,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) ) | $spl104),
  inference(superposition,[],[f31043,f278])).
fof(f36821,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X2)) ) | ($spl98 | $spl104)),
  inference(subsumption_resolution,[],[f36820,f31039])).
fof(f36820,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl104),
  inference(subsumption_resolution,[],[f36780,f146])).
fof(f36780,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl104),
  inference(superposition,[],[f31043,f278])).
fof(f36370,plain,(
  ( ! [X261] : (s(bool,X261) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X261)) ) | $spl186),
  inference(cnf_transformation,[],[f36370_D])).
fof(f36370_D,plain,(
  ( ! [X261] : (s(bool,X261) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X261)) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f36369,plain,(
  ( ! [X261,X260] : (s(bool,X261) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X261) | s(bool,'T_0') = s(bool,X260)) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35241,f4678])).
fof(f35241,plain,(
  ( ! [X261,X260] : (s(bool,X261) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X261) | s(bool,'T_0') = s(bool,X260) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X260)),bool))) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f4028,f31345])).
fof(f36279,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144 | $spl146)),
  inference(global_subsumption,[],[f36278,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030,f36215,f36219,f36042])).
fof(f36042,plain,(
  ( ! [X265,X267,X268,X266] : (s(bool,X266) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X267),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X267,bool),X268))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X266))) | s('type.option.option'(bool),X265) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X265)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f24228])).
fof(f36219,plain,(
  ( ! [X79] : (s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | ($spl0 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36041,f454])).
fof(f36041,plain,(
  ( ! [X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f21126])).
fof(f36215,plain,(
  ( ! [X37,X36] : (p(s(bool,X37)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) ) | ($spl0 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36033,f35518])).
fof(f36033,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') != s(bool,X37) | p(s(bool,X37)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f18250])).
fof(f36030,plain,(
  ( ! [X118,X116,X117] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X117,bool),X118))) | s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f18208])).
fof(f36210,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36027,f4169])).
fof(f36027,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,'T_0') != s(bool,X172) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f18188])).
fof(f36026,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X134,bool),X135))) | s(bool,'T_0') != s(bool,X133) | s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f18166])).
fof(f36128,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35659])).
fof(f35659,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f15415])).
fof(f36130,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35645])).
fof(f35645,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f3148])).
fof(f36133,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35593])).
fof(f35593,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f15416])).
fof(f36135,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35583])).
fof(f35583,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f3149])).
fof(f36140,plain,(
  ( ! [X606,X609,X607,X608] : (s(fun(X606,bool),X607) = s(fun(X606,bool),X608) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) | s(bool,X609) = s(bool,g(s(X606,sK8(X607,X608,bool,X606))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35541])).
fof(f35541,plain,(
  ( ! [X606,X609,X607,X608] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X606,bool),X607) = s(fun(X606,bool),X608) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) | s(bool,X609) = s(bool,g(s(X606,sK8(X607,X608,bool,X606))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f30201])).
fof(f36141,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35538])).
fof(f35538,plain,(
  ( ! [X887,X885,X890,X888,X886,X889] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X885,bool),X886) = s(fun(X885,bool),X887) | s(bool,X888) = s(bool,'const.bool.IN_2'(s(X889,X890),s(fun(X889,bool),'const.pred_set.EMPTY_0'))) | s(bool,X888) = s(bool,g(s(X885,sK8(X886,X887,bool,X885))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f25795])).
fof(f36154,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl0 | $spl138 | $spl144)),
  inference(condensation,[],[f36153])).
fof(f36153,plain,(
  ( ! [X140,X138,X139,X137] : (s(fun(X137,bool),X138) = s(fun(X137,bool),X139) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,g(s(X137,sK8(X138,X139,bool,X137))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f35525,f146])).
fof(f35525,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,'F_0') != s(bool,X140) | s(fun(X137,bool),X138) = s(fun(X137,bool),X139) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,g(s(X137,sK8(X138,X139,bool,X137))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f1310])).
fof(f36146,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35524])).
fof(f35524,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f876])).
fof(f36149,plain,(
  ( ! [X67] : (s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl124 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f35519,f35518])).
fof(f35519,plain,(
  ( ! [X67] : (s(bool,'F_0') != s(bool,X67) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl124 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f31057])).
fof(f35518,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f35517,f31349])).
fof(f35517,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl138)),
  inference(duplicate_literal_removal,[],[f35516])).
fof(f35516,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl138)),
  inference(condensation,[],[f35515])).
fof(f35515,plain,(
  ( ! [X72,X71,X73] : (s(bool,X72) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,X73) | s(bool,'F_0') = s(bool,X73)) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35138,f2192])).
fof(f35138,plain,(
  ( ! [X72,X71,X73] : (s(bool,X72) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,X73) | s(bool,'F_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X71)) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f2590,f31345])).
fof(f35475,plain,(
  ( ! [X37,X38] : (s(bool,X38) = s(bool,g(s(bool,X37))) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37)))) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35068,f250])).
fof(f35068,plain,(
  ( ! [X37,X38] : (s(bool,X38) = s(bool,g(s(bool,X37))) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f31345,f3984])).
fof(f35474,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,'const.bool.IN_2'(s(X33,X34),s(fun(X33,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35066,f250])).
fof(f35066,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,'const.bool.IN_2'(s(X33,X34),s(fun(X33,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f31345,f3053])).
fof(f35473,plain,(
  ( ! [X28,X27] : (s(bool,X28) = s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,X27)) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35065,f262])).
fof(f35065,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,X28) = s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(X29,X30),s(fun(X29,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X27)) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f31345,f3053])).
fof(f35472,plain,(
  ( ! [X24,X23] : (s(bool,X24) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool))) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35064,f250])).
fof(f35064,plain,(
  ( ! [X24,X23] : (s(bool,X24) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool))) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f31345,f1987])).
fof(f35055,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl138),
  inference(superposition,[],[f31345,f278])).
fof(f35054,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f31345,f8334])).
fof(f36278,plain,(
  ( ! [X337,X336,X338] : (s(fun(X336,bool),X337) = s(fun(X336,bool),X338) | s(bool,'T_0') = s(bool,g(s(X336,sK8(X337,X338,bool,X336))))) ) | ($spl0 | $spl138 | $spl144 | $spl146)),
  inference(subsumption_resolution,[],[f36277,f31351])).
fof(f36277,plain,(
  ( ! [X337,X336,X338] : (s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | s(fun(X336,bool),X337) = s(fun(X336,bool),X338) | s(bool,'T_0') = s(bool,g(s(X336,sK8(X337,X338,bool,X336))))) ) | ($spl0 | $spl138 | $spl144)),
  inference(forward_demodulation,[],[f35280,f35518])).
fof(f36226,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36225,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030,f36215,f36219,f36042])).
fof(f36225,plain,(
  ( ! [X269,X267,X268] : (s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36056,f454])).
fof(f36056,plain,(
  ( ! [X269,X267,X268] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f22536])).
fof(f36224,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36223,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030,f36215,f36219,f36042])).
fof(f36223,plain,(
  ( ! [X177,X175,X176] : (s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36055,f3993])).
fof(f36055,plain,(
  ( ! [X177,X175,X176] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f12755])).
fof(f36221,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030,f36215,f36219,f36042])).
fof(f36220,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030,f36215,f36219])).
fof(f36216,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030,f36215])).
fof(f36214,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36213,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030])).
fof(f36213,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36031,f17278])).
fof(f36031,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X91) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl0 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f18210])).
fof(f36212,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210,f36030])).
fof(f36211,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026,f36210])).
fof(f36209,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128,f36026])).
fof(f36208,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36207,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128])).
fof(f36207,plain,(
  ( ! [X171] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36018,f3993])).
fof(f36018,plain,(
  ( ! [X171] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f12750])).
fof(f36182,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130,f36128])).
fof(f36181,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133,f36130])).
fof(f36172,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135,f36133])).
fof(f36171,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140,f36135])).
fof(f36163,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141,f36140])).
fof(f36162,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154,f36141])).
fof(f36161,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36160,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154])).
fof(f36160,plain,(
  ( ! [X251,X249,X250] : (s(fun(X249,bool),X250) = s(fun(X249,bool),X251)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36159,f454])).
fof(f36159,plain,(
  ( ! [X251,X249,X250] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(fun(X249,bool),X250) = s(fun(X249,bool),X251)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(forward_demodulation,[],[f36142,f35518])).
fof(f36142,plain,(
  ( ! [X251,X249,X250] : (s(fun(X249,bool),X250) = s(fun(X249,bool),X251) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X249,sK8(X250,X251,bool,X249))))))) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35536])).
fof(f35536,plain,(
  ( ! [X251,X249,X250] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X249,bool),X250) = s(fun(X249,bool),X251) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X249,sK8(X250,X251,bool,X249))))))) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f22525])).
fof(f36158,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36157,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154])).
fof(f36157,plain,(
  ( ! [X158,X159,X157] : (s(fun(X157,bool),X158) = s(fun(X157,bool),X159)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f36156,f3993])).
fof(f36156,plain,(
  ( ! [X158,X159,X157] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X157,bool),X158) = s(fun(X157,bool),X159)) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(forward_demodulation,[],[f36143,f35518])).
fof(f36143,plain,(
  ( ! [X158,X159,X157] : (s(fun(X157,bool),X158) = s(fun(X157,bool),X159) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X157,sK8(X158,X159,bool,X157))))),bool))) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35534])).
fof(f35534,plain,(
  ( ! [X158,X159,X157] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X157,bool),X158) = s(fun(X157,bool),X159) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X157,sK8(X158,X159,bool,X157))))),bool))) ) | ($spl0 | $spl12 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f12743])).
fof(f36155,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146,f36154])).
fof(f36152,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149,f36146])).
fof(f36151,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f36147,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149])).
fof(f36147,plain,(
  ( ! [X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl137 | $spl138 | $spl144)),
  inference(trivial_inequality_removal,[],[f35521])).
fof(f35521,plain,(
  ( ! [X23] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl137 | $spl138 | $spl144)),
  inference(backward_demodulation,[],[f35518,f33240])).
fof(f36150,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl138 | $spl144)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21191,f21055,f21195,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f23445,f23446,f23448,f23450,f23453,f23544,f23614,f23617,f23732,f24122,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24347,f24349,f24350,f24356,f24358,f24234,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24385,f24387,f24394,f24396,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24678,f24680,f25993,f26248,f26249,f26260,f26310,f24816,f24817,f24879,f25011,f26491,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25802,f26946,f27482,f28946,f28948,f28950,f28976,f28978,f28979,f28980,f29055,f29195,f29200,f29202,f29203,f29204,f29287,f29295,f29297,f29308,f29309,f29311,f29314,f29316,f29331,f29340,f29342,f29353,f29354,f29356,f29359,f29361,f29440,f29441,f29577,f29579,f29590,f29591,f29593,f29596,f29598,f29685,f29686,f30713,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29835,f29836,f29838,f29841,f29843,f29851,f29854,f29857,f29858,f29859,f29860,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f30758,f29944,f29976,f29987,f29988,f29990,f30777,f30234,f30789,f30068,f30069,f30807,f30176,f30178,f30189,f30190,f30192,f30195,f30197,f30208,f30919,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31442,f31811,f31449,f31458,f32631,f31349,f31345,f29609,f19512,f8223,f3395,f29995,f29993,f25612,f25610,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f31450,f31441,f29606,f24303,f24235,f24233,f24228,f21126,f21067,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f32622,f32514,f29315,f29312,f29310,f29300,f27270,f23444,f19677,f19376,f32620,f32518,f32510,f31813,f31448,f31446,f29360,f29357,f29355,f29345,f27268,f27182,f23442,f23386,f19678,f19620,f19387,f18043,f32517,f27181,f23385,f19616,f3088,f2794,f908,f831,f554,f32516,f29344,f29299,f27180,f23384,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f23679,f15471,f17599,f28911,f23680,f15472,f17600,f28912,f32607,f32606,f32602,f32599,f32459,f32448,f31457,f31418,f31417,f31416,f31414,f31413,f30196,f30193,f30191,f30181,f27123,f27118,f23798,f23438,f23369,f23366,f23365,f23364,f23333,f23328,f21199,f21198,f21197,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f32595,f32593,f32573,f32509,f32444,f31803,f31801,f31800,f31783,f28923,f28873,f28853,f28814,f27229,f27175,f27119,f23740,f23738,f23681,f23678,f23421,f23418,f23379,f23363,f23362,f23329,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f32612,f32610,f32609,f32598,f32588,f32485,f32481,f32461,f32460,f32449,f32445,f30714,f30570,f30207,f30180,f29994,f29991,f29989,f29979,f29978,f29905,f29861,f29853,f29842,f29839,f29837,f29826,f29608,f29597,f29594,f29592,f29582,f29581,f28961,f28953,f28945,f28943,f28936,f28914,f28913,f28910,f28877,f28874,f28856,f28852,f28815,f27260,f27257,f27243,f27242,f27156,f27124,f27120,f26487,f25030,f25027,f23727,f23439,f23434,f23372,f23371,f23361,f23334,f23330,f21609,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f27112,f23322,f19650,f3061,f2767,f990,f966,f27111,f23321,f19649,f3060,f2766,f702,f679,f693,f3105,f2858,f19564,f23325,f32560,f973,f3106,f2859,f19565,f23326,f32561,f32638,f32623,f32594,f32562,f32494,f31906,f31905,f31902,f31851,f31843,f31820,f31700,f31697,f31680,f31587,f31426,f30920,f30818,f29273,f29196,f29056,f28875,f27283,f27271,f27161,f27113,f27110,f24743,f24675,f24214,f24156,f24155,f24153,f24152,f23950,f23615,f23457,f23455,f23327,f23324,f23323,f23320,f23207,f23151,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f18634,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f32554,f30921,f29274,f29197,f29057,f28876,f27214,f24744,f24676,f23951,f23616,f23414,f23208,f23152,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f975,f949,f947,f933,f19700,f976,f31696,f31694,f31643,f24384,f24298,f24288,f24285,f24284,f24281,f21029,f18631,f18167,f13533,f13488,f13487,f13486,f13485,f13479,f13476,f13473,f31057,f30201,f29847,f29602,f25795,f25472,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f35054,f35055,f35472,f35473,f35474,f35475,f35506,f35518,f36149])).
fof(f35506,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'F_0') = s(bool,X54)) ) | ($spl0 | $spl138 | $spl144)),
  inference(subsumption_resolution,[],[f35505,f31349])).
fof(f35505,plain,(
  ( ! [X54,X53] : (s(bool,X54) != s(bool,g(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'F_0') = s(bool,X54)) ) | ($spl0 | $spl138)),
  inference(subsumption_resolution,[],[f35130,f194])).
fof(f35130,plain,(
  ( ! [X54,X53] : (s(bool,X54) != s(bool,g(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'F_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X53)) ) | ($spl0 | $spl138)),
  inference(superposition,[],[f1927,f31345])).
fof(f31346,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl140),
  inference(cnf_transformation,[],[f31346_D])).
fof(f31346_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f33968,plain,(
  ( ! [X27] : (s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl182),
  inference(cnf_transformation,[],[f33968_D])).
fof(f33968_D,plain,(
  ( ! [X27] : (s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f33967,plain,(
  ( ! [X27] : (s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl0 | $spl137)),
  inference(subsumption_resolution,[],[f33131,f7381])).
fof(f33131,plain,(
  ( ! [X27] : (s(bool,'F_0') != s(bool,X27) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f8334])).
fof(f33965,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl141 | $spl148)),
  inference(global_subsumption,[],[f33964,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758,f33945,f33949,f33770])).
fof(f33770,plain,(
  ( ! [X265,X267,X268,X266] : (s(bool,X266) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X267),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X267,bool),X268))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X266))) | s('type.option.option'(bool),X265) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X265)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f24228])).
fof(f33949,plain,(
  ( ! [X79] : (s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | ($spl0 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33769,f454])).
fof(f33769,plain,(
  ( ! [X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),X79) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f21126])).
fof(f33945,plain,(
  ( ! [X37,X36] : (p(s(bool,X37)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) ) | ($spl0 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33761,f33249])).
fof(f33761,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') != s(bool,X37) | p(s(bool,X37)) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f18250])).
fof(f33758,plain,(
  ( ! [X118,X116,X117] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X117,bool),X118))) | s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f18208])).
fof(f33940,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33755,f4169])).
fof(f33755,plain,(
  ( ! [X171,X172] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,'T_0') != s(bool,X172) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f18188])).
fof(f33754,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,X133) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X134,bool),X135))) | s(bool,'T_0') != s(bool,X133) | s('type.option.option'(bool),X132) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f18166])).
fof(f33854,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl0 | $spl137 | $spl148)),
  inference(trivial_inequality_removal,[],[f33389])).
fof(f33389,plain,(
  ( ! [X109,X107,X105,X108,X106] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X106))),s(bool,X107),s(fun(X105,bool),X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f15415])).
fof(f33856,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl137 | $spl148)),
  inference(trivial_inequality_removal,[],[f33375])).
fof(f33375,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f3148])).
fof(f33859,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | ($spl0 | $spl137 | $spl148)),
  inference(trivial_inequality_removal,[],[f33325])).
fof(f33325,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X114) = s(bool,happ(s(fun(fun(X110,bool),bool),happ(s(fun(bool,fun(fun(X110,bool),bool)),happ(s(fun('type.option.option'(X110),fun(bool,fun(fun(X110,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X110),X111))),s(bool,X112))),s(fun(X110,bool),X113))) | s(bool,'T_0') = s(bool,X114)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f15416])).
fof(f33861,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl137 | $spl148)),
  inference(trivial_inequality_removal,[],[f33315])).
fof(f33315,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f3149])).
fof(f33866,plain,(
  ( ! [X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl137 | $spl148)),
  inference(trivial_inequality_removal,[],[f33275])).
fof(f33275,plain,(
  ( ! [X23] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f33240])).
fof(f33270,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f33006])).
fof(f33879,plain,(
  ( ! [X67] : (s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl124 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33268,f33249])).
fof(f33268,plain,(
  ( ! [X67] : (s(bool,'F_0') != s(bool,X67) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl124 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f31057])).
fof(f33874,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) ) | ($spl0 | $spl137 | $spl148)),
  inference(trivial_inequality_removal,[],[f33250])).
fof(f33250,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f876])).
fof(f33249,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4)) ) | ($spl0 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33140,f31352])).
fof(f33140,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) ) | ($spl0 | $spl137)),
  inference(trivial_inequality_removal,[],[f33116])).
fof(f33116,plain,(
  ( ! [X4] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f1778])).
fof(f33237,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,f(s(bool,X13))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | ($spl0 | $spl137)),
  inference(subsumption_resolution,[],[f33101,f250])).
fof(f33101,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,f(s(bool,X13))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | ($spl0 | $spl137)),
  inference(superposition,[],[f31344,f1987])).
fof(f33092,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl137),
  inference(superposition,[],[f31344,f278])).
fof(f33006,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,f(s(bool,'T_0'))),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f250,f208,f31344,f2590])).
fof(f33174,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | ($spl0 | $spl30 | $spl137)),
  inference(forward_demodulation,[],[f33038,f994])).
fof(f33038,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool))),bool)) | ($spl0 | $spl30 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f12035])).
fof(f33077,plain,(
  p(s(bool,f(s(bool,'T_0')))) | $spl137),
  inference(unit_resulting_resolution,[],[f145,f31344,f198])).
fof(f33089,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,'T_0'))))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f145,f31344,f21149])).
fof(f33090,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,'T_0'))))) | $spl137),
  inference(unit_resulting_resolution,[],[f31344,f193])).
fof(f33964,plain,(
  ( ! [X27] : (s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl137 | $spl141 | $spl148)),
  inference(subsumption_resolution,[],[f33963,f33249])).
fof(f33963,plain,(
  ( ! [X27] : (s(bool,'F_0') != s(bool,X27) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33131,f31347])).
fof(f33962,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33961,f31347])).
fof(f33956,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f33955,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758,f33945,f33949,f33770])).
fof(f33955,plain,(
  ( ! [X269,X267,X268] : (s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33782,f454])).
fof(f33782,plain,(
  ( ! [X269,X267,X268] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(X269,f(s(bool,'F_0'))) != s(X269,g(s(bool,'F_0'))) | s(fun(bool,X269),X267) = s(fun(bool,X269),X268)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f22536])).
fof(f33954,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f33953,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758,f33945,f33949,f33770])).
fof(f33953,plain,(
  ( ! [X177,X175,X176] : (s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33781,f3993])).
fof(f33781,plain,(
  ( ! [X177,X175,X176] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f12755])).
fof(f33951,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758,f33945,f33949,f33770])).
fof(f33950,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758,f33945,f33949])).
fof(f33946,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758,f33945])).
fof(f33944,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f33943,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758])).
fof(f33943,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33759,f17278])).
fof(f33759,plain,(
  ( ! [X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X91) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f18210])).
fof(f33942,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940,f33758])).
fof(f33941,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754,f33940])).
fof(f33939,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854,f33754])).
fof(f33938,plain,(
  $false | ($spl0 | $spl12 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f33937,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854])).
fof(f33937,plain,(
  ( ! [X171] : (s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33746,f3993])).
fof(f33746,plain,(
  ( ! [X171] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X171) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X171)) ) | ($spl0 | $spl12 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f12750])).
fof(f33908,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856,f33854])).
fof(f33907,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859,f33856])).
fof(f33899,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861,f33859])).
fof(f33898,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866,f33861])).
fof(f33887,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270,f33866])).
fof(f33886,plain,(
  $false | ($spl0 | $spl30 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33273,f3993])).
fof(f33273,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl30 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f33174])).
fof(f33885,plain,(
  $false | ($spl0 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33272,f454])).
fof(f33272,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f33089])).
fof(f33884,plain,(
  $false | ($spl0 | $spl137 | $spl148)),
  inference(subsumption_resolution,[],[f33271,f145])).
fof(f33271,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl137 | $spl148)),
  inference(backward_demodulation,[],[f33249,f33077])).
fof(f33883,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879,f33270])).
fof(f33882,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148 | $spl168)),
  inference(global_subsumption,[],[f33881,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879])).
fof(f33881,plain,(
  ( ! [X27] : (s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl137 | $spl148 | $spl168)),
  inference(subsumption_resolution,[],[f33269,f33249])).
fof(f33269,plain,(
  ( ! [X27] : (s(bool,'F_0') != s(bool,X27) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl137 | $spl148 | $spl168)),
  inference(backward_demodulation,[],[f33249,f31366])).
fof(f33880,plain,(
  $false | ($spl0 | $spl30 | $spl124 | $spl137 | $spl148)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4169,f4126,f4123,f4072,f4063,f4028,f4025,f3993,f3992,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3674,f3662,f3637,f3604,f3601,f3596,f3595,f3582,f3580,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3456,f3454,f3387,f3386,f3373,f3371,f3240,f3239,f3235,f3151,f3150,f3147,f3116,f3111,f3108,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2864,f2861,f2860,f2832,f2780,f2779,f2775,f2774,f2773,f2759,f2723,f2681,f2635,f2632,f2586,f2284,f2281,f2264,f2262,f2225,f2214,f2191,f2125,f2122,f2116,f2105,f2103,f2033,f1987,f1984,f1931,f1927,f1919,f1917,f1909,f1907,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f906,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f5281,f5311,f5313,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8641,f8801,f8804,f8918,f8919,f9292,f4952,f10865,f10867,f10524,f10479,f10478,f4699,f9250,f8593,f5359,f11355,f11356,f11911,f12024,f12034,f12035,f12885,f13008,f13139,f13140,f13142,f13278,f13413,f13414,f13415,f13418,f13419,f13422,f13424,f13503,f13429,f13431,f13432,f13434,f13518,f13519,f13451,f13452,f13453,f13456,f13457,f13460,f13461,f13462,f13467,f13638,f13639,f13706,f13705,f13703,f13721,f13770,f13771,f14845,f14826,f14928,f14929,f13898,f13899,f14816,f14947,f14948,f13946,f14040,f15050,f15076,f15094,f14134,f15099,f15100,f14272,f14274,f14749,f15209,f15221,f15222,f15236,f14438,f14441,f14445,f14446,f14447,f14449,f14450,f14451,f14452,f14453,f14454,f15270,f14503,f15293,f14634,f14636,f14654,f14657,f15417,f15569,f15572,f15574,f17656,f18228,f18229,f18230,f18231,f17971,f17972,f17993,f18243,f18038,f18054,f18058,f18061,f18062,f18075,f18251,f18255,f18204,f18186,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18604,f18605,f18608,f18609,f18610,f18660,f18661,f18614,f18615,f18616,f18623,f18627,f18628,f18669,f18646,f18648,f18649,f18650,f18684,f18685,f18687,f18789,f18817,f18818,f19296,f19316,f18919,f18920,f18935,f18936,f18972,f19368,f19371,f19373,f19377,f19378,f19379,f19003,f19006,f19382,f19384,f19388,f19389,f19390,f19399,f19401,f19425,f19427,f19440,f19441,f19494,f19146,f19498,f19499,f19500,f19514,f19527,f19528,f19529,f19535,f19541,f19551,f19260,f19552,f19556,f19557,f19558,f19680,f19682,f19684,f19512,f8223,f3395,f15577,f15568,f3530,f3529,f3081,f3079,f2787,f2785,f3077,f2783,f19508,f18647,f18645,f18638,f18637,f18636,f18250,f18249,f18210,f18208,f18201,f18200,f18188,f18166,f18088,f18087,f18073,f18067,f18053,f18052,f18040,f8218,f3392,f18634,f18631,f18167,f13533,f13488,f13479,f19376,f19677,f19678,f19620,f19387,f18043,f19616,f3088,f2794,f908,f831,f554,f19618,f19386,f19375,f18078,f18077,f18060,f18042,f17600,f15472,f17599,f15471,f19674,f19606,f19603,f19602,f19572,f19567,f19465,f17662,f17601,f17598,f6039,f5411,f4915,f3991,f3990,f3988,f3593,f3110,f2863,f2275,f2267,f907,f531,f525,f19658,f19655,f19615,f19601,f19600,f19568,f19497,f18191,f3113,f3112,f3109,f2866,f2865,f2862,f2763,f1912,f1439,f1432,f1174,f1173,f818,f19675,f19670,f19609,f19608,f19599,f19573,f19569,f19555,f19554,f19511,f19496,f19463,f18190,f15579,f15473,f15470,f15098,f7684,f2283,f2266,f2217,f2216,f2124,f2108,f2107,f1930,f1929,f1918,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f3060,f2766,f19649,f990,f966,f3061,f2767,f19650,f693,f3105,f2858,f19564,f973,f3106,f2859,f19565,f19691,f19689,f19687,f19679,f19651,f19648,f19566,f19563,f19460,f19317,f18758,f17962,f15636,f15415,f13694,f13438,f13279,f13195,f13009,f12886,f8920,f8802,f8639,f4124,f4073,f3799,f3269,f3236,f3148,f3104,f3086,f3062,f3059,f2979,f2953,f2869,f2867,f2857,f2845,f2837,f2836,f2834,f2792,f2768,f2765,f2682,f2633,f2592,f2034,f1985,f1905,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f897,f657,f620,f619,f532,f519,f197,f196,f195,f19700,f19318,f17963,f15637,f15416,f13280,f13010,f12887,f8921,f8803,f8640,f4125,f4074,f3270,f3237,f3149,f3100,f2980,f2954,f2802,f2683,f2634,f2035,f1986,f1248,f1218,f1163,f987,f976,f975,f949,f947,f933,f13487,f13486,f13485,f13476,f13473,f19501,f8211,f3597,f3471,f3388,f2277,f2118,f1914,f1441,f1310,f876,f20380,f20405,f20406,f20412,f20498,f20499,f20500,f20501,f20716,f20717,f20718,f21104,f21126,f21133,f21141,f21146,f21147,f21149,f21155,f21161,f21168,f21177,f21029,f21191,f21055,f21195,f21197,f21067,f21198,f21199,f21442,f21443,f21473,f21474,f21475,f21476,f21477,f21478,f21609,f23151,f23152,f23207,f23208,f23320,f23321,f23322,f23323,f23324,f23325,f23326,f23327,f23328,f23329,f23330,f23333,f23334,f23418,f23421,f23434,f23361,f23362,f23363,f23364,f23365,f23366,f23438,f23369,f23371,f23372,f23439,f23379,f23442,f23444,f23384,f23385,f23386,f23445,f23446,f23448,f23450,f23453,f23455,f23457,f23414,f23544,f23614,f23615,f23616,f23617,f23678,f23679,f23680,f23681,f23727,f23732,f23738,f23740,f23798,f23950,f23951,f24122,f24152,f24153,f24155,f24156,f24177,f24178,f24179,f24182,f24183,f24186,f24188,f24322,f24335,f24207,f24210,f24214,f24347,f24349,f24350,f24228,f24356,f24358,f24233,f24234,f24235,f24240,f24241,f24243,f24244,f24245,f24246,f24248,f24249,f24252,f24253,f24256,f24257,f24258,f24366,f24367,f24379,f24277,f24281,f24284,f24285,f24384,f24288,f24385,f24387,f24298,f24394,f24396,f24303,f24304,f24305,f24310,f24449,f24452,f26037,f26035,f26006,f26226,f26240,f24674,f24675,f24676,f24678,f24680,f25993,f26248,f26249,f26260,f24743,f24744,f26310,f24816,f24817,f24879,f25011,f26487,f25027,f26491,f25030,f26492,f26527,f26545,f25102,f25103,f26547,f26552,f25227,f25229,f25240,f25241,f25242,f25245,f25247,f25907,f25906,f26726,f26728,f25901,f25895,f25893,f26740,f26742,f25891,f26747,f26748,f26749,f26751,f25326,f25327,f25889,f26775,f26794,f26795,f26796,f26797,f26799,f26800,f26803,f26804,f26809,f25453,f25464,f25465,f25466,f25469,f25471,f25472,f25476,f25479,f25483,f25484,f25485,f25487,f25491,f25492,f25493,f25494,f25495,f26843,f25503,f25504,f25879,f25564,f25594,f25602,f25605,f25606,f25607,f25610,f25612,f26888,f25678,f25679,f26907,f25774,f25776,f25787,f25788,f25789,f25792,f25794,f25795,f25802,f26946,f27110,f27111,f27112,f27113,f27118,f27119,f27120,f27123,f27124,f27229,f27242,f27243,f27156,f27161,f27257,f27260,f27175,f27268,f27270,f27180,f27181,f27182,f27271,f27283,f27214,f27482,f28910,f28911,f28912,f28913,f28814,f28815,f28914,f28923,f28936,f28852,f28853,f28856,f28943,f28873,f28874,f28875,f28876,f28877,f28945,f28946,f28948,f28950,f28953,f28961,f28976,f28978,f28979,f28980,f29055,f29056,f29057,f29195,f29196,f29197,f29200,f29202,f29203,f29204,f29273,f29274,f29287,f29295,f29297,f29299,f29300,f29308,f29309,f29310,f29311,f29312,f29314,f29315,f29316,f29331,f29340,f29342,f29344,f29345,f29353,f29354,f29355,f29356,f29357,f29359,f29360,f29361,f30570,f29440,f29441,f29577,f29579,f29581,f29582,f29590,f29591,f29592,f29593,f29594,f29596,f29597,f29598,f29602,f29606,f29608,f29609,f29685,f29686,f30713,f30714,f30715,f30716,f30717,f30718,f30719,f30720,f30722,f29824,f29826,f29835,f29836,f29837,f29838,f29839,f29841,f29842,f29843,f29847,f29851,f29853,f29854,f29857,f29858,f29859,f29860,f29861,f29862,f29867,f29868,f29870,f29871,f29872,f29879,f29880,f29882,f29905,f30758,f29944,f29976,f29978,f29979,f29987,f29988,f29989,f29990,f29991,f29993,f29994,f29995,f30777,f30234,f30789,f30068,f30069,f30807,f30818,f30176,f30178,f30180,f30181,f30189,f30190,f30191,f30192,f30193,f30195,f30196,f30197,f30201,f30207,f30208,f30919,f30920,f30921,f30922,f30976,f30978,f30979,f30980,f31006,f31007,f31008,f31009,f31010,f31011,f31012,f31013,f31014,f31015,f31016,f31017,f31018,f31049,f31020,f31021,f31022,f31023,f31024,f31056,f31026,f31057,f31376,f31377,f31378,f31381,f31382,f31385,f31389,f31390,f31391,f31392,f31393,f31394,f31765,f31768,f31783,f31413,f31414,f31416,f31417,f31418,f31426,f31800,f31801,f31803,f31441,f31442,f31811,f31446,f31813,f31448,f31449,f31450,f31457,f31458,f31820,f31843,f31587,f31851,f31643,f31680,f31902,f31694,f31696,f31697,f31905,f31700,f31906,f32560,f32561,f32562,f32444,f32445,f32448,f32449,f32459,f32460,f32461,f32573,f32588,f32481,f32485,f32593,f32594,f32595,f32598,f32599,f32494,f32602,f32606,f32607,f32609,f32610,f32612,f32509,f32510,f32620,f32514,f32622,f32516,f32517,f32518,f32623,f32631,f32638,f32554,f31352,f31344,f33090,f33089,f33077,f33174,f33006,f33091,f33092,f33237,f33238,f33239,f33240,f33249,f33874,f33879])).
fof(f33248,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33247,f31347])).
fof(f33247,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(condensation,[],[f33246])).
fof(f33246,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl137),
  inference(subsumption_resolution,[],[f33114,f146])).
fof(f33114,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl137),
  inference(superposition,[],[f31344,f278])).
fof(f33245,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33244,f31347])).
fof(f33244,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(condensation,[],[f33243])).
fof(f33243,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl137),
  inference(subsumption_resolution,[],[f33113,f146])).
fof(f33113,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl137),
  inference(superposition,[],[f31344,f278])).
fof(f33242,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33141,f31347])).
fof(f33141,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(trivial_inequality_removal,[],[f33111])).
fof(f33111,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(superposition,[],[f31344,f146])).
fof(f33236,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f32966,f31347])).
fof(f32966,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(unit_resulting_resolution,[],[f31344,f146])).
fof(f33228,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f32974,f31347])).
fof(f32974,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f250,f31344,f1778])).
fof(f33227,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f32977,f31347])).
fof(f32977,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f250,f31344,f1778])).
fof(f33224,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33223,f31347])).
fof(f33223,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f32983,f778])).
fof(f32983,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f143,f778,f31344,f2191])).
fof(f33222,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33221,f31347])).
fof(f33221,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f32984,f208])).
fof(f32984,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f143,f208,f31344,f2191])).
fof(f33220,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33219,f31347])).
fof(f33219,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f32985,f994])).
fof(f32985,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f143,f994,f31344,f2191])).
fof(f33214,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33213,f31347])).
fof(f33213,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f32991,f778])).
fof(f32991,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f778,f31344,f2192])).
fof(f33212,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33211,f31347])).
fof(f33211,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f32992,f208])).
fof(f32992,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f208,f31344,f2192])).
fof(f33210,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33209,f31347])).
fof(f33209,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f32993,f994])).
fof(f32993,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f2192])).
fof(f33208,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f32995,f31347])).
fof(f32995,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f145,f250,f31344,f2586])).
fof(f33204,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33203,f31347])).
fof(f33203,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33011,f778])).
fof(f33011,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f778,f250,f31344,f2590])).
fof(f33202,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33201,f31347])).
fof(f33201,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33012,f208])).
fof(f33012,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f208,f250,f31344,f2590])).
fof(f33200,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33199,f31347])).
fof(f33199,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33013,f994])).
fof(f33013,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f250,f31344,f2590])).
fof(f33198,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33197,f31347])).
fof(f33197,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33196,f994])).
fof(f33196,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33020,f778])).
fof(f33020,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f778,f31344,f2635])).
fof(f33195,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33194,f31347])).
fof(f33194,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33193,f994])).
fof(f33193,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33021,f208])).
fof(f33021,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X0,bool),X1)))),bool))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f208,f31344,f2635])).
fof(f33192,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33191,f31347])).
fof(f33191,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33190,f994])).
fof(f33190,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33022,f994])).
fof(f33022,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f2635])).
fof(f33189,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33024,f31347])).
fof(f33024,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f262,f31344,f3053])).
fof(f33186,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33029,f31347])).
fof(f33029,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f3967])).
fof(f33178,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33035,f31347])).
fof(f33035,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f4028])).
fof(f33177,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33176,f31347])).
fof(f33176,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33036,f994])).
fof(f33036,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f31344,f7381])).
fof(f33173,plain,(
  $false | ($spl0 | $spl12 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33041,f31347])).
fof(f33041,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl12 | $spl137)),
  inference(unit_resulting_resolution,[],[f3993,f31344,f12813])).
fof(f33172,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33171,f31347])).
fof(f33171,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33170,f994])).
fof(f33170,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33042,f208])).
fof(f33042,plain,(
  ( ! [X0,X1] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,f(s(bool,'T_0'))),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f208,f31344,f15236])).
fof(f33169,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33168,f31347])).
fof(f33168,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33167,f994])).
fof(f33167,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33043,f994])).
fof(f33043,plain,(
  s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f15236])).
fof(f33165,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33045,f31347])).
fof(f33045,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f19529])).
fof(f33164,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33163,f31347])).
fof(f33163,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33162,f208])).
fof(f33162,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33046,f994])).
fof(f33046,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f208,f31344,f19529])).
fof(f33161,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33160,f31347])).
fof(f33160,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33159,f994])).
fof(f33159,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33047,f994])).
fof(f33047,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f994,f31344,f19529])).
fof(f33158,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33049,f31347])).
fof(f33049,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(unit_resulting_resolution,[],[f250,f31344,f278])).
fof(f33150,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33078,f31347])).
fof(f33078,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(unit_resulting_resolution,[],[f250,f31344,f278])).
fof(f33149,plain,(
  $false | ($spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33079,f31347])).
fof(f33079,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(unit_resulting_resolution,[],[f145,f31344,f313])).
fof(f33148,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33084,f31347])).
fof(f33084,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f145,f250,f31344,f2586])).
fof(f33146,plain,(
  $false | ($spl0 | $spl137 | $spl141)),
  inference(subsumption_resolution,[],[f33145,f31347])).
fof(f33145,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl137)),
  inference(forward_demodulation,[],[f33087,f994])).
fof(f33087,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl137)),
  inference(unit_resulting_resolution,[],[f250,f31344,f8334])).
fof(f32964,plain,(
  $false | ($spl134 | $spl146)),
  inference(subsumption_resolution,[],[f32963,f250])).
fof(f32963,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl134 | $spl146)),
  inference(backward_demodulation,[],[f31342,f31351])).
fof(f31344,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl137),
  inference(cnf_transformation,[],[f31344_D])).
fof(f31344_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl137),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl137])])).
fof(f31351,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl146),
  inference(cnf_transformation,[],[f31351_D])).
fof(f31351_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f32936,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32794,f261])).
fof(f32794,plain,(
  ( ! [X107,X108] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(X107,X108),s(fun(X107,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f26749,f31286])).
fof(f31286,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) | $spl132),
  inference(cnf_transformation,[],[f31286_D])).
fof(f31286_D,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f32926,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl12 | $spl132)),
  inference(forward_demodulation,[],[f32785,f994])).
fof(f32785,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl12 | $spl132)),
  inference(superposition,[],[f17278,f31286])).
fof(f31348,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl142),
  inference(cnf_transformation,[],[f31348_D])).
fof(f31348_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f32925,plain,(
  ( ! [X94] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X94) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X94)) ) | ($spl0 | $spl12 | $spl132)),
  inference(forward_demodulation,[],[f32784,f994])).
fof(f32784,plain,(
  ( ! [X94] : (s(bool,X94) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X94) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl132)),
  inference(superposition,[],[f17276,f31286])).
fof(f31352,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X5)) ) | $spl148),
  inference(cnf_transformation,[],[f31352_D])).
fof(f31352_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X5)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f31342,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl134),
  inference(cnf_transformation,[],[f31342_D])).
fof(f31342_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f32921,plain,(
  ( ! [X90] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X90) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X90)) ) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32780,f994])).
fof(f32780,plain,(
  ( ! [X90] : (s(bool,X90) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X90) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f15236,f31286])).
fof(f31345,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl138),
  inference(cnf_transformation,[],[f31345_D])).
fof(f31345_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f32778,plain,(
  ( ! [X88] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X88) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X88)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f15050,f31286])).
fof(f32833,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X5)) ) | $spl178),
  inference(cnf_transformation,[],[f32833_D])).
fof(f32833_D,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X5)) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f32916,plain,(
  ( ! [X86] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X86) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X86)) ) | ($spl0 | $spl12 | $spl132)),
  inference(forward_demodulation,[],[f32775,f994])).
fof(f32775,plain,(
  ( ! [X86] : (s(bool,X86) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X86) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl132)),
  inference(superposition,[],[f12813,f31286])).
fof(f32832,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl176),
  inference(cnf_transformation,[],[f32832_D])).
fof(f32832_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f32906,plain,(
  ( ! [X75] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X75) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X75)) ) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32766,f994])).
fof(f32766,plain,(
  ( ! [X75] : (s(bool,X75) = s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X75)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f8334,f31286])).
fof(f31347,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl141),
  inference(cnf_transformation,[],[f31347_D])).
fof(f31347_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl141),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl141])])).
fof(f32904,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32764,f994])).
fof(f32764,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl132)),
  inference(superposition,[],[f8329,f31286])).
fof(f32880,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X52) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X52)) ) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32743,f261])).
fof(f32743,plain,(
  ( ! [X54,X52,X53] : (s(bool,X52) = s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(X53,X54),s(fun(X53,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X52)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f3053,f31286])).
fof(f32876,plain,(
  ( ! [X41,X42] : (s(bool,X41) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X42) | s(bool,X41) = s(bool,X42)) ) | $spl180),
  inference(cnf_transformation,[],[f32876_D])).
fof(f32876_D,plain,(
  ( ! [X41,X42] : (s(bool,X41) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X42) | s(bool,X41) = s(bool,X42)) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f32739,plain,(
  ( ! [X41,X42] : (s(bool,X41) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X41) = s(bool,X42) | s(bool,'F_0') = s(bool,X42)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f2590,f31286])).
fof(f31349,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) ) | $spl144),
  inference(cnf_transformation,[],[f31349_D])).
fof(f31349_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f32738,plain,(
  ( ! [X39,X40] : (s(bool,X39) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X39) | s(bool,X40) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X40)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f2590,f31286])).
fof(f32736,plain,(
  ( ! [X36] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X36) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X36)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f2192,f31286])).
fof(f31343,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl136),
  inference(cnf_transformation,[],[f31343_D])).
fof(f31343_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f32727,plain,(
  ( ! [X26] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X26) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X26)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f1778,f31286])).
fof(f32726,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X25)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f1778,f31286])).
fof(f32725,plain,(
  ( ! [X24] : (s(bool,X24) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f1778,f31286])).
fof(f32724,plain,(
  ( ! [X23] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X23) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X23)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f1778,f31286])).
fof(f32711,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl132),
  inference(superposition,[],[f278,f31286])).
fof(f32710,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl132),
  inference(superposition,[],[f278,f31286])).
fof(f32709,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl132),
  inference(superposition,[],[f278,f31286])).
fof(f32708,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl132),
  inference(superposition,[],[f278,f31286])).
fof(f32699,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl132),
  inference(superposition,[],[f146,f31286])).
fof(f32847,plain,(
  ( ! [X29] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X29) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X29)) ) | ($spl0 | $spl12 | $spl132)),
  inference(forward_demodulation,[],[f32697,f994])).
fof(f32697,plain,(
  ( ! [X29] : (s(bool,X29) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X29) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl132)),
  inference(superposition,[],[f31286,f12813])).
fof(f32844,plain,(
  ( ! [X26] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X26) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32694,f994])).
fof(f32694,plain,(
  ( ! [X26] : (s(bool,X26) = s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f31286,f8334])).
fof(f32838,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X16) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl132)),
  inference(forward_demodulation,[],[f32688,f261])).
fof(f32688,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) = s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f31286,f3053])).
fof(f32683,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X7)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f31286,f1778])).
fof(f32682,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X6)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f31286,f1778])).
fof(f32681,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X5) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f31286,f1778])).
fof(f32680,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) ) | ($spl0 | $spl132)),
  inference(superposition,[],[f31286,f1778])).
fof(f32679,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl132),
  inference(superposition,[],[f31286,f278])).
fof(f32678,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl132),
  inference(superposition,[],[f31286,f278])).
fof(f32677,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl132),
  inference(superposition,[],[f31286,f278])).
fof(f32676,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl132),
  inference(superposition,[],[f31286,f278])).
fof(f32675,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl132),
  inference(superposition,[],[f31286,f146])).
fof(f32632,plain,(
  ( ! [X118,X116,X114,X119,X115] : (s(X114,X116) = s(X114,sK7(X116,'const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(fun(X114,bool),X115),s(fun(X118,fun(X114,bool)),X119)),X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116)))))) ) | $spl174),
  inference(cnf_transformation,[],[f32632_D])).
fof(f32632_D,plain,(
  ( ! [X118,X116,X114,X119,X115] : (s(X114,X116) = s(X114,sK7(X116,'const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(fun(X114,bool),X115),s(fun(X118,fun(X114,bool)),X119)),X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116)))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f15571,plain,(
  ( ! [X21] : (~p(s(bool,X21))) ) | $spl44),
  inference(cnf_transformation,[],[f15571_D])).
fof(f15571_D,plain,(
  ( ! [X21] : (~p(s(bool,X21))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f32631,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (~p(s(bool,X117)) | s(X114,X116) = s(X114,sK7(X116,'const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(fun(X114,bool),X115),s(fun(X118,fun(X114,bool)),X119)),X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f32537,f152])).
fof(f32537,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (~p(s(bool,X117)) | s(X114,X116) = s(X114,sK7(X116,'const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(fun(X114,bool),X115),s(fun(X118,fun(X114,bool)),X119)),X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116))))) | s(bool,'F_0') = s(bool,X117)) ) | $spl0),
  inference(superposition,[],[f519,f3984])).
fof(f31371,plain,(
  $false | ($spl90 | $spl102)),
  inference(subsumption_resolution,[],[f31370,f250])).
fof(f31370,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl90 | $spl102)),
  inference(backward_demodulation,[],[f31033,f31042])).
fof(f31369,plain,(
  ( ! [X30] : (s(bool,X30) != s(bool,f(s(bool,'T_0'))) | s(bool,X30) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl172),
  inference(cnf_transformation,[],[f31369_D])).
fof(f31369_D,plain,(
  ( ! [X30] : (s(bool,X30) != s(bool,f(s(bool,'T_0'))) | s(bool,X30) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f31333,plain,(
  ( ! [X30] : (s(bool,X30) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X30) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl133)),
  inference(superposition,[],[f31287,f12813])).
fof(f31368,plain,(
  ( ! [X29] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X29) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X29)) ) | ($spl0 | $spl12 | $spl133)),
  inference(forward_demodulation,[],[f31332,f994])).
fof(f31332,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X29) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl133)),
  inference(superposition,[],[f31287,f12813])).
fof(f31367,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,g(s(bool,'T_0'))) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl170),
  inference(cnf_transformation,[],[f31367_D])).
fof(f31367_D,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,g(s(bool,'T_0'))) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f31331,plain,(
  ( ! [X28] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X28) = s(bool,g(s(bool,'T_0'))) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl133)),
  inference(superposition,[],[f31287,f12813])).
fof(f31366,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,f(s(bool,'T_0'))) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl168),
  inference(cnf_transformation,[],[f31366_D])).
fof(f31366_D,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,f(s(bool,'T_0'))) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f31330,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,f(s(bool,'T_0'))) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f8334])).
fof(f31365,plain,(
  ( ! [X26] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl133)),
  inference(forward_demodulation,[],[f31329,f994])).
fof(f31329,plain,(
  ( ! [X26] : (s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X26)) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f8334])).
fof(f31364,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X25) = s(bool,g(s(bool,'T_0')))) ) | $spl166),
  inference(cnf_transformation,[],[f31364_D])).
fof(f31364_D,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X25) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f31328,plain,(
  ( ! [X25] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X25) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X25) = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f8334])).
fof(f31363,plain,(
  ( ! [X24] : (s(bool,X24) != s(bool,f(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24)))) ) | $spl164),
  inference(cnf_transformation,[],[f31363_D])).
fof(f31363_D,plain,(
  ( ! [X24] : (s(bool,X24) != s(bool,f(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24)))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f31327,plain,(
  ( ! [X24] : (s(bool,X24) != s(bool,f(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f3984])).
fof(f31362,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0'))))) | $spl162),
  inference(cnf_transformation,[],[f31362_D])).
fof(f31362_D,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0'))))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f31326,plain,(
  ( ! [X23] : (s(bool,X23) != s(bool,f(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X23)) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f3984])).
fof(f31360,plain,(
  ( ! [X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,X22) = s(bool,g(s(bool,'T_0')))) ) | $spl160),
  inference(cnf_transformation,[],[f31360_D])).
fof(f31360_D,plain,(
  ( ! [X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,X22) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f31325,plain,(
  ( ! [X22] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,X22) = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f3984])).
fof(f31359,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,f(s(bool,'T_0'))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) | $spl158),
  inference(cnf_transformation,[],[f31359_D])).
fof(f31359_D,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,f(s(bool,'T_0'))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f31324,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,f(s(bool,'T_0'))) | s(bool,X19) = s(bool,'const.bool.IN_2'(s(X20,X21),s(fun(X20,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f3053])).
fof(f31358,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X16) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl133)),
  inference(forward_demodulation,[],[f31323,f261])).
fof(f31323,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) != s(bool,f(s(bool,'T_0'))) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X16)) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f3053])).
fof(f31357,plain,(
  ( ! [X14,X15,X13] : (s(bool,X13) = s(bool,'const.bool.IN_2'(s(X14,X15),s(fun(X14,bool),'const.pred_set.EMPTY_0'))) | s(bool,X13) = s(bool,g(s(bool,'T_0')))) ) | $spl156),
  inference(cnf_transformation,[],[f31357_D])).
fof(f31357_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,X13) = s(bool,'const.bool.IN_2'(s(X14,X15),s(fun(X14,bool),'const.pred_set.EMPTY_0'))) | s(bool,X13) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f31322,plain,(
  ( ! [X14,X15,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X13) = s(bool,'const.bool.IN_2'(s(X14,X15),s(fun(X14,bool),'const.pred_set.EMPTY_0'))) | s(bool,X13) = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f3053])).
fof(f31356,plain,(
  ( ! [X10] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool))) ) | $spl154),
  inference(cnf_transformation,[],[f31356_D])).
fof(f31356_D,plain,(
  ( ! [X10] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f31321,plain,(
  ( ! [X10] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1987])).
fof(f31355,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'T_0')))),bool)) | $spl152),
  inference(cnf_transformation,[],[f31355_D])).
fof(f31355_D,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'T_0')))),bool)) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f31320,plain,(
  ( ! [X9] : (s(bool,X9) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X9) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'T_0')))),bool))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1987])).
fof(f31353,plain,(
  ( ! [X8] : (s(bool,X8) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool))) ) | $spl150),
  inference(cnf_transformation,[],[f31353_D])).
fof(f31353_D,plain,(
  ( ! [X8] : (s(bool,X8) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f31319,plain,(
  ( ! [X8] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X8) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1987])).
fof(f31318,plain,(
  ( ! [X7] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X7)) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1778])).
fof(f31317,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X6)) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1778])).
fof(f31316,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X5) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1778])).
fof(f31315,plain,(
  ( ! [X4] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) ) | ($spl0 | $spl133)),
  inference(superposition,[],[f31287,f1778])).
fof(f31314,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl133),
  inference(superposition,[],[f31287,f278])).
fof(f31313,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl133),
  inference(superposition,[],[f31287,f278])).
fof(f31312,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl133),
  inference(superposition,[],[f31287,f278])).
fof(f31311,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl133),
  inference(superposition,[],[f31287,f278])).
fof(f31310,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl133),
  inference(superposition,[],[f31287,f146])).
fof(f31285,plain,(
  ( ! [X339,X340] : (s(fun(bool,bool),X339) = s(fun(bool,bool),X340)) ) | $spl130),
  inference(cnf_transformation,[],[f31285_D])).
fof(f31285_D,plain,(
  ( ! [X339,X340] : (s(fun(bool,bool),X339) = s(fun(bool,bool),X340)) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f31287,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | $spl133),
  inference(cnf_transformation,[],[f31287_D])).
fof(f31287_D,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) <=> ~$spl133),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl133])])).
fof(f31231,plain,(
  ( ! [X339,X340] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X339) = s(fun(bool,bool),X340)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f31204])).
fof(f31204,plain,(
  ( ! [X339,X340] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X339) = s(fun(bool,bool),X340) | s(fun(bool,bool),X339) = s(fun(bool,bool),X340)) ) | $spl34),
  inference(superposition,[],[f209,f9801])).
fof(f31042,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl102),
  inference(cnf_transformation,[],[f31042_D])).
fof(f31042_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f9801,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,sK8(X5,X6,bool,bool)) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6)) ) | $spl34),
  inference(cnf_transformation,[],[f9801_D])).
fof(f9801_D,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,sK8(X5,X6,bool,bool)) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f31060,plain,(
  ( ! [X76] : (s(bool,X76) != s(bool,f(s(bool,'F_0'))) | s(bool,X76) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl128),
  inference(cnf_transformation,[],[f31060_D])).
fof(f31060_D,plain,(
  ( ! [X76] : (s(bool,X76) != s(bool,f(s(bool,'F_0'))) | s(bool,X76) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f31029,plain,(
  ( ! [X78,X76,X77] : (s(bool,X76) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X77) = s(fun(bool,bool),X78) | s(bool,'T_0') = s(bool,sK8(X77,X78,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X76) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f875,f12813])).
fof(f31043,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X17)) ) | $spl104),
  inference(cnf_transformation,[],[f31043_D])).
fof(f31043_D,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X17)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f31059,plain,(
  ( ! [X74,X75,X73] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X73) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,sK8(X74,X75,bool,bool)) | s(bool,'F_0') = s(bool,X73)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f31028,f994])).
fof(f31028,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,sK8(X74,X75,bool,bool)) | s(bool,'F_0') = s(bool,X73) | s(bool,g(s(bool,'F_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f875,f12813])).
fof(f31058,plain,(
  ( ! [X72] : (s(bool,X72) = s(bool,g(s(bool,'F_0'))) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl126),
  inference(cnf_transformation,[],[f31058_D])).
fof(f31058_D,plain,(
  ( ! [X72] : (s(bool,X72) = s(bool,g(s(bool,'F_0'))) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f31035,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl93),
  inference(cnf_transformation,[],[f31035_D])).
fof(f31035_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl93),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl93])])).
fof(f31027,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X70) = s(fun(bool,bool),X71) | s(bool,'T_0') = s(bool,sK8(X70,X71,bool,bool)) | s(bool,X72) = s(bool,g(s(bool,'F_0'))) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f875,f12813])).
fof(f31033,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl90),
  inference(cnf_transformation,[],[f31033_D])).
fof(f31033_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f31057,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl124),
  inference(cnf_transformation,[],[f31057_D])).
fof(f31057_D,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f31026,plain,(
  ( ! [X68,X69,X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X68) = s(fun(bool,bool),X69) | s(bool,'T_0') = s(bool,sK8(X68,X69,bool,bool)) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f8334])).
fof(f31039,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl98),
  inference(cnf_transformation,[],[f31039_D])).
fof(f31039_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f31056,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X64) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,'T_0') = s(bool,sK8(X65,X66,bool,bool)) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(forward_demodulation,[],[f31025,f994])).
fof(f31025,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,'T_0') = s(bool,sK8(X65,X66,bool,bool)) | s(bool,g(s(bool,'F_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f875,f8334])).
fof(f31055,plain,(
  ( ! [X63] : (s(bool,X63) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) | $spl122),
  inference(cnf_transformation,[],[f31055_D])).
fof(f31055_D,plain,(
  ( ! [X63] : (s(bool,X63) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f31038,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl97),
  inference(cnf_transformation,[],[f31038_D])).
fof(f31038_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f31024,plain,(
  ( ! [X61,X62,X63] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X61) = s(fun(bool,bool),X62) | s(bool,'T_0') = s(bool,sK8(X61,X62,bool,bool)) | s(bool,X63) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f8334])).
fof(f31054,plain,(
  ( ! [X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58)))) ) | $spl120),
  inference(cnf_transformation,[],[f31054_D])).
fof(f31054_D,plain,(
  ( ! [X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58)))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f31023,plain,(
  ( ! [X59,X60,X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,'T_0') = s(bool,sK8(X59,X60,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f3984])).
fof(f31053,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | $spl118),
  inference(cnf_transformation,[],[f31053_D])).
fof(f31053_D,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f31022,plain,(
  ( ! [X57,X56,X55] : (s(bool,X55) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X56) = s(fun(bool,bool),X57) | s(bool,'T_0') = s(bool,sK8(X56,X57,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f875,f3984])).
fof(f31051,plain,(
  ( ! [X54] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X54) = s(bool,g(s(bool,'F_0')))) ) | $spl116),
  inference(cnf_transformation,[],[f31051_D])).
fof(f31051_D,plain,(
  ( ! [X54] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X54) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f31021,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X52) = s(fun(bool,bool),X53) | s(bool,'T_0') = s(bool,sK8(X52,X53,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X54) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f3984])).
fof(f31050,plain,(
  ( ! [X47,X50,X51] : (s(bool,X47) != s(bool,f(s(bool,'F_0'))) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0')))) ) | $spl114),
  inference(cnf_transformation,[],[f31050_D])).
fof(f31050_D,plain,(
  ( ! [X47,X50,X51] : (s(bool,X47) != s(bool,f(s(bool,'F_0'))) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f31020,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s(bool,X47) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X48) = s(fun(bool,bool),X49) | s(bool,'T_0') = s(bool,sK8(X48,X49,bool,bool)) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f3053])).
fof(f31049,plain,(
  ( ! [X43,X44,X42] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X42) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,sK8(X43,X44,bool,bool)) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(forward_demodulation,[],[f31019,f261])).
fof(f31019,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,X42) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,sK8(X43,X44,bool,bool)) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.bool.IN_2'(s(X45,X46),s(fun(X45,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f875,f3053])).
fof(f31048,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) | $spl112),
  inference(cnf_transformation,[],[f31048_D])).
fof(f31048_D,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f31018,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,sK8(X37,X38,bool,bool)) | s(bool,X39) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f3053])).
fof(f31047,plain,(
  ( ! [X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool))) ) | $spl110),
  inference(cnf_transformation,[],[f31047_D])).
fof(f31047_D,plain,(
  ( ! [X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f31017,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X33) = s(fun(bool,bool),X34) | s(bool,'T_0') = s(bool,sK8(X33,X34,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool))) ) | $spl0),
  inference(superposition,[],[f875,f1987])).
fof(f31046,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | $spl108),
  inference(cnf_transformation,[],[f31046_D])).
fof(f31046_D,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f31016,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,'T_0') = s(bool,sK8(X30,X31,bool,bool)) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool))) ) | $spl0),
  inference(superposition,[],[f875,f1987])).
fof(f31044,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl106),
  inference(cnf_transformation,[],[f31044_D])).
fof(f31044_D,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f31015,plain,(
  ( ! [X28,X26,X27] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,sK8(X26,X27,bool,bool)) | s(bool,X28) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f875,f1987])).
fof(f31040,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl100),
  inference(cnf_transformation,[],[f31040_D])).
fof(f31040_D,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f31014,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,'T_0') = s(bool,sK8(X23,X24,bool,bool)) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f875,f1778])).
fof(f31013,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK8(X21,X22,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f875,f1778])).
fof(f31012,plain,(
  ( ! [X19,X17,X18] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,'T_0') = s(bool,sK8(X18,X19,bool,bool)) | s(bool,'F_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f875,f1778])).
fof(f31011,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,sK8(X14,X15,bool,bool)) | s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f875,f1778])).
fof(f31036,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl94),
  inference(cnf_transformation,[],[f31036_D])).
fof(f31036_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f31010,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK8(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f875,f278])).
fof(f31009,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK8(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f875,f278])).
fof(f31008,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK8(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f875,f278])).
fof(f31007,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK8(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f875,f278])).
fof(f31006,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f875,f146])).
fof(f28947,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool))) ) | $spl88),
  inference(cnf_transformation,[],[f28947_D])).
fof(f28947_D,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f28950,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32))) | ~p(s(bool,X33)) | p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X31,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f28949,f994])).
fof(f28949,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X31,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f28889,f152])).
fof(f28889,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X31,bool)) | s(bool,'F_0') = s(bool,X33) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))),bool))) ) | $spl0),
  inference(superposition,[],[f617,f1987])).
fof(f28948,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X23,X22,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28886,f152])).
fof(f28886,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X23,X22,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23))) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f617,f1778])).
fof(f28946,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28885,f152])).
fof(f28885,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool)) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(superposition,[],[f617,f1778])).
fof(f9249,plain,(
  ( ! [X39] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool))) ) | $spl28),
  inference(cnf_transformation,[],[f9249_D])).
fof(f9249_D,plain,(
  ( ! [X39] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f27483,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) | $spl86),
  inference(cnf_transformation,[],[f27483_D])).
fof(f27483_D,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f27482,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool)) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f27313,f3992])).
fof(f27313,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool)) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f26310,f3053])).
fof(f26857,plain,(
  ( ! [X246,X244,X242,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) | s(bool,X242) = s(bool,X244) | s(bool,X244) = s(bool,'const.bool.IN_2'(s(X245,X246),s(fun(X245,bool),'const.pred_set.EMPTY_0')))) ) | $spl84),
  inference(cnf_transformation,[],[f26857_D])).
fof(f26857_D,plain,(
  ( ! [X246,X244,X242,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) | s(bool,X242) = s(bool,X244) | s(bool,X244) = s(bool,'const.bool.IN_2'(s(X245,X246),s(fun(X245,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f25879,plain,(
  ( ! [X243,X246,X244,X242,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) | s(bool,'F_0') = s(bool,X243) | s(bool,X244) = s(bool,'const.bool.IN_2'(s(X245,X246),s(fun(X245,bool),'const.pred_set.EMPTY_0'))) | s(bool,X242) = s(bool,X244)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25530])).
fof(f25530,plain,(
  ( ! [X243,X246,X244,X242,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) | s(bool,'F_0') = s(bool,X243) | s(bool,'F_0') = s(bool,X243) | s(bool,X244) = s(bool,'const.bool.IN_2'(s(X245,X246),s(fun(X245,bool),'const.pred_set.EMPTY_0'))) | s(bool,X242) = s(bool,X244)) ) | $spl0),
  inference(superposition,[],[f1909,f3053])).
fof(f26727,plain,(
  ( ! [X99,X97,X100,X98] : (s(bool,X97) != s(bool,X98) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X98)) ) | $spl72),
  inference(cnf_transformation,[],[f26727_D])).
fof(f26727_D,plain,(
  ( ! [X99,X97,X100,X98] : (s(bool,X97) != s(bool,X98) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X98)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f26780,plain,(
  ( ! [X445,X447,X449,X446,X448] : (s(bool,'F_0') = s(bool,X445) | s(bool,X446) != s(bool,X447) | s(bool,'T_0') = s(bool,X447) | s(bool,X446) = s(bool,'const.bool.IN_2'(s(X448,X449),s(fun(X448,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f26779,f994])).
fof(f26779,plain,(
  ( ! [X445,X447,X449,X446,X448] : (s(bool,X446) != s(bool,X447) | s(bool,'T_0') = s(bool,X447) | s(bool,X445) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X446) = s(bool,'const.bool.IN_2'(s(X448,X449),s(fun(X448,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f25348,f17278])).
fof(f25348,plain,(
  ( ! [X445,X447,X449,X446,X448] : (s(bool,X446) != s(bool,X447) | s(bool,'T_0') = s(bool,X447) | s(bool,X445) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X446) = s(bool,'const.bool.IN_2'(s(X448,X449),s(fun(X448,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X445)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f17276,f3053])).
fof(f26775,plain,(
  ( ! [X420,X422,X424,X421,X423] : (s(bool,'T_0') = s(bool,X422) | s(bool,X421) != s(bool,X422) | s(bool,'F_0') = s(bool,X420) | s(bool,X421) = s(bool,'const.bool.IN_2'(s(X423,X424),s(fun(X423,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f25887,f994])).
fof(f25887,plain,(
  ( ! [X420,X422,X424,X421,X423] : (s(bool,X421) != s(bool,X422) | s(bool,'F_0') = s(bool,X420) | s(bool,X422) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X421) = s(bool,'const.bool.IN_2'(s(X423,X424),s(fun(X423,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25343])).
fof(f25343,plain,(
  ( ! [X420,X422,X424,X421,X423] : (s(bool,X421) != s(bool,X422) | s(bool,'F_0') = s(bool,X420) | s(bool,X422) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X421) = s(bool,'const.bool.IN_2'(s(X423,X424),s(fun(X423,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X420)) ) | $spl0),
  inference(superposition,[],[f15236,f3053])).
fof(f26770,plain,(
  ( ! [X379,X380,X378,X381] : (s(bool,X378) != s(bool,X379) | s(bool,X378) = s(bool,'const.bool.IN_2'(s(X380,X381),s(fun(X380,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X379)),bool))) ) | $spl82),
  inference(cnf_transformation,[],[f26770_D])).
fof(f26770_D,plain,(
  ( ! [X379,X380,X378,X381] : (s(bool,X378) != s(bool,X379) | s(bool,X378) = s(bool,'const.bool.IN_2'(s(X380,X381),s(fun(X380,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X379)),bool))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f25889,plain,(
  ( ! [X377,X379,X380,X378,X381] : (s(bool,X378) != s(bool,X379) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X379)),bool)) | s(bool,'F_0') = s(bool,X377) | s(bool,X378) = s(bool,'const.bool.IN_2'(s(X380,X381),s(fun(X380,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl30)),
  inference(duplicate_literal_removal,[],[f25334])).
fof(f25334,plain,(
  ( ! [X377,X379,X380,X378,X381] : (s(bool,X378) != s(bool,X379) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X379)),bool)) | s(bool,'F_0') = s(bool,X377) | s(bool,X378) = s(bool,'const.bool.IN_2'(s(X380,X381),s(fun(X380,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X377)) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f12035,f3053])).
fof(f26170,plain,(
  ( ! [X125,X123,X126] : (s(bool,X123) = s(bool,'const.bool.IN_2'(s(X125,X126),s(fun(X125,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) | $spl66),
  inference(cnf_transformation,[],[f26170_D])).
fof(f26170_D,plain,(
  ( ! [X125,X123,X126] : (s(bool,X123) = s(bool,'const.bool.IN_2'(s(X125,X126),s(fun(X125,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f26767,plain,(
  ( ! [X366,X368,X365,X367] : (s(bool,'F_0') = s(bool,X365) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X366)),bool)) | s(bool,X366) = s(bool,'const.bool.IN_2'(s(X367,X368),s(fun(X367,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f26766,f994])).
fof(f26766,plain,(
  ( ! [X366,X368,X365,X367] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X366)),bool)) | s(bool,X365) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X366) = s(bool,'const.bool.IN_2'(s(X367,X368),s(fun(X367,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f25331,f17278])).
fof(f25331,plain,(
  ( ! [X366,X368,X365,X367] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X366)),bool)) | s(bool,X365) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X366) = s(bool,'const.bool.IN_2'(s(X367,X368),s(fun(X367,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X365)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f11477,f3053])).
fof(f26751,plain,(
  ( ! [X273,X275,X276,X272,X274] : (s(bool,X273) != s(bool,X274) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X272)),bool)) | s(bool,'T_0') = s(bool,X274) | s(bool,X273) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25311,f3992])).
fof(f25311,plain,(
  ( ! [X273,X275,X276,X272,X274] : (s(bool,X273) != s(bool,X274) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X272)),bool)) | s(bool,'T_0') = s(bool,X274) | s(bool,X273) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X272)) ) | $spl0),
  inference(superposition,[],[f4952,f3053])).
fof(f26730,plain,(
  ( ! [X105,X102,X104] : (s(bool,'F_0') != s(bool,X102) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X104,X105),s(fun(X104,bool),'const.pred_set.EMPTY_0')))) ) | $spl76),
  inference(cnf_transformation,[],[f26730_D])).
fof(f26730_D,plain,(
  ( ! [X105,X102,X104] : (s(bool,'F_0') != s(bool,X102) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X104,X105),s(fun(X104,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f26747,plain,(
  ( ! [X255,X253,X254,X256] : (s(bool,'F_0') != s(bool,X254) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool)) | s(bool,X254) = s(bool,'const.bool.IN_2'(s(X255,X256),s(fun(X255,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f26746,f994])).
fof(f26746,plain,(
  ( ! [X255,X253,X254,X256] : (s(bool,X254) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool)) | s(bool,X254) = s(bool,'const.bool.IN_2'(s(X255,X256),s(fun(X255,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25307,f3992])).
fof(f25307,plain,(
  ( ! [X255,X253,X254,X256] : (s(bool,X254) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool)) | s(bool,X254) = s(bool,'const.bool.IN_2'(s(X255,X256),s(fun(X255,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X253)) ) | $spl0),
  inference(superposition,[],[f4063,f3053])).
fof(f26745,plain,(
  ( ! [X251,X249,X252,X250] : (s(bool,X249) != s(bool,sK6('const.option.SOME_1'(s(bool,X250)),bool)) | s(bool,X249) = s(bool,'const.bool.IN_2'(s(X251,X252),s(fun(X251,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X250)) ) | $spl80),
  inference(cnf_transformation,[],[f26745_D])).
fof(f26745_D,plain,(
  ( ! [X251,X249,X252,X250] : (s(bool,X249) != s(bool,sK6('const.option.SOME_1'(s(bool,X250)),bool)) | s(bool,X249) = s(bool,'const.bool.IN_2'(s(X251,X252),s(fun(X251,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X250)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f25891,plain,(
  ( ! [X251,X249,X252,X250,X248] : (s(bool,X249) != s(bool,sK6('const.option.SOME_1'(s(bool,X250)),bool)) | s(bool,'F_0') = s(bool,X248) | s(bool,'T_0') = s(bool,X250) | s(bool,X249) = s(bool,'const.bool.IN_2'(s(X251,X252),s(fun(X251,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25306])).
fof(f25306,plain,(
  ( ! [X251,X249,X252,X250,X248] : (s(bool,X249) != s(bool,sK6('const.option.SOME_1'(s(bool,X250)),bool)) | s(bool,'F_0') = s(bool,X248) | s(bool,'T_0') = s(bool,X250) | s(bool,X249) = s(bool,'const.bool.IN_2'(s(X251,X252),s(fun(X251,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X248)) ) | $spl0),
  inference(superposition,[],[f4028,f3053])).
fof(f26742,plain,(
  ( ! [X241,X239,X242,X240] : (s(bool,'F_0') != s(bool,X240) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X239)),bool)) | s(bool,X240) = s(bool,'const.bool.IN_2'(s(X241,X242),s(fun(X241,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25304,f3992])).
fof(f25304,plain,(
  ( ! [X241,X239,X242,X240] : (s(bool,'F_0') != s(bool,X240) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X239)),bool)) | s(bool,X240) = s(bool,'const.bool.IN_2'(s(X241,X242),s(fun(X241,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X239)) ) | $spl0),
  inference(superposition,[],[f3992,f3053])).
fof(f26740,plain,(
  ( ! [X229,X227,X228,X226] : (s(bool,'F_0') != s(bool,X227) | s(bool,'F_0') = s(bool,X226) | s(bool,X227) = s(bool,'const.bool.IN_2'(s(X228,X229),s(fun(X228,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f25892,f994])).
fof(f25892,plain,(
  ( ! [X229,X227,X228,X226] : (s(bool,X227) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X226) | s(bool,X227) = s(bool,'const.bool.IN_2'(s(X228,X229),s(fun(X228,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25301])).
fof(f25301,plain,(
  ( ! [X229,X227,X228,X226] : (s(bool,X227) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X226) | s(bool,X227) = s(bool,'const.bool.IN_2'(s(X228,X229),s(fun(X228,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X226)) ) | $spl0),
  inference(superposition,[],[f3674,f3053])).
fof(f26731,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X141) != s(bool,X142) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(X143,X144),s(fun(X143,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142)))) ) | $spl78),
  inference(cnf_transformation,[],[f26731_D])).
fof(f26731_D,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X141) != s(bool,X142) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(X143,X144),s(fun(X143,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f25901,plain,(
  ( ! [X144,X142,X140,X143,X141] : (s(bool,X141) != s(bool,X142) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,'F_0') = s(bool,X140) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(X143,X144),s(fun(X143,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25285])).
fof(f25285,plain,(
  ( ! [X144,X142,X140,X143,X141] : (s(bool,X141) != s(bool,X142) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,'F_0') = s(bool,X140) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(X143,X144),s(fun(X143,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X140)) ) | $spl0),
  inference(superposition,[],[f1927,f3053])).
fof(f26729,plain,(
  ( ! [X103,X101] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X103)) ) | $spl74),
  inference(cnf_transformation,[],[f26729_D])).
fof(f26729_D,plain,(
  ( ! [X103,X101] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X103)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f26728,plain,(
  ( ! [X103,X101,X105,X102,X104] : (s(bool,'F_0') != s(bool,X102) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X103) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X104,X105),s(fun(X104,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25277,f480])).
fof(f25277,plain,(
  ( ! [X103,X101,X105,X102,X104] : (s(bool,'F_0') != s(bool,X102) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X103) | s(bool,X102) = s(bool,'const.bool.IN_2'(s(X104,X105),s(fun(X104,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X101)) ) | $spl0),
  inference(superposition,[],[f480,f3053])).
fof(f4179,plain,(
  ( ! [X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | $spl20),
  inference(cnf_transformation,[],[f4179_D])).
fof(f4179_D,plain,(
  ( ! [X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f26726,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,X97) != s(bool,X98) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,'T_0') = s(bool,X98) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f25276,f194])).
fof(f25276,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,X97) != s(bool,X98) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,'T_0') = s(bool,X98) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X96)) ) | $spl0),
  inference(superposition,[],[f479,f3053])).
fof(f26724,plain,(
  ( ! [X85,X83,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X84,X85),s(fun(X84,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X83)) ) | $spl70),
  inference(cnf_transformation,[],[f26724_D])).
fof(f26724_D,plain,(
  ( ! [X85,X83,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X84,X85),s(fun(X84,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X83)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f25906,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,'F_0') = s(bool,X81) | s(bool,'T_0') = s(bool,X83) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X84,X85),s(fun(X84,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25273])).
fof(f25273,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,'F_0') = s(bool,X81) | s(bool,'T_0') = s(bool,X83) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X84,X85),s(fun(X84,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f441,f3053])).
fof(f26528,plain,(
  ( ! [X280,X282,X277,X279,X281] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X279),'const.option.NONE_0'),s(bool,X277),s(fun(X279,bool),X280))) | s(bool,X277) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0')))) ) | $spl68),
  inference(cnf_transformation,[],[f26528_D])).
fof(f26528_D,plain,(
  ( ! [X280,X282,X277,X279,X281] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X279),'const.option.NONE_0'),s(bool,X277),s(fun(X279,bool),X280))) | s(bool,X277) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f25907,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X71),s(fun(X72,bool),X73))) | s(bool,'F_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.bool.IN_2'(s(X74,X75),s(fun(X74,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25271])).
fof(f25271,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X71),s(fun(X72,bool),X73))) | s(bool,'F_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.bool.IN_2'(s(X74,X75),s(fun(X74,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f368,f3053])).
fof(f26552,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl30)),
  inference(condensation,[],[f26551])).
fof(f26551,plain,(
  ( ! [X383,X385,X382,X384,X386] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X382)),bool)) | s(bool,'F_0') = s(bool,X384) | s(bool,X382) = s(bool,'const.bool.IN_2'(s(X385,X386),s(fun(X385,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X383)) ) | ($spl0 | $spl30)),
  inference(subsumption_resolution,[],[f25111,f1778])).
fof(f25111,plain,(
  ( ! [X383,X385,X382,X384,X386] : (s(bool,X383) != s(bool,X384) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X382)),bool)) | s(bool,'F_0') = s(bool,X384) | s(bool,X382) = s(bool,'const.bool.IN_2'(s(X385,X386),s(fun(X385,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X383)) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f12035,f3053])).
fof(f26549,plain,(
  ( ! [X372,X370,X369,X371] : (s(bool,'F_0') = s(bool,X370) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X369)),bool)) | s(bool,X369) = s(bool,'const.bool.IN_2'(s(X371,X372),s(fun(X371,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f26548,f994])).
fof(f26548,plain,(
  ( ! [X372,X370,X369,X371] : (s(bool,X370) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X369)),bool)) | s(bool,X369) = s(bool,'const.bool.IN_2'(s(X371,X372),s(fun(X371,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f25108,f17278])).
fof(f25108,plain,(
  ( ! [X372,X370,X369,X371] : (s(bool,X370) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X369)),bool)) | s(bool,X369) = s(bool,'const.bool.IN_2'(s(X371,X372),s(fun(X371,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X370)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f11477,f3053])).
fof(f26547,plain,(
  ( ! [X364,X362,X361,X363] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X361)),bool)) | s(bool,X361) = s(bool,'const.bool.IN_2'(s(X363,X364),s(fun(X363,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X362)) ) | ($spl0 | $spl30)),
  inference(subsumption_resolution,[],[f25106,f7381])).
fof(f25106,plain,(
  ( ! [X364,X362,X361,X363] : (s(bool,X362) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X361)),bool)) | s(bool,X361) = s(bool,'const.bool.IN_2'(s(X363,X364),s(fun(X363,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X362)) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f11355,f3053])).
fof(f26545,plain,(
  ( ! [X335,X337,X336,X338] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X335)),bool)) | s(bool,X335) = s(bool,'const.bool.IN_2'(s(X337,X338),s(fun(X337,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X336)) ) | $spl0),
  inference(subsumption_resolution,[],[f25101,f146])).
fof(f25101,plain,(
  ( ! [X335,X337,X336,X338] : (s(bool,'T_0') != s(bool,X336) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X335)),bool)) | s(bool,X335) = s(bool,'const.bool.IN_2'(s(X337,X338),s(fun(X337,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X336)) ) | $spl0),
  inference(superposition,[],[f8593,f3053])).
fof(f26527,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X279),'const.option.NONE_0'),s(bool,X277),s(fun(X279,bool),X280))) | s(bool,X277) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X278)) ) | $spl0),
  inference(subsumption_resolution,[],[f25088,f146])).
fof(f25088,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (s(bool,'T_0') != s(bool,X278) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X279),'const.option.NONE_0'),s(bool,X277),s(fun(X279,bool),X280))) | s(bool,X277) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X278)) ) | $spl0),
  inference(superposition,[],[f5281,f3053])).
fof(f26161,plain,(
  ( ! [X70,X68,X66,X72,X71,X69] : (s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0')))) ) | $spl64),
  inference(cnf_transformation,[],[f26161_D])).
fof(f26161_D,plain,(
  ( ! [X70,X68,X66,X72,X71,X69] : (s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f25993,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.bool.IN_2'(s(X55,X56),s(fun(X55,bool),'const.pred_set.EMPTY_0'))) | s(bool,X52) = s(bool,X54) | s(bool,X52) = s(bool,'const.bool.IN_2'(s(X57,X58),s(fun(X57,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f24714])).
fof(f24714,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.bool.IN_2'(s(X55,X56),s(fun(X55,bool),'const.pred_set.EMPTY_0'))) | s(bool,X52) = s(bool,X54) | s(bool,X52) = s(bool,'const.bool.IN_2'(s(X57,X58),s(fun(X57,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f3053,f3053])).
fof(f26006,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X81) = s(bool,X82) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X83,X84),s(fun(X83,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X80) | s(bool,X81) = s(bool,'const.bool.IN_2'(s(X85,X86),s(fun(X85,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f24631])).
fof(f24631,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X81) = s(bool,X82) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X83,X84),s(fun(X83,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X80) | s(bool,X81) = s(bool,'const.bool.IN_2'(s(X85,X86),s(fun(X85,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X80)) ) | $spl0),
  inference(superposition,[],[f3053,f3053])).
fof(f26169,plain,(
  ( ! [X125,X123,X126,X124] : (s(bool,'F_0') = s(bool,X124) | s(bool,X123) = s(bool,'const.bool.IN_2'(s(X125,X126),s(fun(X125,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f26168,f994])).
fof(f26168,plain,(
  ( ! [X125,X123,X126,X124] : (s(bool,X124) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X123) = s(bool,'const.bool.IN_2'(s(X125,X126),s(fun(X125,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f24578,f17278])).
fof(f24578,plain,(
  ( ! [X125,X123,X126,X124] : (s(bool,X124) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X123) = s(bool,'const.bool.IN_2'(s(X125,X126),s(fun(X125,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X124) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3053,f11477])).
fof(f26035,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f24567])).
fof(f24567,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X67) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f3053,f3053])).
fof(f24033,plain,(
  ( ! [X68,X67] : (s(bool,X67) != s(bool,X68) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68)))) ) | $spl62),
  inference(cnf_transformation,[],[f24033_D])).
fof(f24033_D,plain,(
  ( ! [X68,X67] : (s(bool,X67) != s(bool,X68) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f24011,plain,(
  ( ! [X68,X66,X67] : (s(bool,X67) != s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) | s(bool,'F_0') = s(bool,X66) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(duplicate_literal_removal,[],[f23921])).
fof(f23921,plain,(
  ( ! [X68,X66,X67] : (s(bool,X67) != s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) | s(bool,'F_0') = s(bool,X66) | s(bool,'F_0') = s(bool,X66) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f1927,f12813])).
fof(f23447,plain,(
  ( ! [X28,X26,X27] : (s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl60),
  inference(cnf_transformation,[],[f23447_D])).
fof(f23447_D,plain,(
  ( ! [X28,X26,X27] : (s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f23450,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44))) | ~p(s(bool,X45)) | s(X42,sK7(X44,X43,X42)) = s(X42,sK7(sK7(X44,X43,X42),X43,X42))) ) | $spl0),
  inference(forward_demodulation,[],[f23449,f994])).
fof(f23449,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X45)) | s(X42,sK7(X44,X43,X42)) = s(X42,sK7(sK7(X44,X43,X42),X43,X42)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f23398,f152])).
fof(f23398,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X45)) | s(X42,sK7(X44,X43,X42)) = s(X42,sK7(sK7(X44,X43,X42),X43,X42)) | s(bool,'F_0') = s(bool,X45) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))),bool))) ) | $spl0),
  inference(superposition,[],[f2867,f1987])).
fof(f23448,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(X30,sK7(X32,X31,X30)) = s(X30,sK7(sK7(X32,X31,X30),X31,X30)) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl0),
  inference(subsumption_resolution,[],[f23395,f152])).
fof(f23395,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(X30,sK7(X32,X31,X30)) = s(X30,sK7(sK7(X32,X31,X30),X31,X30)) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s(bool,'F_0') = s(bool,X33)) ) | $spl0),
  inference(superposition,[],[f2867,f1778])).
fof(f23446,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(subsumption_resolution,[],[f23394,f152])).
fof(f23394,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(superposition,[],[f2867,f1778])).
fof(f20220,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19714,f15571])).
fof(f19714,plain,(
  p(s(bool,'F_0')) | $spl44),
  inference(unit_resulting_resolution,[],[f250,f15571,f198])).
fof(f20219,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19716,f15571])).
fof(f19716,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl44),
  inference(unit_resulting_resolution,[],[f262,f15571,f198])).
fof(f20218,plain,(
  $false | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f19718,f15571])).
fof(f19718,plain,(
  p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f3993,f15571,f198])).
fof(f20217,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19728,f15571])).
fof(f19728,plain,(
  p(s(bool,'F_0')) | $spl44),
  inference(unit_resulting_resolution,[],[f250,f15571,f198])).
fof(f20216,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19730,f15571])).
fof(f19730,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl44),
  inference(unit_resulting_resolution,[],[f262,f15571,f198])).
fof(f20215,plain,(
  $false | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f19732,f15571])).
fof(f19732,plain,(
  p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f3993,f15571,f198])).
fof(f20207,plain,(
  ( ! [X118,X120,X119] : (s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | $spl56),
  inference(cnf_transformation,[],[f20207_D])).
fof(f20207_D,plain,(
  ( ! [X118,X120,X119] : (s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f20208,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X122,bool),X123)))) ) | $spl58),
  inference(cnf_transformation,[],[f20208_D])).
fof(f20208_D,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X122,bool),X123)))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f20206,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X122,bool),X123))) | s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | ($spl0 | $spl44)),
  inference(forward_demodulation,[],[f20205,f994])).
fof(f20205,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X122,bool),X123))) | s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f19968,f20149])).
fof(f20149,plain,(
  ( ! [X148] : (s(bool,'F_0') = s(bool,X148)) ) | ($spl0 | $spl44)),
  inference(global_subsumption,[],[f20148,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4169,f4126,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2759,f2723,f2681,f1761,f1192,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f10479,f10478,f554,f831,f531,f525,f2763,f1432,f1173,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f990,f966,f702,f679,f693,f973,f4124,f2682,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f657,f620,f619,f532,f519,f197,f196,f195,f4125,f2683,f1248,f1218,f1163,f976,f975,f949,f933,f1441,f1310,f876,f3148,f2979,f2953,f3149,f2980,f2954,f13706,f15470,f15471,f15472,f15473,f15568,f17598,f17599,f17600,f17601,f17656,f18228,f18229,f18230,f18231,f17993,f18243,f18038,f18040,f18042,f18043,f18054,f18058,f18060,f18061,f18062,f18067,f18073,f18075,f18077,f18078,f18249,f18250,f18251,f18204,f18186,f18188,f18190,f18191,f18654,f18655,f18656,f18657,f18658,f18659,f18595,f18596,f18597,f18598,f18600,f18601,f18631,f18645,f18646,f18647,f18648,f18649,f18650,f19648,f19649,f19650,f19651,f19563,f19564,f19565,f19566,f19567,f19568,f19569,f19599,f19600,f19602,f19615,f19616,f19618,f19620,f19679,f19700,f15571])).
fof(f20148,plain,(
  ( ! [X146,X147,X145,X148] : (s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK8(X146,X147,bool,X145)))) | s(bool,'F_0') = s(bool,X148)) ) | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f19867,f19780])).
fof(f19780,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f3993,f250,f15571,f2586])).
fof(f19867,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK8(X146,X147,bool,X145)))) | s(bool,'F_0') = s(bool,X148)) ) | ($spl0 | $spl44)),
  inference(backward_demodulation,[],[f19780,f2277])).
fof(f19968,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X122,bool),X123))) | s(bool,'F_0') != s(bool,X121) | s(X118,X120) = s(X118,sK7(X120,X119,X118))) ) | ($spl0 | $spl44)),
  inference(backward_demodulation,[],[f19780,f13438])).
fof(f19781,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f3993,f3993,f250,f15571,f2586])).
fof(f19779,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f262,f262,f250,f15571,f2586])).
fof(f19777,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f250,f250,f250,f15571,f2586])).
fof(f19761,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f3993,f3993,f15571,f313])).
fof(f19759,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f262,f262,f15571,f313])).
fof(f19757,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f250,f250,f15571,f313])).
fof(f19743,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f143,f994,f15571,f203])).
fof(f19739,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f143,f208,f15571,f203])).
fof(f19736,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f143,f778,f15571,f203])).
fof(f19733,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15571,f3993,f15571,f198])).
fof(f19731,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15571,f262,f15571,f198])).
fof(f19729,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f145,f250,f15571,f198])).
fof(f19727,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15571,f3993,f15571,f198])).
fof(f19725,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15571,f262,f15571,f198])).
fof(f19723,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15571,f250,f15571,f198])).
fof(f19719,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15571,f3993,f15571,f198])).
fof(f19717,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15571,f262,f15571,f198])).
fof(f19715,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f145,f250,f15571,f198])).
fof(f19713,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15571,f3993,f15571,f198])).
fof(f19711,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15571,f262,f15571,f198])).
fof(f19709,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15571,f250,f15571,f198])).
fof(f19705,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f250,f15571,f153])).
fof(f19703,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f778,f15571,f148])).
fof(f19701,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f143,f15571])).
fof(f19681,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl54),
  inference(cnf_transformation,[],[f19681_D])).
fof(f19681_D,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f19684,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44))) | ~p(s(bool,X45)) | s(bool,'T_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,sK7(X44,X43,X42))))) ) | $spl0),
  inference(forward_demodulation,[],[f19683,f994])).
fof(f19683,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X45)) | s(bool,'T_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,sK7(X44,X43,X42)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f19632,f152])).
fof(f19632,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X45)) | s(bool,'T_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,sK7(X44,X43,X42)))) | s(bool,'F_0') = s(bool,X45) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))),bool))) ) | $spl0),
  inference(superposition,[],[f620,f1987])).
fof(f19682,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK7(X32,X31,X30)))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19629,f152])).
fof(f19629,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK7(X32,X31,X30)))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s(bool,'F_0') = s(bool,X33)) ) | $spl0),
  inference(superposition,[],[f620,f1778])).
fof(f19680,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19628,f152])).
fof(f19628,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(superposition,[],[f620,f1778])).
fof(f17384,plain,(
  ( ! [X57,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X55) = s(bool,X57)) ) | $spl52),
  inference(cnf_transformation,[],[f17384_D])).
fof(f17384_D,plain,(
  ( ! [X57,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X55) = s(bool,X57)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f17383,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X57) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f16436,f146])).
fof(f16436,plain,(
  ( ! [X57,X56,X55] : (s(bool,'F_0') != s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X57) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f479,f12813])).
fof(f17302,plain,(
  ( ! [X192,X193] : (s(bool,X192) != s(bool,X193) | s(bool,X192) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X193)),bool))) ) | $spl50),
  inference(cnf_transformation,[],[f17302_D])).
fof(f17302_D,plain,(
  ( ! [X192,X193] : (s(bool,X192) != s(bool,X193) | s(bool,X192) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X193)),bool))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f16905,plain,(
  ( ! [X191,X192,X193] : (s(bool,X192) != s(bool,X193) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X193)),bool)) | s(bool,'F_0') = s(bool,X191) | s(bool,X192) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl30)),
  inference(duplicate_literal_removal,[],[f16233])).
fof(f16233,plain,(
  ( ! [X191,X192,X193] : (s(bool,X192) != s(bool,X193) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X193)),bool)) | s(bool,'F_0') = s(bool,X191) | s(bool,'F_0') = s(bool,X191) | s(bool,X192) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl30)),
  inference(superposition,[],[f12035,f12813])).
fof(f17287,plain,(
  ( ! [X127,X128] : (s(bool,X127) != s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,X127) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X128)) ) | $spl48),
  inference(cnf_transformation,[],[f17287_D])).
fof(f17287_D,plain,(
  ( ! [X127,X128] : (s(bool,X127) != s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,X127) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X128)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f16909,plain,(
  ( ! [X127,X128,X126] : (s(bool,X127) != s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,'F_0') = s(bool,X126) | s(bool,'T_0') = s(bool,X128) | s(bool,X127) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(duplicate_literal_removal,[],[f16209])).
fof(f16209,plain,(
  ( ! [X127,X128,X126] : (s(bool,X127) != s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,'F_0') = s(bool,X126) | s(bool,'T_0') = s(bool,X128) | s(bool,'F_0') = s(bool,X126) | s(bool,X127) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f4028,f12813])).
fof(f17042,plain,(
  ( ! [X60,X58] : (s(bool,X58) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X58) = s(bool,X60)) ) | $spl46),
  inference(cnf_transformation,[],[f17042_D])).
fof(f17042_D,plain,(
  ( ! [X60,X58] : (s(bool,X58) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X58) = s(bool,X60)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f16984,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(duplicate_literal_removal,[],[f15898])).
fof(f15898,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X53) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12813,f12813])).
fof(f16995,plain,(
  ( ! [X66,X64,X65] : (s(bool,X65) = s(bool,X66) | s(bool,'F_0') = s(bool,X64) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(duplicate_literal_removal,[],[f15831])).
fof(f15831,plain,(
  ( ! [X66,X64,X65] : (s(bool,X65) = s(bool,X66) | s(bool,'F_0') = s(bool,X64) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X64) | s(bool,X65) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12813,f12813])).
fof(f17021,plain,(
  ( ! [X59,X60,X58] : (s(bool,'F_0') = s(bool,X59) | s(bool,X58) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X58) = s(bool,X60) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(duplicate_literal_removal,[],[f15779])).
fof(f15779,plain,(
  ( ! [X59,X60,X58] : (s(bool,'F_0') = s(bool,X59) | s(bool,'F_0') = s(bool,X59) | s(bool,X58) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X58) = s(bool,X60) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f12813,f12813])).
fof(f15570,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,X20)) ) | $spl42),
  inference(cnf_transformation,[],[f15570_D])).
fof(f15570_D,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,X20)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f15574,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32))) | ~p(s(bool,X33)) | s(bool,'F_0') = s(bool,sK7('F_0',X31,bool)) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(forward_demodulation,[],[f15573,f994])).
fof(f15573,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'F_0') = s(bool,sK7('F_0',X31,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f15529,f152])).
fof(f15529,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'F_0') = s(bool,sK7('F_0',X31,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,X33) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))),bool))) ) | $spl0),
  inference(superposition,[],[f524,f1987])).
fof(f15572,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | s(bool,'F_0') = s(bool,sK7('F_0',X22,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) ) | $spl0),
  inference(subsumption_resolution,[],[f15526,f152])).
fof(f15526,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | s(bool,'F_0') = s(bool,sK7('F_0',X22,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23))) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f524,f1778])).
fof(f15569,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(subsumption_resolution,[],[f15525,f152])).
fof(f15525,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(superposition,[],[f524,f1778])).
fof(f15192,plain,(
  ( ! [X54,X55] : (s(bool,X54) != s(bool,X55) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) | $spl40),
  inference(cnf_transformation,[],[f15192_D])).
fof(f15192_D,plain,(
  ( ! [X54,X55] : (s(bool,X54) != s(bool,X55) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f14749,plain,(
  ( ! [X54,X55,X53] : (s(bool,X54) != s(bool,X55) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f14315])).
fof(f14315,plain,(
  ( ! [X54,X55,X53] : (s(bool,X54) != s(bool,X55) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f479,f8334])).
fof(f14906,plain,(
  ( ! [X44,X42] : (s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl38),
  inference(cnf_transformation,[],[f14906_D])).
fof(f14906_D,plain,(
  ( ! [X44,X42] : (s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f14816,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X39) = s(bool,X41) | s(bool,X39) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f13925])).
fof(f13925,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X39) = s(bool,X41) | s(bool,X39) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f8334,f8334])).
fof(f14826,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) = s(bool,X50) | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f13871])).
fof(f13871,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) = s(bool,X50) | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f8334,f8334])).
fof(f14845,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X42) = s(bool,X44)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f13825])).
fof(f13825,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X42) = s(bool,X44)) ) | $spl0),
  inference(superposition,[],[f8334,f8334])).
fof(f11745,plain,(
  ( ! [X35] : (s(bool,X35) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35)))) ) | $spl36),
  inference(cnf_transformation,[],[f11745_D])).
fof(f11745_D,plain,(
  ( ! [X35] : (s(bool,X35) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f11695,plain,(
  ( ! [X35,X34] : (s(bool,X35) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s(bool,'T_0') = s(bool,X34)) ) | ($spl0 | $spl12)),
  inference(duplicate_literal_removal,[],[f11533])).
fof(f11533,plain,(
  ( ! [X35,X34] : (s(bool,X35) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f479,f11311])).
fof(f11305,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f10992,f10993])).
fof(f10993,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f145,f4077,f203])).
fof(f10992,plain,(
  p(s(bool,'F_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f143,f4077,f203])).
fof(f11304,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f11009,f145])).
fof(f11009,plain,(
  p(s(bool,'F_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f4077,f148])).
fof(f11010,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f145,f4077,f148])).
fof(f11008,plain,(
  $false | ($spl0 | $spl14)),
  inference(unit_resulting_resolution,[],[f250,f250,f4077,f2192])).
fof(f11005,plain,(
  $false | ($spl0 | $spl14)),
  inference(unit_resulting_resolution,[],[f250,f3993,f4077,f2635])).
fof(f10996,plain,(
  $false | ($spl0 | $spl14)),
  inference(unit_resulting_resolution,[],[f250,f4077,f857])).
fof(f10994,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f143,f145,f4077,f203])).
fof(f10991,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f143,f250,f4077,f281])).
fof(f10988,plain,(
  $false | ($spl0 | $spl14)),
  inference(unit_resulting_resolution,[],[f143,f250,f250,f4077,f2191])).
fof(f10983,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f143,f4077,f152])).
fof(f10980,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f250,f4077])).
fof(f9250,plain,(
  ( ! [X40] : (s(bool,X40) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X40)) ) | $spl30),
  inference(cnf_transformation,[],[f9250_D])).
fof(f9250_D,plain,(
  ( ! [X40] : (s(bool,X40) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X40)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f10524,plain,(
  ( ! [X35,X36] : (s(bool,X36) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s(bool,'T_0') = s(bool,X36)) ) | $spl0),
  inference(subsumption_resolution,[],[f10493,f194])).
fof(f10493,plain,(
  ( ! [X35,X36] : (s(bool,X36) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,X35)) ) | $spl0),
  inference(superposition,[],[f479,f7381])).
fof(f10867,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X37)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f10494,f1007])).
fof(f10494,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,X38) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X37)),bool))) ) | $spl0),
  inference(superposition,[],[f479,f7614])).
fof(f4183,plain,(
  ( ! [X61,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl24),
  inference(cnf_transformation,[],[f4183_D])).
fof(f4183_D,plain,(
  ( ! [X61,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f10865,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(bool,'T_0') = s(bool,X64) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl0),
  inference(subsumption_resolution,[],[f10504,f146])).
fof(f10504,plain,(
  ( ! [X61,X64,X62,X63] : (s(bool,'F_0') != s(bool,X64) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(bool,'T_0') = s(bool,X64) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl0),
  inference(superposition,[],[f479,f1907])).
fof(f10850,plain,(
  $false | ($spl0 | $spl20)),
  inference(subsumption_resolution,[],[f10537,f10538])).
fof(f10538,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f145,f10339,f203])).
fof(f10339,plain,(
  ( ! [X262] : (s(bool,'F_0') = s(bool,X262)) ) | ($spl0 | $spl20)),
  inference(global_subsumption,[],[f3395,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4198,f4199,f4197,f4200,f4169,f4126,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2759,f2723,f2681,f1761,f1192,f1170,f1169,f1168,f1167,f1165,f1161,f1146,f1054,f1005,f875,f543,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4179,f9308,f9309,f9307,f9310,f9311,f9312,f9306,f9313,f554,f831,f531,f525,f2763,f1432,f1173,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f1172,f830,f829,f617,f524,f702,f679,f990,f966,f693,f973,f4124,f2682,f1720,f1247,f1217,f1162,f1115,f1101,f1084,f657,f620,f619,f532,f519,f197,f196,f195,f4125,f2683,f1248,f1218,f1163,f976,f975,f949,f933,f1441,f1310,f876,f3148,f2979,f2953,f3149,f2980,f2954])).
fof(f9313,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61)))) ) | $spl20),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f554,f831,f1432,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f702,f679,f693,f973,f1720,f1247,f1217,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f1248,f1218,f976,f975,f949,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2763,f2759,f2723,f2683,f2682,f2681,f1761,f1192,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4179,f9308,f9309,f9307,f9310,f9311,f9312,f9306])).
fof(f9306,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | $spl20),
  inference(trivial_inequality_removal,[],[f9305])).
fof(f9305,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | $spl20),
  inference(backward_demodulation,[],[f4179,f3148])).
fof(f9312,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63)))) ) | $spl20),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f554,f831,f1432,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f702,f679,f693,f973,f1720,f1247,f1217,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f1248,f1218,f976,f975,f949,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2763,f2759,f2723,f2683,f2682,f2681,f1761,f1192,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4179,f9308,f9309,f9307,f9310,f9311])).
fof(f9311,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) ) | $spl20),
  inference(subsumption_resolution,[],[f9304,f4169])).
fof(f9304,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) ) | $spl20),
  inference(backward_demodulation,[],[f4179,f2979])).
fof(f9310,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66)))) ) | $spl20),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f554,f831,f1432,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f702,f679,f693,f973,f1720,f1247,f1217,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f1248,f1218,f976,f975,f949,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2763,f2759,f2723,f2683,f2682,f2681,f1761,f1192,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4179,f9308,f9309,f9307])).
fof(f9307,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | $spl20),
  inference(trivial_inequality_removal,[],[f9301])).
fof(f9301,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | $spl20),
  inference(backward_demodulation,[],[f4179,f3149])).
fof(f9309,plain,(
  ( ! [X68,X66,X67,X65] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68)))) ) | $spl20),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f554,f831,f1432,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f702,f679,f693,f973,f1720,f1247,f1217,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f1248,f1218,f976,f975,f949,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2763,f2759,f2723,f2683,f2682,f2681,f1761,f1192,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4179,f9308])).
fof(f9308,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) ) | $spl20),
  inference(subsumption_resolution,[],[f9300,f4169])).
fof(f9300,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) ) | $spl20),
  inference(backward_demodulation,[],[f4179,f2980])).
fof(f4200,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61)))) ) | $spl20),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4179,f4198,f4199,f4197])).
fof(f4197,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | $spl20),
  inference(trivial_inequality_removal,[],[f4193])).
fof(f4193,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) ) | $spl20),
  inference(backward_demodulation,[],[f4179,f3148])).
fof(f4199,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66)))) ) | $spl20),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4179,f4198])).
fof(f4198,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | $spl20),
  inference(trivial_inequality_removal,[],[f4190])).
fof(f4190,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) ) | $spl20),
  inference(backward_demodulation,[],[f4179,f3149])).
fof(f10537,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f143,f10339,f203])).
fof(f10849,plain,(
  $false | ($spl0 | $spl20)),
  inference(subsumption_resolution,[],[f10554,f145])).
fof(f10554,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f10339,f148])).
fof(f10555,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f145,f10339,f148])).
fof(f10553,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f250,f250,f10339,f2192])).
fof(f10550,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f250,f3993,f10339,f2635])).
fof(f10541,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f250,f10339,f857])).
fof(f10539,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f143,f145,f10339,f203])).
fof(f10536,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f143,f250,f10339,f281])).
fof(f10533,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f143,f250,f250,f10339,f2191])).
fof(f10528,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f143,f10339,f152])).
fof(f10525,plain,(
  $false | ($spl0 | $spl20)),
  inference(unit_resulting_resolution,[],[f250,f10339])).
fof(f10338,plain,(
  $false | $spl28),
  inference(subsumption_resolution,[],[f10214,f10016])).
fof(f10016,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl28),
  inference(forward_demodulation,[],[f9820,f994])).
fof(f9820,plain,(
  ( ! [X0] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f145,f9249,f203])).
fof(f10214,plain,(
  p(s(bool,'F_0')) | $spl28),
  inference(unit_resulting_resolution,[],[f250,f10016,f198])).
fof(f10337,plain,(
  $false | $spl28),
  inference(subsumption_resolution,[],[f10216,f10016])).
fof(f10216,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f262,f10016,f198])).
fof(f10336,plain,(
  $false | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f10218,f10016])).
fof(f10218,plain,(
  p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3993,f10016,f198])).
fof(f10335,plain,(
  $false | $spl28),
  inference(subsumption_resolution,[],[f10228,f10016])).
fof(f10228,plain,(
  p(s(bool,'F_0')) | $spl28),
  inference(unit_resulting_resolution,[],[f250,f10016,f198])).
fof(f10334,plain,(
  $false | $spl28),
  inference(subsumption_resolution,[],[f10230,f10016])).
fof(f10230,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f262,f10016,f198])).
fof(f10333,plain,(
  $false | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f10232,f10016])).
fof(f10232,plain,(
  p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3993,f10016,f198])).
fof(f10283,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3993,f3993,f250,f10016,f2586])).
fof(f10281,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f262,f262,f250,f10016,f2586])).
fof(f10279,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f250,f250,f250,f10016,f2586])).
fof(f10263,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3993,f3993,f10016,f313])).
fof(f10261,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f262,f262,f10016,f313])).
fof(f10259,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f250,f250,f10016,f313])).
fof(f10244,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f143,f994,f10016,f203])).
fof(f10240,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f143,f208,f10016,f203])).
fof(f10236,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f143,f778,f10016,f203])).
fof(f10233,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10016,f3993,f10016,f198])).
fof(f10231,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f10016,f262,f10016,f198])).
fof(f10229,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f145,f250,f10016,f198])).
fof(f10227,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10016,f3993,f10016,f198])).
fof(f10225,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f10016,f262,f10016,f198])).
fof(f10223,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f10016,f250,f10016,f198])).
fof(f10219,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10016,f3993,f10016,f198])).
fof(f10217,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f10016,f262,f10016,f198])).
fof(f10215,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f145,f250,f10016,f198])).
fof(f10213,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f10016,f3993,f10016,f198])).
fof(f10211,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f10016,f262,f10016,f198])).
fof(f10209,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f10016,f250,f10016,f198])).
fof(f10205,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f250,f10016,f153])).
fof(f10203,plain,(
  $false | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f778,f10016,f148])).
fof(f10201,plain,(
  $false | $spl28),
  inference(unit_resulting_resolution,[],[f143,f10016])).
fof(f9800,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,g(s(bool,X7)))) ) | $spl32),
  inference(cnf_transformation,[],[f9800_D])).
fof(f9800_D,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,g(s(bool,X7)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f9802,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,sK8(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | ($spl0 | $spl12 | $spl20)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f2845,f3077,f554,f831,f908,f3088,f3112,f1439,f1432,f818,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f3061,f702,f679,f3060,f693,f3105,f973,f3106,f3104,f3062,f3059,f2869,f2867,f1720,f1247,f1217,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f3100,f1248,f1218,f987,f976,f975,f949,f947,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f4076,f4074,f4073,f4072,f4063,f4028,f4025,f3993,f3992,f3991,f3990,f3988,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3799,f3674,f3662,f3637,f3604,f3601,f3597,f3596,f3595,f3593,f3582,f3580,f3530,f3529,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3471,f3456,f3454,f3395,f3392,f3388,f3387,f3386,f3373,f3371,f3270,f3269,f3240,f3239,f3237,f3236,f3235,f3151,f3150,f3147,f3116,f3113,f3111,f3110,f3109,f3108,f3086,f3081,f3079,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2866,f2865,f2864,f2863,f2862,f2861,f2860,f2859,f2858,f2857,f2837,f2836,f2834,f2832,f2802,f2794,f2792,f2787,f2785,f2783,f2780,f2779,f2775,f2774,f2773,f2768,f2767,f2766,f2765,f2763,f2759,f2723,f2683,f2682,f2681,f2635,f2634,f2633,f2632,f2592,f2586,f2284,f2283,f2281,f2277,f2275,f2267,f2266,f2264,f2262,f2225,f2217,f2216,f2214,f2191,f2125,f2124,f2122,f2118,f2116,f2108,f2107,f2105,f2103,f2035,f2034,f2033,f1987,f1986,f1985,f1984,f1931,f1930,f1929,f1927,f1919,f1918,f1917,f1914,f1912,f1909,f1907,f1905,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1174,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f907,f906,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f4915,f5024,f5084,f5130,f5220,f5281,f5311,f5313,f5411,f5412,f5438,f5440,f5450,f5716,f5721,f5760,f5544,f5764,f5765,f5772,f5775,f5562,f5564,f5596,f5819,f5820,f5643,f5821,f5831,f6035,f6039,f6041,f6102,f6225,f6227,f6960,f6564,f6565,f6566,f6567,f6568,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7684,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8211,f8218,f8223,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8639,f8640,f8641,f8801,f8802,f8803,f8804,f8918,f8919,f8920,f8921,f8922,f9292,f9293,f9294,f4179,f9308,f9309,f9307,f9310,f9311,f9312,f9306,f9313,f9503,f9504,f9665,f9668,f9669,f9683,f9685,f9687,f9690,f9799,f9691])).
fof(f9691,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,g(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,sK8(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10)) ) | ($spl0 | $spl12 | $spl20)),
  inference(superposition,[],[f9665,f278])).
fof(f9690,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s(bool,X7))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK8(X5,X6,bool,bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(superposition,[],[f9665,f278])).
fof(f9687,plain,(
  ( ! [X103,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104)))) ) | ($spl0 | $spl12 | $spl20)),
  inference(forward_demodulation,[],[f9686,f994])).
fof(f9686,plain,(
  ( ! [X103,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X103)),bool))))) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9446,f9669])).
fof(f9446,plain,(
  ( ! [X103,X104] : (s(bool,'F_0') != s(bool,X104) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X103)),bool))))) ) | ($spl0 | $spl12 | $spl20)),
  inference(superposition,[],[f194,f9294])).
fof(f9685,plain,(
  ( ! [X21,X22] : (s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9684,f9503])).
fof(f9684,plain,(
  ( ! [X21,X22] : (p(s(bool,'F_0')) | s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9399,f9503])).
fof(f9399,plain,(
  ( ! [X21,X22] : (p(s(bool,'F_0')) | p(s(bool,X22)) | s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(superposition,[],[f198,f9294])).
fof(f9683,plain,(
  ( ! [X17] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9395,f9503])).
fof(f9395,plain,(
  ( ! [X17] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(superposition,[],[f148,f9294])).
fof(f9669,plain,(
  ( ! [X148] : (s(bool,'F_0') = s(bool,X148)) ) | ($spl0 | $spl12 | $spl20)),
  inference(global_subsumption,[],[f9668,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f554,f831,f1432,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f702,f679,f693,f973,f1720,f1247,f1217,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f1248,f1218,f976,f975,f949,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2763,f2759,f2723,f2683,f2682,f2681,f1761,f1192,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4179,f9308,f9309,f9307,f9310,f9311,f9312,f9306,f9313])).
fof(f9668,plain,(
  ( ! [X146,X147,X145,X148] : (s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK8(X146,X147,bool,X145)))) | s(bool,'F_0') = s(bool,X148)) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9510,f9294])).
fof(f9510,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK8(X146,X147,bool,X145)))) | s(bool,'F_0') = s(bool,X148)) ) | ($spl0 | $spl12 | $spl20)),
  inference(backward_demodulation,[],[f9504,f2277])).
fof(f9665,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9505,f9294])).
fof(f9505,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) ) | ($spl0 | $spl12 | $spl20)),
  inference(backward_demodulation,[],[f9504,f876])).
fof(f9504,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9365,f250])).
fof(f9365,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(superposition,[],[f9294,f5024])).
fof(f9503,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl12 | $spl20)),
  inference(forward_demodulation,[],[f9321,f994])).
fof(f9321,plain,(
  ( ! [X0] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) ) | ($spl0 | $spl12 | $spl20)),
  inference(unit_resulting_resolution,[],[f145,f9294,f203])).
fof(f9294,plain,(
  ( ! [X21] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(global_subsumption,[],[f9293,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4179,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f2845,f3077,f554,f831,f908,f3088,f3112,f1439,f1432,f818,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f3061,f702,f679,f3060,f693,f3105,f973,f3106,f3104,f3062,f3059,f2869,f2867,f1720,f1247,f1217,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f3100,f1248,f1218,f987,f976,f975,f949,f947,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f4074,f4073,f4072,f4063,f4028,f4025,f3993,f3992,f3991,f3990,f3988,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3799,f3674,f3662,f3637,f3604,f3601,f3597,f3596,f3595,f3593,f3582,f3580,f3530,f3529,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3471,f3456,f3454,f3395,f3392,f3388,f3387,f3386,f3373,f3371,f3270,f3269,f3240,f3239,f3237,f3236,f3235,f3151,f3150,f3147,f3116,f3113,f3111,f3110,f3109,f3108,f3086,f3081,f3079,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2866,f2865,f2864,f2863,f2862,f2861,f2860,f2859,f2858,f2857,f2837,f2836,f2834,f2832,f2802,f2794,f2792,f2787,f2785,f2783,f2780,f2779,f2775,f2774,f2773,f2768,f2767,f2766,f2765,f2763,f2759,f2723,f2683,f2682,f2681,f2635,f2634,f2633,f2632,f2592,f2586,f2284,f2283,f2281,f2277,f2275,f2267,f2266,f2264,f2262,f2225,f2217,f2216,f2214,f2191,f2125,f2124,f2122,f2118,f2116,f2108,f2107,f2105,f2103,f2035,f2034,f2033,f1987,f1986,f1985,f1984,f1931,f1930,f1929,f1927,f1919,f1918,f1917,f1914,f1912,f1909,f1907,f1905,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1174,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f907,f906,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f4915,f5281,f5311,f5313,f5411,f6039,f6227,f6564,f6565,f6566,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7684,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8211,f8218,f8223,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8639,f8640,f8641,f8801,f8802,f8803,f8804,f8918,f8919,f8920,f8921,f9292])).
fof(f9293,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | ($spl0 | $spl12 | $spl20)),
  inference(global_subsumption,[],[f9292,f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f871,f935,f994,f1007,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1314,f1317,f1386,f1395,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1936,f4179,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f554,f831,f1432,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f702,f679,f693,f973,f1720,f1247,f1217,f1115,f1101,f1084,f620,f619,f532,f519,f197,f196,f195,f1248,f1218,f976,f975,f949,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f4076,f3151,f3150,f3147,f2982,f2981,f2978,f2956,f2955,f2952,f2763,f2759,f2723,f2683,f2682,f2681,f1761,f1192,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f5024,f5084,f5130,f5412,f5440,f5450,f5721,f5760,f5544,f5765,f5772,f5775,f5596,f5819,f5820,f5643,f5821,f5831])).
fof(f8922,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f8845,f146])).
fof(f8845,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X6) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3662,f5024])).
fof(f6568,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f5024,f1987])).
fof(f6567,plain,(
  ( ! [X30,X31,X29] : (s(bool,X30) = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s(bool,'T_0') = s(bool,X30) | s(bool,X29) = s(bool,X31) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X31)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f4076,f1987])).
fof(f6960,plain,(
  ( ! [X43,X44] : (s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f6327,f250])).
fof(f6327,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f1987,f5024])).
fof(f6225,plain,(
  ( ! [X39,X38,X40] : (s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'F_0') = s(bool,X40) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f6224,f145])).
fof(f6224,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,'F_0')) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'F_0') = s(bool,X40) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f6198,f994])).
fof(f6198,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'F_0') = s(bool,X40) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f2586,f5024])).
fof(f6102,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) != s(bool,sK6('const.option.SOME_1'(s(bool,X67)),bool)) | s(bool,X68) = s(bool,X69) | s(bool,'F_0') = s(bool,X69) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f6076,f143])).
fof(f6076,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'T_0')) | s(bool,X68) != s(bool,sK6('const.option.SOME_1'(s(bool,X67)),bool)) | s(bool,X68) = s(bool,X69) | s(bool,'F_0') = s(bool,X69) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f2191,f5024])).
fof(f6041,plain,(
  ( ! [X74,X73] : (s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X74,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X74),s(bool,X73)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f6040,f994])).
fof(f6040,plain,(
  ( ! [X74,X73] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X74,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X74),s(bool,X73))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5961,f994])).
fof(f5961,plain,(
  ( ! [X74,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X74),s(bool,X73))) | s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X74,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f1907,f5024])).
fof(f6035,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X49),s(bool,'F_0'))) | s(bool,X48) = s(bool,sK7(X48,X49,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5951,f994])).
fof(f5951,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X49),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X48) = s(bool,sK7(X48,X49,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X48)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f1907,f5024])).
fof(f5564,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f3674,f5024])).
fof(f5562,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f4063,f5024])).
fof(f5764,plain,(
  ( ! [X85,X86] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X86),s(bool,'F_0'))) | s(bool,X85) = s(bool,sK7(X85,X86,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X85)),bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5554,f994])).
fof(f5554,plain,(
  ( ! [X85,X86] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X86),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X85) = s(bool,sK7(X85,X86,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X85)),bool))) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f2868,f5024])).
fof(f5716,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X12) = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'F_0') = s(bool,X12)) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f5497,f250])).
fof(f5497,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X12) = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'F_0') = s(bool,X12)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f5024,f1778])).
fof(f5438,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f5024,f1778])).
fof(f5220,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X73,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X73),s(bool,X72))) | s(bool,'T_0') = s(bool,X72)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5141,f994])).
fof(f5141,plain,(
  ( ! [X72,X73] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X73),s(bool,X72))) | s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X73,bool)) | s(bool,'T_0') = s(bool,X72)) ) | ($spl0 | $spl12)),
  inference(superposition,[],[f2868,f4076])).
fof(f9799,plain,(
  ( ! [X6,X7,X5] : (s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,sK8(X5,X6,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X7)))) ) | ($spl0 | $spl12 | $spl20)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f146,f149,f148,f186,f189,f190,f194,f193,f201,f198,f203,f208,f209,f210,f211,f250,f262,f278,f281,f313,f338,f435,f443,f540,f544,f550,f552,f644,f659,f243,f778,f800,f857,f871,f884,f935,f994,f1007,f1080,f1216,f1219,f1235,f1246,f1249,f1296,f1298,f1308,f1314,f1317,f1386,f1395,f1396,f1714,f1715,f1716,f1717,f1721,f1427,f1429,f1445,f1448,f1754,f1757,f1758,f1778,f1936,f2011,f2192,f2222,f2590,f2605,f2868,f3107,f3068,f3069,f3658,f4075,f4078,f4175,f4178,f4182,f4198,f4199,f4197,f4200,f3149,f2980,f2954,f3148,f2979,f2953,f2845,f3077,f554,f831,f908,f3088,f3112,f1439,f1432,f818,f1447,f1431,f1389,f1388,f1316,f1301,f1300,f990,f966,f3061,f702,f679,f3060,f693,f3105,f973,f3106,f3104,f3062,f3059,f2869,f2867,f1720,f1247,f1217,f1115,f1101,f1084,f897,f620,f619,f532,f519,f197,f196,f195,f3100,f1248,f1218,f987,f976,f975,f949,f947,f1441,f1310,f4169,f4126,f4125,f4124,f4123,f4076,f4074,f4073,f4072,f4063,f4028,f4025,f3993,f3992,f3991,f3990,f3988,f3984,f3983,f3982,f3967,f3960,f3926,f3851,f3843,f3842,f3841,f3818,f3812,f3799,f3674,f3662,f3637,f3604,f3601,f3597,f3596,f3595,f3593,f3582,f3580,f3530,f3529,f3527,f3524,f3516,f3484,f3483,f3482,f3478,f3475,f3471,f3456,f3454,f3395,f3392,f3388,f3387,f3386,f3373,f3371,f3270,f3269,f3240,f3239,f3237,f3236,f3235,f3151,f3150,f3147,f3116,f3113,f3111,f3110,f3109,f3108,f3086,f3081,f3079,f3074,f3073,f3067,f3054,f3053,f2982,f2981,f2978,f2956,f2955,f2952,f2924,f2923,f2920,f2872,f2866,f2865,f2864,f2863,f2862,f2861,f2860,f2859,f2858,f2857,f2837,f2836,f2834,f2832,f2802,f2794,f2792,f2787,f2785,f2783,f2780,f2779,f2775,f2774,f2773,f2768,f2767,f2766,f2765,f2763,f2759,f2723,f2683,f2682,f2681,f2635,f2634,f2633,f2632,f2592,f2586,f2284,f2283,f2281,f2277,f2275,f2267,f2266,f2264,f2262,f2225,f2217,f2216,f2214,f2191,f2125,f2124,f2122,f2118,f2116,f2108,f2107,f2105,f2103,f2035,f2034,f2033,f1987,f1986,f1985,f1984,f1931,f1930,f1929,f1927,f1919,f1918,f1917,f1914,f1912,f1909,f1907,f1905,f1860,f1818,f1777,f1774,f1761,f1192,f1191,f1174,f1173,f1172,f1170,f1169,f1168,f1167,f1165,f1163,f1162,f1161,f1146,f1054,f1005,f933,f907,f906,f876,f875,f830,f829,f657,f617,f543,f531,f525,f524,f503,f480,f479,f454,f442,f441,f440,f368,f261,f153,f152,f145,f4678,f4875,f4915,f5024,f5084,f5130,f5220,f5281,f5311,f5313,f5411,f5412,f5438,f5440,f5450,f5716,f5721,f5760,f5544,f5764,f5765,f5772,f5775,f5562,f5564,f5596,f5819,f5820,f5643,f5821,f5831,f6035,f6039,f6041,f6102,f6225,f6227,f6960,f6564,f6565,f6566,f6567,f6568,f7320,f7377,f7370,f7368,f7366,f7381,f7614,f7502,f7563,f7684,f7685,f7686,f8066,f7794,f8110,f8122,f8126,f7870,f8127,f7946,f8209,f8210,f8211,f8218,f8223,f8256,f8008,f8257,f8334,f8329,f8522,f8586,f8594,f8638,f8639,f8640,f8641,f8801,f8802,f8803,f8804,f8918,f8919,f8920,f8921,f8922,f9292,f9293,f9294,f4179,f9308,f9309,f9307,f9310,f9311,f9312,f9306,f9313,f9503,f9504,f9665,f9668,f9669,f9683,f9685,f9687,f9690])).
fof(f9231,plain,(
  ( ! [X41,X42] : (s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'T_0') = s(bool,X42)) ) | ($spl0 | $spl22)),
  inference(duplicate_literal_removal,[],[f9163])).
fof(f9163,plain,(
  ( ! [X41,X42] : (s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool))) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4180,f7614])).
fof(f9248,plain,(
  ( ! [X39,X40] : (s(bool,X40) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'T_0') = s(bool,X40)) ) | ($spl0 | $spl22)),
  inference(subsumption_resolution,[],[f9162,f3992])).
fof(f9162,plain,(
  ( ! [X39,X40] : (s(bool,X40) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4180,f7381])).
fof(f7378,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl26),
  inference(cnf_transformation,[],[f7378_D])).
fof(f7378_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f7366,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f7365])).
fof(f7365,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7345])).
fof(f7345,plain,(
  ( ! [X43,X44,X42] : (s(bool,X42) != s(bool,X42) | s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) ) | $spl0),
  inference(superposition,[],[f2635,f278])).
fof(f7368,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f7367])).
fof(f7367,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7344])).
fof(f7344,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) != s(bool,X39) | s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f2635,f278])).
fof(f4621,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607,f4610,f4615,f4620])).
fof(f4620,plain,(
  ( ! [X28,X26,X27] : (s('type.option.option'(X26),'const.option.SOME_1'(s(X26,sK6(X27,X26)))) = s('type.option.option'(X26),sK7('const.option.SOME_1'(s(X26,sK6(X27,X26))),X28,'type.option.option'(X26))) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),X27)) ) | $spl16),
  inference(subsumption_resolution,[],[f4481,f143])).
fof(f4481,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,sK6(X27,X26)))) = s('type.option.option'(X26),sK7('const.option.SOME_1'(s(X26,sK6(X27,X26))),X28,'type.option.option'(X26))) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),X27)) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f554])).
fof(f4615,plain,(
  ( ! [X177,X175,X178,X176,X174,X179] : (s(X174,X179) = s(X174,sK7(X179,happ(s(fun(fun(X175,fun(X174,bool)),fun(X174,bool)),happ(s(fun(fun(X174,bool),fun(fun(X175,fun(X174,bool)),fun(X174,bool))),happ(s(fun('type.option.option'(X175),fun(fun(X174,bool),fun(fun(X175,fun(X174,bool)),fun(X174,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X175),X176))),s(fun(X174,bool),X177))),s(fun(X175,fun(X174,bool)),X178)),X174))) ) | $spl16),
  inference(subsumption_resolution,[],[f4465,f143])).
fof(f4465,plain,(
  ( ! [X177,X175,X178,X176,X174,X179] : (~p(s(bool,'T_0')) | s(X174,X179) = s(X174,sK7(X179,happ(s(fun(fun(X175,fun(X174,bool)),fun(X174,bool)),happ(s(fun(fun(X174,bool),fun(fun(X175,fun(X174,bool)),fun(X174,bool))),happ(s(fun('type.option.option'(X175),fun(fun(X174,bool),fun(fun(X175,fun(X174,bool)),fun(X174,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X175),X176))),s(fun(X174,bool),X177))),s(fun(X175,fun(X174,bool)),X178)),X174))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f966])).
fof(f4610,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (s(X106,X111) = s(X106,sK7(X111,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.SOME_1'(s(X107,X108))),s(fun(X106,bool),X109),s(fun(X107,fun(X106,bool)),X110)),X106))) ) | $spl16),
  inference(subsumption_resolution,[],[f4462,f143])).
fof(f4462,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,'T_0')) | s(X106,X111) = s(X106,sK7(X111,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.SOME_1'(s(X107,X108))),s(fun(X106,bool),X109),s(fun(X107,fun(X106,bool)),X110)),X106))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f679])).
fof(f4607,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | $spl16),
  inference(subsumption_resolution,[],[f4460,f143])).
fof(f4460,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f693])).
fof(f4604,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | $spl16),
  inference(subsumption_resolution,[],[f4458,f143])).
fof(f4458,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'T_0')) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f973])).
fof(f4594,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl16),
  inference(subsumption_resolution,[],[f4448,f143])).
fof(f4448,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f1101])).
fof(f4592,plain,(
  ( ! [X80,X81,X79] : (s(X79,X81) = s(X79,sK7(X81,sK6('const.option.SOME_1'(s(fun(X79,bool),X80)),fun(X79,bool)),X79))) ) | $spl16),
  inference(subsumption_resolution,[],[f4447,f143])).
fof(f4447,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,'T_0')) | s(X79,X81) = s(X79,sK7(X81,sK6('const.option.SOME_1'(s(fun(X79,bool),X80)),fun(X79,bool)),X79))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f1084])).
fof(f4588,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) ) | $spl16),
  inference(subsumption_resolution,[],[f4443,f143])).
fof(f4443,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f532])).
fof(f4586,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f4442,f143])).
fof(f4442,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f519])).
fof(f4582,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f4440,f143])).
fof(f4440,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f196])).
fof(f4571,plain,(
  ( ! [X94,X92,X95,X93] : (s(fun(X92,bool),X95) = s(fun(X92,bool),sK7(X95,happ(s(fun(bool,fun(fun(X92,bool),bool)),happ(s(fun('type.option.option'(X92),fun(bool,fun(fun(X92,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X92),X93))),s(bool,X94)),fun(X92,bool)))) ) | $spl16),
  inference(subsumption_resolution,[],[f4431,f143])).
fof(f4431,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | s(fun(X92,bool),X95) = s(fun(X92,bool),sK7(X95,happ(s(fun(bool,fun(fun(X92,bool),bool)),happ(s(fun('type.option.option'(X92),fun(bool,fun(fun(X92,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X92),X93))),s(bool,X94)),fun(X92,bool)))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f949])).
fof(f4569,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | $spl16),
  inference(subsumption_resolution,[],[f4427,f194])).
fof(f4427,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f4169])).
fof(f4207,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f440])).
fof(f4513,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f4203,f4176])).
fof(f4203,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f4176,f152])).
fof(f4619,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4483,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607,f4610,f4615])).
fof(f4483,plain,(
  ( ! [X80,X78,X79] : (s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4478])).
fof(f4478,plain,(
  ( ! [X80,X78,X79] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3088])).
fof(f4616,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607,f4610,f4615])).
fof(f4614,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4492,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607,f4610])).
fof(f4492,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4464])).
fof(f4464,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,'T_0') | s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3061])).
fof(f4611,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607,f4610])).
fof(f4609,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4493,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607])).
fof(f4493,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4461])).
fof(f4461,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3060])).
fof(f4608,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604,f4607])).
fof(f4606,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4494,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604])).
fof(f4494,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4459])).
fof(f4459,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3105])).
fof(f4605,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594,f4604])).
fof(f4603,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4495,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594])).
fof(f4495,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4457])).
fof(f4457,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,'T_0') | s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3106])).
fof(f4602,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4496,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594])).
fof(f4496,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4456])).
fof(f4456,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3104])).
fof(f4601,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4497,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594])).
fof(f4497,plain,(
  ( ! [X19,X17,X18] : (s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4455])).
fof(f4455,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,'T_0') | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3062])).
fof(f4600,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4498,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594])).
fof(f4498,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4454])).
fof(f4454,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3059])).
fof(f4599,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4598,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594])).
fof(f4598,plain,(
  ( ! [X12,X13,X11] : (s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f4452,f143])).
fof(f4452,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f2867])).
fof(f4595,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592,f4594])).
fof(f4593,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588,f4592])).
fof(f4589,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586,f4588])).
fof(f4587,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582,f4586])).
fof(f4583,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571,f4582])).
fof(f4581,plain,(
  $false | ($spl2 | $spl16)),
  inference(global_subsumption,[],[f4580,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571])).
fof(f4580,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5)))) ) | ($spl2 | $spl16)),
  inference(subsumption_resolution,[],[f4438,f143])).
fof(f4438,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5)))) ) | ($spl2 | $spl16)),
  inference(backward_demodulation,[],[f4176,f245])).
fof(f4579,plain,(
  $false | ($spl2 | $spl16)),
  inference(global_subsumption,[],[f4578,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571])).
fof(f4578,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),X0) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | ($spl2 | $spl16)),
  inference(subsumption_resolution,[],[f4437,f143])).
fof(f4437,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),X0) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | ($spl2 | $spl16)),
  inference(backward_demodulation,[],[f4176,f748])).
fof(f748,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(X0,sK1))))))) | s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),X0) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | $spl2),
  inference(superposition,[],[f245,f186])).
fof(f4577,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4503,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571])).
fof(f4503,plain,(
  ( ! [X43,X41,X44,X42] : (s(fun(X41,bool),X44) = s(fun(X41,bool),sK7(X44,happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43)),fun(X41,bool)))) ) | ($spl0 | $spl16)),
  inference(trivial_inequality_removal,[],[f4436])).
fof(f4436,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X41,bool),X44) = s(fun(X41,bool),sK7(X44,happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43)),fun(X41,bool)))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3100])).
fof(f4572,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569,f4571])).
fof(f4570,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207,f4569])).
fof(f4568,plain,(
  $false | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f4415,f4176])).
fof(f4415,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f3993])).
fof(f4540,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4539,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207])).
fof(f4539,plain,(
  ( ! [X127,X125,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f4538,f4176])).
fof(f4538,plain,(
  ( ! [X127,X125,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X124,bool),X125),s(X124,X126))))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f4320,f4176])).
fof(f4320,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'T_0') != s(bool,X127) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X124,bool),X125),s(X124,X126))))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f2834])).
fof(f4537,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f4319,f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207])).
fof(f4319,plain,(
  ( ! [X118,X116,X119,X117] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f4176,f2832])).
fof(f4515,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513,f4207])).
fof(f4514,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4176,f4513])).
fof(f4512,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f4202,f143])).
fof(f4202,plain,(
  ~p(s(bool,'T_0')) | $spl16),
  inference(backward_demodulation,[],[f4176,f145])).
fof(f4511,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f4210])).
fof(f4210,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | $spl16),
  inference(backward_demodulation,[],[f4176,f454])).
fof(f4510,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f4213])).
fof(f4213,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | $spl16),
  inference(backward_demodulation,[],[f4176,f503])).
fof(f4201,plain,(
  $false | ($spl16 | $spl20)),
  inference(global_subsumption,[],[f142,f141,f140,f143,f145,f146,f149,f148,f153,f152,f186,f189,f190,f194,f193,f197,f196,f195,f201,f198,f203,f208,f209,f210,f211,f250,f262,f261,f278,f281,f313,f338,f368,f435,f454,f440,f441,f442,f443,f479,f480,f503,f519,f531,f524,f525,f532,f540,f543,f544,f550,f552,f554,f619,f617,f620,f644,f657,f659,f693,f702,f679,f829,f830,f831,f871,f875,f876,f933,f935,f973,f975,f949,f976,f990,f966,f994,f1005,f1007,f1054,f1101,f1115,f1084,f1161,f1162,f1163,f1165,f1167,f1168,f1169,f1146,f1170,f1172,f1173,f1192,f1216,f1217,f1218,f1219,f1235,f1246,f1247,f1248,f1249,f1296,f1298,f1300,f1301,f1310,f1314,f1316,f1317,f1386,f1388,f1389,f1395,f1714,f1715,f1716,f1717,f1720,f1721,f1427,f1429,f1431,f1432,f1441,f1445,f1447,f1448,f1754,f1757,f1758,f1761,f1936,f2681,f2682,f2683,f2759,f2723,f2763,f2952,f2953,f2954,f2955,f2956,f2978,f2979,f2980,f2981,f2982,f3147,f3148,f3149,f3150,f3151,f4123,f4124,f4125,f4126,f4169,f4179,f4198,f4199,f4197,f4200,f4176])).
fof(f4182,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(bool,'T_0') = s(bool,X64) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl0),
  inference(subsumption_resolution,[],[f4150,f146])).
fof(f4150,plain,(
  ( ! [X61,X64,X62,X63] : (s(bool,'F_0') != s(bool,X64) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(bool,'T_0') = s(bool,X64) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl0),
  inference(superposition,[],[f479,f1907])).
fof(f4180,plain,(
  ( ! [X35,X36] : (s(bool,X35) != s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X35)),bool)) | s(bool,'T_0') = s(bool,X36)) ) | $spl22),
  inference(cnf_transformation,[],[f4180_D])).
fof(f4180_D,plain,(
  ( ! [X35,X36] : (s(bool,X35) != s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X35)),bool)) | s(bool,'T_0') = s(bool,X36)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f4178,plain,(
  ( ! [X35,X36,X34] : (s(bool,X35) != s(bool,X36) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X35)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f4139,f194])).
fof(f4139,plain,(
  ( ! [X35,X36,X34] : (s(bool,X35) != s(bool,X36) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,X34) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X35)),bool))) ) | $spl0),
  inference(superposition,[],[f479,f1987])).
fof(f4177,plain,(
  ( ! [X30,X28] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,X28) = s(bool,X30)) ) | $spl18),
  inference(cnf_transformation,[],[f4177_D])).
fof(f4177_D,plain,(
  ( ! [X30,X28] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,X28) = s(bool,X30)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f4175,plain,(
  ( ! [X30,X28,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f4137,f146])).
fof(f4137,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') != s(bool,X29) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool))) ) | $spl0),
  inference(superposition,[],[f479,f1987])).
fof(f4076,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(cnf_transformation,[],[f4076_D])).
fof(f4076_D,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f4078,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,X10) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(subsumption_resolution,[],[f4047,f146])).
fof(f4047,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') != s(bool,X10) | s(bool,'F_0') = s(bool,X10) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f3674,f278])).
fof(f4075,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,X4) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X5)) ) | $spl0),
  inference(subsumption_resolution,[],[f4044,f146])).
fof(f4044,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X4) | s(bool,'F_0') = s(bool,X4) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f3674,f278])).
fof(f1755,plain,(
  ( ! [X6,X8] : (s(bool,X6) != s(bool,X8) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X8)) ) | $spl8),
  inference(cnf_transformation,[],[f1755_D])).
fof(f1755_D,plain,(
  ( ! [X6,X8] : (s(bool,X6) != s(bool,X8) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X8)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1756,plain,(
  ( ! [X7] : (p(s(bool,X7))) ) | $spl10),
  inference(cnf_transformation,[],[f1756_D])).
fof(f1756_D,plain,(
  ( ! [X7] : (p(s(bool,X7))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1757,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1739,f148])).
fof(f1739,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f1167,f278])).
fof(f1754,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f1738,f148])).
fof(f1738,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f1167,f278])).
fof(f764,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f705,f749])).
fof(f749,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f747])).
fof(f747,plain,(
  s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),sK3) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f245,f249])).
fof(f705,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f243,f643])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK1,X0),X1),s(sK1,sK5))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(X0,X2),s(fun(sK1,X0),X1)))) ) | $spl6),
  inference(superposition,[],[f210,f249])).
fof(f763,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f762,f143])).
fof(f762,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f749,f252])).
fof(f252,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5))))) | $spl4),
  inference(unit_resulting_resolution,[],[f247,f149])).
fof(f759,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f758,f143])).
fof(f758,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f757,f252])).
fof(f757,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f756,f623])).
fof(f623,plain,(
  s(sK1,sK5) = s(sK1,sK6('const.option.SOME_1'(s(sK1,sK5)),sK1)) | $spl6),
  inference(unit_resulting_resolution,[],[f189,f249,f548])).
fof(f548,plain,(
  ( ! [X11] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),X11) | s(sK1,sK5) = s(sK1,sK6(X11,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X11)) ) | $spl6),
  inference(superposition,[],[f444,f186])).
fof(f444,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X0))) | s(sK1,sK5) = s(sK1,X0)) ) | $spl6),
  inference(superposition,[],[f193,f249])).
fof(f756,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6('const.option.SOME_1'(s(sK1,sK5)),sK1))))))) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f744,f249])).
fof(f744,plain,(
  s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6('const.option.SOME_1'(s(sK1,sK5)),sK1))))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f245,f623])).
fof(f755,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f754,f143])).
fof(f754,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f753,f252])).
fof(f753,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f752,f559])).
fof(f559,plain,(
  s(sK1,sK5) = s(sK1,sK6(sK3,sK1)) | $spl6),
  inference(unit_resulting_resolution,[],[f541,f444])).
fof(f541,plain,(
  s('type.option.option'(sK1),sK3) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK3,sK1)))) | $spl6),
  inference(unit_resulting_resolution,[],[f260,f186])).
fof(f260,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK3) | $spl6),
  inference(superposition,[],[f189,f249])).
fof(f752,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1))))))) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f743,f249])).
fof(f743,plain,(
  s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK6(sK3,sK1))))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f245,f559])).
fof(f751,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f750,f143])).
fof(f750,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f742,f252])).
fof(f742,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f249,f245])).
fof(f690,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f687,f252])).
fof(f687,plain,(
  s(bool,'T_0') != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5))))) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f643,f274])).
fof(f274,plain,(
  s(bool,'T_0') != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | $spl1),
  inference(unit_resulting_resolution,[],[f244,f148])).
fof(f689,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f688,f250])).
fof(f688,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f686,f252])).
fof(f686,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5))))) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f643,f273])).
fof(f273,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))) | $spl1),
  inference(unit_resulting_resolution,[],[f244,f153])).
fof(f243,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) | $spl0),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f249,plain,(
  s('type.option.option'(sK1),sK3) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | $spl6),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  s('type.option.option'(sK1),sK3) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f140,plain,(
  s('type.option.option'(sK1),sK3) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) | (s('type.option.option'(sK1),sK3) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) & p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))))) & (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) | ! [X5] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,X5))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f99])).
fof(f99,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) | ? [X6] : (s('type.option.option'(X1),X3) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X6))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X6)))))))) & (~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) | ! [X5] : (s('type.option.option'(X1),X3) != s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X5)))))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) | ? [X5] : (s('type.option.option'(X1),X3) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X5)))))))) & (~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) | ! [X5] : (s('type.option.option'(X1),X3) != s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X5)))))))))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) <~> ? [X5] : (s('type.option.option'(X1),X3) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X5))))))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) <=> ? [X5] : (s('type.option.option'(X1),X3) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X5))))))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X4)))))) <=> ? [X5] : (s('type.option.option'(X1),X3) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X4),s(X1,X5))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(fun(X6,bool),'const.pred_set.EMPTY_0'),s(fun(X7,fun(X6,bool)),X10)))))) <=> ? [X11] : (s('type.option.option'(X7),X9) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) & p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),happ(s(fun(X7,fun(X6,bool)),X10),s(X7,X11))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(fun(X6,bool),'const.pred_set.EMPTY_0'),s(fun(X7,fun(X6,bool)),X10)))))) <=> ? [X11] : (s('type.option.option'(X7),X9) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) & p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),happ(s(fun(X7,fun(X6,bool)),X10),s(X7,X11))))))))),
  file('thm.misc.IN_option_rwt','thm.misc.IN_option_rwt')).
fof(f247,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | $spl4),
  inference(cnf_transformation,[],[f247_D])).
fof(f247_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f141,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,sK5)))))) | p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))),
  inference(cnf_transformation,[],[f100])).
fof(f244,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) | $spl1),
  inference(cnf_transformation,[],[f244_D])).
fof(f244_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f245,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,X5))))))) ) | $spl2),
  inference(cnf_transformation,[],[f245_D])).
fof(f245_D,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,X5))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f142,plain,(
  ( ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK4),s(sK1,X5)))))) | s('type.option.option'(sK1),sK3) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK4))))))) )),
  inference(cnf_transformation,[],[f100])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 242
% Passive clauses: 6776
% Generated clauses: 56038
% Final active clauses: 61
% Final passive clauses: 1741
% Input formulas: 35
% Initial clauses: 86
% Discarded non-redundant clauses: 87
% 
% Duplicate literals: 1952
% Trivial inequalities: 725
% Fw subsumption resolutions: 4495
% Fw demodulations: 7802
% Bw demodulations: 4286
% Condensations: 3810
% Global subsumptions: 255
% 
% Simple tautologies: 721
% Equational tautologies: 307
% Forward subsumptions: 28286
% Fw demodulations to eq. taut.: 400
% Bw demodulations to eq. taut.: 303
% 
% Unit resulting resolution: 1980
% Factoring: 1
% Forward superposition: 12992
% Backward superposition: 11819
% Self superposition: 299
% Equality factoring: 169
% Equality resolution: 55
% 
% Split clauses: 172
% Split components: 368
% SAT solver clauses: 7741
% SAT solver unit clauses: 84
% SAT solver binary clauses: 633
% 
% Sat splits: 172
% Sat splitting refutations: 364
% 
% Memory used [KB]: 31598
% Time elapsed: 3.951 s
% ------------------------------
% ------------------------------
% Success in time 5.26 s
