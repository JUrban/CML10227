Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.RedBlackSet
% (101321)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 932
% Passive clauses: 5397
% Generated clauses: 37669
% Final active clauses: 898
% Final passive clauses: 4121
% Input formulas: 260
% Initial clauses: 519
% 
% Duplicate literals: 228
% Trivial inequalities: 47
% Fw subsumption resolutions: 1781
% Fw demodulations: 1964
% Bw demodulations: 11
% 
% Simple tautologies: 246
% Equational tautologies: 32
% Forward subsumptions: 27740
% 
% Binary resolution: 5773
% Factoring: 1172
% Forward superposition: 11785
% Backward superposition: 14186
% Self superposition: 51
% Equality factoring: 4
% Equality resolution: 15
% 
% Split clauses: 230
% Split components: 461
% SAT solver clauses: 417
% SAT solver unit clauses: 21
% SAT solver binary clauses: 69
% 
% Sat splits: 230
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 417
% TWLsolver calls for satisfiability: 367
% 
% Memory used [KB]: 18549
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.RedBlackSet
% (101345)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 584
% Passive clauses: 2972
% Generated clauses: 28371
% Final active clauses: 548
% Final passive clauses: 2271
% Input formulas: 260
% Initial clauses: 519
% 
% Duplicate literals: 104
% Trivial inequalities: 22
% Fw subsumption resolutions: 868
% Fw demodulations: 2947
% Bw demodulations: 138
% Condensations: 65
% Global subsumptions: 36
% 
% Simple tautologies: 258
% Equational tautologies: 17
% Forward subsumptions: 17520
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 2034
% Factoring: 146
% Forward superposition: 10071
% Backward superposition: 8306
% Self superposition: 77
% Equality factoring: 4
% Equality resolution: 10
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 4077
% SAT solver unit clauses: 700
% SAT solver binary clauses: 135
% SAT solver learnt clauses: 75
% SAT solver learnt literals: 19
% 
% Sat splits: 10
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 3930
% TWLsolver calls for satisfiability: 3057
% 
% Memory used [KB]: 28144
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.RedBlackSet
% (101377)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 812
% Passive clauses: 5649
% Generated clauses: 84343
% Final active clauses: 794
% Final passive clauses: 4325
% Input formulas: 260
% Initial clauses: 519
% 
% Duplicate literals: 9
% Trivial inequalities: 20
% Fw subsumption resolutions: 844
% Fw demodulations: 30633
% Bw demodulations: 116
% Condensations: 32
% Global subsumptions: 1
% 
% Simple tautologies: 141
% Equational tautologies: 39
% Forward subsumptions: 45625
% Fw demodulations to eq. taut.: 560
% Bw demodulations to eq. taut.: 21
% 
% Unit resulting resolution: 17524
% Factoring: 2
% Forward superposition: 17407
% Backward superposition: 17013
% Self superposition: 150
% Equality factoring: 4
% Equality resolution: 14
% 
% Split clauses: 17
% Split components: 34
% SAT solver clauses: 6459
% SAT solver unit clauses: 2879
% SAT solver binary clauses: 2677
% 
% Sat splits: 17
% Sat splitting refutations: 773
% 
% Memory used [KB]: 333512
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.RedBlackSet
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.RedBlackSet
% SZS output start Proof for thm.RedBlackSet
fof(f23317,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f917,f1071,f918,f1074,f919,f1226,f1232,f2086,f2289,f2290,f2291,f2292,f2293,f2301,f2313,f2314,f2315,f2316,f2317,f2325,f2333,f2334,f2335,f2336,f2337,f2346,f2354,f2355,f2356,f2357,f2358,f2366,f2374,f2375,f2376,f2377,f2378,f2386,f2393,f2394,f2395,f2396,f2397,f2406,f2413,f2414,f2415,f2416,f2417,f2427,f2434,f2435,f2436,f2437,f2438,f2448,f2455,f2456,f2457,f2458,f2459,f2469,f2493,f3760,f3761,f3886,f3877,f3994,f3995,f3996,f3997,f4000,f4001,f4381,f1072,f1076,f4767,f4775,f4777,f4770,f4800,f4801,f4802,f4803,f4804,f4814,f4822,f4815,f4824,f4847,f4848,f4849,f4850,f4851,f4874,f4875,f4876,f4877,f4878,f4901,f4902,f4903,f4904,f4905,f5250,f5252,f5485,f5486,f5533,f5534,f5535,f5536,f5537,f5570,f5571,f5572,f5573,f5574,f5792,f5811,f6025,f6044,f6327,f6328,f6329,f6330,f6331,f6344,f6345,f6346,f6347,f6348,f6365,f6397,f6398,f6399,f6400,f6401,f6414,f6415,f6416,f6417,f6418,f6428,f6462,f6463,f6464,f6465,f6466,f6500,f6501,f6502,f6503,f6504,f6514,f6515,f6516,f6517,f6518,f6529,f6539,f6540,f6541,f6542,f6543,f6554,f6590,f6591,f6592,f6593,f6594,f6607,f6608,f6609,f6610,f6611,f6622,f6635,f6636,f6637,f6638,f6639,f6650,f6686,f6687,f6688,f6689,f6690,f6809,f6811,f6812,f6813,f6814,f6810,f6958,f6960,f6961,f6962,f6963,f6959,f7218,f7219,f7220,f7221,f7222,f7250,f7252,f7253,f7254,f7255,f7251,f8560,f8561,f8562,f8563,f8565,f8709,f8566,f8567,f8568,f8569,f8882,f8874,f8856,f8855,f8853,f8852,f8832,f8831,f8830,f8987,f8988,f8989,f8990,f8991,f8992,f8997,f9000,f9002,f9003,f9004,f9005,f9008,f8710,f9009,f9010,f9011,f9223,f9224,f9225,f9226,f9230,f8711,f9231,f9232,f9500,f8705,f9501,f8706,f9502,f8707,f9503,f8708,f9508,f8712,f9509,f8713,f13098,f13099,f13100,f13101,f13102,f13293,f13295,f13296,f13297,f13298,f13294,f13456,f13459,f13461,f13463,f13465,f13457,f13597,f13598,f13599,f13600,f13601,f13687,f13688,f13689,f13690,f13691,f13780,f13781,f13782,f13783,f13784,f13887,f13888,f13889,f13890,f13891,f13989,f13990,f13991,f13992,f13993,f14044,f14045,f14046,f14047,f14048,f14126,f14127,f14128,f14129,f14130,f14208,f14209,f14210,f14211,f14212,f14235,f14236,f14237,f14238,f14239,f14279,f14280,f14281,f14282,f14283,f14318,f14320,f14321,f14322,f14323,f14319,f14350,f14351,f14352,f14353,f14354,f14381,f14382,f14383,f14384,f14385,f14429,f14430,f14431,f14432,f14433,f14532,f14534,f14535,f14536,f14533,f14751,f14752,f14753,f14754,f14755,f14772,f14773,f14774,f14775,f14776,f14793,f14982,f14983,f14984,f14985,f14986,f15029,f15031,f15032,f15033,f15034,f15030,f15065,f15067,f15068,f15069,f15070,f15066,f15103,f15105,f15106,f15107,f15108,f15104,f15833,f15835,f15836,f15837,f15838,f15834,f16507,f17028,f17551,f17867,f18078,f18791,f18793,f18794,f18795,f18796,f18792,f18847,f18848,f18849,f18850,f18851,f18893,f18895,f18896,f18897,f18898,f18894,f19097,f19098,f1229,f19099,f2302,f19100,f2303,f19101,f2305,f19294,f19295,f19602,f19604,f19605,f19606,f19603,f20301,f20577,f20578,f20579,f20580,f20581,f20830,f20590,f20591,f20592,f20593,f20594,f20842,f20850,f20859,f20856,f20854,f20862,f20863,f20865,f20866,f20867,f20869,f20877,f21066,f20824,f21067,f20828,f20826,f20831,f21068,f20832,f21069,f20833,f21070,f20829,f20835,f21079,f20836,f21080,f20840,f20838,f20843,f21081,f20844,f21082,f20845,f21083,f20841,f20847,f21106,f21105,f20852,f21094,f21107,f21095,f21111,f21109,f21112,f21096,f21113,f21097,f21114,f21098,f20851,f21116,f21133,f21134,f1231,f21264,f21520,f21518,f21271,f21521,f21272,f21525,f21523,f21528,f21273,f21529,f21274,f21530,f21275,f21527,f21532,f21284,f21533,f21285,f21537,f21535,f21540,f21286,f21541,f21287,f21542,f21288,f21539,f21544,f21548,f1227,f21556,f1233,f21552,f21550,f21573,f22376,f22399,f22377,f22400,f22378,f22401,f22379,f22402,f22380,f22403,f22381,f22404,f2494,f22500,f18028,f22501,f20465,f22505,f16527,f22506,f17048,f22507,f17571,f22508,f2495,f18098,f22998,f23000,f23002,f23001,f23004,f22760,f23009,f22761,f23013,f23011,f23016,f22762,f23017,f22763,f23018,f22764,f23015,f23020,f22773,f23021,f22774,f23025,f23023,f23028,f22775,f23029,f22776,f23030,f22777,f23027,f23032,f23251,f23260])).
fof(f23260,plain,(
  $false | ($spl8 | $spl14 | $spl165)),
  inference(subsumption_resolution,[],[f23259,f20851])).
fof(f23259,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f23141,f1227])).
fof(f23141,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | $spl14),
  inference(superposition,[],[f626,f23007])).
fof(f23007,plain,(
  s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | $spl14),
  inference(subsumption_resolution,[],[f22754,f1233])).
fof(f22754,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',sK31(sK14,sK12))),
  inference(superposition,[],[f1236,f611])).
fof(f611,plain,(
  ( ! [X0] : (s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X0) | s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X0)) )),
  inference(cnf_transformation,[],[f273])).
fof(f273,plain,(
  ! [X0] : (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X0) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X0))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X17] : (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X17) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X17))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.color_nchotomy')).
fof(f1236,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))),
  inference(subsumption_resolution,[],[f1185,f597])).
fof(f597,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))))),
  inference(cnf_transformation,[],[f455])).
fof(f455,plain,(
  ! [X6,X7,X8] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X6),s(sK12,X7),s('type.RedBlackSet.tree'(sK12),X8)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))))) & ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f454])).
fof(f454,plain,(
  ? [X0,X1] : (! [X6,X7,X8] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X6),s(X0,X7),s('type.RedBlackSet.tree'(X0),X8)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X3),s(X0,X4),s('type.RedBlackSet.tree'(X0),X5)))))) & ? [X2] : ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))))),
  inference(rectify,[],[f391])).
fof(f391,plain,(
  ? [X0,X1] : (! [X5,X6,X7] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))))) & ? [X8] : ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X8)))))),
  inference(flattening,[],[f390])).
fof(f390,plain,(
  ? [X0,X1] : ((! [X5,X6,X7] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4))))))) & ? [X8] : ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X8)))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : ((! [X5,X6,X7] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4))))))) => ! [X8] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X8)))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ~! [X0] : ! [X1] : ((! [X5,X6,X7] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4))))))) => ! [X8] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X8)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((! [X8,X9,X10] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0')))) & ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X11),s(X6,X12),s('type.RedBlackSet.tree'(X6),X13))))))) => ! [X14] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((! [X8,X9,X10] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10)))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0')))) & ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X11),s(X6,X12),s('type.RedBlackSet.tree'(X6),X13))))))) => ! [X14] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),X14)))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.not_red_ind')).
fof(f1185,plain,(
  ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))),
  inference(superposition,[],[f599,f626])).
fof(f599,plain,(
  ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))))),
  inference(cnf_transformation,[],[f455])).
fof(f626,plain,(
  ( ! [X0,X1] : (s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(X1,X0)),s('type.RedBlackSet.tree'(X0),sK32(X1,X0)),s(X0,sK33(X1,X0)),s('type.RedBlackSet.tree'(X0),sK34(X1,X0)))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1)) )),
  inference(cnf_transformation,[],[f463])).
fof(f463,plain,(
  ! [X0,X1] : (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(X1,X0)),s('type.RedBlackSet.tree'(X0),sK32(X1,X0)),s(X0,sK33(X1,X0)),s('type.RedBlackSet.tree'(X0),sK34(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK31,sK32,sK33,sK34])],[f287])).
fof(f287,plain,(
  ! [X0,X1] : (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X2,X3,X4,X5] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X2),s('type.RedBlackSet.tree'(X0),X3),s(X0,X4),s('type.RedBlackSet.tree'(X0),X5))))),
  inference(flattening,[],[f286])).
fof(f286,plain,(
  ! [X0] : ! [X1] : (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X2,X3,X4,X5] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X2),s('type.RedBlackSet.tree'(X0),X3),s(X0,X4),s('type.RedBlackSet.tree'(X0),X5))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X47] : (s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X47) | ? [X18,X15,X17,X16] : s('type.RedBlackSet.tree'(X6),X47) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X18),s('type.RedBlackSet.tree'(X6),X15),s(X6,X17),s('type.RedBlackSet.tree'(X6),X16))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.tree_nchotomy')).
fof(f23251,plain,(
  $false | ($spl8 | $spl14)),
  inference(subsumption_resolution,[],[f23133,f1227])).
fof(f23133,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | $spl14),
  inference(backward_demodulation,[],[f23007,f1236])).
fof(f23032,plain,(
  s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK34(sK14,sK12),sK12)),s(sK12,sK33(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK34(sK14,sK12),sK12)))) | $spl278),
  inference(cnf_transformation,[],[f23032_D])).
fof(f23032_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK34(sK14,sK12),sK12)),s(sK12,sK33(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK34(sK14,sK12),sK12)))) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f23027,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | $spl270),
  inference(cnf_transformation,[],[f23027_D])).
fof(f23027_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f22777,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK34(sK14,sK12),sK12)),s(sK12,sK33(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK34(sK14,sK12),sK12))))),
  inference(superposition,[],[f1236,f626])).
fof(f23030,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12))))) ) | $spl276),
  inference(cnf_transformation,[],[f23030_D])).
fof(f23030_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12))))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f22776,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK34(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))) )),
  inference(superposition,[],[f1236,f617])).
fof(f617,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))) | s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3),s('type.RedBlackSet.color',sK22(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK23(X7,X6,X5,X4,X3,X2,X1,X0)))),s(X0,sK24(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK25(X7,X6,X5,X4,X3,X2,X1,X0)))) != s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7),s('type.RedBlackSet.color',sK22(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK23(X7,X6,X5,X4,X3,X2,X1,X0)))),s(X0,sK24(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK25(X7,X6,X5,X4,X3,X2,X1,X0)))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) | s('type.RedBlackSet.tree'(X0),X4) != s('type.RedBlackSet.tree'(X0),X5)) )),
  inference(cnf_transformation,[],[f459])).
fof(f459,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.RedBlackSet.tree'(X0),X4) != s('type.RedBlackSet.tree'(X0),X5) | (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) & s(X1,X2) != s(X1,X6)) | (s('type.RedBlackSet.tree'(X0),X5) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X7,X6,X5,X4,X3,X2,X1,X0)),s('type.RedBlackSet.tree'(X0),sK23(X7,X6,X5,X4,X3,X2,X1,X0)),s(X0,sK24(X7,X6,X5,X4,X3,X2,X1,X0)),s('type.RedBlackSet.tree'(X0),sK25(X7,X6,X5,X4,X3,X2,X1,X0)))) & s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3),s('type.RedBlackSet.color',sK22(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK23(X7,X6,X5,X4,X3,X2,X1,X0)))),s(X0,sK24(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK25(X7,X6,X5,X4,X3,X2,X1,X0)))) != s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7),s('type.RedBlackSet.color',sK22(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK23(X7,X6,X5,X4,X3,X2,X1,X0)))),s(X0,sK24(X7,X6,X5,X4,X3,X2,X1,X0)))),s('type.RedBlackSet.tree'(X0),sK25(X7,X6,X5,X4,X3,X2,X1,X0))))) | s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23,sK24,sK25])],[f399])).
fof(f399,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.RedBlackSet.tree'(X0),X4) != s('type.RedBlackSet.tree'(X0),X5) | (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) & s(X1,X2) != s(X1,X6)) | ? [X8,X9,X10,X11] : (s('type.RedBlackSet.tree'(X0),X5) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X8),s('type.RedBlackSet.tree'(X0),X9),s(X0,X10),s('type.RedBlackSet.tree'(X0),X11))) & s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))) != s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11)))) | s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))))),
  inference(flattening,[],[f398])).
fof(f398,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((s('type.RedBlackSet.tree'(X0),X4) != s('type.RedBlackSet.tree'(X0),X5) | (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) & s(X1,X2) != s(X1,X6)) | ? [X8,X9,X10,X11] : (s('type.RedBlackSet.tree'(X0),X5) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X8),s('type.RedBlackSet.tree'(X0),X9),s(X0,X10),s('type.RedBlackSet.tree'(X0),X11))) & s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))) != s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))))) | s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))))),
  inference(ennf_transformation,[],[f277])).
fof(f277,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((s('type.RedBlackSet.tree'(X0),X4) = s('type.RedBlackSet.tree'(X0),X5) & (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) => s(X1,X2) = s(X1,X6)) & ! [X8,X9,X10,X11] : (s('type.RedBlackSet.tree'(X0),X5) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X8),s('type.RedBlackSet.tree'(X0),X9),s(X0,X10),s('type.RedBlackSet.tree'(X0),X11))) => s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))) = s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))))) => s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))))),
  inference(flattening,[],[f276])).
fof(f276,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : ((s('type.RedBlackSet.tree'(X0),X4) = s('type.RedBlackSet.tree'(X0),X5) & (s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) => s(X1,X2) = s(X1,X6)) & ! [X8,X9,X10,X11] : (s('type.RedBlackSet.tree'(X0),X5) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X8),s('type.RedBlackSet.tree'(X0),X9),s(X0,X10),s('type.RedBlackSet.tree'(X0),X11))) => s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))) = s(X1,happ(s(fun('type.RedBlackSet.tree'(X0),X1),happ(s(fun(X0,fun('type.RedBlackSet.tree'(X0),X1)),happ(s(fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7),s('type.RedBlackSet.color',X8))),s('type.RedBlackSet.tree'(X0),X9))),s(X0,X10))),s('type.RedBlackSet.tree'(X0),X11))))) => s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X19] : ! [X36,X37,X38,X39,X14,X35] : ((s('type.RedBlackSet.tree'(X6),X38) = s('type.RedBlackSet.tree'(X6),X39) & (s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X39) => s(X19,X14) = s(X19,X36)) & ! [X31,X32,X33,X34] : (s('type.RedBlackSet.tree'(X6),X39) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X31),s('type.RedBlackSet.tree'(X6),X32),s(X6,X33),s('type.RedBlackSet.tree'(X6),X34))) => s(X19,happ(s(fun('type.RedBlackSet.tree'(X6),X19),happ(s(fun(X6,fun('type.RedBlackSet.tree'(X6),X19)),happ(s(fun('type.RedBlackSet.tree'(X6),fun(X6,fun('type.RedBlackSet.tree'(X6),X19))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X6),fun(X6,fun('type.RedBlackSet.tree'(X6),X19)))),X35),s('type.RedBlackSet.color',X31))),s('type.RedBlackSet.tree'(X6),X32))),s(X6,X33))),s('type.RedBlackSet.tree'(X6),X34))) = s(X19,happ(s(fun('type.RedBlackSet.tree'(X6),X19),happ(s(fun(X6,fun('type.RedBlackSet.tree'(X6),X19)),happ(s(fun('type.RedBlackSet.tree'(X6),fun(X6,fun('type.RedBlackSet.tree'(X6),X19))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X6),fun(X6,fun('type.RedBlackSet.tree'(X6),X19)))),X37),s('type.RedBlackSet.color',X31))),s('type.RedBlackSet.tree'(X6),X32))),s(X6,X33))),s('type.RedBlackSet.tree'(X6),X34))))) => s(X19,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X6),X38),s(X19,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X6),fun(X6,fun('type.RedBlackSet.tree'(X6),X19)))),X35))) = s(X19,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X6),X39),s(X19,X36),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X6),fun(X6,fun('type.RedBlackSet.tree'(X6),X19)))),X37))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.tree_case_cong')).
fof(f23029,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12))))) ) | $spl274),
  inference(cnf_transformation,[],[f23029_D])).
fof(f23029_D,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12))))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f22775,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK34(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))) )),
  inference(superposition,[],[f1236,f615])).
fof(f615,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X4),s(X1,X6),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X7))) = s(X1,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(X0),X5),s(X1,X2),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(X0),fun(X0,fun('type.RedBlackSet.tree'(X0),X1)))),X3))) | s('type.RedBlackSet.tree'(X0),X5) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X7,X6,X5,X4,X3,X2,X1,X0)),s('type.RedBlackSet.tree'(X0),sK23(X7,X6,X5,X4,X3,X2,X1,X0)),s(X0,sK24(X7,X6,X5,X4,X3,X2,X1,X0)),s('type.RedBlackSet.tree'(X0),sK25(X7,X6,X5,X4,X3,X2,X1,X0)))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X5) | s('type.RedBlackSet.tree'(X0),X4) != s('type.RedBlackSet.tree'(X0),X5)) )),
  inference(cnf_transformation,[],[f459])).
fof(f23028,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl272),
  inference(cnf_transformation,[],[f23028_D])).
fof(f23028_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f23023,plain,(
  s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK34(sK14,sK12),sK12)),s(sK12,sK17(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK34(sK14,sK12),sK12)))) | $spl266),
  inference(cnf_transformation,[],[f23023_D])).
fof(f23023_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK34(sK14,sK12),sK12)),s(sK12,sK17(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK34(sK14,sK12),sK12)))) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f23025,plain,(
  s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK34(sK14,sK12),sK12)),s(sK12,sK20(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK34(sK14,sK12),sK12)))) | $spl268),
  inference(cnf_transformation,[],[f23025_D])).
fof(f23025_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK34(sK14,sK12),sK12)),s(sK12,sK20(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK34(sK14,sK12),sK12)))) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f22774,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK34(sK14,sK12),sK12)),s(sK12,sK20(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK34(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK34(sK14,sK12),sK12)),s(sK12,sK17(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK34(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(superposition,[],[f1236,f609])).
fof(f609,plain,(
  ( ! [X0,X10,X8,X1,X9] : (s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),sK19(X1,X0)),s(X0,sK20(X1,X0)),s('type.RedBlackSet.tree'(X0),sK21(X1,X0)))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),sK16(X1,X0)),s(X0,sK17(X1,X0)),s('type.RedBlackSet.tree'(X0),sK18(X1,X0)))) | s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))) )),
  inference(cnf_transformation,[],[f458])).
fof(f458,plain,(
  ! [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) & ! [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))) | s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),sK16(X1,X0)),s(X0,sK17(X1,X0)),s('type.RedBlackSet.tree'(X0),sK18(X1,X0)))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),sK19(X1,X0)),s(X0,sK20(X1,X0)),s('type.RedBlackSet.tree'(X0),sK21(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17,sK18,sK19,sK20,sK21])],[f457])).
fof(f457,plain,(
  ! [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) & ! [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4))))),
  inference(rectify,[],[f395])).
fof(f395,plain,(
  ! [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) & ! [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) | ? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10))))),
  inference(flattening,[],[f394])).
fof(f394,plain,(
  ! [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(X0),X1) & ! [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) & ! [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) | (? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))))),
  inference(ennf_transformation,[],[f271])).
fof(f271,plain,(
  ! [X0,X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) => (? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))))),
  inference(flattening,[],[f270])).
fof(f270,plain,(
  ! [X0] : ! [X1] : ((s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X5,X6,X7] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X5),s(X0,X6),s('type.RedBlackSet.tree'(X0),X7))) | ? [X2,X3,X4] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X2),s(X0,X3),s('type.RedBlackSet.tree'(X0),X4)))) => (? [X11,X12,X13] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),X8),s(X0,X9),s('type.RedBlackSet.tree'(X0),X10)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X17] : ((s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X17) | ? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X17) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10))) | ? [X11,X12,X13] : s('type.RedBlackSet.tree'(X6),X17) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X11),s(X6,X12),s('type.RedBlackSet.tree'(X6),X13)))) => (? [X8,X9,X10] : s('type.RedBlackSet.tree'(X6),X17) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X6),X8),s(X6,X9),s('type.RedBlackSet.tree'(X6),X10))) | s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X6),X17) | ? [X11,X12,X13] : s('type.RedBlackSet.tree'(X6),X17) = s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X6),X11),s(X6,X12),s('type.RedBlackSet.tree'(X6),X13)))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.RedBlackSet_4|49|_prove_ltb')).
fof(f23021,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl264),
  inference(cnf_transformation,[],[f23021_D])).
fof(f23021_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f22773,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK34(sK14,sK12),sK12)),s(sK12,sK20(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK34(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK34(sK14,sK12),sK12)),s(sK12,sK17(sK34(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK34(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(superposition,[],[f1236,f608])).
fof(f608,plain,(
  ( ! [X0,X12,X1,X13,X11] : (s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(X0),sK19(X1,X0)),s(X0,sK20(X1,X0)),s('type.RedBlackSet.tree'(X0),sK21(X1,X0)))) | s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(X0),X1) | s('type.RedBlackSet.tree'(X0),X1) = s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),sK16(X1,X0)),s(X0,sK17(X1,X0)),s('type.RedBlackSet.tree'(X0),sK18(X1,X0)))) | s('type.RedBlackSet.tree'(X0),X1) != s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(X0),X11),s(X0,X12),s('type.RedBlackSet.tree'(X0),X13)))) )),
  inference(cnf_transformation,[],[f458])).
fof(f23020,plain,(
  s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK32(sK14,sK12),sK12)),s(sK12,sK33(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK32(sK14,sK12),sK12)))) | $spl262),
  inference(cnf_transformation,[],[f23020_D])).
fof(f23020_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK32(sK14,sK12),sK12)),s(sK12,sK33(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK32(sK14,sK12),sK12)))) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f23015,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | $spl254),
  inference(cnf_transformation,[],[f23015_D])).
fof(f23015_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f22764,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK32(sK14,sK12),sK12)),s(sK12,sK33(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK32(sK14,sK12),sK12))))),
  inference(superposition,[],[f1236,f626])).
fof(f23018,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12))))) ) | $spl260),
  inference(cnf_transformation,[],[f23018_D])).
fof(f23018_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12))))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f22763,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK32(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12))) )),
  inference(superposition,[],[f1236,f617])).
fof(f23017,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12))))) ) | $spl258),
  inference(cnf_transformation,[],[f23017_D])).
fof(f23017_D,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12))))) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f22762,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK32(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12))) )),
  inference(superposition,[],[f1236,f615])).
fof(f23016,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl256),
  inference(cnf_transformation,[],[f23016_D])).
fof(f23016_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f23011,plain,(
  s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK32(sK14,sK12),sK12)),s(sK12,sK17(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK32(sK14,sK12),sK12)))) | $spl250),
  inference(cnf_transformation,[],[f23011_D])).
fof(f23011_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK32(sK14,sK12),sK12)),s(sK12,sK17(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK32(sK14,sK12),sK12)))) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f23013,plain,(
  s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK32(sK14,sK12),sK12)),s(sK12,sK20(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK32(sK14,sK12),sK12)))) | $spl252),
  inference(cnf_transformation,[],[f23013_D])).
fof(f23013_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK32(sK14,sK12),sK12)),s(sK12,sK20(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK32(sK14,sK12),sK12)))) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f22761,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK32(sK14,sK12),sK12)),s(sK12,sK20(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK32(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK32(sK14,sK12),sK12)),s(sK12,sK17(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK32(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(superposition,[],[f1236,f609])).
fof(f23009,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl248),
  inference(cnf_transformation,[],[f23009_D])).
fof(f23009_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f22760,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK32(sK14,sK12),sK12)),s(sK12,sK20(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK32(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK32(sK14,sK12),sK12)),s(sK12,sK17(sK32(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK32(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(superposition,[],[f1236,f608])).
fof(f23004,plain,(
  s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | $spl246),
  inference(cnf_transformation,[],[f23004_D])).
fof(f23004_D,plain,(
  s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f23001,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X1),s(X0,X2),s(X0,X3))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s(X0,X4),s(X0,X5))) | s('type.RedBlackSet.color',X1) != s('type.RedBlackSet.color',sK31(sK14,sK12))) ) | $spl244),
  inference(cnf_transformation,[],[f23001_D])).
fof(f23001_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X1),s(X0,X2),s(X0,X3))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s(X0,X4),s(X0,X5))) | s('type.RedBlackSet.color',X1) != s('type.RedBlackSet.color',sK31(sK14,sK12))) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f23002,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X7),s(X6,X8),s(X6,X9))) = s(X6,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s(X6,X10),s(X6,X11))) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | s('type.RedBlackSet.color',X7) != s('type.RedBlackSet.color',sK31(sK14,sK12))) ) | $spl8),
  inference(subsumption_resolution,[],[f22751,f1227])).
fof(f22751,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s(X6,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X7),s(X6,X8),s(X6,X9))) = s(X6,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s(X6,X10),s(X6,X11))) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | s('type.RedBlackSet.color',X7) != s('type.RedBlackSet.color',sK31(sK14,sK12))) )),
  inference(superposition,[],[f1236,f600])).
fof(f600,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X3),s(X0,X5),s(X0,X6))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X4),s(X0,X2),s(X0,X1))) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X4) | s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X4) | s('type.RedBlackSet.color',X3) != s('type.RedBlackSet.color',X4)) )),
  inference(cnf_transformation,[],[f393])).
fof(f393,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.RedBlackSet.color',X3) != s('type.RedBlackSet.color',X4) | (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X4) & s(X0,X2) != s(X0,X5)) | (s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X4) & s(X0,X1) != s(X0,X6)) | s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X3),s(X0,X5),s(X0,X6))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X4),s(X0,X2),s(X0,X1))))),
  inference(flattening,[],[f392])).
fof(f392,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.RedBlackSet.color',X3) != s('type.RedBlackSet.color',X4) | (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X4) & s(X0,X2) != s(X0,X5)) | (s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X4) & s(X0,X1) != s(X0,X6))) | s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X3),s(X0,X5),s(X0,X6))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X4),s(X0,X2),s(X0,X1))))),
  inference(ennf_transformation,[],[f265])).
fof(f265,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.RedBlackSet.color',X3) = s('type.RedBlackSet.color',X4) & (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X4) => s(X0,X2) = s(X0,X5)) & (s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X4) => s(X0,X1) = s(X0,X6))) => s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X3),s(X0,X5),s(X0,X6))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X4),s(X0,X2),s(X0,X1))))),
  inference(flattening,[],[f264])).
fof(f264,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s('type.RedBlackSet.color',X3) = s('type.RedBlackSet.color',X4) & (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X4) => s(X0,X2) = s(X0,X5)) & (s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X4) => s(X0,X1) = s(X0,X6))) => s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X3),s(X0,X5),s(X0,X6))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X4),s(X0,X2),s(X0,X1))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X6] : ! [X61,X62,X38,X39,X53,X11] : ((s('type.RedBlackSet.color',X38) = s('type.RedBlackSet.color',X39) & (s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X39) => s(X6,X53) = s(X6,X62)) & (s('type.RedBlackSet.color','const.RedBlackSet.Black_0') = s('type.RedBlackSet.color',X39) => s(X6,X11) = s(X6,X61))) => s(X6,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X38),s(X6,X53),s(X6,X11))) = s(X6,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X39),s(X6,X62),s(X6,X61))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.color_case_cong')).
fof(f23000,plain,(
  s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | $spl242),
  inference(cnf_transformation,[],[f23000_D])).
fof(f23000_D,plain,(
  s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f22998,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X1),s(X0,X2),s(X0,X3))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s(X0,X4),s(X0,X5))) | s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | s('type.RedBlackSet.color',X1) != s('type.RedBlackSet.color',sK31(sK14,sK12))) ) | $spl14),
  inference(subsumption_resolution,[],[f22750,f1233])).
fof(f22750,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X1),s(X0,X2),s(X0,X3))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s(X0,X4),s(X0,X5))) | s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',sK31(sK14,sK12)) | s('type.RedBlackSet.color',X1) != s('type.RedBlackSet.color',sK31(sK14,sK12))) )),
  inference(superposition,[],[f1236,f600])).
fof(f18098,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X14,'type.RedBlackSet.tree'(sK12)))))) ) | $spl120),
  inference(cnf_transformation,[],[f18098_D])).
fof(f18098_D,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X14,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f2495,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl42),
  inference(cnf_transformation,[],[f2495_D])).
fof(f2495_D,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f22508,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X39,'type.RedBlackSet.tree'(sK12))))) | p(s(bool,X39))) ) | $spl44),
  inference(resolution,[],[f22486,f9562])).
fof(f9562,plain,(
  ( ! [X173,X174,X172] : (sP8(X173,X174,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X172,'type.RedBlackSet.tree'(sK12))))) | p(s(bool,X172))) )),
  inference(resolution,[],[f927,f702])).
fof(f702,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f492])).
fof(f492,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f491])).
fof(f491,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f490])).
fof(f490,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f447])).
fof(f447,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f927,plain,(
  ( ! [X10] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X10,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X10))) )),
  inference(resolution,[],[f597,f806])).
fof(f806,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK41(X2,X1,X0))))) | p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f541])).
fof(f541,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) & ! [X6] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) | (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK40(X2,X1,X0))))))) & (! [X4] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK41(X2,X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK40,sK41])],[f540])).
fof(f540,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) & ! [X6] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) | ? [X5] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & (! [X4] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | p(s(bool,X1)) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f539])).
fof(f539,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) & ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ? [X4] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (! [X4] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | p(s(bool,X1)) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(flattening,[],[f538])).
fof(f538,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) & ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ? [X4] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (! [X4] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f329])).
fof(f329,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X1)) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ? [X4] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f328])).
fof(f328,plain,(
  ! [X0] : ! [X1,X2] : ((p(s(bool,X1)) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ? [X4] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f81])).
fof(f81,axiom,(
  ! [X6] : ! [X7,X23] : ((p(s(bool,X7)) | ? [X9] : p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X9))))) <=> ? [X9] : (p(s(bool,X7)) | p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X9))))))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.RIGHT_OR_EXISTS_THM')).
fof(f22486,plain,(
  ( ! [X2,X0,X1] : (~sP8(X1,X2,X0) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,'F_0') != s(bool,X0)) ) | $spl44),
  inference(subsumption_resolution,[],[f22485,f712])).
fof(f712,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f497])).
fof(f497,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(flattening,[],[f496])).
fof(f496,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(nnf_transformation,[],[f445])).
fof(f445,plain,(
  ! [X0,X1,X2] : (sP6(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f22485,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP8(X1,X2,X0) | ~sP6(X2,X0,X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f22484,f706])).
fof(f706,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f495])).
fof(f495,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f494])).
fof(f494,plain,(
  ! [X1,X0,X2] : ((~sP7(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP7(X1,X0,X2)))),
  inference(flattening,[],[f493])).
fof(f493,plain,(
  ! [X1,X0,X2] : ((~sP7(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP7(X1,X0,X2)))),
  inference(nnf_transformation,[],[f446])).
fof(f446,plain,(
  ! [X1,X0,X2] : (sP7(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f22484,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP8(X1,X2,X0) | ~sP7(X0,X2,X1) | ~sP6(X2,X0,X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f22444,f878])).
fof(f878,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f589])).
fof(f589,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f364])).
fof(f364,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X15] : (s(bool,'T_0') = s(bool,X15) <=> p(s(bool,X15)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f22444,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X1)) | s(bool,'T_0') != s(bool,X2) | ~p(s(bool,X2)) | ~sP8(X1,X2,X0) | ~sP7(X0,X2,X1) | ~sP6(X2,X0,X1)) ) | $spl44),
  inference(resolution,[],[f4543,f698])).
fof(f698,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~p(s(bool,X2)) | ~sP8(X0,X2,X1) | ~sP7(X1,X2,X0) | ~sP6(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f489])).
fof(f489,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | (sP6(X2,X1,X0) & sP7(X1,X2,X0) & sP8(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP6(X2,X1,X0) | ~sP7(X1,X2,X0) | ~sP8(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f488])).
fof(f488,plain,(
  ! [X2,X1,X0] : ((~sP9(X2,X1,X0) | (sP6(X0,X1,X2) & sP7(X1,X0,X2) & sP8(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP6(X0,X1,X2) | ~sP7(X1,X0,X2) | ~sP8(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP9(X2,X1,X0)))),
  inference(flattening,[],[f487])).
fof(f487,plain,(
  ! [X2,X1,X0] : ((~sP9(X2,X1,X0) | (sP6(X0,X1,X2) & sP7(X1,X0,X2) & sP8(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP6(X0,X1,X2) | ~sP7(X1,X0,X2) | ~sP8(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP9(X2,X1,X0)))),
  inference(nnf_transformation,[],[f448])).
fof(f448,plain,(
  ! [X2,X1,X0] : (sP9(X2,X1,X0) <=> (sP6(X0,X1,X2) & sP7(X1,X0,X2) & sP8(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f4543,plain,(
  ( ! [X10,X11,X9] : (~sP9(X11,X9,X10) | s(bool,'F_0') != s(bool,X9) | ~p(s(bool,X11)) | s(bool,'T_0') != s(bool,X10)) ) | $spl44),
  inference(superposition,[],[f3761,f715])).
fof(f715,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X2)) | ~sP9(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f498])).
fof(f498,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP9(X2,X1,X0)) & (~sP9(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f449])).
fof(f449,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP9(X2,X1,X0))),
  inference(definition_folding,[],[f297,f448,f447,f446,f445])).
fof(f297,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f296])).
fof(f296,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f74])).
fof(f74,axiom,(
  ! [X51,X64,X65] : ((p(s(bool,X65)) <=> s(bool,X51) = s(bool,X64)) <=> ((p(s(bool,X65)) | p(s(bool,X64)) | p(s(bool,X51))) & (p(s(bool,X65)) | ~p(s(bool,X51)) | ~p(s(bool,X64))) & (p(s(bool,X64)) | ~p(s(bool,X51)) | ~p(s(bool,X65))) & (p(s(bool,X51)) | ~p(s(bool,X64)) | ~p(s(bool,X65)))))),
  file('thm.RedBlackSet.not_red_ind','thm.sat.sat_2|49|_prove_ltb')).
fof(f17571,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X14,'type.RedBlackSet.tree'(sK12)))))) ) | $spl116),
  inference(cnf_transformation,[],[f17571_D])).
fof(f17571_D,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X14,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f22507,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | ~p(s(bool,X35)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X36,'type.RedBlackSet.tree'(sK12))))) | p(s(bool,X36))) ) | $spl44),
  inference(resolution,[],[f22486,f9285])).
fof(f9285,plain,(
  ( ! [X173,X174,X172] : (sP8(X173,X174,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X172,'type.RedBlackSet.tree'(sK12))))) | p(s(bool,X172))) )),
  inference(resolution,[],[f926,f702])).
fof(f926,plain,(
  ( ! [X9] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X9,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X9))) )),
  inference(resolution,[],[f597,f804])).
fof(f804,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK40(X2,X1,X0))))) | p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f541])).
fof(f17048,plain,(
  ( ! [X14] : (~p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X14,sK13,'type.RedBlackSet.tree'(sK12)))))) ) | $spl114),
  inference(cnf_transformation,[],[f17048_D])).
fof(f17048_D,plain,(
  ( ! [X14] : (~p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X14,sK13,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f22506,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X31)) | ~p(s(bool,X32)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X33,sK13,'type.RedBlackSet.tree'(sK12))))) | ~p(s(bool,X33))) ) | $spl44),
  inference(resolution,[],[f22486,f9064])).
fof(f9064,plain,(
  ( ! [X173,X174,X172] : (sP8(X173,X174,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X172,sK13,'type.RedBlackSet.tree'(sK12))))) | ~p(s(bool,X172))) )),
  inference(resolution,[],[f925,f702])).
fof(f925,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X8,sK13,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,X8))) )),
  inference(resolution,[],[f597,f801])).
fof(f801,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK39(X2,X1,X0))))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f537])).
fof(f537,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK38(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK39(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK38,sK39])],[f536])).
fof(f536,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f535])).
fof(f535,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f534])).
fof(f534,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f327])).
fof(f327,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f326])).
fof(f326,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f79])).
fof(f79,axiom,(
  ! [X6] : ! [X7,X23] : (? [X9] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) & p(s(bool,X23))) <=> (? [X9] : p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) & p(s(bool,X23))))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f16527,plain,(
  ( ! [X14] : (~p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X14,sK13,'type.RedBlackSet.tree'(sK12)))))) ) | $spl112),
  inference(cnf_transformation,[],[f16527_D])).
fof(f16527_D,plain,(
  ( ! [X14] : (~p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X14,sK13,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f22505,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X30,sK13,'type.RedBlackSet.tree'(sK12))))) | ~p(s(bool,X30))) ) | $spl44),
  inference(resolution,[],[f22486,f8622])).
fof(f8622,plain,(
  ( ! [X173,X174,X172] : (sP8(X173,X174,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X172,sK13,'type.RedBlackSet.tree'(sK12))))) | ~p(s(bool,X172))) )),
  inference(resolution,[],[f924,f702])).
fof(f924,plain,(
  ( ! [X7] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X7,sK13,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,X7))) )),
  inference(resolution,[],[f597,f799])).
fof(f799,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK38(X2,X1,X0))))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f537])).
fof(f20465,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X25),s(sK12,X26),s('type.RedBlackSet.tree'(sK12),X27)))))) ) | $spl130),
  inference(cnf_transformation,[],[f20465_D])).
fof(f20465_D,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X25),s(sK12,X26),s('type.RedBlackSet.tree'(sK12),X27)))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f22501,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X19),s(sK12,X20),s('type.RedBlackSet.tree'(sK12),X21)))))) ) | $spl44),
  inference(resolution,[],[f22486,f1780])).
fof(f1780,plain,(
  ( ! [X261,X263,X260,X262,X264] : (sP8(X260,X261,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X262),s(sK12,X263),s('type.RedBlackSet.tree'(sK12),X264)))))) )),
  inference(resolution,[],[f598,f702])).
fof(f598,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5))))))) )),
  inference(cnf_transformation,[],[f455])).
fof(f18028,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X25),s(sK12,X26),s('type.RedBlackSet.tree'(sK12),X27)))))) ) | $spl118),
  inference(cnf_transformation,[],[f18028_D])).
fof(f18028_D,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X25),s(sK12,X26),s('type.RedBlackSet.tree'(sK12),X27)))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f22500,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X14),s(sK12,X15),s('type.RedBlackSet.tree'(sK12),X16)))))) ) | $spl44),
  inference(resolution,[],[f22486,f1371])).
fof(f1371,plain,(
  ( ! [X261,X263,X260,X262,X264] : (sP8(X260,X261,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X262),s(sK12,X263),s('type.RedBlackSet.tree'(sK12),X264)))))) )),
  inference(resolution,[],[f596,f702])).
fof(f596,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X6),s(sK12,X7),s('type.RedBlackSet.tree'(sK12),X8))))))) )),
  inference(cnf_transformation,[],[f455])).
fof(f2494,plain,(
  ( ! [X1] : (p(s(bool,X1))) ) | $spl40),
  inference(cnf_transformation,[],[f2494_D])).
fof(f2494_D,plain,(
  ( ! [X1] : (p(s(bool,X1))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f22404,plain,(
  ( ! [X127,X128,X126,X124] : (p(s(bool,X124)) | s(bool,X124) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X126),s(sK12,X127),s('type.RedBlackSet.tree'(sK12),X128)))))) ) | $spl240),
  inference(cnf_transformation,[],[f22404_D])).
fof(f22404_D,plain,(
  ( ! [X127,X128,X126,X124] : (p(s(bool,X124)) | s(bool,X124) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X126),s(sK12,X127),s('type.RedBlackSet.tree'(sK12),X128)))))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f22381,plain,(
  ( ! [X127,X125,X128,X126,X124] : (p(s(bool,X124)) | p(s(bool,X125)) | s(bool,X124) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X126),s(sK12,X127),s('type.RedBlackSet.tree'(sK12),X128)))))) ) | $spl44),
  inference(resolution,[],[f22079,f1786])).
fof(f1786,plain,(
  ( ! [X292,X294,X290,X293,X291] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X290),s(sK12,X291),s('type.RedBlackSet.tree'(sK12),X292)))),X293,X294)) )),
  inference(resolution,[],[f598,f712])).
fof(f22079,plain,(
  ( ! [X4,X5,X3] : (~sP6(X4,X3,X5) | p(s(bool,X3)) | p(s(bool,X5)) | s(bool,X3) != s(bool,X4)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f22044])).
fof(f22044,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,X3)) | ~sP6(X4,X3,X5) | p(s(bool,X5)) | p(s(bool,X5)) | s(bool,X3) != s(bool,X4)) ) | $spl44),
  inference(resolution,[],[f21968,f716])).
fof(f716,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | s(bool,X0) != s(bool,X1) | ~sP9(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f498])).
fof(f21968,plain,(
  ( ! [X6,X8,X7] : (sP9(X7,X6,X8) | p(s(bool,X6)) | ~sP6(X8,X6,X7) | p(s(bool,X7))) ) | $spl44),
  inference(resolution,[],[f21811,f704])).
fof(f704,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f492])).
fof(f21811,plain,(
  ( ! [X14,X12,X13] : (~sP8(X13,X14,X12) | p(s(bool,X12)) | sP9(X13,X12,X14) | ~sP6(X14,X12,X13)) ) | $spl44),
  inference(subsumption_resolution,[],[f21806,f820])).
fof(f820,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f554])).
fof(f554,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f553])).
fof(f553,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f341])).
fof(f341,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f161])).
fof(f161,axiom,(
  ! [X15] : ((p(s(bool,X15)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X15))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_F_EQ_F')).
fof(f21806,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,X12) | sP9(X13,X12,X14) | p(s(bool,X12)) | ~sP8(X13,X14,X12) | ~sP6(X14,X12,X13)) ) | $spl44),
  inference(resolution,[],[f21792,f699])).
fof(f699,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | p(s(bool,X1)) | ~sP8(X0,X2,X1) | ~sP7(X1,X2,X0) | ~sP6(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f489])).
fof(f21792,plain,(
  ( ! [X10,X11,X9] : (sP7(X10,X9,X11) | s(bool,'F_0') != s(bool,X10)) ) | $spl44),
  inference(subsumption_resolution,[],[f21791,f707])).
fof(f707,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f495])).
fof(f21791,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,X9)) | s(bool,'F_0') != s(bool,X10) | sP7(X10,X9,X11)) ) | $spl44),
  inference(subsumption_resolution,[],[f21754,f706])).
fof(f21754,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,X9)) | s(bool,'F_0') != s(bool,X10) | p(s(bool,X11)) | sP7(X10,X9,X11)) ) | $spl44),
  inference(resolution,[],[f20973,f695])).
fof(f695,plain,(
  ( ! [X2,X0,X1] : (sP7(X1,X2,X0) | ~sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f489])).
fof(f20973,plain,(
  ( ! [X6,X8,X7] : (sP9(X6,X7,X8) | ~p(s(bool,X8)) | s(bool,'F_0') != s(bool,X7) | p(s(bool,X6))) ) | $spl44),
  inference(resolution,[],[f20562,f704])).
fof(f20562,plain,(
  ( ! [X4,X5,X3] : (~sP8(X5,X3,X4) | sP9(X5,X4,X3) | ~p(s(bool,X3)) | s(bool,'F_0') != s(bool,X4)) ) | $spl44),
  inference(subsumption_resolution,[],[f20561,f878])).
fof(f20561,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') != s(bool,X4) | sP9(X5,X4,X3) | ~p(s(bool,X3)) | ~sP8(X5,X3,X4)) ) | $spl44),
  inference(subsumption_resolution,[],[f20555,f20526])).
fof(f20526,plain,(
  ( ! [X6,X8,X7] : (sP6(X7,X6,X8) | s(bool,'T_0') != s(bool,X7) | s(bool,'F_0') != s(bool,X6)) ) | $spl44),
  inference(subsumption_resolution,[],[f20490,f710])).
fof(f710,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f497])).
fof(f20490,plain,(
  ( ! [X6,X8,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,'T_0') != s(bool,X7) | p(s(bool,X8)) | sP6(X7,X6,X8)) ) | $spl44),
  inference(resolution,[],[f4541,f694])).
fof(f694,plain,(
  ( ! [X2,X0,X1] : (sP6(X2,X1,X0) | ~sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f489])).
fof(f4541,plain,(
  ( ! [X4,X5,X3] : (sP9(X5,X3,X4) | s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') != s(bool,X4) | p(s(bool,X5))) ) | $spl44),
  inference(superposition,[],[f3761,f713])).
fof(f713,plain,(
  ( ! [X2,X0,X1] : (sP9(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f498])).
fof(f20555,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') != s(bool,X4) | sP9(X5,X4,X3) | ~p(s(bool,X3)) | ~sP8(X5,X3,X4) | ~sP6(X3,X4,X5)) ) | $spl44),
  inference(resolution,[],[f20527,f698])).
fof(f20527,plain,(
  ( ! [X10,X11,X9] : (sP7(X9,X10,X11) | s(bool,'T_0') != s(bool,X10) | s(bool,'F_0') != s(bool,X9)) ) | $spl44),
  inference(subsumption_resolution,[],[f20491,f706])).
fof(f20491,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,X9) | s(bool,'T_0') != s(bool,X10) | p(s(bool,X11)) | sP7(X9,X10,X11)) ) | $spl44),
  inference(resolution,[],[f4541,f695])).
fof(f22403,plain,(
  ( ! [X123,X121,X122,X119] : (p(s(bool,X119)) | s(bool,X119) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X121),s(sK12,X122),s('type.RedBlackSet.tree'(sK12),X123)))))) ) | $spl238),
  inference(cnf_transformation,[],[f22403_D])).
fof(f22403_D,plain,(
  ( ! [X123,X121,X122,X119] : (p(s(bool,X119)) | s(bool,X119) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X121),s(sK12,X122),s('type.RedBlackSet.tree'(sK12),X123)))))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f22380,plain,(
  ( ! [X123,X121,X122,X120,X119] : (p(s(bool,X119)) | p(s(bool,X120)) | s(bool,X119) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X121),s(sK12,X122),s('type.RedBlackSet.tree'(sK12),X123)))))) ) | $spl44),
  inference(resolution,[],[f22079,f1377])).
fof(f1377,plain,(
  ( ! [X292,X294,X290,X293,X291] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X290),s(sK12,X291),s('type.RedBlackSet.tree'(sK12),X292)))),X293,X294)) )),
  inference(resolution,[],[f596,f712])).
fof(f22402,plain,(
  ( ! [X118,X116] : (p(s(bool,X116)) | p(s(bool,X118)) | s(bool,X116) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X118,'type.RedBlackSet.tree'(sK12)))))) ) | $spl236),
  inference(cnf_transformation,[],[f22402_D])).
fof(f22402_D,plain,(
  ( ! [X118,X116] : (p(s(bool,X116)) | p(s(bool,X118)) | s(bool,X116) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X118,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f22379,plain,(
  ( ! [X118,X116,X117] : (p(s(bool,X116)) | p(s(bool,X117)) | s(bool,X116) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X118,'type.RedBlackSet.tree'(sK12))))) | p(s(bool,X118))) ) | $spl44),
  inference(resolution,[],[f22079,f9568])).
fof(f9568,plain,(
  ( ! [X191,X192,X190] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X190,'type.RedBlackSet.tree'(sK12)))),X191,X192) | p(s(bool,X190))) )),
  inference(resolution,[],[f927,f712])).
fof(f22401,plain,(
  ( ! [X115,X113] : (p(s(bool,X113)) | p(s(bool,X115)) | s(bool,X113) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X115,'type.RedBlackSet.tree'(sK12)))))) ) | $spl234),
  inference(cnf_transformation,[],[f22401_D])).
fof(f22401_D,plain,(
  ( ! [X115,X113] : (p(s(bool,X113)) | p(s(bool,X115)) | s(bool,X113) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X115,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f22378,plain,(
  ( ! [X114,X115,X113] : (p(s(bool,X113)) | p(s(bool,X114)) | s(bool,X113) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X115,'type.RedBlackSet.tree'(sK12))))) | p(s(bool,X115))) ) | $spl44),
  inference(resolution,[],[f22079,f9291])).
fof(f9291,plain,(
  ( ! [X191,X192,X190] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X190,'type.RedBlackSet.tree'(sK12)))),X191,X192) | p(s(bool,X190))) )),
  inference(resolution,[],[f926,f712])).
fof(f22400,plain,(
  ( ! [X112,X110] : (p(s(bool,X110)) | ~p(s(bool,X112)) | s(bool,X110) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X112,sK13,'type.RedBlackSet.tree'(sK12)))))) ) | $spl232),
  inference(cnf_transformation,[],[f22400_D])).
fof(f22400_D,plain,(
  ( ! [X112,X110] : (p(s(bool,X110)) | ~p(s(bool,X112)) | s(bool,X110) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X112,sK13,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f22377,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,X110)) | p(s(bool,X111)) | s(bool,X110) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X112,sK13,'type.RedBlackSet.tree'(sK12))))) | ~p(s(bool,X112))) ) | $spl44),
  inference(resolution,[],[f22079,f9070])).
fof(f9070,plain,(
  ( ! [X191,X192,X190] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X190,sK13,'type.RedBlackSet.tree'(sK12)))),X191,X192) | ~p(s(bool,X190))) )),
  inference(resolution,[],[f925,f712])).
fof(f22399,plain,(
  ( ! [X109,X107] : (p(s(bool,X107)) | ~p(s(bool,X109)) | s(bool,X107) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X109,sK13,'type.RedBlackSet.tree'(sK12)))))) ) | $spl230),
  inference(cnf_transformation,[],[f22399_D])).
fof(f22399_D,plain,(
  ( ! [X109,X107] : (p(s(bool,X107)) | ~p(s(bool,X109)) | s(bool,X107) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X109,sK13,'type.RedBlackSet.tree'(sK12)))))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f22376,plain,(
  ( ! [X109,X107,X108] : (p(s(bool,X107)) | p(s(bool,X108)) | s(bool,X107) != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X109,sK13,'type.RedBlackSet.tree'(sK12))))) | ~p(s(bool,X109))) ) | $spl44),
  inference(resolution,[],[f22079,f8628])).
fof(f8628,plain,(
  ( ! [X191,X192,X190] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X190,sK13,'type.RedBlackSet.tree'(sK12)))),X191,X192) | ~p(s(bool,X190))) )),
  inference(resolution,[],[f924,f712])).
fof(f21573,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f21572,f890])).
fof(f890,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f375])).
fof(f375,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.RedBlackSet.not_red_ind',aHL_FALSITY)).
fof(f21572,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(forward_demodulation,[],[f21308,f1165])).
fof(f1165,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))),
  inference(resolution,[],[f599,f820])).
fof(f21308,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) | $spl12),
  inference(superposition,[],[f598,f1231])).
fof(f21550,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | $spl226),
  inference(cnf_transformation,[],[f21550_D])).
fof(f21550_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f21552,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | $spl228),
  inference(cnf_transformation,[],[f21552_D])).
fof(f21552_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f1233,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl14),
  inference(cnf_transformation,[],[f1233_D])).
fof(f1233_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f21556,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12))))) ) | ($spl12 | $spl165)),
  inference(forward_demodulation,[],[f21555,f1231])).
fof(f21555,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | ($spl12 | $spl165)),
  inference(forward_demodulation,[],[f21554,f1231])).
fof(f21554,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | ($spl12 | $spl165)),
  inference(forward_demodulation,[],[f21553,f1231])).
fof(f21553,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | ($spl12 | $spl165)),
  inference(subsumption_resolution,[],[f21298,f20851])).
fof(f21298,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | $spl12),
  inference(superposition,[],[f1231,f609])).
fof(f1227,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl8),
  inference(cnf_transformation,[],[f1227_D])).
fof(f1227_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f21548,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12))))) ) | ($spl12 | $spl165)),
  inference(forward_demodulation,[],[f21547,f1231])).
fof(f21547,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | ($spl12 | $spl165)),
  inference(forward_demodulation,[],[f21546,f1231])).
fof(f21546,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | ($spl12 | $spl165)),
  inference(forward_demodulation,[],[f21545,f1231])).
fof(f21545,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | ($spl12 | $spl165)),
  inference(subsumption_resolution,[],[f21297,f20851])).
fof(f21297,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))))) ) | $spl12),
  inference(superposition,[],[f1231,f608])).
fof(f21544,plain,(
  s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK21(sK14,sK12),sK12)),s(sK12,sK33(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK21(sK14,sK12),sK12)))) | $spl224),
  inference(cnf_transformation,[],[f21544_D])).
fof(f21544_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK21(sK14,sK12),sK12)),s(sK12,sK33(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK21(sK14,sK12),sK12)))) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f21539,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | $spl216),
  inference(cnf_transformation,[],[f21539_D])).
fof(f21539_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f21288,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK21(sK14,sK12),sK12)),s(sK12,sK33(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK21(sK14,sK12),sK12)))) | $spl12),
  inference(superposition,[],[f1231,f626])).
fof(f21542,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12))))) ) | $spl222),
  inference(cnf_transformation,[],[f21542_D])).
fof(f21542_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12))))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f21287,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK21(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))) ) | $spl12),
  inference(superposition,[],[f1231,f617])).
fof(f21541,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12))))) ) | $spl220),
  inference(cnf_transformation,[],[f21541_D])).
fof(f21541_D,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12))))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f21286,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK21(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12))) ) | $spl12),
  inference(superposition,[],[f1231,f615])).
fof(f21540,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl218),
  inference(cnf_transformation,[],[f21540_D])).
fof(f21540_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f21535,plain,(
  s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK21(sK14,sK12),sK12)),s(sK12,sK17(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK21(sK14,sK12),sK12)))) | $spl212),
  inference(cnf_transformation,[],[f21535_D])).
fof(f21535_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK21(sK14,sK12),sK12)),s(sK12,sK17(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK21(sK14,sK12),sK12)))) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f21537,plain,(
  s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK21(sK14,sK12),sK12)),s(sK12,sK20(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK21(sK14,sK12),sK12)))) | $spl214),
  inference(cnf_transformation,[],[f21537_D])).
fof(f21537_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK21(sK14,sK12),sK12)),s(sK12,sK20(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK21(sK14,sK12),sK12)))) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f21285,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK21(sK14,sK12),sK12)),s(sK12,sK20(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK21(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK21(sK14,sK12),sK12)),s(sK12,sK17(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK21(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl12),
  inference(superposition,[],[f1231,f609])).
fof(f21533,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl210),
  inference(cnf_transformation,[],[f21533_D])).
fof(f21533_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f21284,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK21(sK14,sK12),sK12)),s(sK12,sK20(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK21(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK21(sK14,sK12),sK12)),s(sK12,sK17(sK21(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK21(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl12),
  inference(superposition,[],[f1231,f608])).
fof(f21532,plain,(
  s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK19(sK14,sK12),sK12)),s(sK12,sK33(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK19(sK14,sK12),sK12)))) | $spl208),
  inference(cnf_transformation,[],[f21532_D])).
fof(f21532_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK19(sK14,sK12),sK12)),s(sK12,sK33(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK19(sK14,sK12),sK12)))) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f21527,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | $spl200),
  inference(cnf_transformation,[],[f21527_D])).
fof(f21527_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f21275,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK19(sK14,sK12),sK12)),s(sK12,sK33(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK19(sK14,sK12),sK12)))) | $spl12),
  inference(superposition,[],[f1231,f626])).
fof(f21530,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12))))) ) | $spl206),
  inference(cnf_transformation,[],[f21530_D])).
fof(f21530_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12))))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f21274,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK19(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12))) ) | $spl12),
  inference(superposition,[],[f1231,f617])).
fof(f21529,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12))))) ) | $spl204),
  inference(cnf_transformation,[],[f21529_D])).
fof(f21529_D,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12))))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f21273,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK19(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12))) ) | $spl12),
  inference(superposition,[],[f1231,f615])).
fof(f21528,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl202),
  inference(cnf_transformation,[],[f21528_D])).
fof(f21528_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f21523,plain,(
  s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK19(sK14,sK12),sK12)),s(sK12,sK17(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK19(sK14,sK12),sK12)))) | $spl196),
  inference(cnf_transformation,[],[f21523_D])).
fof(f21523_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK19(sK14,sK12),sK12)),s(sK12,sK17(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK19(sK14,sK12),sK12)))) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f21525,plain,(
  s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK19(sK14,sK12),sK12)),s(sK12,sK20(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK19(sK14,sK12),sK12)))) | $spl198),
  inference(cnf_transformation,[],[f21525_D])).
fof(f21525_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK19(sK14,sK12),sK12)),s(sK12,sK20(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK19(sK14,sK12),sK12)))) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f21272,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK19(sK14,sK12),sK12)),s(sK12,sK20(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK19(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK19(sK14,sK12),sK12)),s(sK12,sK17(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK19(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl12),
  inference(superposition,[],[f1231,f609])).
fof(f21521,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl194),
  inference(cnf_transformation,[],[f21521_D])).
fof(f21521_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f21271,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK19(sK14,sK12),sK12)),s(sK12,sK20(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK19(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK19(sK14,sK12),sK12)),s(sK12,sK17(sK19(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK19(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl12),
  inference(superposition,[],[f1231,f608])).
fof(f21518,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s(X33,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s(X33,X37),s(X33,X38))) = s(X33,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X34),s(X33,X35),s(X33,X36))) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') != s('type.RedBlackSet.color',X34) | s(X33,X36) != s(X33,X38)) ) | $spl190),
  inference(cnf_transformation,[],[f21518_D])).
fof(f21518_D,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s(X33,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s(X33,X37),s(X33,X38))) = s(X33,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X34),s(X33,X35),s(X33,X36))) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') != s('type.RedBlackSet.color',X34) | s(X33,X36) != s(X33,X38)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f21520,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | $spl192),
  inference(cnf_transformation,[],[f21520_D])).
fof(f21520_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f21264,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s(X33,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s(X33,X37),s(X33,X38))) = s(X33,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X34),s(X33,X35),s(X33,X36))) | s(X33,X36) != s(X33,X38) | s('type.RedBlackSet.color','const.RedBlackSet.Black_0') != s('type.RedBlackSet.color',X34)) ) | $spl12),
  inference(superposition,[],[f1231,f602])).
fof(f602,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X3),s(X0,X5),s(X0,X6))) = s(X0,'const.RedBlackSet.color_CASE_3'(s('type.RedBlackSet.color',X4),s(X0,X2),s(X0,X1))) | s(X0,X1) != s(X0,X6) | s('type.RedBlackSet.color','const.RedBlackSet.Red_0') = s('type.RedBlackSet.color',X4) | s('type.RedBlackSet.color',X3) != s('type.RedBlackSet.color',X4)) )),
  inference(cnf_transformation,[],[f393])).
fof(f1231,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | $spl12),
  inference(cnf_transformation,[],[f1231_D])).
fof(f1231_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f21134,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | ($spl11 | $spl165)),
  inference(subsumption_resolution,[],[f21131,f1228])).
fof(f1228,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | $spl11),
  inference(cnf_transformation,[],[f1228_D])).
fof(f1228_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f21131,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl165),
  inference(trivial_inequality_removal,[],[f21118])).
fof(f21118,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl165),
  inference(superposition,[],[f20851,f609])).
fof(f21133,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | ($spl11 | $spl165)),
  inference(subsumption_resolution,[],[f21132,f1228])).
fof(f21132,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl165),
  inference(trivial_inequality_removal,[],[f21117])).
fof(f21117,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl165),
  inference(superposition,[],[f20851,f608])).
fof(f21116,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl188),
  inference(cnf_transformation,[],[f21116_D])).
fof(f21116_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f20851,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) | $spl165),
  inference(cnf_transformation,[],[f20851_D])).
fof(f20851_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) <=> ~$spl165),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl165])])).
fof(f21098,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl11),
  inference(superposition,[],[f1228,f626])).
fof(f21114,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X26,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X27),s(X26,X28),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X29))) = s(X26,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X26,X30),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X31))) | s('type.RedBlackSet.tree'(sK12),X27) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),X26),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X29),s('type.RedBlackSet.color',sK22(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s(sK12,sK24(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))) != s(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),X26),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X31),s('type.RedBlackSet.color',sK22(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s(sK12,sK24(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12))))) ) | $spl186),
  inference(cnf_transformation,[],[f21114_D])).
fof(f21114_D,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X26,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X27),s(X26,X28),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X29))) = s(X26,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X26,X30),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X31))) | s('type.RedBlackSet.tree'(sK12),X27) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),X26),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X29),s('type.RedBlackSet.color',sK22(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s(sK12,sK24(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))) != s(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),X26),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X31),s('type.RedBlackSet.color',sK22(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s(sK12,sK24(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12))))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f21097,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) | s(X26,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X27),s(X26,X28),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X29))) = s(X26,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X26,X30),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X31))) | s(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),X26),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X29),s('type.RedBlackSet.color',sK22(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s(sK12,sK24(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))) != s(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),X26),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X26)))),X31),s('type.RedBlackSet.color',sK22(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s(sK12,sK24(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X29,X28,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X27,X31,X30,X26,sK12)))) | s('type.RedBlackSet.tree'(sK12),X27) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl11),
  inference(superposition,[],[f1228,f617])).
fof(f21113,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) | s('type.RedBlackSet.tree'(sK12),X21) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12))))) ) | $spl184),
  inference(cnf_transformation,[],[f21113_D])).
fof(f21113_D,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) | s('type.RedBlackSet.tree'(sK12),X21) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f21096,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),X21) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl11),
  inference(superposition,[],[f1228,f615])).
fof(f21112,plain,(
  ( ! [X19,X17,X18] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X17),s(sK12,X18),s('type.RedBlackSet.tree'(sK12),X19))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl182),
  inference(cnf_transformation,[],[f21112_D])).
fof(f21112_D,plain,(
  ( ! [X19,X17,X18] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X17),s(sK12,X18),s('type.RedBlackSet.tree'(sK12),X19))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f21109,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl178),
  inference(cnf_transformation,[],[f21109_D])).
fof(f21109_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f21111,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl180),
  inference(cnf_transformation,[],[f21111_D])).
fof(f21111_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f21095,plain,(
  ( ! [X19,X17,X18] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X17),s(sK12,X18),s('type.RedBlackSet.tree'(sK12),X19))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl11),
  inference(superposition,[],[f1228,f609])).
fof(f21107,plain,(
  ( ! [X14,X15,X16] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X14),s(sK12,X15),s('type.RedBlackSet.tree'(sK12),X16))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl176),
  inference(cnf_transformation,[],[f21107_D])).
fof(f21107_D,plain,(
  ( ! [X14,X15,X16] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X14),s(sK12,X15),s('type.RedBlackSet.tree'(sK12),X16))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f21094,plain,(
  ( ! [X14,X15,X16] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') != s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X14),s(sK12,X15),s('type.RedBlackSet.tree'(sK12),X16))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl11),
  inference(superposition,[],[f1228,f608])).
fof(f20852,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | $spl164),
  inference(cnf_transformation,[],[f20852_D])).
fof(f20852_D,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f21105,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl11),
  inference(trivial_inequality_removal,[],[f21091])).
fof(f21091,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl11),
  inference(superposition,[],[f1228,f609])).
fof(f21106,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl11),
  inference(trivial_inequality_removal,[],[f21090])).
fof(f21090,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl11),
  inference(superposition,[],[f1228,f608])).
fof(f20847,plain,(
  s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK18(sK14,sK12),sK12)),s(sK12,sK33(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK18(sK14,sK12),sK12)))) | $spl162),
  inference(cnf_transformation,[],[f20847_D])).
fof(f20847_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK18(sK14,sK12),sK12)),s(sK12,sK33(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK18(sK14,sK12),sK12)))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f20841,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | $spl155),
  inference(cnf_transformation,[],[f20841_D])).
fof(f20841_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f21083,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK18(sK14,sK12),sK12)),s(sK12,sK33(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK18(sK14,sK12),sK12)))) | $spl11),
  inference(superposition,[],[f1228,f626])).
fof(f20845,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12))))) ) | $spl160),
  inference(cnf_transformation,[],[f20845_D])).
fof(f20845_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12))))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f21082,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))) ) | $spl11),
  inference(superposition,[],[f1228,f617])).
fof(f20844,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12))))) ) | $spl158),
  inference(cnf_transformation,[],[f20844_D])).
fof(f20844_D,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f21081,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))) ) | $spl11),
  inference(superposition,[],[f1228,f615])).
fof(f20843,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl156),
  inference(cnf_transformation,[],[f20843_D])).
fof(f20843_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f20838,plain,(
  s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK18(sK14,sK12),sK12)),s(sK12,sK17(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK18(sK14,sK12),sK12)))) | $spl150),
  inference(cnf_transformation,[],[f20838_D])).
fof(f20838_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK18(sK14,sK12),sK12)),s(sK12,sK17(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK18(sK14,sK12),sK12)))) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f20840,plain,(
  s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK18(sK14,sK12),sK12)),s(sK12,sK20(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK18(sK14,sK12),sK12)))) | $spl152),
  inference(cnf_transformation,[],[f20840_D])).
fof(f20840_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK18(sK14,sK12),sK12)),s(sK12,sK20(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK18(sK14,sK12),sK12)))) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f21080,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK18(sK14,sK12),sK12)),s(sK12,sK20(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK18(sK14,sK12),sK12)),s(sK12,sK17(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl11),
  inference(superposition,[],[f1228,f609])).
fof(f20836,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl148),
  inference(cnf_transformation,[],[f20836_D])).
fof(f20836_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f21079,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK18(sK14,sK12),sK12)),s(sK12,sK20(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK18(sK14,sK12),sK12)),s(sK12,sK17(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl11),
  inference(superposition,[],[f1228,f608])).
fof(f20835,plain,(
  s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK16(sK14,sK12),sK12)),s(sK12,sK33(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK16(sK14,sK12),sK12)))) | $spl146),
  inference(cnf_transformation,[],[f20835_D])).
fof(f20835_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK16(sK14,sK12),sK12)),s(sK12,sK33(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK16(sK14,sK12),sK12)))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f20829,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | $spl139),
  inference(cnf_transformation,[],[f20829_D])).
fof(f20829_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) <=> ~$spl139),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl139])])).
fof(f21070,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK16(sK14,sK12),sK12)),s(sK12,sK33(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK16(sK14,sK12),sK12)))) | $spl11),
  inference(superposition,[],[f1228,f626])).
fof(f20833,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12))))) ) | $spl144),
  inference(cnf_transformation,[],[f20833_D])).
fof(f20833_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f21069,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12))) ) | $spl11),
  inference(superposition,[],[f1228,f617])).
fof(f20832,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12))))) ) | $spl142),
  inference(cnf_transformation,[],[f20832_D])).
fof(f20832_D,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f21068,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12))) ) | $spl11),
  inference(superposition,[],[f1228,f615])).
fof(f20831,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl140),
  inference(cnf_transformation,[],[f20831_D])).
fof(f20831_D,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f20826,plain,(
  s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK16(sK14,sK12),sK12)),s(sK12,sK17(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK16(sK14,sK12),sK12)))) | $spl134),
  inference(cnf_transformation,[],[f20826_D])).
fof(f20826_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK16(sK14,sK12),sK12)),s(sK12,sK17(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK16(sK14,sK12),sK12)))) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f20828,plain,(
  s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK16(sK14,sK12),sK12)),s(sK12,sK20(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK16(sK14,sK12),sK12)))) | $spl136),
  inference(cnf_transformation,[],[f20828_D])).
fof(f20828_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK16(sK14,sK12),sK12)),s(sK12,sK20(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK16(sK14,sK12),sK12)))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f21067,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK16(sK14,sK12),sK12)),s(sK12,sK20(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK16(sK14,sK12),sK12)),s(sK12,sK17(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl11),
  inference(superposition,[],[f1228,f609])).
fof(f20824,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl132),
  inference(cnf_transformation,[],[f20824_D])).
fof(f20824_D,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f21066,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK16(sK14,sK12),sK12)),s(sK12,sK20(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK16(sK14,sK12),sK12)),s(sK12,sK17(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl11),
  inference(superposition,[],[f1228,f608])).
fof(f20877,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f20876,f890])).
fof(f20876,plain,(
  p(s(bool,'F_0')) | $spl10),
  inference(forward_demodulation,[],[f20614,f1165])).
fof(f20614,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) | $spl10),
  inference(superposition,[],[f596,f1229])).
fof(f20869,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl174),
  inference(cnf_transformation,[],[f20869_D])).
fof(f20869_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f20867,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | $spl10),
  inference(forward_demodulation,[],[f20607,f1229])).
fof(f20607,plain,(
  s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK32('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK33('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK34('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl10),
  inference(superposition,[],[f1229,f626])).
fof(f20866,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23)))) ) | $spl172),
  inference(cnf_transformation,[],[f20866_D])).
fof(f20866_D,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23)))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f20865,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20864,f1229])).
fof(f20864,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),X21) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20606,f1229])).
fof(f20606,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),X21) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(superposition,[],[f1229,f617])).
fof(f20863,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X15) | s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X14,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X19))) = s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X15),s(X14,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X17))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s(sK12,sK24(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12))))) ) | $spl170),
  inference(cnf_transformation,[],[f20863_D])).
fof(f20863_D,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X15) | s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X14,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X19))) = s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X15),s(X14,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X17))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s(sK12,sK24(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12))))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f20862,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X15) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s(sK12,sK24(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)))) | s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X14,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X19))) = s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X15),s(X14,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X17))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14)) ) | $spl10),
  inference(forward_demodulation,[],[f20861,f1229])).
fof(f20861,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s(sK12,sK24(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)))) | s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X14,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X19))) = s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X15),s(X14,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X17))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),X15) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20860,f1229])).
fof(f20860,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X14,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X19))) = s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X15),s(X14,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X17))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s(sK12,sK24(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)))) | s('type.RedBlackSet.tree'(sK12),X15) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20605,f1229])).
fof(f20605,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X15),s(X14,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X17))) = s(X14,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))),s(X14,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X14)))),X19))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s(sK12,sK24(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X17,X16,'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),X15,X19,X18,X14,sK12)))) | s('type.RedBlackSet.tree'(sK12),X15) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(superposition,[],[f1229,f615])).
fof(f20854,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl166),
  inference(cnf_transformation,[],[f20854_D])).
fof(f20854_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f20856,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | $spl168),
  inference(cnf_transformation,[],[f20856_D])).
fof(f20856_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f20859,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14)) ) | $spl10),
  inference(forward_demodulation,[],[f20858,f1229])).
fof(f20858,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20857,f1229])).
fof(f20857,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20604,f1229])).
fof(f20604,plain,(
  ( ! [X12,X13,X11] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X11),s(sK12,X12),s('type.RedBlackSet.tree'(sK12),X13))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(superposition,[],[f1229,f609])).
fof(f20850,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14)) ) | $spl10),
  inference(forward_demodulation,[],[f20849,f1229])).
fof(f20849,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20848,f1229])).
fof(f20848,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(forward_demodulation,[],[f20603,f1229])).
fof(f20603,plain,(
  ( ! [X10,X8,X9] : (s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0') = s('type.RedBlackSet.tree'(sK12),sK14) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK20('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK21('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s(sK12,sK17('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)),s('type.RedBlackSet.tree'(sK12),sK18('const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))),sK12)))) | s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X8),s(sK12,X9),s('type.RedBlackSet.tree'(sK12),X10))) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))))) ) | $spl10),
  inference(superposition,[],[f1229,f608])).
fof(f20842,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | $spl154),
  inference(cnf_transformation,[],[f20842_D])).
fof(f20842_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f20594,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK18(sK14,sK12),sK12)),s(sK12,sK33(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK18(sK14,sK12),sK12)))) | $spl10),
  inference(superposition,[],[f1229,f626])).
fof(f20593,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK18(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))) ) | $spl10),
  inference(superposition,[],[f1229,f617])).
fof(f20592,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK18(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12))) ) | $spl10),
  inference(superposition,[],[f1229,f615])).
fof(f20591,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK18(sK14,sK12),sK12)),s(sK12,sK20(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK18(sK14,sK12),sK12)),s(sK12,sK17(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl10),
  inference(superposition,[],[f1229,f609])).
fof(f20590,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK18(sK14,sK12),sK12)),s(sK12,sK20(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK18(sK14,sK12),sK12)),s(sK12,sK17(sK18(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK18(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl10),
  inference(superposition,[],[f1229,f608])).
fof(f20830,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | $spl138),
  inference(cnf_transformation,[],[f20830_D])).
fof(f20830_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f20581,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK16(sK14,sK12),sK12)),s(sK12,sK33(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK16(sK14,sK12),sK12)))) | $spl10),
  inference(superposition,[],[f1229,f626])).
fof(f20580,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) | s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))) != s(X12,happ(s(fun('type.RedBlackSet.tree'(sK12),X12),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17),s('type.RedBlackSet.color',sK22(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s(sK12,sK24(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK16(sK14,sK12),X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),X13) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12))) ) | $spl10),
  inference(superposition,[],[f1229,f617])).
fof(f20579,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X7),s(X6,X8),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X9))) = s(X6,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(X6,X10),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X6)))),X11))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s(sK12,sK24(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X9,X8,sK16(sK14,sK12),X7,X11,X10,X6,sK12)))) | s('type.RedBlackSet.tree'(sK12),X7) != s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12))) ) | $spl10),
  inference(superposition,[],[f1229,f615])).
fof(f20578,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK16(sK14,sK12),sK12)),s(sK12,sK20(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK16(sK14,sK12),sK12)),s(sK12,sK17(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) ) | $spl10),
  inference(superposition,[],[f1229,f609])).
fof(f20577,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK16(sK14,sK12),sK12)),s(sK12,sK20(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK16(sK14,sK12),sK12)),s(sK12,sK17(sK16(sK14,sK12),sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK16(sK14,sK12),sK12)))) | s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) ) | $spl10),
  inference(superposition,[],[f1229,f608])).
fof(f20301,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,X24)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X25),s(sK12,X26),s('type.RedBlackSet.tree'(sK12),X27)))))) )),
  inference(resolution,[],[f1786,f4689])).
fof(f4689,plain,(
  ( ! [X4,X5] : (~sP6(X5,'F_0',X4) | p(s(bool,X4)) | s(bool,'F_0') != s(bool,X5)) )),
  inference(duplicate_literal_removal,[],[f4684])).
fof(f4684,plain,(
  ( ! [X4,X5] : (p(s(bool,X4)) | ~sP6(X5,'F_0',X4) | p(s(bool,X4)) | s(bool,'F_0') != s(bool,X5)) )),
  inference(resolution,[],[f4656,f716])).
fof(f4656,plain,(
  ( ! [X6,X7] : (sP9(X6,'F_0',X7) | p(s(bool,X6)) | ~sP6(X7,'F_0',X6)) )),
  inference(subsumption_resolution,[],[f4654,f704])).
fof(f4654,plain,(
  ( ! [X6,X7] : (sP9(X6,'F_0',X7) | p(s(bool,X6)) | ~sP8(X6,X7,'F_0') | ~sP6(X7,'F_0',X6)) )),
  inference(resolution,[],[f4650,f700])).
fof(f700,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | p(s(bool,X0)) | ~sP8(X0,X2,X1) | ~sP7(X1,X2,X0) | ~sP6(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f489])).
fof(f4650,plain,(
  ( ! [X4,X5] : (sP7('F_0',X4,X5)) )),
  inference(subsumption_resolution,[],[f4646,f706])).
fof(f4646,plain,(
  ( ! [X4,X5] : (sP7('F_0',X4,X5) | p(s(bool,X5))) )),
  inference(resolution,[],[f4643,f704])).
fof(f4643,plain,(
  ( ! [X6,X7] : (~sP8(X7,X6,'F_0') | sP7('F_0',X6,X7)) )),
  inference(subsumption_resolution,[],[f4639,f707])).
fof(f4639,plain,(
  ( ! [X6,X7] : (~p(s(bool,X6)) | ~sP8(X7,X6,'F_0') | sP7('F_0',X6,X7)) )),
  inference(resolution,[],[f4633,f695])).
fof(f4633,plain,(
  ( ! [X2,X3] : (sP9(X3,'F_0',X2) | ~p(s(bool,X2)) | ~sP8(X3,X2,'F_0')) )),
  inference(subsumption_resolution,[],[f4632,f878])).
fof(f4632,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | sP9(X3,'F_0',X2) | ~p(s(bool,X2)) | ~sP8(X3,X2,'F_0')) )),
  inference(subsumption_resolution,[],[f4629,f4619])).
fof(f4619,plain,(
  ( ! [X4,X5] : (sP6(X4,'F_0',X5) | s(bool,'T_0') != s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4614,f710])).
fof(f4614,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X4) | p(s(bool,X5)) | sP6(X4,'F_0',X5)) )),
  inference(resolution,[],[f3731,f694])).
fof(f3731,plain,(
  ( ! [X8,X7] : (sP9(X8,'F_0',X7) | s(bool,'T_0') != s(bool,X7) | p(s(bool,X8))) )),
  inference(superposition,[],[f3722,f713])).
fof(f3722,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(subsumption_resolution,[],[f3711,f597])).
fof(f3711,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))))),
  inference(superposition,[],[f1019,f878])).
fof(f1019,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))),
  inference(resolution,[],[f597,f873])).
fof(f873,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f587])).
fof(f587,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f361])).
fof(f361,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f360])).
fof(f360,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f4629,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | sP9(X3,'F_0',X2) | ~p(s(bool,X2)) | ~sP8(X3,X2,'F_0') | ~sP6(X2,'F_0',X3)) )),
  inference(resolution,[],[f4620,f698])).
fof(f4620,plain,(
  ( ! [X6,X7] : (sP7('F_0',X6,X7) | s(bool,'T_0') != s(bool,X6)) )),
  inference(subsumption_resolution,[],[f4615,f706])).
fof(f4615,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | p(s(bool,X7)) | sP7('F_0',X6,X7)) )),
  inference(resolution,[],[f3731,f695])).
fof(f19603,plain,(
  ( ! [X24,X22] : (s(bool,'T_0') != s(bool,X24) | p(s(bool,X22)) | s(bool,X22) != s(bool,X24)) ) | $spl128),
  inference(cnf_transformation,[],[f19603_D])).
fof(f19603_D,plain,(
  ( ! [X24,X22] : (s(bool,'T_0') != s(bool,X24) | p(s(bool,X22)) | s(bool,X22) != s(bool,X24)) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f19606,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') != s(bool,X33) | s(bool,X31) != s(bool,X33) | p(s(bool,X31)) | p(s(bool,X32))) ) | $spl126),
  inference(subsumption_resolution,[],[f19535,f820])).
fof(f19535,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') != s(bool,X32) | s(bool,'T_0') != s(bool,X33) | s(bool,X31) != s(bool,X33) | p(s(bool,X31)) | p(s(bool,X32))) ) | $spl126),
  inference(superposition,[],[f19295,f791])).
fof(f791,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f419])).
fof(f419,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f418])).
fof(f418,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f323])).
fof(f323,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X8,X10] : ((p(s(bool,X8)) => p(s(bool,X10))) => ((p(s(bool,X10)) => p(s(bool,X8))) => s(bool,X8) = s(bool,X10)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_ANTISYM_AX')).
fof(f19605,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,X30) | s(bool,X28) != s(bool,X30) | p(s(bool,X29)) | p(s(bool,X28))) ) | $spl126),
  inference(subsumption_resolution,[],[f19534,f820])).
fof(f19534,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') != s(bool,X29) | s(bool,'T_0') != s(bool,X30) | s(bool,X28) != s(bool,X30) | p(s(bool,X29)) | p(s(bool,X28))) ) | $spl126),
  inference(superposition,[],[f19295,f791])).
fof(f19604,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,X27) | s(bool,X25) != s(bool,X27) | p(s(bool,X25)) | p(s(bool,X26))) ) | $spl126),
  inference(subsumption_resolution,[],[f19533,f820])).
fof(f19533,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,X26) | s(bool,'T_0') != s(bool,X27) | s(bool,X25) != s(bool,X27) | p(s(bool,X25)) | p(s(bool,X26))) ) | $spl126),
  inference(superposition,[],[f19295,f787])).
fof(f787,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f527])).
fof(f527,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1)))) & (((~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X1)))) | s(bool,X0) = s(bool,X1)))),
  inference(flattening,[],[f526])).
fof(f526,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1))))) & (((~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X1)))) | s(bool,X0) = s(bool,X1)))),
  inference(nnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1)))))),
  inference(flattening,[],[f320])).
fof(f320,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1)))))),
  inference(rectify,[],[f165])).
fof(f165,axiom,(
  ! [X8,X10] : (s(bool,X8) = s(bool,X10) <=> ((p(s(bool,X8)) & p(s(bool,X10))) | (~p(s(bool,X8)) & ~p(s(bool,X10)))))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.EQ_EXPAND')).
fof(f19602,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,X24) | s(bool,X22) != s(bool,X24) | p(s(bool,X23)) | p(s(bool,X22))) ) | $spl126),
  inference(subsumption_resolution,[],[f19532,f820])).
fof(f19532,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') != s(bool,X23) | s(bool,'T_0') != s(bool,X24) | s(bool,X22) != s(bool,X24) | p(s(bool,X23)) | p(s(bool,X22))) ) | $spl126),
  inference(superposition,[],[f19295,f787])).
fof(f19295,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') != s(bool,X4) | s(bool,X3) != s(bool,X4)) ) | $spl126),
  inference(cnf_transformation,[],[f19295_D])).
fof(f19295_D,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') != s(bool,X4) | s(bool,X3) != s(bool,X4)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f19294,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,X3) != s(bool,X4) | p(s(bool,X5)) | s(bool,'T_0') != s(bool,X4)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f19267])).
fof(f19267,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,X3) != s(bool,X4) | p(s(bool,X5)) | p(s(bool,X5)) | s(bool,'T_0') != s(bool,X4)) ) | $spl44),
  inference(resolution,[],[f4523,f716])).
fof(f4523,plain,(
  ( ! [X6,X8,X7] : (sP9(X8,X6,'T_0') | s(bool,'F_0') != s(bool,X7) | s(bool,X6) != s(bool,X7) | p(s(bool,X8))) ) | $spl44),
  inference(superposition,[],[f3761,f713])).
fof(f2305,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) | $spl22),
  inference(cnf_transformation,[],[f2305_D])).
fof(f2305_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12)))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f19101,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f19080,f1045])).
fof(f1045,plain,(
  ( ! [X2,X3] : (sP9(X3,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X2) | p(s(bool,X2)) | p(s(bool,X3))) )),
  inference(superposition,[],[f597,f713])).
fof(f19080,plain,(
  ( ! [X26,X27] : (~sP9(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f14942,f626])).
fof(f14942,plain,(
  ( ! [X6,X7] : (~sP9(X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X7) | p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(resolution,[],[f1142,f694])).
fof(f1142,plain,(
  ( ! [X112,X113] : (~sP6(X112,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X113) | p(s(bool,X113)) | p(s(bool,X112))) )),
  inference(resolution,[],[f599,f709])).
fof(f709,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f497])).
fof(f2303,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12))))) ) | $spl20),
  inference(cnf_transformation,[],[f2303_D])).
fof(f2303_D,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f19100,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f19079,f1045])).
fof(f19079,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f14942,f617])).
fof(f2302,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12))))) ) | $spl18),
  inference(cnf_transformation,[],[f2302_D])).
fof(f2302_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f19099,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f19078,f1045])).
fof(f19078,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f14942,f615])).
fof(f1229,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | $spl10),
  inference(cnf_transformation,[],[f1229_D])).
fof(f1229_D,plain,(
  s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f19098,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f19077,f1045])).
fof(f19077,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f14942,f609])).
fof(f19097,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f19076,f1045])).
fof(f19076,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f14942,f608])).
fof(f18894,plain,(
  ( ! [X0,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0))) ) | $spl124),
  inference(cnf_transformation,[],[f18894_D])).
fof(f18894_D,plain,(
  ( ! [X0,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f18898,plain,(
  ( ! [X26,X27] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f18874,f12250])).
fof(f12250,plain,(
  ( ! [X6,X7] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6,X7) | ~p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(resolution,[],[f980,f696])).
fof(f696,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X2,X1) | ~sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f489])).
fof(f980,plain,(
  ( ! [X109,X110] : (~sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X109,X110) | p(s(bool,X110)) | ~p(s(bool,X109))) )),
  inference(resolution,[],[f597,f701])).
fof(f701,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f18874,plain,(
  ( ! [X26,X27] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f14712,f626])).
fof(f14712,plain,(
  ( ! [X8,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X8,X9) | p(s(bool,X9)) | p(s(bool,X8))) )),
  inference(resolution,[],[f1141,f694])).
fof(f1141,plain,(
  ( ! [X111,X110] : (~sP6(X110,X111,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X111)) | p(s(bool,X110))) )),
  inference(resolution,[],[f599,f709])).
fof(f18897,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f18873,f12250])).
fof(f18873,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f14712,f617])).
fof(f18896,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f18872,f12250])).
fof(f18872,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f14712,f615])).
fof(f18895,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f18871,f12250])).
fof(f18871,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f14712,f609])).
fof(f18893,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f18870,f12250])).
fof(f18870,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f14712,f608])).
fof(f18851,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f18818,f1044])).
fof(f1044,plain,(
  ( ! [X0,X1] : (sP9(X1,X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(superposition,[],[f597,f713])).
fof(f18818,plain,(
  ( ! [X26,X27] : (~sP9(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f14389,f626])).
fof(f14389,plain,(
  ( ! [X6,X7] : (~sP9(X6,X7,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(resolution,[],[f1140,f694])).
fof(f1140,plain,(
  ( ! [X109,X108] : (~sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X108,X109) | p(s(bool,X109)) | p(s(bool,X108))) )),
  inference(resolution,[],[f599,f709])).
fof(f18850,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f18817,f1044])).
fof(f18817,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f14389,f617])).
fof(f18849,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f18816,f1044])).
fof(f18816,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f14389,f615])).
fof(f18848,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f18815,f1044])).
fof(f18815,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f14389,f609])).
fof(f18847,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f18814,f1044])).
fof(f18814,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f14389,f608])).
fof(f18792,plain,(
  ( ! [X0,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X0))) ) | $spl122),
  inference(cnf_transformation,[],[f18792_D])).
fof(f18792_D,plain,(
  ( ! [X0,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X0))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f18796,plain,(
  ( ! [X26,X27] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f18778,f977])).
fof(f977,plain,(
  ( ! [X103,X104] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X103,X104) | p(s(bool,X104)) | ~p(s(bool,X103))) )),
  inference(resolution,[],[f597,f697])).
fof(f697,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f489])).
fof(f18778,plain,(
  ( ! [X26,X27] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | ~p(s(bool,X26)) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f14359,f626])).
fof(f14359,plain,(
  ( ! [X8,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X9,X8) | ~p(s(bool,X9)) | ~p(s(bool,X8))) )),
  inference(resolution,[],[f1137,f695])).
fof(f1137,plain,(
  ( ! [X103,X102] : (~sP7(X102,X103,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X103)) | ~p(s(bool,X102))) )),
  inference(resolution,[],[f599,f705])).
fof(f705,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f495])).
fof(f18795,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f18777,f977])).
fof(f18777,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f14359,f617])).
fof(f18794,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f18776,f977])).
fof(f18776,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | ~p(s(bool,X10)) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f14359,f615])).
fof(f18793,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f18775,f977])).
fof(f18775,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | ~p(s(bool,X5)) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f14359,f609])).
fof(f18791,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f18774,f977])).
fof(f18774,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f14359,f608])).
fof(f18078,plain,(
  ( ! [X14,X15] : (p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X14,'type.RedBlackSet.tree'(sK12)))))) )),
  inference(resolution,[],[f9568,f4689])).
fof(f17867,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,X24)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X25),s(sK12,X26),s('type.RedBlackSet.tree'(sK12),X27)))))) )),
  inference(resolution,[],[f1377,f4689])).
fof(f17551,plain,(
  ( ! [X14,X15] : (p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X14,'type.RedBlackSet.tree'(sK12)))))) )),
  inference(resolution,[],[f9291,f4689])).
fof(f17028,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X14,sK13,'type.RedBlackSet.tree'(sK12)))))) )),
  inference(resolution,[],[f9070,f4689])).
fof(f16507,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK38(X14,sK13,'type.RedBlackSet.tree'(sK12)))))) )),
  inference(resolution,[],[f8628,f4689])).
fof(f15834,plain,(
  ( ! [X0,X1] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X0,X1)) ) | $spl110),
  inference(cnf_transformation,[],[f15834_D])).
fof(f15834_D,plain,(
  ( ! [X0,X1] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X0,X1)) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f15838,plain,(
  ( ! [X26,X27] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f15825,f969])).
fof(f969,plain,(
  ( ! [X88,X87] : (sP4(X87,X88,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) )),
  inference(resolution,[],[f597,f685])).
fof(f685,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f484])).
fof(f484,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(flattening,[],[f483])).
fof(f483,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(nnf_transformation,[],[f442])).
fof(f442,plain,(
  ! [X0,X1,X2] : (sP4(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f15825,plain,(
  ( ! [X26,X27] : (~sP4(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1178,f626])).
fof(f1178,plain,(
  ( ! [X142,X143] : (~sP4(X142,X143,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X142,X143)) )),
  inference(resolution,[],[f599,f912])).
fof(f912,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,X2) | p(s(bool,X0)) | ~sP4(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f683])).
fof(f683,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP4(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f482])).
fof(f482,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (sP4(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP4(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f481])).
fof(f481,plain,(
  ! [X2,X0,X1] : ((~sP5(X2,X0,X1) | (sP4(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP4(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP5(X2,X0,X1)))),
  inference(flattening,[],[f480])).
fof(f480,plain,(
  ! [X2,X0,X1] : ((~sP5(X2,X0,X1) | (sP4(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP4(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP5(X2,X0,X1)))),
  inference(nnf_transformation,[],[f443])).
fof(f443,plain,(
  ! [X2,X0,X1] : (sP5(X2,X0,X1) <=> (sP4(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f15837,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f15824,f969])).
fof(f15824,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP4(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1178,f617])).
fof(f15836,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f15823,f969])).
fof(f15823,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP4(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1178,f615])).
fof(f15835,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f15822,f969])).
fof(f15822,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP4(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1178,f609])).
fof(f15833,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f15821,f969])).
fof(f15821,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP4(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1178,f608])).
fof(f15104,plain,(
  ( ! [X0,X1] : (~sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0))) ) | $spl108),
  inference(cnf_transformation,[],[f15104_D])).
fof(f15104_D,plain,(
  ( ! [X0,X1] : (~sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f15108,plain,(
  ( ! [X26,X27] : (~sP9(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f15088,f978])).
fof(f978,plain,(
  ( ! [X105,X106] : (~sP9(X105,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X106) | p(s(bool,X106)) | ~p(s(bool,X105))) )),
  inference(resolution,[],[f597,f697])).
fof(f15088,plain,(
  ( ! [X26,X27] : (~sP9(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X26)) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1195,f626])).
fof(f1195,plain,(
  ( ! [X6,X7] : (~sP9(X7,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X6) | ~p(s(bool,X7)) | ~p(s(bool,X6))) )),
  inference(superposition,[],[f599,f715])).
fof(f15107,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f15087,f978])).
fof(f15087,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1195,f617])).
fof(f15106,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f15086,f978])).
fof(f15086,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X10)) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1195,f615])).
fof(f15105,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f15085,f978])).
fof(f15085,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X5)) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1195,f609])).
fof(f15103,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f15084,f978])).
fof(f15084,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1195,f608])).
fof(f15066,plain,(
  ( ! [X0,X1] : (sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X0))) ) | $spl106),
  inference(cnf_transformation,[],[f15066_D])).
fof(f15066_D,plain,(
  ( ! [X0,X1] : (sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X0))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f15070,plain,(
  ( ! [X26,X27] : (sP9(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f15053,f1045])).
fof(f15053,plain,(
  ( ! [X26,X27] : (sP9(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1193,f626])).
fof(f1193,plain,(
  ( ! [X2,X3] : (sP9(X3,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X2) | ~p(s(bool,X2)) | p(s(bool,X3))) )),
  inference(superposition,[],[f599,f713])).
fof(f15069,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP9(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f15052,f1045])).
fof(f15052,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP9(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1193,f617])).
fof(f15068,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP9(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f15051,f1045])).
fof(f15051,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP9(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1193,f615])).
fof(f15067,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP9(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f15050,f1045])).
fof(f15050,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP9(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1193,f609])).
fof(f15065,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f15049,f1045])).
fof(f15049,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1193,f608])).
fof(f15030,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0))) ) | $spl104),
  inference(cnf_transformation,[],[f15030_D])).
fof(f15030_D,plain,(
  ( ! [X0,X1] : (sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f15034,plain,(
  ( ! [X26,X27] : (sP9(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f15009,f1044])).
fof(f15009,plain,(
  ( ! [X26,X27] : (sP9(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1192,f626])).
fof(f1192,plain,(
  ( ! [X0,X1] : (sP9(X1,X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(superposition,[],[f599,f713])).
fof(f15033,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP9(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f15008,f1044])).
fof(f15008,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP9(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1192,f617])).
fof(f15032,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP9(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f15007,f1044])).
fof(f15007,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP9(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1192,f615])).
fof(f15031,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP9(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f15006,f1044])).
fof(f15006,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP9(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1192,f609])).
fof(f15029,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f15005,f1044])).
fof(f15005,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1192,f608])).
fof(f14986,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14961,f987])).
fof(f987,plain,(
  ( ! [X123,X124] : (sP6(X123,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X124)) )),
  inference(resolution,[],[f597,f711])).
fof(f711,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f497])).
fof(f14961,plain,(
  ( ! [X26,X27] : (~sP6(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1142,f626])).
fof(f14985,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14960,f987])).
fof(f14960,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP6(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1142,f617])).
fof(f14984,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14959,f987])).
fof(f14959,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP6(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1142,f615])).
fof(f14983,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14958,f987])).
fof(f14958,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP6(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1142,f609])).
fof(f14982,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14957,f987])).
fof(f14957,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1142,f608])).
fof(f14793,plain,(
  ( ! [X0] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0) | s(bool,'T_0') != s(bool,X0)) ) | $spl102),
  inference(cnf_transformation,[],[f14793_D])).
fof(f14793_D,plain,(
  ( ! [X0] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0) | s(bool,'T_0') != s(bool,X0)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f14776,plain,(
  ( ! [X22] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X22) | s(bool,'T_0') != s(bool,X22) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f4776,f626])).
fof(f4776,plain,(
  ( ! [X9] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),'F_0',X9) | s(bool,'T_0') != s(bool,X9)) )),
  inference(resolution,[],[f4627,f1136])).
fof(f1136,plain,(
  ( ! [X101,X100] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X100,X101)) )),
  inference(resolution,[],[f599,f704])).
fof(f4627,plain,(
  ( ! [X4,X5] : (~sP8(X5,X4,'F_0') | sP9(X5,'F_0',X4) | s(bool,'T_0') != s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4626,f890])).
fof(f4626,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X4) | sP9(X5,'F_0',X4) | p(s(bool,'F_0')) | ~sP8(X5,X4,'F_0')) )),
  inference(subsumption_resolution,[],[f4623,f708])).
fof(f708,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f495])).
fof(f4623,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X4) | sP9(X5,'F_0',X4) | p(s(bool,'F_0')) | ~sP8(X5,X4,'F_0') | ~sP7('F_0',X4,X5)) )),
  inference(resolution,[],[f4619,f699])).
fof(f14775,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X15) | s(bool,'T_0') != s(bool,X15) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f4776,f617])).
fof(f14774,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X8) | s(bool,'T_0') != s(bool,X8) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f4776,f615])).
fof(f14773,plain,(
  ( ! [X6,X4,X7,X5] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X4) | s(bool,'T_0') != s(bool,X4) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f4776,f609])).
fof(f14772,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0) | s(bool,'T_0') != s(bool,X0) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f4776,f608])).
fof(f14755,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14731,f986])).
fof(f986,plain,(
  ( ! [X121,X122] : (sP6(X121,X122,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) )),
  inference(resolution,[],[f597,f710])).
fof(f14731,plain,(
  ( ! [X26,X27] : (~sP6(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1141,f626])).
fof(f14754,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14730,f986])).
fof(f14730,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP6(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1141,f617])).
fof(f14753,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14729,f986])).
fof(f14729,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP6(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1141,f615])).
fof(f14752,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14728,f986])).
fof(f14728,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP6(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1141,f609])).
fof(f14751,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14727,f986])).
fof(f14727,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1141,f608])).
fof(f14533,plain,(
  ( ! [X24,X22] : (s(bool,X22) != s(bool,X24) | p(s(bool,X22)) | s(bool,'F_0') = s(bool,X24)) ) | $spl100),
  inference(cnf_transformation,[],[f14533_D])).
fof(f14533_D,plain,(
  ( ! [X24,X22] : (s(bool,X22) != s(bool,X24) | p(s(bool,X22)) | s(bool,'F_0') = s(bool,X24)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f14536,plain,(
  ( ! [X33,X31,X32] : (s(bool,X31) != s(bool,X33) | s(bool,'F_0') = s(bool,X33) | p(s(bool,X31)) | p(s(bool,X32))) ) | $spl44),
  inference(subsumption_resolution,[],[f14470,f820])).
fof(f14470,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') != s(bool,X32) | s(bool,X31) != s(bool,X33) | s(bool,'F_0') = s(bool,X33) | p(s(bool,X31)) | p(s(bool,X32))) ) | $spl44),
  inference(superposition,[],[f4520,f791])).
fof(f4520,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f3761,f909])).
fof(f909,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.RedBlackSet.not_red_ind',aHL_BOOL_CASES)).
fof(f14535,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) != s(bool,X30) | s(bool,'F_0') = s(bool,X30) | p(s(bool,X29)) | p(s(bool,X28))) ) | $spl44),
  inference(subsumption_resolution,[],[f14469,f820])).
fof(f14469,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') != s(bool,X29) | s(bool,X28) != s(bool,X30) | s(bool,'F_0') = s(bool,X30) | p(s(bool,X29)) | p(s(bool,X28))) ) | $spl44),
  inference(superposition,[],[f4520,f791])).
fof(f14534,plain,(
  ( ! [X26,X27,X25] : (s(bool,X25) != s(bool,X27) | s(bool,'F_0') = s(bool,X27) | p(s(bool,X25)) | p(s(bool,X26))) ) | $spl44),
  inference(subsumption_resolution,[],[f14468,f820])).
fof(f14468,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,X26) | s(bool,X25) != s(bool,X27) | s(bool,'F_0') = s(bool,X27) | p(s(bool,X25)) | p(s(bool,X26))) ) | $spl44),
  inference(superposition,[],[f4520,f787])).
fof(f14532,plain,(
  ( ! [X24,X23,X22] : (s(bool,X22) != s(bool,X24) | s(bool,'F_0') = s(bool,X24) | p(s(bool,X23)) | p(s(bool,X22))) ) | $spl44),
  inference(subsumption_resolution,[],[f14467,f820])).
fof(f14467,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') != s(bool,X23) | s(bool,X22) != s(bool,X24) | s(bool,'F_0') = s(bool,X24) | p(s(bool,X23)) | p(s(bool,X22))) ) | $spl44),
  inference(superposition,[],[f4520,f787])).
fof(f14433,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14408,f988])).
fof(f988,plain,(
  ( ! [X125,X126] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X125,X126)) )),
  inference(resolution,[],[f597,f712])).
fof(f14408,plain,(
  ( ! [X26,X27] : (~sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1140,f626])).
fof(f14432,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14407,f988])).
fof(f14407,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1140,f617])).
fof(f14431,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14406,f988])).
fof(f14406,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1140,f615])).
fof(f14430,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14405,f988])).
fof(f14405,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1140,f609])).
fof(f14429,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14404,f988])).
fof(f14404,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1140,f608])).
fof(f14385,plain,(
  ( ! [X26,X27] : (~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14371,f985])).
fof(f985,plain,(
  ( ! [X120,X119] : (sP7(X119,X120,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) )),
  inference(resolution,[],[f597,f706])).
fof(f14371,plain,(
  ( ! [X26,X27] : (~sP7(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1137,f626])).
fof(f14384,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14370,f985])).
fof(f14370,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP7(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1137,f617])).
fof(f14383,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14369,f985])).
fof(f14369,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP7(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1137,f615])).
fof(f14382,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14368,f985])).
fof(f14368,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP7(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1137,f609])).
fof(f14381,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14367,f985])).
fof(f14367,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP7(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1137,f608])).
fof(f14354,plain,(
  ( ! [X26,X27] : (~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14337,f982])).
fof(f982,plain,(
  ( ! [X114,X113] : (sP8(X113,X114,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) )),
  inference(resolution,[],[f597,f702])).
fof(f14337,plain,(
  ( ! [X26,X27] : (~sP8(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1134,f626])).
fof(f1134,plain,(
  ( ! [X97,X96] : (~sP8(X96,X97,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X97)) | ~p(s(bool,X96))) )),
  inference(resolution,[],[f599,f701])).
fof(f14353,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14336,f982])).
fof(f14336,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP8(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1134,f617])).
fof(f14352,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14335,f982])).
fof(f14335,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP8(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1134,f615])).
fof(f14351,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14334,f982])).
fof(f14334,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP8(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1134,f609])).
fof(f14350,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14333,f982])).
fof(f14333,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP8(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1134,f608])).
fof(f14319,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0))) ) | $spl98),
  inference(cnf_transformation,[],[f14319_D])).
fof(f14319_D,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f14323,plain,(
  ( ! [X26,X27] : (~sP9(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14302,f1046])).
fof(f1046,plain,(
  ( ! [X4,X5] : (~sP9(X5,X4,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X5)) | p(s(bool,X4))) )),
  inference(superposition,[],[f597,f715])).
fof(f14302,plain,(
  ( ! [X26,X27] : (~sP9(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1131,f626])).
fof(f1131,plain,(
  ( ! [X90,X91] : (~sP9(X90,X91,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X91)) | ~p(s(bool,X90))) )),
  inference(resolution,[],[f599,f697])).
fof(f14322,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14301,f1046])).
fof(f14301,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1131,f617])).
fof(f14321,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14300,f1046])).
fof(f14300,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1131,f615])).
fof(f14320,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14299,f1046])).
fof(f14299,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1131,f609])).
fof(f14318,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14298,f1046])).
fof(f14298,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1131,f608])).
fof(f14283,plain,(
  ( ! [X26,X27] : (~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14259,f972])).
fof(f972,plain,(
  ( ! [X94,X93] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X93,X94) | ~p(s(bool,X93)) | ~p(s(bool,X94))) )),
  inference(resolution,[],[f597,f690])).
fof(f690,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f486])).
fof(f486,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP5(X2,X0,X1)) & (~sP5(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f485])).
fof(f485,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP5(X2,X0,X1)) & (~sP5(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f444])).
fof(f444,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP5(X2,X0,X1))),
  inference(definition_folding,[],[f295,f443,f442])).
fof(f295,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f294])).
fof(f294,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X51,X64,X65] : ((p(s(bool,X65)) <=> (p(s(bool,X64)) & p(s(bool,X51)))) <=> ((p(s(bool,X65)) | ~p(s(bool,X64)) | ~p(s(bool,X51))) & (p(s(bool,X64)) | ~p(s(bool,X65))) & (p(s(bool,X51)) | ~p(s(bool,X65)))))),
  file('thm.RedBlackSet.not_red_ind','thm.sat.sat_23_prove_ltb')).
fof(f14259,plain,(
  ( ! [X26,X27] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | ~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1130,f626])).
fof(f1130,plain,(
  ( ! [X88,X89] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X88,X89) | ~p(s(bool,X89)) | ~p(s(bool,X88))) )),
  inference(resolution,[],[f599,f693])).
fof(f693,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP5(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f486])).
fof(f14282,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14258,f972])).
fof(f14258,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | ~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1130,f617])).
fof(f14281,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14257,f972])).
fof(f14257,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1130,f615])).
fof(f14280,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14256,f972])).
fof(f14256,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | ~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1130,f609])).
fof(f14279,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14255,f972])).
fof(f14255,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1130,f608])).
fof(f14239,plain,(
  ( ! [X26,X27] : (~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14225,f969])).
fof(f14225,plain,(
  ( ! [X26,X27] : (~sP4(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1121,f626])).
fof(f1121,plain,(
  ( ! [X70,X71] : (~sP4(X70,X71,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X71)) | ~p(s(bool,X70))) )),
  inference(resolution,[],[f599,f684])).
fof(f684,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f484])).
fof(f14238,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14224,f969])).
fof(f14224,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP4(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1121,f617])).
fof(f14237,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14223,f969])).
fof(f14223,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP4(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1121,f615])).
fof(f14236,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14222,f969])).
fof(f14222,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP4(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1121,f609])).
fof(f14235,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14221,f969])).
fof(f14221,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP4(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1121,f608])).
fof(f14212,plain,(
  ( ! [X26,X27] : (~p(s(bool,X26)) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14162,f954])).
fof(f954,plain,(
  ( ! [X57,X58] : (sP3(X57,X58,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X57))) )),
  inference(resolution,[],[f597,f672])).
fof(f672,plain,(
  ( ! [X2,X0,X1] : (sP3(X2,X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f479])).
fof(f479,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP3(X2,X0,X1)) & (~sP3(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f478])).
fof(f478,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP3(X2,X0,X1)) & (~sP3(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f441])).
fof(f441,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP3(X2,X0,X1))),
  inference(definition_folding,[],[f293,f440,f439])).
fof(f439,plain,(
  ! [X2,X0,X1] : (sP2(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f440,plain,(
  ! [X2,X0,X1] : (sP3(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP2(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f293,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f292])).
fof(f292,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f75])).
fof(f75,axiom,(
  ! [X51,X64,X65] : ((p(s(bool,X65)) <=> (p(s(bool,X64)) | p(s(bool,X51)))) <=> ((p(s(bool,X65)) | ~p(s(bool,X64))) & (p(s(bool,X65)) | ~p(s(bool,X51))) & (p(s(bool,X64)) | p(s(bool,X51)) | ~p(s(bool,X65)))))),
  file('thm.RedBlackSet.not_red_ind','thm.sat.sat_25_prove_ltb')).
fof(f14162,plain,(
  ( ! [X26,X27] : (~sP3(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X26)) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1114,f626])).
fof(f1114,plain,(
  ( ! [X57,X56] : (~sP3(X57,X56,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X57)) | p(s(bool,X56))) )),
  inference(resolution,[],[f599,f674])).
fof(f674,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP3(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f479])).
fof(f14211,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X18)) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14161,f954])).
fof(f14161,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP3(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X18)) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1114,f617])).
fof(f14210,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X10)) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14160,f954])).
fof(f14160,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP3(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X10)) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1114,f615])).
fof(f14209,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X5)) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14159,f954])).
fof(f14159,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP3(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X5)) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1114,f609])).
fof(f14208,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14158,f954])).
fof(f14158,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP3(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0)) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1114,f608])).
fof(f14130,plain,(
  ( ! [X26,X27] : (~p(s(bool,X26)) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14080,f956])).
fof(f956,plain,(
  ( ! [X61,X62] : (sP3(X61,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X62) | ~p(s(bool,X61))) )),
  inference(resolution,[],[f597,f673])).
fof(f673,plain,(
  ( ! [X2,X0,X1] : (sP3(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f479])).
fof(f14080,plain,(
  ( ! [X26,X27] : (~sP3(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X26)) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1113,f626])).
fof(f1113,plain,(
  ( ! [X54,X55] : (~sP3(X55,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X54) | ~p(s(bool,X55)) | p(s(bool,X54))) )),
  inference(resolution,[],[f599,f674])).
fof(f14129,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X18)) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14079,f956])).
fof(f14079,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP3(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X18)) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1113,f617])).
fof(f14128,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X10)) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14078,f956])).
fof(f14078,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP3(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X10)) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1113,f615])).
fof(f14127,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X5)) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14077,f956])).
fof(f14077,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP3(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X5)) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1113,f609])).
fof(f14126,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14076,f956])).
fof(f14076,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP3(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0)) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1113,f608])).
fof(f14048,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f14014,f947])).
fof(f947,plain,(
  ( ! [X43,X44] : (~sP3(X43,X44,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X43))) )),
  inference(resolution,[],[f597,f660])).
fof(f660,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X0)) | ~sP3(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f474])).
fof(f474,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP2(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP2(X0,X1,X2) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f473])).
fof(f473,plain,(
  ! [X2,X0,X1] : ((~sP3(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP2(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP2(X2,X0,X1) | sP3(X2,X0,X1)))),
  inference(flattening,[],[f472])).
fof(f472,plain,(
  ! [X2,X0,X1] : ((~sP3(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP2(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP2(X2,X0,X1)) | sP3(X2,X0,X1)))),
  inference(nnf_transformation,[],[f440])).
fof(f14014,plain,(
  ( ! [X26,X27] : (sP3(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1112,f626])).
fof(f1112,plain,(
  ( ! [X52,X53] : (sP3(X52,X53,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X53)) | p(s(bool,X52))) )),
  inference(resolution,[],[f599,f671])).
fof(f671,plain,(
  ( ! [X2,X0,X1] : (sP3(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f479])).
fof(f14047,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f14013,f947])).
fof(f14013,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP3(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1112,f617])).
fof(f14046,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f14012,f947])).
fof(f14012,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP3(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1112,f615])).
fof(f14045,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f14011,f947])).
fof(f14011,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP3(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1112,f609])).
fof(f14044,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f14010,f947])).
fof(f14010,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP3(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1112,f608])).
fof(f13993,plain,(
  ( ! [X26,X27] : (p(s(bool,X26)) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13964,f958])).
fof(f958,plain,(
  ( ! [X66,X65] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X65,X66) | p(s(bool,X66)) | p(s(bool,X65))) )),
  inference(resolution,[],[f597,f674])).
fof(f13964,plain,(
  ( ! [X26,X27] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X26)) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1111,f626])).
fof(f1111,plain,(
  ( ! [X50,X51] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X50,X51) | p(s(bool,X50)) | p(s(bool,X51))) )),
  inference(resolution,[],[f599,f671])).
fof(f13992,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X18)) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13963,f958])).
fof(f13963,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X18)) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1111,f617])).
fof(f13991,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X10)) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13962,f958])).
fof(f13962,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X10)) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1111,f615])).
fof(f13990,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X5)) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13961,f958])).
fof(f13961,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X5)) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1111,f609])).
fof(f13989,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13960,f958])).
fof(f13960,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1111,f608])).
fof(f13891,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13857,f948])).
fof(f948,plain,(
  ( ! [X45,X46] : (~sP3(X45,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X46) | p(s(bool,X45))) )),
  inference(resolution,[],[f597,f661])).
fof(f661,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | ~sP3(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f474])).
fof(f13857,plain,(
  ( ! [X26,X27] : (sP3(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1110,f626])).
fof(f1110,plain,(
  ( ! [X48,X49] : (sP3(X48,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X49) | p(s(bool,X49)) | p(s(bool,X48))) )),
  inference(resolution,[],[f599,f671])).
fof(f13890,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13856,f948])).
fof(f13856,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP3(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1110,f617])).
fof(f13889,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13855,f948])).
fof(f13855,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP3(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1110,f615])).
fof(f13888,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13854,f948])).
fof(f13854,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP3(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1110,f609])).
fof(f13887,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13853,f948])).
fof(f13853,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP3(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1110,f608])).
fof(f13784,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13765,f953])).
fof(f953,plain,(
  ( ! [X56,X55] : (sP2(X55,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X56)) )),
  inference(resolution,[],[f597,f669])).
fof(f669,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f477])).
fof(f477,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(rectify,[],[f476])).
fof(f476,plain,(
  ! [X2,X0,X1] : ((~sP2(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP2(X2,X0,X1)))),
  inference(flattening,[],[f475])).
fof(f475,plain,(
  ! [X2,X0,X1] : ((~sP2(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP2(X2,X0,X1)))),
  inference(nnf_transformation,[],[f439])).
fof(f13765,plain,(
  ( ! [X26,X27] : (~sP2(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1108,f626])).
fof(f1108,plain,(
  ( ! [X45,X44] : (~sP2(X44,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X45) | p(s(bool,X45)) | ~p(s(bool,X44))) )),
  inference(resolution,[],[f599,f667])).
fof(f667,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP2(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f477])).
fof(f13783,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13764,f953])).
fof(f13764,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP2(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1108,f617])).
fof(f13782,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13763,f953])).
fof(f13763,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP2(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1108,f615])).
fof(f13781,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13762,f953])).
fof(f13762,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP2(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1108,f609])).
fof(f13780,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13761,f953])).
fof(f13761,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP2(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1108,f608])).
fof(f13691,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13672,f952])).
fof(f952,plain,(
  ( ! [X54,X53] : (sP2(X53,X54,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) )),
  inference(resolution,[],[f597,f668])).
fof(f668,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f477])).
fof(f13672,plain,(
  ( ! [X26,X27] : (~sP2(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1107,f626])).
fof(f1107,plain,(
  ( ! [X43,X42] : (~sP2(X42,X43,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X43)) | ~p(s(bool,X42))) )),
  inference(resolution,[],[f599,f667])).
fof(f13690,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13671,f952])).
fof(f13671,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP2(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1107,f617])).
fof(f13689,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13670,f952])).
fof(f13670,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP2(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1107,f615])).
fof(f13688,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13669,f952])).
fof(f13669,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP2(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1107,f609])).
fof(f13687,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13668,f952])).
fof(f13668,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP2(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1107,f608])).
fof(f13601,plain,(
  ( ! [X26,X27] : (~p(s(bool,X26)) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13565,f942])).
fof(f942,plain,(
  ( ! [X33,X34] : (sP1(X33,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X34) | ~p(s(bool,X33))) )),
  inference(resolution,[],[f597,f656])).
fof(f656,plain,(
  ( ! [X2,X0,X1] : (sP1(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f471])).
fof(f471,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP1(X2,X0,X1)) & (~sP1(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f470])).
fof(f470,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP1(X2,X0,X1)) & (~sP1(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f438])).
fof(f438,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP1(X2,X0,X1))),
  inference(definition_folding,[],[f406,f437,f436])).
fof(f436,plain,(
  ! [X2,X0,X1] : (sP0(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f437,plain,(
  ! [X2,X0,X1] : (sP1(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP0(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f406,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f290])).
fof(f290,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X51,X64,X65] : ((p(s(bool,X65)) <=> (p(s(bool,X64)) => p(s(bool,X51)))) <=> ((p(s(bool,X65)) | p(s(bool,X64))) & (p(s(bool,X65)) | ~p(s(bool,X51))) & (~p(s(bool,X64)) | p(s(bool,X51)) | ~p(s(bool,X65)))))),
  file('thm.RedBlackSet.not_red_ind','thm.sat.sat_27_prove_ltb')).
fof(f13565,plain,(
  ( ! [X26,X27] : (~sP1(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X26)) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1097,f626])).
fof(f1097,plain,(
  ( ! [X23,X22] : (~sP1(X23,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X22) | ~p(s(bool,X23)) | ~p(s(bool,X22))) )),
  inference(resolution,[],[f599,f657])).
fof(f657,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP1(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f471])).
fof(f13600,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X18)) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13564,f942])).
fof(f13564,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP1(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1097,f617])).
fof(f13599,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X10)) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13563,f942])).
fof(f13563,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP1(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X10)) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1097,f615])).
fof(f13598,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X5)) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13562,f942])).
fof(f13562,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP1(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X5)) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1097,f609])).
fof(f13597,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13561,f942])).
fof(f13561,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP1(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1097,f608])).
fof(f13457,plain,(
  ( ! [X0,X1] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) | $spl96),
  inference(cnf_transformation,[],[f13457_D])).
fof(f13457_D,plain,(
  ( ! [X0,X1] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f13465,plain,(
  ( ! [X26,X27] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13464,f943])).
fof(f943,plain,(
  ( ! [X35,X36] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X35,X36) | ~p(s(bool,X35))) )),
  inference(resolution,[],[f597,f656])).
fof(f13464,plain,(
  ( ! [X26,X27] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13433,f941])).
fof(f941,plain,(
  ( ! [X31,X32] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X31,X32) | p(s(bool,X32))) )),
  inference(resolution,[],[f597,f655])).
fof(f655,plain,(
  ( ! [X2,X0,X1] : (sP1(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f471])).
fof(f13433,plain,(
  ( ! [X26,X27] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X26)) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1095,f626])).
fof(f1095,plain,(
  ( ! [X19,X18] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X18,X19) | p(s(bool,X18)) | ~p(s(bool,X19))) )),
  inference(resolution,[],[f599,f654])).
fof(f654,plain,(
  ( ! [X2,X0,X1] : (sP1(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f471])).
fof(f13463,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13462,f943])).
fof(f13462,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13432,f941])).
fof(f13432,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X18)) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1095,f617])).
fof(f13461,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13460,f943])).
fof(f13460,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13431,f941])).
fof(f13431,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X10)) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1095,f615])).
fof(f13459,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13458,f943])).
fof(f13458,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13430,f941])).
fof(f13430,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X5)) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1095,f609])).
fof(f13456,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13455,f943])).
fof(f13455,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13429,f941])).
fof(f13429,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1095,f608])).
fof(f13294,plain,(
  ( ! [X0,X1] : (sP1(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X1))) ) | $spl94),
  inference(cnf_transformation,[],[f13294_D])).
fof(f13294_D,plain,(
  ( ! [X0,X1] : (sP1(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X1))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f13298,plain,(
  ( ! [X26,X27] : (sP1(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13274,f942])).
fof(f13274,plain,(
  ( ! [X26,X27] : (sP1(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X27)) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1094,f626])).
fof(f1094,plain,(
  ( ! [X17,X16] : (sP1(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X17) | ~p(s(bool,X17)) | p(s(bool,X16))) )),
  inference(resolution,[],[f599,f654])).
fof(f13297,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP1(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13273,f942])).
fof(f13273,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP1(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X19)) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1094,f617])).
fof(f13296,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP1(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13272,f942])).
fof(f13272,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP1(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X11)) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1094,f615])).
fof(f13295,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP1(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13271,f942])).
fof(f13271,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP1(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X6)) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1094,f609])).
fof(f13293,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13270,f942])).
fof(f13270,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1094,f608])).
fof(f13102,plain,(
  ( ! [X26,X27] : (~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f13088,f939])).
fof(f939,plain,(
  ( ! [X28,X27] : (sP0(X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X28)) )),
  inference(resolution,[],[f597,f652])).
fof(f652,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f469])).
fof(f469,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f468])).
fof(f468,plain,(
  ! [X2,X0,X1] : ((~sP0(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP0(X2,X0,X1)))),
  inference(flattening,[],[f467])).
fof(f467,plain,(
  ! [X2,X0,X1] : ((~sP0(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP0(X2,X0,X1)))),
  inference(nnf_transformation,[],[f436])).
fof(f13088,plain,(
  ( ! [X26,X27] : (~sP0(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X27)) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1091,f626])).
fof(f1091,plain,(
  ( ! [X10,X11] : (~sP0(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X11) | ~p(s(bool,X11)) | ~p(s(bool,X10))) )),
  inference(resolution,[],[f599,f650])).
fof(f650,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f469])).
fof(f13101,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f13087,f939])).
fof(f13087,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP0(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X19)) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1091,f617])).
fof(f13100,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f13086,f939])).
fof(f13086,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP0(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1091,f615])).
fof(f13099,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f13085,f939])).
fof(f13085,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP0(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X6)) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1091,f609])).
fof(f13098,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f13084,f939])).
fof(f13084,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP0(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X1)) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1091,f608])).
fof(f8713,plain,(
  ( ! [X19] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X19,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X19,'type.RedBlackSet.tree'(sK12))))))) ) | $spl92),
  inference(cnf_transformation,[],[f8713_D])).
fof(f8713_D,plain,(
  ( ! [X19] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X19,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X19,'type.RedBlackSet.tree'(sK12))))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f9509,plain,(
  ( ! [X19,X18] : (p(s(bool,X18)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X19,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X19,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f927,f808])).
fof(f808,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK43(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK42(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f543])).
fof(f543,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK42(X2,X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK42(X2,X1,X0)))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK43(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK42,sK43])],[f542])).
fof(f542,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f421])).
fof(f421,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))),
  inference(flattening,[],[f420])).
fof(f420,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(ennf_transformation,[],[f331])).
fof(f331,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(flattening,[],[f330])).
fof(f330,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X23,X7] : (! [X9] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) => p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X9))))) => (? [X9] : p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) => ? [X9] : p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X9))))))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.MONO_EXISTS')).
fof(f8712,plain,(
  ( ! [X17] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X17),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X17,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X17,'type.RedBlackSet.tree'(sK12))))))) ) | $spl90),
  inference(cnf_transformation,[],[f8712_D])).
fof(f8712_D,plain,(
  ( ! [X17] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X17),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X17,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X17,'type.RedBlackSet.tree'(sK12))))))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f9508,plain,(
  ( ! [X17,X16] : (p(s(bool,X16)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X17),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X17,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X17,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f927,f807])).
fof(f807,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK43(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK42(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f543])).
fof(f8708,plain,(
  ( ! [X7] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X7),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12))))))) ) | $spl82),
  inference(cnf_transformation,[],[f8708_D])).
fof(f8708_D,plain,(
  ( ! [X7] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X7),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12))))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f9503,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X7),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f927,f798])).
fof(f798,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK37(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK37(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f533])).
fof(f533,plain,(
  ! [X0,X1,X2] : ((! [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK35(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK36(X2,X1,X0)))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK37(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK37(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK35,sK36,sK37])],[f532])).
fof(f532,plain,(
  ! [X0,X1,X2] : ((! [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | ? [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) | ? [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f531])).
fof(f531,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f530])).
fof(f530,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f325])).
fof(f325,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f324])).
fof(f324,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X6] : ! [X7,X23] : (? [X9] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) | p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X9))))) <=> (? [X9] : p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) | ? [X9] : p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X9))))))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.EXISTS_OR_THM')).
fof(f8707,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X5),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12))))))) ) | $spl80),
  inference(cnf_transformation,[],[f8707_D])).
fof(f8707_D,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X5),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12))))))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f9502,plain,(
  ( ! [X4,X5] : (p(s(bool,X4)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X5),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f927,f797])).
fof(f797,plain,(
  ( ! [X2,X0,X5,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK37(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK37(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) )),
  inference(cnf_transformation,[],[f533])).
fof(f8706,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK36(sK13,X3,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X3),s('type.RedBlackSet.tree'(sK12),sK35(sK13,X3,'type.RedBlackSet.tree'(sK12))))))) ) | $spl78),
  inference(cnf_transformation,[],[f8706_D])).
fof(f8706_D,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK36(sK13,X3,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X3),s('type.RedBlackSet.tree'(sK12),sK35(sK13,X3,'type.RedBlackSet.tree'(sK12))))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f9501,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK36(sK13,X3,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X3),s('type.RedBlackSet.tree'(sK12),sK35(sK13,X3,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f927,f796])).
fof(f796,plain,(
  ( ! [X2,X0,X8,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK36(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK35(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) )),
  inference(cnf_transformation,[],[f533])).
fof(f8705,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X1),s('type.RedBlackSet.tree'(sK12),sK36(X1,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK35(X1,sK13,'type.RedBlackSet.tree'(sK12))))))) ) | $spl76),
  inference(cnf_transformation,[],[f8705_D])).
fof(f8705_D,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X1),s('type.RedBlackSet.tree'(sK12),sK36(X1,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK35(X1,sK13,'type.RedBlackSet.tree'(sK12))))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f9500,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X1),s('type.RedBlackSet.tree'(sK12),sK36(X1,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK35(X1,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f927,f795])).
fof(f795,plain,(
  ( ! [X2,X0,X8,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK36(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK35(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8))))) )),
  inference(cnf_transformation,[],[f533])).
fof(f9232,plain,(
  ( ! [X19,X18] : (p(s(bool,X18)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X19,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X19,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f926,f808])).
fof(f9231,plain,(
  ( ! [X17,X16] : (p(s(bool,X16)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X17),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X17,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X17,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f926,f807])).
fof(f8711,plain,(
  ( ! [X15] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X15,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X15))) ) | $spl88),
  inference(cnf_transformation,[],[f8711_D])).
fof(f8711_D,plain,(
  ( ! [X15] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X15,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X15))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f9230,plain,(
  ( ! [X14,X15] : (p(s(bool,X14)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X15,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X15))) )),
  inference(resolution,[],[f926,f806])).
fof(f9226,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X7),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f926,f798])).
fof(f9225,plain,(
  ( ! [X4,X5] : (p(s(bool,X4)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X5),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f926,f797])).
fof(f9224,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK36(sK13,X3,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X3),s('type.RedBlackSet.tree'(sK12),sK35(sK13,X3,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f926,f796])).
fof(f9223,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X1),s('type.RedBlackSet.tree'(sK12),sK36(X1,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK35(X1,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f926,f795])).
fof(f9011,plain,(
  ( ! [X19,X18] : (~p(s(bool,X18)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X19,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X19,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f925,f808])).
fof(f9010,plain,(
  ( ! [X17,X16] : (~p(s(bool,X16)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X17),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X17,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X17,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f925,f807])).
fof(f9009,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X15,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X15))) )),
  inference(resolution,[],[f925,f806])).
fof(f8710,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X13))) ) | $spl86),
  inference(cnf_transformation,[],[f8710_D])).
fof(f8710_D,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X13))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f9008,plain,(
  ( ! [X12,X13] : (~p(s(bool,X12)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X13))) )),
  inference(resolution,[],[f925,f804])).
fof(f9005,plain,(
  ( ! [X6,X7] : (~p(s(bool,X6)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X7),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f925,f798])).
fof(f9004,plain,(
  ( ! [X4,X5] : (~p(s(bool,X4)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X5),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f925,f797])).
fof(f9003,plain,(
  ( ! [X2,X3] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK36(sK13,X3,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X3),s('type.RedBlackSet.tree'(sK12),sK35(sK13,X3,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f925,f796])).
fof(f9002,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X1),s('type.RedBlackSet.tree'(sK12),sK36(X1,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK35(X1,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f925,f795])).
fof(f9000,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8881,f2495])).
fof(f8881,plain,(
  ( ! [X346,X347] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X346),s('type.num.num',X347))))) ) | $spl42),
  inference(resolution,[],[f2495,f777])).
fof(f777,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f523])).
fof(f523,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f316])).
fof(f316,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f150])).
fof(f150,axiom,(
  ! [X48,X73] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X48))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num',X48)))))),
  file('thm.RedBlackSet.not_red_ind','thm.numeral.numeral_lte|split|5')).
fof(f8997,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8877,f2495])).
fof(f8877,plain,(
  ( ! [X337,X338] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X337))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X338))))))) ) | $spl42),
  inference(resolution,[],[f2495,f777])).
fof(f8992,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8829,f2495])).
fof(f8829,plain,(
  p(s(bool,'F_0')) | $spl42),
  inference(resolution,[],[f2495,f893])).
fof(f893,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f592])).
fof(f592,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f377])).
fof(f377,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f65])).
fof(f65,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.NOT_CLAUSES|split|2')).
fof(f8991,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8828,f2495])).
fof(f8828,plain,(
  p(s(bool,'F_0')) | $spl42),
  inference(resolution,[],[f2495,f891])).
fof(f891,plain,(
  p(s(bool,'F_0')) | p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f591])).
fof(f591,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f376])).
fof(f376,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f64])).
fof(f64,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.NOT_CLAUSES|split|1')).
fof(f8990,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8823,f2495])).
fof(f8823,plain,(
  ( ! [X233] : (p(s(bool,X233))) ) | $spl42),
  inference(resolution,[],[f2495,f832])).
fof(f832,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f562])).
fof(f562,plain,(
  ! [X0] : (((p(s(bool,'T_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,'T_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f561])).
fof(f561,plain,(
  ! [X0] : (((p(s(bool,'T_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (~p(s(bool,'T_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f428])).
fof(f428,plain,(
  ! [X0] : ((~p(s(bool,'T_0')) | p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(ennf_transformation,[],[f345])).
fof(f345,plain,(
  ! [X0] : ((p(s(bool,'T_0')) => p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X15] : ((p(s(bool,'T_0')) => p(s(bool,X15))) <=> p(s(bool,X15)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_CLAUSES|split|0')).
fof(f8989,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8821,f2495])).
fof(f8821,plain,(
  p(s(bool,'F_0')) | $spl42),
  inference(resolution,[],[f2495,f829])).
fof(f829,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f560])).
fof(f560,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f559])).
fof(f559,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f427])).
fof(f427,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f344])).
fof(f344,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X15] : ((p(s(bool,'F_0')) => p(s(bool,X15))) <=> p(s(bool,'T_0')))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_CLAUSES|split|2')).
fof(f8988,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8820,f2495])).
fof(f8820,plain,(
  ( ! [X231] : (p(s(bool,X231))) ) | $spl42),
  inference(resolution,[],[f2495,f826])).
fof(f826,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f558])).
fof(f558,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,'T_0'))))),
  inference(flattening,[],[f557])).
fof(f557,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,X0)) | p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f426])).
fof(f426,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f343])).
fof(f343,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X15] : ((p(s(bool,X15)) => p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_CLAUSES|split|1')).
fof(f8987,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f8818,f2495])).
fof(f8818,plain,(
  ( ! [X229] : (p(s(bool,X229))) ) | $spl42),
  inference(resolution,[],[f2495,f823])).
fof(f823,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f556])).
fof(f556,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X0))))),
  inference(flattening,[],[f555])).
fof(f555,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,X0)) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f425])).
fof(f425,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X15] : ((p(s(bool,X15)) => p(s(bool,X15))) <=> p(s(bool,'T_0')))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_CLAUSES|split|3')).
fof(f8830,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f895])).
fof(f895,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f8])).
fof(f8,axiom,(
  p(s(bool,'T_0'))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.TRUTH')).
fof(f8831,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f896])).
fof(f896,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.RedBlackSet.not_red_ind',aHL_TRUTH)).
fof(f8832,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f913])).
fof(f913,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f813])).
fof(f813,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f549])).
fof(f549,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f336])).
fof(f336,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f335])).
fof(f335,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f127])).
fof(f127,axiom,(
  ! [X6] : ! [X9] : (s(X6,X9) = s(X6,X9) <=> p(s(bool,'T_0')))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.REFL_CLAUSE')).
fof(f8852,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f596])).
fof(f8853,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f598])).
fof(f8855,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f930])).
fof(f930,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK44(sK13,'type.RedBlackSet.tree'(sK12))))))),
  inference(resolution,[],[f597,f811])).
fof(f811,plain,(
  ( ! [X4,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK44(X1,X0)))))) )),
  inference(cnf_transformation,[],[f548])).
fof(f548,plain,(
  ! [X0,X1] : ((p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK44(X1,X0))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) & (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK45(X1,X0))))) | ! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK44,sK45])],[f547])).
fof(f547,plain,(
  ! [X0,X1] : ((? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) & (? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(rectify,[],[f546])).
fof(f546,plain,(
  ! [X0,X1] : ((? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(nnf_transformation,[],[f422])).
fof(f422,plain,(
  ! [X0,X1] : (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(ennf_transformation,[],[f334])).
fof(f334,plain,(
  ! [X0,X1] : (~? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(flattening,[],[f333])).
fof(f333,plain,(
  ! [X0] : ! [X1] : (~? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ! [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f80])).
fof(f80,axiom,(
  ! [X6] : ! [X7] : (~? [X9] : p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))) <=> ! [X9] : ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,X9)))))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.NOT_EXISTS_THM')).
fof(f8856,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f931])).
fof(f931,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK45(sK13,'type.RedBlackSet.tree'(sK12))))))),
  inference(resolution,[],[f597,f812])).
fof(f812,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK45(X1,X0)))))) )),
  inference(cnf_transformation,[],[f548])).
fof(f8874,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f612])).
fof(f612,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.RedBlackSet.color',bool),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.color',bool)),X0),s('type.RedBlackSet.color','const.RedBlackSet.Red_0'))),s('type.RedBlackSet.color','const.RedBlackSet.Black_0'))))))) )),
  inference(cnf_transformation,[],[f274])).
fof(f274,plain,(
  ! [X0] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.RedBlackSet.color',bool),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.color',bool)),X0),s('type.RedBlackSet.color','const.RedBlackSet.Red_0'))),s('type.RedBlackSet.color','const.RedBlackSet.Black_0'))))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X58] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.RedBlackSet.color',bool),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.color',bool)),X58),s('type.RedBlackSet.color','const.RedBlackSet.Red_0'))),s('type.RedBlackSet.color','const.RedBlackSet.Black_0'))))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.datatype_color')).
fof(f8882,plain,(
  $false | $spl42),
  inference(resolution,[],[f2495,f889])).
fof(f889,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f374])).
fof(f374,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f223])).
fof(f223,axiom,(
  ! [X48] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X48))))),
  file('thm.RedBlackSet.not_red_ind','thm.arithmetic.ZERO_LESS_EQ')).
fof(f8569,plain,(
  ( ! [X19,X18] : (~p(s(bool,X18)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X19,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X19),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X19,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f924,f808])).
fof(f8568,plain,(
  ( ! [X17,X16] : (~p(s(bool,X16)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X17),s('type.RedBlackSet.tree'(sK12),sK43(sK13,X17,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK42(sK13,X17,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f924,f807])).
fof(f8567,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK41(sK13,X15,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X15))) )),
  inference(resolution,[],[f924,f806])).
fof(f8566,plain,(
  ( ! [X12,X13] : (~p(s(bool,X12)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK40(sK13,X13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,X13))) )),
  inference(resolution,[],[f924,f804])).
fof(f8709,plain,(
  ( ! [X11] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X11,sK13,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,X11))) ) | $spl84),
  inference(cnf_transformation,[],[f8709_D])).
fof(f8709_D,plain,(
  ( ! [X11] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X11,sK13,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,X11))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f8565,plain,(
  ( ! [X10,X11] : (~p(s(bool,X10)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK39(X11,sK13,'type.RedBlackSet.tree'(sK12)))))) | ~p(s(bool,X11))) )),
  inference(resolution,[],[f924,f801])).
fof(f8563,plain,(
  ( ! [X6,X7] : (~p(s(bool,X6)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X7),s('type.RedBlackSet.tree'(sK12),sK37(sK13,X7,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f924,f798])).
fof(f8562,plain,(
  ( ! [X4,X5] : (~p(s(bool,X4)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X5),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK37(X5,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f924,f797])).
fof(f8561,plain,(
  ( ! [X2,X3] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK36(sK13,X3,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X3),s('type.RedBlackSet.tree'(sK12),sK35(sK13,X3,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f924,f796])).
fof(f8560,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),X1),s('type.RedBlackSet.tree'(sK12),sK36(X1,sK13,'type.RedBlackSet.tree'(sK12)))))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK35(X1,sK13,'type.RedBlackSet.tree'(sK12))))))) )),
  inference(resolution,[],[f924,f795])).
fof(f7251,plain,(
  ( ! [X0] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0)) ) | $spl74),
  inference(cnf_transformation,[],[f7251_D])).
fof(f7251_D,plain,(
  ( ! [X0] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f7255,plain,(
  ( ! [X22] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X22) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f7240,f6968])).
fof(f6968,plain,(
  ( ! [X3] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X3) | ~p(s(bool,X3))) )),
  inference(resolution,[],[f6767,f696])).
fof(f6767,plain,(
  ( ! [X15] : (~sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X15,'F_0') | ~p(s(bool,X15))) )),
  inference(subsumption_resolution,[],[f6732,f873])).
fof(f6732,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,X15) | ~p(s(bool,X15)) | ~sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X15,'F_0')) )),
  inference(resolution,[],[f990,f4633])).
fof(f990,plain,(
  ( ! [X130,X129] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X130,X129) | s(bool,X129) = s(bool,X130)) )),
  inference(resolution,[],[f597,f715])).
fof(f7240,plain,(
  ( ! [X22] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X22) | p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f7194,f626])).
fof(f7194,plain,(
  ( ! [X4] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),'F_0',X4) | p(s(bool,X4))) )),
  inference(resolution,[],[f6957,f694])).
fof(f6957,plain,(
  ( ! [X13] : (~sP6(X13,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X13))) )),
  inference(subsumption_resolution,[],[f6931,f820])).
fof(f6931,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,X13) | ~sP6(X13,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X13))) )),
  inference(resolution,[],[f1144,f4675])).
fof(f4675,plain,(
  ( ! [X2,X3] : (sP9(X2,'F_0',X3) | ~sP6(X3,'F_0',X2) | p(s(bool,X3))) )),
  inference(resolution,[],[f4655,f703])).
fof(f703,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f492])).
fof(f4655,plain,(
  ( ! [X4,X5] : (~sP8(X4,X5,'F_0') | sP9(X4,'F_0',X5) | ~sP6(X5,'F_0',X4)) )),
  inference(subsumption_resolution,[],[f4653,f890])).
fof(f4653,plain,(
  ( ! [X4,X5] : (sP9(X4,'F_0',X5) | p(s(bool,'F_0')) | ~sP8(X4,X5,'F_0') | ~sP6(X5,'F_0',X4)) )),
  inference(resolution,[],[f4650,f699])).
fof(f1144,plain,(
  ( ! [X116,X117] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X117,X116) | s(bool,X116) != s(bool,X117)) )),
  inference(resolution,[],[f599,f716])).
fof(f7254,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X15) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f7239,f6968])).
fof(f7239,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X15) | p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f7194,f617])).
fof(f7253,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X8) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f7238,f6968])).
fof(f7238,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X8) | p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f7194,f615])).
fof(f7252,plain,(
  ( ! [X6,X4,X7,X5] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X4) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f7237,f6968])).
fof(f7237,plain,(
  ( ! [X6,X4,X7,X5] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X4) | p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f7194,f609])).
fof(f7250,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f7236,f6968])).
fof(f7236,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),'F_0',X0) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f7194,f608])).
fof(f7222,plain,(
  ( ! [X22] : (p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f7207,f986])).
fof(f7207,plain,(
  ( ! [X22] : (~sP6(X22,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f6957,f626])).
fof(f7221,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f7206,f986])).
fof(f7206,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP6(X15,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f6957,f617])).
fof(f7220,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f7205,f986])).
fof(f7205,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP6(X8,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f6957,f615])).
fof(f7219,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f7204,f986])).
fof(f7204,plain,(
  ( ! [X6,X4,X7,X5] : (~sP6(X4,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f6957,f609])).
fof(f7218,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f7203,f986])).
fof(f7203,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6(X0,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f6957,f608])).
fof(f6959,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1)) ) | $spl72),
  inference(cnf_transformation,[],[f6959_D])).
fof(f6959_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f6963,plain,(
  ( ! [X26,X27] : (s(bool,X26) != s(bool,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6941,f989])).
fof(f989,plain,(
  ( ! [X127,X128] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X127,X128) | s(bool,X127) != s(bool,X128)) )),
  inference(resolution,[],[f597,f714])).
fof(f714,plain,(
  ( ! [X2,X0,X1] : (sP9(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f498])).
fof(f6941,plain,(
  ( ! [X26,X27] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s(bool,X26) != s(bool,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1144,f626])).
fof(f6962,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(bool,X18) != s(bool,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6940,f989])).
fof(f6940,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(bool,X18) != s(bool,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1144,f617])).
fof(f6961,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(bool,X10) != s(bool,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6939,f989])).
fof(f6939,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(bool,X10) != s(bool,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1144,f615])).
fof(f6960,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) != s(bool,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6938,f989])).
fof(f6938,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s(bool,X5) != s(bool,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1144,f609])).
fof(f6958,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6937,f989])).
fof(f6937,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s(bool,X0) != s(bool,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1144,f608])).
fof(f6810,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl70),
  inference(cnf_transformation,[],[f6810_D])).
fof(f6810_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f6814,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6792,f990])).
fof(f6792,plain,(
  ( ! [X26,X27] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s(bool,X26) = s(bool,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1143,f626])).
fof(f1143,plain,(
  ( ! [X114,X115] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X114,X115) | s(bool,X114) = s(bool,X115)) )),
  inference(resolution,[],[f599,f713])).
fof(f6813,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(bool,X18) = s(bool,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6791,f990])).
fof(f6791,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(bool,X18) = s(bool,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1143,f617])).
fof(f6812,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(bool,X10) = s(bool,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6790,f990])).
fof(f6790,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(bool,X10) = s(bool,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1143,f615])).
fof(f6811,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) = s(bool,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6789,f990])).
fof(f6789,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s(bool,X5) = s(bool,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1143,f609])).
fof(f6809,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6788,f990])).
fof(f6788,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s(bool,X0) = s(bool,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1143,f608])).
fof(f6690,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6665,f962])).
fof(f962,plain,(
  ( ! [X74,X73] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X73,X74) | p(s(bool,X73))) )),
  inference(resolution,[],[f597,f679])).
fof(f679,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | ~sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f482])).
fof(f6665,plain,(
  ( ! [X26,X27] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1127,f626])).
fof(f1127,plain,(
  ( ! [X83,X82] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X82,X83) | p(s(bool,X82))) )),
  inference(resolution,[],[f599,f689])).
fof(f689,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f486])).
fof(f6689,plain,(
  ( ! [X24,X23,X21,X25,X22,X20,X18] : (p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6664,f962])).
fof(f6664,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1127,f617])).
fof(f6688,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X16] : (p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6663,f962])).
fof(f6663,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1127,f615])).
fof(f6687,plain,(
  ( ! [X8,X7,X5,X9] : (p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6662,f962])).
fof(f6662,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1127,f609])).
fof(f6686,plain,(
  ( ! [X4,X2,X0,X3] : (p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6661,f962])).
fof(f6661,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1127,f608])).
fof(f6650,plain,(
  ( ! [X0,X1] : (sP5(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X0))) ) | $spl68),
  inference(cnf_transformation,[],[f6650_D])).
fof(f6650_D,plain,(
  ( ! [X0,X1] : (sP5(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X0))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f6639,plain,(
  ( ! [X26,X27] : (sP5(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1126,f626])).
fof(f1126,plain,(
  ( ! [X80,X81] : (sP5(X80,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X81) | p(s(bool,X80))) )),
  inference(resolution,[],[f599,f689])).
fof(f6638,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP5(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1126,f617])).
fof(f6637,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP5(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1126,f615])).
fof(f6636,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP5(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1126,f609])).
fof(f6635,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1126,f608])).
fof(f6622,plain,(
  ( ! [X0,X1] : (sP5(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0))) ) | $spl66),
  inference(cnf_transformation,[],[f6622_D])).
fof(f6622_D,plain,(
  ( ! [X0,X1] : (sP5(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f6611,plain,(
  ( ! [X26,X27] : (sP5(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1125,f626])).
fof(f1125,plain,(
  ( ! [X78,X79] : (sP5(X78,X79,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X78))) )),
  inference(resolution,[],[f599,f688])).
fof(f688,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f486])).
fof(f6610,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP5(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1125,f617])).
fof(f6609,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP5(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1125,f615])).
fof(f6608,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP5(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1125,f609])).
fof(f6607,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1125,f608])).
fof(f6594,plain,(
  ( ! [X27] : (p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6569,f961])).
fof(f961,plain,(
  ( ! [X72,X71] : (~sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X72,X71) | p(s(bool,X71))) )),
  inference(resolution,[],[f597,f678])).
fof(f678,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X2)) | ~sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f482])).
fof(f6569,plain,(
  ( ! [X26,X27] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1124,f626])).
fof(f1124,plain,(
  ( ! [X76,X77] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X76,X77) | p(s(bool,X77))) )),
  inference(resolution,[],[f599,f688])).
fof(f6593,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6568,f961])).
fof(f6568,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1124,f617])).
fof(f6592,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6567,f961])).
fof(f6567,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1124,f615])).
fof(f6591,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6566,f961])).
fof(f6566,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1124,f609])).
fof(f6590,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6565,f961])).
fof(f6565,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1124,f608])).
fof(f6554,plain,(
  ( ! [X0,X1] : (~sP5(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0))) ) | $spl64),
  inference(cnf_transformation,[],[f6554_D])).
fof(f6554_D,plain,(
  ( ! [X0,X1] : (~sP5(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f6543,plain,(
  ( ! [X26,X27] : (~sP5(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1118,f626])).
fof(f1118,plain,(
  ( ! [X64,X65] : (~sP5(X64,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X65) | ~p(s(bool,X64))) )),
  inference(resolution,[],[f599,f679])).
fof(f6542,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP5(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1118,f617])).
fof(f6541,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP5(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1118,f615])).
fof(f6540,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP5(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1118,f609])).
fof(f6539,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP5(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1118,f608])).
fof(f6529,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0))) ) | $spl62),
  inference(cnf_transformation,[],[f6529_D])).
fof(f6529_D,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f6518,plain,(
  ( ! [X26,X27] : (~sP5(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1117,f626])).
fof(f1117,plain,(
  ( ! [X62,X63] : (~sP5(X62,X63,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X62))) )),
  inference(resolution,[],[f599,f678])).
fof(f6517,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP5(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1117,f617])).
fof(f6516,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP5(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1117,f615])).
fof(f6515,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP5(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1117,f609])).
fof(f6514,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP5(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1117,f608])).
fof(f6504,plain,(
  ( ! [X26] : (~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6482,f957])).
fof(f957,plain,(
  ( ! [X64,X63] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X63,X64) | ~p(s(bool,X63))) )),
  inference(resolution,[],[f597,f673])).
fof(f6482,plain,(
  ( ! [X26,X27] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1102,f626])).
fof(f1102,plain,(
  ( ! [X33,X32] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X32,X33) | ~p(s(bool,X32))) )),
  inference(resolution,[],[f599,f661])).
fof(f6503,plain,(
  ( ! [X24,X23,X21,X25,X22,X20,X18] : (~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6481,f957])).
fof(f6481,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1102,f617])).
fof(f6502,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X16] : (~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6480,f957])).
fof(f6480,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1102,f615])).
fof(f6501,plain,(
  ( ! [X8,X7,X5,X9] : (~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6479,f957])).
fof(f6479,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1102,f609])).
fof(f6500,plain,(
  ( ! [X4,X2,X0,X3] : (~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6478,f957])).
fof(f6478,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1102,f608])).
fof(f6466,plain,(
  ( ! [X27] : (~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6444,f955])).
fof(f955,plain,(
  ( ! [X59,X60] : (sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X59,X60) | ~p(s(bool,X60))) )),
  inference(resolution,[],[f597,f672])).
fof(f6444,plain,(
  ( ! [X26,X27] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | ~p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1101,f626])).
fof(f1101,plain,(
  ( ! [X30,X31] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X31,X30) | ~p(s(bool,X30))) )),
  inference(resolution,[],[f599,f660])).
fof(f6465,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6443,f955])).
fof(f6443,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | ~p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1101,f617])).
fof(f6464,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6442,f955])).
fof(f6442,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | ~p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1101,f615])).
fof(f6463,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6441,f955])).
fof(f6441,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | ~p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1101,f609])).
fof(f6462,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6440,f955])).
fof(f6440,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP3(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1101,f608])).
fof(f6428,plain,(
  ( ! [X0,X1] : (sP1(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0))) ) | $spl60),
  inference(cnf_transformation,[],[f6428_D])).
fof(f6428_D,plain,(
  ( ! [X0,X1] : (sP1(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f6418,plain,(
  ( ! [X26,X27] : (sP1(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1096,f626])).
fof(f1096,plain,(
  ( ! [X21,X20] : (sP1(X20,X21,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X20))) )),
  inference(resolution,[],[f599,f655])).
fof(f6417,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP1(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1096,f617])).
fof(f6416,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP1(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1096,f615])).
fof(f6415,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP1(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1096,f609])).
fof(f6414,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1096,f608])).
fof(f6401,plain,(
  ( ! [X26] : (~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6380,f943])).
fof(f6380,plain,(
  ( ! [X26,X27] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | ~p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1088,f626])).
fof(f1088,plain,(
  ( ! [X4,X5] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X4,X5) | ~p(s(bool,X4))) )),
  inference(resolution,[],[f599,f644])).
fof(f644,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | ~sP1(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f466])).
fof(f466,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP0(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP0(X0,X1,X2) | sP1(X0,X1,X2)))),
  inference(rectify,[],[f465])).
fof(f465,plain,(
  ! [X2,X0,X1] : ((~sP1(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP0(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP0(X2,X0,X1) | sP1(X2,X0,X1)))),
  inference(flattening,[],[f464])).
fof(f464,plain,(
  ! [X2,X0,X1] : ((~sP1(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP0(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP0(X2,X0,X1)) | sP1(X2,X0,X1)))),
  inference(nnf_transformation,[],[f437])).
fof(f6400,plain,(
  ( ! [X24,X23,X21,X25,X22,X20,X18] : (~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6379,f943])).
fof(f6379,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | ~p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1088,f617])).
fof(f6399,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X16] : (~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6378,f943])).
fof(f6378,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | ~p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1088,f615])).
fof(f6398,plain,(
  ( ! [X8,X7,X5,X9] : (~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6377,f943])).
fof(f6377,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | ~p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1088,f609])).
fof(f6397,plain,(
  ( ! [X4,X2,X0,X3] : (~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6376,f943])).
fof(f6376,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1088,f608])).
fof(f6365,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0))) ) | $spl58),
  inference(cnf_transformation,[],[f6365_D])).
fof(f6365_D,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f6348,plain,(
  ( ! [X26,X27] : (~sP1(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X26)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1087,f626])).
fof(f1087,plain,(
  ( ! [X2,X3] : (~sP1(X2,X3,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X2))) )),
  inference(resolution,[],[f599,f643])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | p(s(bool,X0)) | ~sP1(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f466])).
fof(f6347,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP1(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X18)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1087,f617])).
fof(f6346,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP1(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X10)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1087,f615])).
fof(f6345,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP1(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X5)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1087,f609])).
fof(f6344,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP1(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1087,f608])).
fof(f6331,plain,(
  ( ! [X27] : (p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f6307,f941])).
fof(f6307,plain,(
  ( ! [X26,X27] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | p(s(bool,X27)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1086,f626])).
fof(f1086,plain,(
  ( ! [X0,X1] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X1,X0) | p(s(bool,X0))) )),
  inference(resolution,[],[f599,f643])).
fof(f6330,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(subsumption_resolution,[],[f6306,f941])).
fof(f6306,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | p(s(bool,X19)) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1086,f617])).
fof(f6329,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(subsumption_resolution,[],[f6305,f941])).
fof(f6305,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | p(s(bool,X11)) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1086,f615])).
fof(f6328,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(subsumption_resolution,[],[f6304,f941])).
fof(f6304,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | p(s(bool,X6)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1086,f609])).
fof(f6327,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(subsumption_resolution,[],[f6303,f941])).
fof(f6303,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP1(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | p(s(bool,X1)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1086,f608])).
fof(f6044,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK45(sK13,'type.RedBlackSet.tree'(sK12))))) | $spl57),
  inference(cnf_transformation,[],[f6044_D])).
fof(f6044_D,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK45(sK13,'type.RedBlackSet.tree'(sK12))))) <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f6025,plain,(
  ( ! [X8] : (p(s(bool,X8)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK45(sK13,'type.RedBlackSet.tree'(sK12)))))) )),
  inference(resolution,[],[f3237,f4689])).
fof(f3237,plain,(
  ( ! [X123,X122] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK45(sK13,'type.RedBlackSet.tree'(sK12)))),X122,X123)) )),
  inference(resolution,[],[f931,f712])).
fof(f5811,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK44(sK13,'type.RedBlackSet.tree'(sK12))))) | $spl55),
  inference(cnf_transformation,[],[f5811_D])).
fof(f5811_D,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK44(sK13,'type.RedBlackSet.tree'(sK12))))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f5792,plain,(
  ( ! [X8] : (p(s(bool,X8)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK44(sK13,'type.RedBlackSet.tree'(sK12)))))) )),
  inference(resolution,[],[f2994,f4689])).
fof(f2994,plain,(
  ( ! [X123,X122] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK44(sK13,'type.RedBlackSet.tree'(sK12)))),X122,X123)) )),
  inference(resolution,[],[f930,f712])).
fof(f5574,plain,(
  ( ! [X22] : (p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f5555,f999])).
fof(f999,plain,(
  ( ! [X139] : (sP11(X139,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) )),
  inference(resolution,[],[f597,f764])).
fof(f764,plain,(
  ( ! [X0,X1] : (sP11(X0,X1) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f518])).
fof(f518,plain,(
  ! [X0,X1] : ((~sP11(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP11(X0,X1)))),
  inference(flattening,[],[f517])).
fof(f517,plain,(
  ! [X0,X1] : ((~sP11(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP11(X0,X1)))),
  inference(nnf_transformation,[],[f452])).
fof(f452,plain,(
  ! [X0,X1] : (sP11(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f5555,plain,(
  ( ! [X22] : (~sP11(X22,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1223,f626])).
fof(f1223,plain,(
  ( ! [X127] : (~sP11(X127,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X127))) )),
  inference(subsumption_resolution,[],[f1154,f835])).
fof(f835,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f564])).
fof(f564,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f563])).
fof(f563,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f346])).
fof(f346,plain,(
  ! [X0] : ((p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f167])).
fof(f167,axiom,(
  ! [X15] : ((p(s(bool,'F_0')) | p(s(bool,X15))) <=> p(s(bool,X15)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.OR_CLAUSES|split|2')).
fof(f1154,plain,(
  ( ! [X127] : (p(s(bool,'F_0')) | p(s(bool,X127)) | ~sP11(X127,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) )),
  inference(resolution,[],[f599,f763])).
fof(f763,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP11(X0,X1)) )),
  inference(cnf_transformation,[],[f518])).
fof(f5573,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f5554,f999])).
fof(f5554,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP11(X15,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f1223,f617])).
fof(f5572,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f5553,f999])).
fof(f5553,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP11(X8,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f1223,f615])).
fof(f5571,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f5552,f999])).
fof(f5552,plain,(
  ( ! [X6,X4,X7,X5] : (~sP11(X4,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f1223,f609])).
fof(f5570,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f5551,f999])).
fof(f5551,plain,(
  ( ! [X2,X0,X3,X1] : (~sP11(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f1223,f608])).
fof(f5537,plain,(
  ( ! [X22] : (p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f5519,f1000])).
fof(f1000,plain,(
  ( ! [X140] : (sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X140)) )),
  inference(resolution,[],[f597,f765])).
fof(f765,plain,(
  ( ! [X0,X1] : (sP11(X0,X1) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f518])).
fof(f5519,plain,(
  ( ! [X22] : (~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X22) | p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1222,f626])).
fof(f1222,plain,(
  ( ! [X126] : (~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X126) | p(s(bool,X126))) )),
  inference(subsumption_resolution,[],[f1153,f835])).
fof(f1153,plain,(
  ( ! [X126] : (p(s(bool,'F_0')) | p(s(bool,X126)) | ~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X126)) )),
  inference(resolution,[],[f599,f763])).
fof(f5536,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f5518,f1000])).
fof(f5518,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X15) | p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f1222,f617])).
fof(f5535,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f5517,f1000])).
fof(f5517,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X8) | p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f1222,f615])).
fof(f5534,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f5516,f1000])).
fof(f5516,plain,(
  ( ! [X6,X4,X7,X5] : (~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X4) | p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f1222,f609])).
fof(f5533,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f5515,f1000])).
fof(f5515,plain,(
  ( ! [X2,X0,X3,X1] : (~sP11(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f1222,f608])).
fof(f5486,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(subsumption_resolution,[],[f5449,f1021])).
fof(f1021,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))),
  inference(resolution,[],[f597,f878])).
fof(f5449,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(superposition,[],[f1176,f609])).
fof(f1176,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))),
  inference(resolution,[],[f599,f877])).
fof(f877,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f589])).
fof(f5485,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(subsumption_resolution,[],[f5448,f1021])).
fof(f5448,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(superposition,[],[f1176,f608])).
fof(f5252,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(subsumption_resolution,[],[f5251,f3722])).
fof(f5251,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,'F_0') | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(forward_demodulation,[],[f4910,f1021])).
fof(f4910,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') = s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(superposition,[],[f1165,f609])).
fof(f5250,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(subsumption_resolution,[],[f5249,f3722])).
fof(f5249,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(forward_demodulation,[],[f4909,f1021])).
fof(f4909,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(superposition,[],[f1165,f608])).
fof(f4905,plain,(
  ( ! [X22] : (~p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f4892,f991])).
fof(f991,plain,(
  ( ! [X131] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X131) | ~p(s(bool,X131))) )),
  inference(resolution,[],[f597,f748])).
fof(f748,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP10(X0,X1)) )),
  inference(cnf_transformation,[],[f513])).
fof(f513,plain,(
  ! [X0,X1] : ((~sP10(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP10(X0,X1)))),
  inference(rectify,[],[f512])).
fof(f512,plain,(
  ! [X1,X0] : ((~sP10(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP10(X1,X0)))),
  inference(flattening,[],[f511])).
fof(f511,plain,(
  ! [X1,X0] : ((~sP10(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP10(X1,X0)))),
  inference(nnf_transformation,[],[f450])).
fof(f450,plain,(
  ! [X1,X0] : (sP10(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f4892,plain,(
  ( ! [X22] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X22) | ~p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1148,f626])).
fof(f1148,plain,(
  ( ! [X121] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X121) | ~p(s(bool,X121))) )),
  inference(resolution,[],[f599,f752])).
fof(f752,plain,(
  ( ! [X0,X1] : (sP10(X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f513])).
fof(f4904,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f4891,f991])).
fof(f4891,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X15) | ~p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f1148,f617])).
fof(f4903,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f4890,f991])).
fof(f4890,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X8) | ~p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f1148,f615])).
fof(f4902,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f4889,f991])).
fof(f4889,plain,(
  ( ! [X6,X4,X7,X5] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X4) | ~p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f1148,f609])).
fof(f4901,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f4888,f991])).
fof(f4888,plain,(
  ( ! [X2,X0,X3,X1] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f1148,f608])).
fof(f4878,plain,(
  ( ! [X22] : (~p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f4865,f992])).
fof(f992,plain,(
  ( ! [X132] : (~sP10(X132,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X132))) )),
  inference(resolution,[],[f597,f748])).
fof(f4865,plain,(
  ( ! [X22] : (sP10(X22,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1147,f626])).
fof(f1147,plain,(
  ( ! [X120] : (sP10(X120,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X120))) )),
  inference(resolution,[],[f599,f749])).
fof(f749,plain,(
  ( ! [X0,X1] : (sP10(X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f513])).
fof(f4877,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f4864,f992])).
fof(f4864,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (sP10(X15,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f1147,f617])).
fof(f4876,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f4863,f992])).
fof(f4863,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (sP10(X8,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f1147,f615])).
fof(f4875,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f4862,f992])).
fof(f4862,plain,(
  ( ! [X6,X4,X7,X5] : (sP10(X4,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f1147,f609])).
fof(f4874,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f4861,f992])).
fof(f4861,plain,(
  ( ! [X2,X0,X3,X1] : (sP10(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | ~p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f1147,f608])).
fof(f4851,plain,(
  ( ! [X22] : (p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f4836,f994])).
fof(f994,plain,(
  ( ! [X134] : (sP10(X134,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X134))) )),
  inference(resolution,[],[f597,f752])).
fof(f4836,plain,(
  ( ! [X22] : (~sP10(X22,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1146,f626])).
fof(f1146,plain,(
  ( ! [X119] : (~sP10(X119,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | p(s(bool,X119))) )),
  inference(resolution,[],[f599,f747])).
fof(f747,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | ~sP10(X0,X1)) )),
  inference(cnf_transformation,[],[f513])).
fof(f4850,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f4835,f994])).
fof(f4835,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP10(X15,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f1146,f617])).
fof(f4849,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f4834,f994])).
fof(f4834,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP10(X8,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f1146,f615])).
fof(f4848,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f4833,f994])).
fof(f4833,plain,(
  ( ! [X6,X4,X7,X5] : (~sP10(X4,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f1146,f609])).
fof(f4847,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f4832,f994])).
fof(f4832,plain,(
  ( ! [X2,X0,X3,X1] : (~sP10(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f1146,f608])).
fof(f4824,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12)))) | $spl53),
  inference(cnf_transformation,[],[f4824_D])).
fof(f4824_D,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12)))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f4815,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12))))) ) | $spl4),
  inference(resolution,[],[f4689,f2752])).
fof(f2752,plain,(
  ( ! [X123,X122] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12))),X122,X123)) ) | $spl4),
  inference(resolution,[],[f1074,f712])).
fof(f4822,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)))) | $spl51),
  inference(cnf_transformation,[],[f4822_D])).
fof(f4822_D,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f4814,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12))))) ) | $spl0),
  inference(resolution,[],[f4689,f2567])).
fof(f2567,plain,(
  ( ! [X123,X122] : (sP6(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12))),X122,X123)) ) | $spl0),
  inference(resolution,[],[f1071,f712])).
fof(f4804,plain,(
  ( ! [X22] : (p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(subsumption_resolution,[],[f4789,f993])).
fof(f993,plain,(
  ( ! [X133] : (sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X133) | p(s(bool,X133))) )),
  inference(resolution,[],[f597,f749])).
fof(f4789,plain,(
  ( ! [X22] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X22) | p(s(bool,X22)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1145,f626])).
fof(f1145,plain,(
  ( ! [X118] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X118) | p(s(bool,X118))) )),
  inference(resolution,[],[f599,f747])).
fof(f4803,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(subsumption_resolution,[],[f4788,f993])).
fof(f4788,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X15) | p(s(bool,X15)) | s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X16,X20),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21))) = s(X16,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X17),s(X16,X18),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19))) | s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X19),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) != s(X16,happ(s(fun('type.RedBlackSet.tree'(sK12),X16),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X16)))),X21),s('type.RedBlackSet.color',sK22(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s(sK12,sK24(X19,X18,sK14,X17,X21,X20,X16,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X19,X18,sK14,X17,X21,X20,X16,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X17)) )),
  inference(superposition,[],[f1145,f617])).
fof(f4802,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(subsumption_resolution,[],[f4787,f993])).
fof(f4787,plain,(
  ( ! [X14,X12,X10,X8,X13,X11,X9] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X8) | p(s(bool,X8)) | s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X9,X13),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X14))) = s(X9,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X10),s(X9,X11),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X9)))),X12))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X12,X11,sK14,X10,X14,X13,X9,sK12)),s(sK12,sK24(X12,X11,sK14,X10,X14,X13,X9,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X12,X11,sK14,X10,X14,X13,X9,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X10)) )),
  inference(superposition,[],[f1145,f615])).
fof(f4801,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(subsumption_resolution,[],[f4786,f993])).
fof(f4786,plain,(
  ( ! [X6,X4,X7,X5] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X4) | p(s(bool,X4)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X5),s(sK12,X6),s('type.RedBlackSet.tree'(sK12),X7)))) )),
  inference(superposition,[],[f1145,f609])).
fof(f4800,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(subsumption_resolution,[],[f4785,f993])).
fof(f4785,plain,(
  ( ! [X2,X0,X3,X1] : (~sP10(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0) | p(s(bool,X0)) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X1),s(sK12,X2),s('type.RedBlackSet.tree'(sK12),X3)))) )),
  inference(superposition,[],[f1145,f608])).
fof(f4770,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | $spl47),
  inference(cnf_transformation,[],[f4770_D])).
fof(f4770_D,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f4777,plain,(
  ( ! [X8] : (sP9(X8,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) ) | $spl48),
  inference(cnf_transformation,[],[f4777_D])).
fof(f4777_D,plain,(
  ( ! [X8] : (sP9(X8,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4775,plain,(
  ( ! [X8] : (sP9(X8,'F_0',happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) )),
  inference(resolution,[],[f4627,f1135])).
fof(f1135,plain,(
  ( ! [X99,X98] : (sP8(X98,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X99)) )),
  inference(resolution,[],[f599,f703])).
fof(f4767,plain,(
  ( ! [X8] : (s(bool,'T_0') != s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14))) | ~p(s(bool,X8))) )),
  inference(resolution,[],[f4762,f1135])).
fof(f4762,plain,(
  ( ! [X14,X15] : (~sP8(X14,X15,'F_0') | s(bool,'T_0') != s(bool,X15) | ~p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4761,f710])).
fof(f4761,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | s(bool,'T_0') != s(bool,X15) | ~sP8(X14,X15,'F_0') | ~sP6(X15,'F_0',X14)) )),
  inference(subsumption_resolution,[],[f4760,f818])).
fof(f818,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f552])).
fof(f552,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0))) & (p(s(bool,X0)) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f551])).
fof(f551,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0))) & (p(s(bool,X0)) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f423])).
fof(f423,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(ennf_transformation,[],[f340])).
fof(f340,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f339])).
fof(f339,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X15] : ((p(s(bool,X15)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X15)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_CLAUSES|split|4')).
fof(f4760,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | s(bool,'T_0') != s(bool,X15) | p(s(bool,'F_0')) | ~sP8(X14,X15,'F_0') | ~sP6(X15,'F_0',X14)) )),
  inference(subsumption_resolution,[],[f4753,f708])).
fof(f4753,plain,(
  ( ! [X14,X15] : (~p(s(bool,X14)) | s(bool,'T_0') != s(bool,X15) | p(s(bool,'F_0')) | ~sP8(X14,X15,'F_0') | ~sP7('F_0',X15,X14) | ~sP6(X15,'F_0',X14)) )),
  inference(resolution,[],[f3733,f699])).
fof(f3733,plain,(
  ( ! [X12,X11] : (~sP9(X12,'F_0',X11) | ~p(s(bool,X12)) | s(bool,'T_0') != s(bool,X11)) )),
  inference(superposition,[],[f3722,f715])).
fof(f1076,plain,(
  ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)),s(sK12,sK29(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12))))))) | $spl7),
  inference(cnf_transformation,[],[f1076_D])).
fof(f1076_D,plain,(
  ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)),s(sK12,sK29(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12))))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f1072,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X0))))) ) | $spl2),
  inference(cnf_transformation,[],[f1072_D])).
fof(f1072_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X0))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f4381,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X2)))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)),s(sK12,sK29(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12)))))))) )),
  inference(subsumption_resolution,[],[f4055,f913])).
fof(f4055,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X2)))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)),s(sK12,sK29(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12)))))))) )),
  inference(superposition,[],[f625,f1021])).
fof(f625,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(X1,X0)),s('type.RedBlackSet.tree'(X0),sK27(X1,X0)),s(X0,sK29(X1,X0)),s('type.RedBlackSet.tree'(X0),sK28(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0'))))) )),
  inference(cnf_transformation,[],[f462])).
fof(f462,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) | (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),sK27(X1,X0))))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),sK28(X1,X0))))) & ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(X1,X0)),s('type.RedBlackSet.tree'(X0),sK27(X1,X0)),s(X0,sK29(X1,X0)),s('type.RedBlackSet.tree'(X0),sK28(X1,X0)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27,sK28,sK29,sK30])],[f461])).
fof(f461,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) | ? [X3,X4] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X4)))) & ? [X5,X6] : ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X6),s('type.RedBlackSet.tree'(X0),X3),s(X0,X5),s('type.RedBlackSet.tree'(X0),X4))))))) | ! [X2] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))))),
  inference(rectify,[],[f401])).
fof(f401,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) | ? [X2,X3] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X3)))) & ? [X4,X5] : ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X5),s('type.RedBlackSet.tree'(X0),X2),s(X0,X4),s('type.RedBlackSet.tree'(X0),X3))))))) | ! [X6] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X6)))))),
  inference(flattening,[],[f400])).
fof(f400,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) | ? [X2,X3] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X3))))) & ? [X4,X5] : ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X5),s('type.RedBlackSet.tree'(X0),X2),s(X0,X4),s('type.RedBlackSet.tree'(X0),X3)))))))) | ! [X6] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X6)))))),
  inference(ennf_transformation,[],[f285])).
fof(f285,plain,(
  ! [X0,X1] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X2,X3] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X3))))) => ! [X4,X5] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X5),s('type.RedBlackSet.tree'(X0),X2),s(X0,X4),s('type.RedBlackSet.tree'(X0),X3)))))))) => ! [X6] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X6)))))),
  inference(flattening,[],[f284])).
fof(f284,plain,(
  ! [X0] : ! [X1] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0')))) & ! [X2,X3] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X3))))) => ! [X4,X5] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X5),s('type.RedBlackSet.tree'(X0),X2),s(X0,X4),s('type.RedBlackSet.tree'(X0),X3)))))))) => ! [X6] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X6)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Empty_0')))) & ! [X15,X16] : ((p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),X15)))) & p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),X16))))) => ! [X17,X18] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',X18),s('type.RedBlackSet.tree'(X6),X15),s(X6,X17),s('type.RedBlackSet.tree'(X6),X16)))))))) => ! [X15] : p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X6),bool),X7),s('type.RedBlackSet.tree'(X6),X15)))))),
  file('thm.RedBlackSet.not_red_ind','thm.RedBlackSet.tree_induction')).
fof(f4001,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f3907,f2494])).
fof(f3907,plain,(
  ( ! [X323,X324] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X323),s('type.num.num',X324))))) ) | $spl40),
  inference(resolution,[],[f2494,f776])).
fof(f776,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f523])).
fof(f4000,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f3902,f2494])).
fof(f3902,plain,(
  ( ! [X312,X311] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X311))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X312))))))) ) | $spl40),
  inference(resolution,[],[f2494,f776])).
fof(f3997,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f3879,f2494])).
fof(f3879,plain,(
  ~p(s(bool,'T_0')) | $spl40),
  inference(resolution,[],[f2494,f894])).
fof(f894,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f592])).
fof(f3996,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f3878,f2494])).
fof(f3878,plain,(
  ~p(s(bool,'T_0')) | $spl40),
  inference(resolution,[],[f2494,f892])).
fof(f892,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f591])).
fof(f3995,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f3876,f2494])).
fof(f3876,plain,(
  ( ! [X252] : (~p(s(bool,X252))) ) | $spl40),
  inference(resolution,[],[f2494,f887])).
fof(f887,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0] : ((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0)))),
  inference(ennf_transformation,[],[f371])).
fof(f371,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) => ~p(s(bool,X0)))),
  inference(flattening,[],[f370])).
fof(f370,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) => ~p(s(bool,X0)))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X15] : ((p(s(bool,X15)) => p(s(bool,'F_0'))) => ~p(s(bool,X15)))),
  file('thm.RedBlackSet.not_red_ind','thm.bool.IMP_F')).
fof(f3994,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f3865,f2494])).
fof(f3865,plain,(
  ( ! [X241] : (~p(s(bool,X241))) ) | $spl40),
  inference(resolution,[],[f2494,f818])).
fof(f3877,plain,(
  $false | $spl40),
  inference(resolution,[],[f2494,f890])).
fof(f3886,plain,(
  $false | $spl40),
  inference(resolution,[],[f2494,f599])).
fof(f3761,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,X2) | s(bool,'F_0') != s(bool,X2)) ) | $spl44),
  inference(cnf_transformation,[],[f3761_D])).
fof(f3761_D,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,X2) | s(bool,'F_0') != s(bool,X2)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f3760,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | p(s(bool,X3)) | s(bool,'F_0') != s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f3755])).
fof(f3755,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | p(s(bool,X3)) | p(s(bool,X3)) | s(bool,'F_0') != s(bool,X2)) )),
  inference(resolution,[],[f3730,f716])).
fof(f3730,plain,(
  ( ! [X6,X5] : (sP9(X6,X5,'F_0') | s(bool,'T_0') != s(bool,X5) | p(s(bool,X6))) )),
  inference(superposition,[],[f3722,f713])).
fof(f2493,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1))) ) | $spl16),
  inference(subsumption_resolution,[],[f2470,f597])).
fof(f2470,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))))) ) | $spl16),
  inference(resolution,[],[f2301,f650])).
fof(f2469,plain,(
  ( ! [X0,X1] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) | $spl38),
  inference(cnf_transformation,[],[f2469_D])).
fof(f2469_D,plain,(
  ( ! [X0,X1] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2459,plain,(
  ( ! [X26,X27] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1139,f626])).
fof(f1139,plain,(
  ( ! [X107,X106] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X106,X107)) )),
  inference(resolution,[],[f599,f708])).
fof(f2458,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1139,f617])).
fof(f2457,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1139,f615])).
fof(f2456,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1139,f609])).
fof(f2455,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1139,f608])).
fof(f2448,plain,(
  ( ! [X0,X1] : (sP7(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1)) ) | $spl36),
  inference(cnf_transformation,[],[f2448_D])).
fof(f2448_D,plain,(
  ( ! [X0,X1] : (sP7(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2438,plain,(
  ( ! [X26,X27] : (sP7(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1138,f626])).
fof(f1138,plain,(
  ( ! [X105,X104] : (sP7(X104,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X105)) )),
  inference(resolution,[],[f599,f707])).
fof(f2437,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP7(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1138,f617])).
fof(f2436,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP7(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1138,f615])).
fof(f2435,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP7(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1138,f609])).
fof(f2434,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1138,f608])).
fof(f2427,plain,(
  ( ! [X0,X1] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) | $spl34),
  inference(cnf_transformation,[],[f2427_D])).
fof(f2427_D,plain,(
  ( ! [X0,X1] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2417,plain,(
  ( ! [X26,X27] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1136,f626])).
fof(f2416,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1136,f617])).
fof(f2415,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1136,f615])).
fof(f2414,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1136,f609])).
fof(f2413,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP8(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1136,f608])).
fof(f2406,plain,(
  ( ! [X0,X1] : (sP8(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1)) ) | $spl32),
  inference(cnf_transformation,[],[f2406_D])).
fof(f2406_D,plain,(
  ( ! [X0,X1] : (sP8(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2397,plain,(
  ( ! [X26,X27] : (sP8(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1135,f626])).
fof(f2396,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP8(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1135,f617])).
fof(f2395,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP8(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1135,f615])).
fof(f2394,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP8(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1135,f609])).
fof(f2393,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP8(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1135,f608])).
fof(f2386,plain,(
  ( ! [X0,X1] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) | $spl30),
  inference(cnf_transformation,[],[f2386_D])).
fof(f2386_D,plain,(
  ( ! [X0,X1] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2378,plain,(
  ( ! [X26,X27] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1123,f626])).
fof(f1123,plain,(
  ( ! [X74,X75] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X74,X75)) )),
  inference(resolution,[],[f599,f687])).
fof(f687,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f484])).
fof(f2377,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1123,f617])).
fof(f2376,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1123,f615])).
fof(f2375,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1123,f609])).
fof(f2374,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP4(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1123,f608])).
fof(f2366,plain,(
  ( ! [X0,X1] : (sP4(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1)) ) | $spl28),
  inference(cnf_transformation,[],[f2366_D])).
fof(f2366_D,plain,(
  ( ! [X0,X1] : (sP4(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2358,plain,(
  ( ! [X26,X27] : (sP4(X26,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1122,f626])).
fof(f1122,plain,(
  ( ! [X72,X73] : (sP4(X72,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X73)) )),
  inference(resolution,[],[f599,f686])).
fof(f686,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f484])).
fof(f2357,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP4(X18,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1122,f617])).
fof(f2356,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP4(X10,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1122,f615])).
fof(f2355,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP4(X5,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1122,f609])).
fof(f2354,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP4(X0,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1122,f608])).
fof(f2346,plain,(
  ( ! [X0,X1] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) | $spl26),
  inference(cnf_transformation,[],[f2346_D])).
fof(f2346_D,plain,(
  ( ! [X0,X1] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2337,plain,(
  ( ! [X26,X27] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1109,f626])).
fof(f1109,plain,(
  ( ! [X47,X46] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X46,X47)) )),
  inference(resolution,[],[f599,f670])).
fof(f670,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f477])).
fof(f2336,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1109,f617])).
fof(f2335,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1109,f615])).
fof(f2334,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1109,f609])).
fof(f2333,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP2(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1109,f608])).
fof(f2325,plain,(
  ( ! [X0,X1] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) | $spl24),
  inference(cnf_transformation,[],[f2325_D])).
fof(f2325_D,plain,(
  ( ! [X0,X1] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2317,plain,(
  ( ! [X26,X27] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X26,X27) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1093,f626])).
fof(f1093,plain,(
  ( ! [X14,X15] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)),X14,X15)) )),
  inference(resolution,[],[f599,f653])).
fof(f653,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f469])).
fof(f2316,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X18,X19) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1093,f617])).
fof(f2315,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X10,X11) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1093,f615])).
fof(f2314,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X5,X6) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1093,f609])).
fof(f2313,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')),X0,X1) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1093,f608])).
fof(f2301,plain,(
  ( ! [X0,X1] : (sP0(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f2301_D])).
fof(f2301_D,plain,(
  ( ! [X0,X1] : (sP0(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2293,plain,(
  ( ! [X26,X27] : (sP0(X26,X27,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK31(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK32(sK14,sK12)),s(sK12,sK33(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK34(sK14,sK12))))) )),
  inference(superposition,[],[f1092,f626])).
fof(f1092,plain,(
  ( ! [X12,X13] : (sP0(X12,X13,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK14)))) )),
  inference(resolution,[],[f599,f651])).
fof(f651,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f469])).
fof(f2292,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (sP0(X18,X19,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X20,X24),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25))) = s(X20,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X21),s(X20,X22),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23))) | s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X23),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) != s(X20,happ(s(fun('type.RedBlackSet.tree'(sK12),X20),happ(s(fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)),happ(s(fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20))),happ(s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X20)))),X25),s('type.RedBlackSet.color',sK22(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK23(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s(sK12,sK24(X23,X22,sK14,X21,X25,X24,X20,sK12)))),s('type.RedBlackSet.tree'(sK12),sK25(X23,X22,sK14,X21,X25,X24,X20,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X21)) )),
  inference(superposition,[],[f1092,f617])).
fof(f2291,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (sP0(X10,X11,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),sK14),s(X12,X16),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X17))) = s(X12,'const.RedBlackSet.tree_CASE_3'(s('type.RedBlackSet.tree'(sK12),X13),s(X12,X14),s(fun('type.RedBlackSet.color',fun('type.RedBlackSet.tree'(sK12),fun(sK12,fun('type.RedBlackSet.tree'(sK12),X12)))),X15))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK22(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK23(X15,X14,sK14,X13,X17,X16,X12,sK12)),s(sK12,sK24(X15,X14,sK14,X13,X17,X16,X12,sK12)),s('type.RedBlackSet.tree'(sK12),sK25(X15,X14,sK14,X13,X17,X16,X12,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),X13)) )),
  inference(superposition,[],[f1092,f615])).
fof(f2290,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X7),s(sK12,X8),s('type.RedBlackSet.tree'(sK12),X9)))) )),
  inference(superposition,[],[f1092,f609])).
fof(f2289,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X0,X1,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0'))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X2),s(sK12,X3),s('type.RedBlackSet.tree'(sK12),X4)))) )),
  inference(superposition,[],[f1092,f608])).
fof(f2086,plain,(
  $false | $spl2),
  inference(resolution,[],[f1072,f599])).
fof(f1232,plain,(
  ( ! [X4,X5,X3] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(subsumption_resolution,[],[f1182,f597])).
fof(f1182,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),X3),s(sK12,X4),s('type.RedBlackSet.tree'(sK12),X5)))) )),
  inference(superposition,[],[f599,f609])).
fof(f1226,plain,(
  ( ! [X2,X0,X1] : (s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(subsumption_resolution,[],[f1181,f597])).
fof(f1181,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Empty_0')))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Black_0'),s('type.RedBlackSet.tree'(sK12),sK19(sK14,sK12)),s(sK12,sK20(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK21(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) = s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),sK16(sK14,sK12)),s(sK12,sK17(sK14,sK12)),s('type.RedBlackSet.tree'(sK12),sK18(sK14,sK12)))) | s('type.RedBlackSet.tree'(sK12),sK14) != s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color','const.RedBlackSet.Red_0'),s('type.RedBlackSet.tree'(sK12),X0),s(sK12,X1),s('type.RedBlackSet.tree'(sK12),X2)))) )),
  inference(superposition,[],[f599,f608])).
fof(f919,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X2)))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),'const.RedBlackSet.Tree_4'(s('type.RedBlackSet.color',sK30(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)),s(sK12,sK29(sK13,sK12)),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12)))))))) )),
  inference(resolution,[],[f597,f625])).
fof(f1074,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12))))) | $spl4),
  inference(cnf_transformation,[],[f1074_D])).
fof(f1074_D,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f918,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X1)))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK28(sK13,sK12)))))) )),
  inference(resolution,[],[f597,f624])).
fof(f624,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),sK28(X1,X0))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0'))))) )),
  inference(cnf_transformation,[],[f462])).
fof(f1071,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12))))) | $spl0),
  inference(cnf_transformation,[],[f1071_D])).
fof(f1071_D,plain,(
  p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f917,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),X0)))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(sK12),bool),sK13),s('type.RedBlackSet.tree'(sK12),sK27(sK13,sK12)))))) )),
  inference(resolution,[],[f597,f623])).
fof(f623,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),X2)))) | p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),sK27(X1,X0))))) | ~p(s(bool,happ(s(fun('type.RedBlackSet.tree'(X0),bool),X1),s('type.RedBlackSet.tree'(X0),'const.RedBlackSet.Empty_0'))))) )),
  inference(cnf_transformation,[],[f462])).
% SZS output end Proof for thm.RedBlackSet
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 600
% Passive clauses: 6023
% Generated clauses: 22221
% Final active clauses: 582
% Final passive clauses: 5150
% Input formulas: 260
% Initial clauses: 314
% 
% Selected by SInE selection: 89
% SInE iterations: 1
% 
% Duplicate literals: 684
% Trivial inequalities: 130
% Fw subsumption resolutions: 2003
% Fw demodulations: 1666
% Bw demodulations: 12
% 
% Simple tautologies: 1225
% Equational tautologies: 3
% Forward subsumptions: 10205
% 
% Binary resolution: 5059
% Forward superposition: 10063
% Backward superposition: 2577
% Equality resolution: 10
% 
% Split clauses: 429
% Split components: 1240
% SAT solver clauses: 536
% SAT solver unit clauses: 28
% SAT solver binary clauses: 217
% 
% Sat splits: 429
% Sat splitting refutations: 30
% 
% Memory used [KB]: 12920
% Time elapsed: 0.588 s
% ------------------------------
% ------------------------------
% Success in time 12.441 s
