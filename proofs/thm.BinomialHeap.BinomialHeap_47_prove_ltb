Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f1090,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f951,f962,f975,f44,f1083,f50,f47,f76,f42,f83,f43,f46,f49,f78,f51,f74,f48,f80,f45,f82,f72])).
fof(f72,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK3),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))))) | $spl1),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK3),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f82,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) | $spl10),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f45,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK3),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))))),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  (! [X9,X10] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),X9),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10))))))) | ! [X7,X8] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),X7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X8)))))))) & ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK3),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))))) | (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK5),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f33])).
fof(f33,plain,(
  ? [X0,X1,X2] : ((! [X9,X10] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X10)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X9),s('type.list.list'('type.BinomialHeap.tree'(X0)),X10))))))) | ! [X7,X8] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X7),s('type.list.list'('type.BinomialHeap.tree'(X0)),X8)))))))) & (? [X5,X6] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))) | ? [X3,X4] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))))))))),
  inference(rectify,[],[f32])).
fof(f32,plain,(
  ? [X0,X1,X2] : ((! [X3,X4] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) | ! [X5,X6] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))))))) & (? [X3,X4] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) | ? [X5,X6] : (p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2] : (! [X3,X4] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) <~> ! [X5,X6] : (~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2] : (! [X3,X4] : ((~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) <~> ! [X5,X6] : ((~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : (! [X3,X4] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) <=> ! [X5,X6] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0] : ! [X1,X2] : (! [X3,X4] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X3)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X3),s('type.list.list'('type.BinomialHeap.tree'(X0)),X4))))))) <=> ! [X5,X6] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X0),bool),X2),s('type.BinomialHeap.tree'(X0),X5)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X0)),bool),X1),s('type.list.list'('type.BinomialHeap.tree'(X0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X0),X5),s('type.list.list'('type.BinomialHeap.tree'(X0)),X6))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (! [X9,X10] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))))) <=> ! [X9,X10] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (! [X9,X10] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))))) <=> ! [X9,X10] : ((p(s(bool,happ(s(fun('type.BinomialHeap.tree'(X6),bool),X8),s('type.BinomialHeap.tree'(X6),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))) => p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(X6)),bool),X7),s('type.list.list'('type.BinomialHeap.tree'(X6)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X6),X9),s('type.list.list'('type.BinomialHeap.tree'(X6)),X10))))))))),
  file('thm.BinomialHeap.BinomialHeap_47_prove_ltb','thm.BinomialHeap.BinomialHeap_47_prove_ltb')).
fof(f80,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | $spl8),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f48,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK3),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))))),
  inference(cnf_transformation,[],[f34])).
fof(f74,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK5),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | $spl3),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK5),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f51,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK5),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK3),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))))),
  inference(cnf_transformation,[],[f34])).
fof(f78,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3)))) | $spl6),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f49,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK5),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3))))),
  inference(cnf_transformation,[],[f34])).
fof(f46,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3))))),
  inference(cnf_transformation,[],[f34])).
fof(f43,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) | p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3))))),
  inference(cnf_transformation,[],[f34])).
fof(f83,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),X9),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10)))))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10))))) ) | $spl12),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),X9),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10)))))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f42,plain,(
  ( ! [X10,X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),X7),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X8)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),X9),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),X10)))) | ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),X9))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f76,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))) | $spl4),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f47,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))),
  inference(cnf_transformation,[],[f34])).
fof(f50,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK0),sK5),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))),
  inference(cnf_transformation,[],[f34])).
fof(f1083,plain,(
  $false | ($spl3 | $spl8 | $spl12 | $spl26)),
  inference(subsumption_resolution,[],[f1082,f52])).
fof(f52,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.BinomialHeap.BinomialHeap_47_prove_ltb',aHL_TRUTH)).
fof(f1082,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl8 | $spl12 | $spl26)),
  inference(forward_demodulation,[],[f1081,f975])).
fof(f1081,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) | ($spl3 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f1066,f80])).
fof(f1066,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK6)))) | ($spl3 | $spl12)),
  inference(resolution,[],[f74,f83])).
fof(f44,plain,(
  p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5)))) | p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))))),
  inference(cnf_transformation,[],[f34])).
fof(f975,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5))) | $spl26),
  inference(cnf_transformation,[],[f975_D])).
fof(f975_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f962,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK5))) | $spl10),
  inference(resolution,[],[f82,f57])).
fof(f57,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.BinomialHeap.BinomialHeap_47_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f951,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl12)),
  inference(subsumption_resolution,[],[f950,f52])).
fof(f950,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl4 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f949,f134])).
fof(f134,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4))) | $spl4),
  inference(resolution,[],[f76,f57])).
fof(f949,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))) | ($spl1 | $spl6 | $spl12)),
  inference(subsumption_resolution,[],[f948,f52])).
fof(f948,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))) | ($spl1 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f934,f90])).
fof(f90,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3))) | $spl6),
  inference(resolution,[],[f78,f57])).
fof(f934,plain,(
  ~p(s(bool,happ(s(fun('type.BinomialHeap.tree'(sK0),bool),sK2),s('type.BinomialHeap.tree'(sK0),sK3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.BinomialHeap.tree'(sK0)),bool),sK1),s('type.list.list'('type.BinomialHeap.tree'(sK0)),sK4)))) | ($spl1 | $spl12)),
  inference(resolution,[],[f83,f72])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 31
% Passive clauses: 219
% Generated clauses: 991
% Final active clauses: 27
% Final passive clauses: 158
% Input formulas: 12
% Initial clauses: 29
% 
% Duplicate literals: 102
% Trivial inequalities: 29
% Fw subsumption resolutions: 144
% Fw demodulations: 10
% Bw demodulations: 3
% 
% Simple tautologies: 61
% Equational tautologies: 28
% Forward subsumptions: 380
% 
% Binary resolution: 64
% Factoring: 1
% Forward superposition: 191
% Backward superposition: 306
% Self superposition: 42
% Equality factoring: 50
% Equality resolution: 5
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 42
% SAT solver unit clauses: 8
% SAT solver binary clauses: 18
% SAT solver learnt clauses: 4
% SAT solver learnt literals: 4
% 
% Sat splits: 26
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 37
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 895
% Time elapsed: 0.028 s
% ------------------------------
% ------------------------------
% Success in time 0.03 s
