Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_optimise
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_optimise
% SZS output start Proof for thm.ml_optimise
fof(f4263,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4262,f223,f433,f431,f429,f427,f425,f423,f421,f419,f417,f415,f413,f411,f409,f4260,f4259,f4258,f4257,f4256,f4255,f4254,f3978,f3977,f3976,f2018,f4261])).
fof(f4261,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f417,f229])).
fof(f229,plain,(
  ( ! [X17] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK13))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK15))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK16))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK17),s('type.list.list'('type.ast.exp'),sK18))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK19))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK20),s('type.ast.exp',sK21))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK22),s('type.list.list'('type.ast.exp'),sK23))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK24),s('type.ast.exp',sK25),s('type.ast.exp',sK26))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK27),s('type.ast.exp',sK28),s('type.ast.exp',sK29))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK30),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK32),s('type.ast.exp',sK33))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34))),s('type.ast.exp',sK35),s('type.ast.exp',sK36))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK37),s('type.ast.exp',sK38)))) & ! [X24,X25,X26] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26))) & ! [X23] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23))) & ! [X21,X22] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22))) & ! [X20] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20))) & ! [X18,X19] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19))) & ! [X17] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17))) & ! [X15,X16] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16))) & ! [X13,X14] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14))) & ! [X10,X11,X12] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) & ! [X7,X8,X9] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9))) & ! [X5,X6] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6))) & ! [X3,X4] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4))) & ! [X1,X2] : s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X52] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X52))) | ? [X50,X51] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X50),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X51))) | ? [X49] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X49))) | ? [X47,X48] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X47),s('type.list.list'('type.ast.exp'),X48))) | ? [X46] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X46))) | ? [X44,X45] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X44),s('type.ast.exp',X45))) | ? [X42,X43] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X42),s('type.list.list'('type.ast.exp'),X43))) | ? [X39,X40,X41] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X39),s('type.ast.exp',X40),s('type.ast.exp',X41))) | ? [X36,X37,X38] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) | ? [X34,X35] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X34),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X35))) | ? [X32,X33] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X32),s('type.ast.exp',X33))) | ? [X29,X30,X31] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X29))),s('type.ast.exp',X30),s('type.ast.exp',X31))) | ? [X27,X28] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28)))) & ! [X24,X25,X26] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26))) & ! [X23] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23))) & ! [X21,X22] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22))) & ! [X20] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20))) & ! [X18,X19] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19))) & ! [X17] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17))) & ! [X15,X16] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16))) & ! [X13,X14] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14))) & ! [X10,X11,X12] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) & ! [X7,X8,X9] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9))) & ! [X5,X6] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6))) & ! [X3,X4] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4))) & ! [X1,X2] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X26] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) | ? [X24,X25] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X23] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) | ? [X21,X22] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) | ? [X20] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) | ? [X18,X19] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) | ? [X16,X17] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X13,X14,X15] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) | ? [X10,X11,X12] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) | ? [X8,X9] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X6,X7] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) | ? [X3,X4,X5] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) | ? [X1,X2] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) & ! [X50,X51,X52] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) & ! [X49] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) & ! [X47,X48] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) & ! [X46] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) & ! [X44,X45] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) & ! [X43] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) & ! [X41,X42] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) & ! [X39,X40] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) & ! [X36,X37,X38] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) & ! [X33,X34,X35] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) & ! [X31,X32] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) & ! [X29,X30] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) & ! [X27,X28] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X26] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) | ? [X24,X25] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X23] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) | ? [X21,X22] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) | ? [X20] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) | ? [X18,X19] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) | ? [X16,X17] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X13,X14,X15] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) | ? [X10,X11,X12] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) | ? [X8,X9] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X6,X7] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) | ? [X3,X4,X5] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) | ? [X1,X2] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) & (! [X50,X51,X52] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) & ! [X49] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) & ! [X47,X48] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) & ! [X46] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) & ! [X44,X45] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) & ! [X43] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) & ! [X41,X42] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) & ! [X39,X40] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) & ! [X36,X37,X38] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) & ! [X33,X34,X35] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) & ! [X31,X32] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) & ! [X29,X30] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) & ! [X27,X28] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X26] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) | ? [X24,X25] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X23] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) | ? [X21,X22] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) | ? [X20] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) | ? [X18,X19] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) | ? [X16,X17] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X13,X14,X15] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) | ? [X10,X11,X12] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) | ? [X8,X9] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X6,X7] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) | ? [X3,X4,X5] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) | ? [X1,X2] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) => (? [X50,X51,X52] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) | ? [X49] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) | ? [X47,X48] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) | ? [X46] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) | ? [X44,X45] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) | ? [X43] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) | ? [X41,X42] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) | ? [X39,X40] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) | ? [X36,X37,X38] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) | ? [X33,X34,X35] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) | ? [X31,X32] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) | ? [X29,X30] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X27,X28] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X7))) | ? [X8,X9] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X10] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X10))) | ? [X11,X12] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X11),s('type.list.list'('type.ast.exp'),X12))) | ? [X13] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X13))) | ? [X14,X15] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X14),s('type.ast.exp',X15))) | ? [X16,X17] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X18,X19,X20] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X18),s('type.ast.exp',X19),s('type.ast.exp',X20))) | ? [X21,X22,X23] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X21),s('type.ast.exp',X22),s('type.ast.exp',X23))) | ? [X24,X25] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X26,X27] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X26),s('type.ast.exp',X27))) | ? [X28,X29,X30] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X31,X32] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32)))) => (? [X28,X29,X30] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X7] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X7))) | ? [X8,X9] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X10] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X10))) | ? [X11,X12] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X11),s('type.list.list'('type.ast.exp'),X12))) | ? [X13] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X13))) | ? [X14,X15] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X14),s('type.ast.exp',X15))) | ? [X16,X17] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X18,X19,X20] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X18),s('type.ast.exp',X19),s('type.ast.exp',X20))) | ? [X21,X22,X23] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X21),s('type.ast.exp',X22),s('type.ast.exp',X23))) | ? [X24,X25] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X26,X27] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X26),s('type.ast.exp',X27))) | ? [X31,X32] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X7))) | ? [X8,X9] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X10] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X10))) | ? [X11,X12] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X11),s('type.list.list'('type.ast.exp'),X12))) | ? [X13] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X13))) | ? [X14,X15] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X14),s('type.ast.exp',X15))) | ? [X16,X17] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X18,X19,X20] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X18),s('type.ast.exp',X19),s('type.ast.exp',X20))) | ? [X21,X22,X23] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X21),s('type.ast.exp',X22),s('type.ast.exp',X23))) | ? [X24,X25] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X26,X27] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X26),s('type.ast.exp',X27))) | ? [X28,X29,X30] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X31,X32] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32)))) => (? [X28,X29,X30] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X7] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X7))) | ? [X8,X9] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X10] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X10))) | ? [X11,X12] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X11),s('type.list.list'('type.ast.exp'),X12))) | ? [X13] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X13))) | ? [X14,X15] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X14),s('type.ast.exp',X15))) | ? [X16,X17] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X18,X19,X20] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X18),s('type.ast.exp',X19),s('type.ast.exp',X20))) | ? [X21,X22,X23] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X21),s('type.ast.exp',X22),s('type.ast.exp',X23))) | ? [X24,X25] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X26,X27] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X26),s('type.ast.exp',X27))) | ? [X31,X32] : s('type.ast.exp',X6) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32)))))),
  file('thm.ml_optimise.ml_optimise_|49|9_prove_ltb','thm.ml_optimise.ml_optimise_|49|9_prove_ltb')).
fof(f2018,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f423,f232])).
fof(f232,plain,(
  ( ! [X12,X10,X11] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3976,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f429,f235])).
fof(f235,plain,(
  ( ! [X4,X3] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3977,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f427,f234])).
fof(f234,plain,(
  ( ! [X6,X5] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3978,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f419,f230])).
fof(f230,plain,(
  ( ! [X15,X16] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4254,plain,(
  $false | $spl22),
  inference(subsumption_resolution,[],[f431,f224])).
fof(f224,plain,(
  ( ! [X26,X24,X25] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4255,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f409,f225])).
fof(f225,plain,(
  ( ! [X23] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4256,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f425,f233])).
fof(f233,plain,(
  ( ! [X8,X7,X9] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4257,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f415,f228])).
fof(f228,plain,(
  ( ! [X19,X18] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4258,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f413,f227])).
fof(f227,plain,(
  ( ! [X20] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4259,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f421,f231])).
fof(f231,plain,(
  ( ! [X14,X13] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4260,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f433,f236])).
fof(f236,plain,(
  ( ! [X2,X1] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f409,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK13))) | $spl0),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f411,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK15))) | $spl2),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK15))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f413,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK16))) | $spl4),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK16))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f415,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK17),s('type.list.list'('type.ast.exp'),sK18))) | $spl6),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK17),s('type.list.list'('type.ast.exp'),sK18))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f417,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK19))) | $spl8),
  inference(cnf_transformation,[],[f417_D])).
fof(f417_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK19))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f419,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK20),s('type.ast.exp',sK21))) | $spl10),
  inference(cnf_transformation,[],[f419_D])).
fof(f419_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK20),s('type.ast.exp',sK21))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f421,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK22),s('type.list.list'('type.ast.exp'),sK23))) | $spl12),
  inference(cnf_transformation,[],[f421_D])).
fof(f421_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK22),s('type.list.list'('type.ast.exp'),sK23))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f423,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK24),s('type.ast.exp',sK25),s('type.ast.exp',sK26))) | $spl14),
  inference(cnf_transformation,[],[f423_D])).
fof(f423_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK24),s('type.ast.exp',sK25),s('type.ast.exp',sK26))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f425,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK27),s('type.ast.exp',sK28),s('type.ast.exp',sK29))) | $spl16),
  inference(cnf_transformation,[],[f425_D])).
fof(f425_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK27),s('type.ast.exp',sK28),s('type.ast.exp',sK29))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f427,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK30),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31))) | $spl18),
  inference(cnf_transformation,[],[f427_D])).
fof(f427_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK30),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f429,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK32),s('type.ast.exp',sK33))) | $spl20),
  inference(cnf_transformation,[],[f429_D])).
fof(f429_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK32),s('type.ast.exp',sK33))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f431,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34))),s('type.ast.exp',sK35),s('type.ast.exp',sK36))) | $spl22),
  inference(cnf_transformation,[],[f431_D])).
fof(f431_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34))),s('type.ast.exp',sK35),s('type.ast.exp',sK36))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f433,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK37),s('type.ast.exp',sK38))) | $spl24),
  inference(cnf_transformation,[],[f433_D])).
fof(f433_D,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK37),s('type.ast.exp',sK38))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f223,plain,(
  s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK37),s('type.ast.exp',sK38))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34))),s('type.ast.exp',sK35),s('type.ast.exp',sK36))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK32),s('type.ast.exp',sK33))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK30),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK27),s('type.ast.exp',sK28),s('type.ast.exp',sK29))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK24),s('type.ast.exp',sK25),s('type.ast.exp',sK26))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK22),s('type.list.list'('type.ast.exp'),sK23))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK20),s('type.ast.exp',sK21))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK19))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK17),s('type.list.list'('type.ast.exp'),sK18))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK16))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK15))) | s('type.ast.exp',sK12) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK13)))),
  inference(cnf_transformation,[],[f138])).
fof(f4262,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f411,f226])).
fof(f226,plain,(
  ( ! [X21,X22] : (s('type.ast.exp',sK12) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.ml_optimise
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 342
% Passive clauses: 1252
% Generated clauses: 4033
% Final active clauses: 342
% Final passive clauses: 762
% Input formulas: 37
% Initial clauses: 181
% 
% Duplicate literals: 151
% Trivial inequalities: 13
% Fw subsumption resolutions: 287
% 
% Simple tautologies: 145
% Equational tautologies: 26
% Forward subsumptions: 2143
% 
% Binary resolution: 2429
% Factoring: 738
% Forward superposition: 106
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 87
% Split components: 186
% SAT solver clauses: 174
% SAT solver unit clauses: 19
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 87
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 173
% TWLsolver calls for satisfiability: 149
% 
% Memory used [KB]: 2174
% Time elapsed: 0.173 s
% ------------------------------
% ------------------------------
% Success in time 0.2 s
