Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvpProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpProps
% SZS output start Proof for thm.bvpProps
fof(f1074,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1073,f57,f85,f307,f312,f55,f82,f355,f94,f97,f95,f104,f80,f86,f417,f419,f310])).
fof(f310,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f419,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK1,sK1,sK0)))) = s('type.option.option'(sK0),'const.sptree.lookup_2'(s('type.num.num',sK2(sK1,sK1,sK0)),s('type.sptree.spt'(sK0),sK1))) | $spl20),
  inference(cnf_transformation,[],[f419_D])).
fof(f419_D,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK1,sK1,sK0)))) = s('type.option.option'(sK0),'const.sptree.lookup_2'(s('type.num.num',sK2(sK1,sK1,sK0)),s('type.sptree.spt'(sK0),sK1))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f417,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK1,sK1,sK0)))) = s('type.option.option'(sK0),'const.sptree.lookup_2'(s('type.num.num',sK2(sK1,sK1,sK0)),s('type.sptree.spt'(sK0),sK1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl7)),
  inference(subsumption_resolution,[],[f409,f90])).
fof(f90,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(superposition,[],[f85,f58])).
fof(f58,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvpProps.locals_ok_refl',aHL_BOOL_CASES)).
fof(f409,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK1,sK1,sK0)))) = s('type.option.option'(sK0),'const.sptree.lookup_2'(s('type.num.num',sK2(sK1,sK1,sK0)),s('type.sptree.spt'(sK0),sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f77,f242])).
fof(f242,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))) | s(bool,'T_0') = s(bool,X9)) ) | $spl2),
  inference(subsumption_resolution,[],[f172,f82])).
fof(f172,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f54,f88])).
fof(f88,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f58,f58])).
fof(f54,plain,(
  ~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f29])).
fof(f29,plain,(
  ? [X0,X1] : ~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X1))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X1))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X6),X7),s('type.sptree.spt'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X6),X7),s('type.sptree.spt'(X6),X7))))),
  file('thm.bvpProps.locals_ok_refl','thm.bvpProps.locals_ok_refl')).
fof(f77,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X2,X1,X0)))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK2(X2,X1,X0)),s('type.sptree.spt'(X0),X1)))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | ! [X5,X6] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))))) & ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X2,X1,X0)))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK2(X2,X1,X0)),s('type.sptree.spt'(X0),X1))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X2,X1,X0)))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK2(X2,X1,X0)),s('type.sptree.spt'(X0),X2)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | ! [X5,X6] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))))) & (? [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))))),
  inference(rectify,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2))))) & (? [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) <=> ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) <=> ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) => s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) <=> ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) => s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X10,X11] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X6),X10),s('type.sptree.spt'(X6),X11)))) <=> ! [X12,X9] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X12),s('type.sptree.spt'(X6),X10))) => s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X12),s('type.sptree.spt'(X6),X11)))))),
  file('thm.bvpProps.locals_ok_refl','thm.bvpProps.locals_ok_def')).
fof(f86,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f82,f80])).
fof(f80,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl0),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f104,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | ($spl7 | $spl8)),
  inference(superposition,[],[f85,f95])).
fof(f95,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f97,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f94,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f58])).
fof(f355,plain,(
  $false | ($spl11 | $spl12)),
  inference(trivial_inequality_removal,[],[f348])).
fof(f348,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl11 | $spl12)),
  inference(superposition,[],[f97,f310])).
fof(f82,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f55,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvpProps.locals_ok_refl',aHL_TRUTH)).
fof(f312,plain,(
  s(bool,'F_0') = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))) | $spl14),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  s(bool,'F_0') = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f307,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))) | s(bool,'T_0') = s(bool,X9)) ) | $spl2),
  inference(duplicate_literal_removal,[],[f271])).
fof(f271,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl2),
  inference(superposition,[],[f242,f58])).
fof(f85,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f57,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvpProps.locals_ok_refl',aHL_FALSITY)).
fof(f1073,plain,(
  $false | ($spl7 | $spl14 | $spl20)),
  inference(subsumption_resolution,[],[f1072,f85])).
fof(f1072,plain,(
  p(s(bool,'F_0')) | ($spl14 | $spl20)),
  inference(forward_demodulation,[],[f1071,f312])).
fof(f1071,plain,(
  p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1)))) | $spl20),
  inference(trivial_inequality_removal,[],[f1070])).
fof(f1070,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK1,sK1,sK0)))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK1,sK1,sK0)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK1),s('type.sptree.spt'(sK0),sK1)))) | $spl20),
  inference(superposition,[],[f78,f419])).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X2,X1,X0)))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK2(X2,X1,X0)),s('type.sptree.spt'(X0),X2))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))) )),
  inference(cnf_transformation,[],[f52])).
% SZS output end Proof for thm.bvpProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 112
% Generated clauses: 973
% Final active clauses: 17
% Final passive clauses: 71
% Input formulas: 13
% Initial clauses: 26
% 
% Duplicate literals: 166
% Trivial inequalities: 20
% Fw subsumption resolutions: 45
% Fw demodulations: 3
% Bw demodulations: 4
% 
% Simple tautologies: 53
% Equational tautologies: 35
% Forward subsumptions: 440
% 
% Binary resolution: 10
% Forward superposition: 205
% Backward superposition: 249
% Self superposition: 112
% Equality factoring: 108
% 
% Split clauses: 65
% Split components: 131
% SAT solver clauses: 109
% SAT solver unit clauses: 13
% SAT solver binary clauses: 54
% SAT solver learnt clauses: 1
% 
% Sat splits: 65
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 108
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1023
% Time elapsed: 0.063 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
