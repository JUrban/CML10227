Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordSem
% (4408)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 154
% Passive clauses: 3319
% Generated clauses: 10984
% Final active clauses: 137
% Final passive clauses: 2971
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 263
% Trivial inequalities: 70
% Fw subsumption resolutions: 478
% Fw demodulations: 628
% Bw demodulations: 14
% 
% Simple tautologies: 160
% Equational tautologies: 21
% Forward subsumptions: 6040
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 60
% Forward superposition: 5413
% Backward superposition: 3724
% Self superposition: 238
% Equality factoring: 35
% Equality resolution: 21
% 
% Split clauses: 125
% Split components: 255
% SAT solver clauses: 176
% SAT solver unit clauses: 12
% SAT solver binary clauses: 41
% 
% Sat splits: 125
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 176
% TWLsolver calls for satisfiability: 43
% 
% Memory used [KB]: 20852
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordSem
% (4453)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 99
% Passive clauses: 798
% Generated clauses: 6467
% Final active clauses: 91
% Final passive clauses: 692
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 272
% Trivial inequalities: 71
% Fw subsumption resolutions: 350
% Fw demodulations: 542
% Bw demodulations: 13
% Condensations: 615
% 
% Simple tautologies: 120
% Equational tautologies: 19
% Forward subsumptions: 2559
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 78
% Forward superposition: 2150
% Backward superposition: 1427
% Self superposition: 63
% Equality factoring: 39
% Equality resolution: 18
% 
% Split clauses: 47
% Split components: 99
% SAT solver clauses: 1118
% SAT solver unit clauses: 37
% SAT solver binary clauses: 29
% 
% Sat splits: 47
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1118
% TWLsolver calls for satisfiability: 196
% 
% Memory used [KB]: 15735
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.wordSem
% (4486)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 482
% Passive clauses: 10137
% Generated clauses: 106343
% Final active clauses: 68
% Final passive clauses: 322
% Input formulas: 18
% Initial clauses: 26
% Discarded non-redundant clauses: 4933
% 
% Duplicate literals: 5967
% Trivial inequalities: 551
% Fw subsumption resolutions: 8287
% Fw demodulations: 17244
% Bw demodulations: 6558
% Condensations: 7716
% Global subsumptions: 213
% 
% Simple tautologies: 712
% Equational tautologies: 1256
% Forward subsumptions: 51393
% Fw demodulations to eq. taut.: 72
% Bw demodulations to eq. taut.: 243
% 
% Unit resulting resolution: 4658
% Forward superposition: 25102
% Backward superposition: 19207
% Self superposition: 431
% Equality factoring: 254
% Equality resolution: 28
% 
% Split clauses: 655
% Split components: 1318
% SAT solver clauses: 12006
% SAT solver unit clauses: 85
% SAT solver binary clauses: 837
% 
% Sat splits: 655
% Sat splitting refutations: 343
% 
% Memory used [KB]: 108228
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f519,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f87,f94,f106,f104,f129,f145,f154,f159,f158,f172,f175,f174,f156,f187,f190,f327,f102,f101,f517])).
fof(f517,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f510,f78])).
fof(f78,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.wordSem.push_env_ind',aHL_FALSITY)).
fof(f510,plain,(
  p(s(bool,'F_0')) | $spl4),
  inference(superposition,[],[f482,f92])).
fof(f92,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),sK6)))),
  inference(resolution,[],[f84,f73])).
fof(f73,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X19] : (s(bool,'F_0') = s(bool,X19) <=> ~p(s(bool,X19)))),
  file('thm.wordSem.push_env_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f84,plain,(
  ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),sK6))))),
  inference(forward_demodulation,[],[f62,f66])).
fof(f66,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X8,X6,X7] : ! [X24,X21,X25] : s(X8,happ(s(fun(X7,X8),happ(s(fun(X6,fun(X7,X8)),X24),s(X6,X21))),s(X7,X25))) = s(X8,'const.pair.UNCURRY_2'(s(fun(X6,fun(X7,X8)),X24),s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X21),s(X7,X25)))))),
  file('thm.wordSem.push_env_ind','thm.pair.UNCURRY_DEF')).
fof(f62,plain,(
  ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))),s('type.wordSem.state'(sK1,sK2),sK6))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X13,X14] : p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X13))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(sK1,sK2),X14)))) & ! [X7,X8,X9,X10,X11,X12] : p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X7))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK0),X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))),s('type.wordSem.state'(sK1,sK2),X12)))) & ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))),s('type.wordSem.state'(sK1,sK2),sK6))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3] : (! [X13,X14] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X13))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X1,X2),X14)))) & ! [X7,X8,X9,X10,X11,X12] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X7))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))),s('type.wordSem.state'(X1,X2),X12)))) & ? [X4,X5,X6] : ~p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X5))),s('type.wordSem.state'(X1,X2),X6)))))),
  inference(rectify,[],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2,X3] : (! [X10,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X1,X2),X11)))) & ! [X4,X5,X6,X7,X8,X9] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X7),s('type.num.num',X8))))))))))),s('type.wordSem.state'(X1,X2),X9)))) & ? [X12,X13,X14] : ~p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X12))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X13))),s('type.wordSem.state'(X1,X2),X14)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2,X3] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X1,X2),X11)))) & ! [X4,X5,X6,X7,X8,X9] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X7),s('type.num.num',X8))))))))))),s('type.wordSem.state'(X1,X2),X9))))) & ? [X12,X13,X14] : ~p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X12))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X13))),s('type.wordSem.state'(X1,X2),X14)))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X1,X2),X11)))) & ! [X4,X5,X6,X7,X8,X9] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X7),s('type.num.num',X8))))))))))),s('type.wordSem.state'(X1,X2),X9))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X12))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X13))),s('type.wordSem.state'(X1,X2),X14)))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2] : ! [X3] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X1,X2),X11)))) & ! [X4,X5,X6,X7,X8,X9] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X4))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X7),s('type.num.num',X8))))))))))),s('type.wordSem.state'(X1,X2),X9))))) => ! [X12,X13,X14] : p(s(bool,happ(s(fun('type.wordSem.state'(X1,X2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X1,X2),bool))),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X12))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X13))),s('type.wordSem.state'(X1,X2),X14)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X7,X8),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X7)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool))),X9),s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X7,X8),X11)))) & ! [X10,X12,X13,X14,X15,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X7,X8),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X7)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool))),X9),s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X12),s('type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X6),X13),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X14),s('type.num.num',X15))))))))))),s('type.wordSem.state'(X7,X8),X11))))) => ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.wordSem.state'(X7,X8),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X7)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool))),X9),s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X16))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),X17))),s('type.wordSem.state'(X7,X8),X18)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9] : ((! [X10,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X7,X8),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X7)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool))),X9),s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(X7,X8),X11)))) & ! [X10,X12,X13,X14,X15,X11] : p(s(bool,happ(s(fun('type.wordSem.state'(X7,X8),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X7)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool))),X9),s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X10))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X12),s('type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X6),X13),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X14),s('type.num.num',X15))))))))))),s('type.wordSem.state'(X7,X8),X11))))) => ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.wordSem.state'(X7,X8),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X7)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(X7,X8),bool))),X9),s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X16))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),X17))),s('type.wordSem.state'(X7,X8),X18)))))),
  file('thm.wordSem.push_env_ind','thm.wordSem.push_env_ind')).
fof(f482,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X0),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X1))))) ) | $spl4),
  inference(superposition,[],[f457,f104])).
fof(f457,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X1),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),X0))))))),s('type.wordSem.state'(sK1,sK2),X2))))) )),
  inference(superposition,[],[f430,f67])).
fof(f67,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK16(X2,X1,X0)),s(X1,sK17(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK16(X2,X1,X0)),s(X1,sK17(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X21] : ? [X22,X23] : s('type.pair.prod'(X6,X7),X21) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X22),s(X7,X23)))),
  file('thm.wordSem.push_env_ind','thm.pair.ABS_PAIR_THM')).
fof(f430,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X1),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')),X0))))))))),s('type.wordSem.state'(sK1,sK2),X3))))) )),
  inference(superposition,[],[f255,f67])).
fof(f255,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X1),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK0),X3),s('type.pair.prod'('type.num.num','type.num.num'),X0))))))))))),s('type.wordSem.state'(sK1,sK2),X4))))) )),
  inference(superposition,[],[f85,f67])).
fof(f85,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X7),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK0),X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))))),s('type.wordSem.state'(sK1,sK2),X12))))) )),
  inference(forward_demodulation,[],[f61,f66])).
fof(f61,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X7))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK0),X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))),s('type.wordSem.state'(sK1,sK2),X12))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f101,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1),s('type.wordSem.state'(sK1,sK2),sK6))),s('type.wordSem.state'(sK1,sK2),sK18('const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5)))),X1,'type.wordSem.state'(sK1,sK2)))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1))))) ) | $spl0),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1),s('type.wordSem.state'(sK1,sK2),sK6))),s('type.wordSem.state'(sK1,sK2),sK18('const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5)))),X1,'type.wordSem.state'(sK1,sK2)))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f102,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X0))))) ) | $spl2),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X0))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f327,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X0)))) | ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1),s('type.wordSem.state'(sK1,sK2),sK6))),s('type.wordSem.state'(sK1,sK2),sK18('const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5)))),X1,'type.wordSem.state'(sK1,sK2)))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1))))) )),
  inference(subsumption_resolution,[],[f297,f78])).
fof(f297,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X0)))) | ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1),s('type.wordSem.state'(sK1,sK2),sK6))),s('type.wordSem.state'(sK1,sK2),sK18('const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5)))),X1,'type.wordSem.state'(sK1,sK2)))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1))))) )),
  inference(superposition,[],[f68,f92])).
fof(f68,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK18(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK18(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK18(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18])],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X26] : (p(s(bool,'const.relation.WF_1'(s(fun(X6,fun(X6,bool)),X26)))) => ! [X9] : (! [X21] : (! [X25] : (p(s(bool,happ(s(fun(X6,bool),happ(s(fun(X6,fun(X6,bool)),X26),s(X6,X25))),s(X6,X21)))) => p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X25))))) => p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X21))))) => ! [X21] : p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X21))))))),
  file('thm.wordSem.push_env_ind','thm.relation.WF_INDUCTION_THM')).
fof(f190,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X0)))) | ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1),s('type.wordSem.state'(sK1,sK2),sK6))),s('type.wordSem.state'(sK1,sK2),sK18('const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5)))),X1,'type.wordSem.state'(sK1,sK2)))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1))))) )),
  inference(resolution,[],[f84,f68])).
fof(f187,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f180,f86])).
fof(f86,plain,(
  ( ! [X14,X13] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X13),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))))),s('type.wordSem.state'(sK1,sK2),X14))))) )),
  inference(forward_demodulation,[],[f60,f66])).
fof(f60,plain,(
  ( ! [X14,X13] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool)),happ(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X13))),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))),s('type.wordSem.state'(sK1,sK2),X14))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f180,plain,(
  ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))))),s('type.wordSem.state'(sK1,sK2),sK6)))) | $spl8),
  inference(backward_demodulation,[],[f156,f84])).
fof(f156,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | $spl8),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f174,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl12),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f175,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | $spl10),
  inference(forward_demodulation,[],[f165,f158])).
fof(f165,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl10),
  inference(superposition,[],[f65,f158])).
fof(f65,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK15(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK15(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X20] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X20) | ? [X21] : s('type.option.option'(X6),X20) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X21))))),
  file('thm.wordSem.push_env_ind','thm.option.option_nchotomy')).
fof(f172,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | $spl10),
  inference(forward_demodulation,[],[f163,f158])).
fof(f163,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl10),
  inference(superposition,[],[f158,f65])).
fof(f158,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl10),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f159,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | $spl4),
  inference(forward_demodulation,[],[f147,f104])).
fof(f147,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl4),
  inference(superposition,[],[f65,f104])).
fof(f154,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | $spl4),
  inference(forward_demodulation,[],[f146,f104])).
fof(f146,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0') = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15('const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))),'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl4),
  inference(superposition,[],[f104,f65])).
fof(f145,plain,(
  $false | $spl7),
  inference(subsumption_resolution,[],[f106,f86])).
fof(f129,plain,(
  $false | $spl2),
  inference(resolution,[],[f102,f84])).
fof(f104,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) | $spl4),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f106,plain,(
  ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))))),s('type.wordSem.state'(sK1,sK2),sK6)))) | $spl7),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))))),s('type.wordSem.state'(sK1,sK2),sK6)))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f94,plain,(
  ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.NONE_0'))))),s('type.wordSem.state'(sK1,sK2),sK6)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5) = s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))),sK15(sK5,'type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))))))),
  inference(superposition,[],[f84,f65])).
fof(f87,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),'const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5))))),s('type.wordSem.state'(sK1,sK2),X0)))) | ~p(s(bool,happ(s(fun('type.wordSem.state'(sK1,sK2),bool),happ(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1),s('type.wordSem.state'(sK1,sK2),sK6))),s('type.wordSem.state'(sK1,sK2),sK18('const.pair.UNCURRY_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK1)),fun('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),fun('type.wordSem.state'(sK1,sK2),bool))),sK3),s('type.pair.prod'('type.sptree.spt'('type.wordSem.word_loc'(sK1)),'type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num'))))),'const.pair.,_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK0),'type.pair.prod'('type.num.num','type.num.num')))),sK5)))),X1,'type.wordSem.state'(sK1,sK2)))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.wordSem.state'(sK1,sK2),fun('type.wordSem.state'(sK1,sK2),bool)),X1))))) )),
  inference(resolution,[],[f84,f68])).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 82
% Generated clauses: 437
% Final active clauses: 34
% Final passive clauses: 38
% Input formulas: 18
% Initial clauses: 24
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Trivial inequalities: 10
% Fw subsumption resolutions: 36
% Fw demodulations: 49
% Bw demodulations: 5
% 
% Simple tautologies: 2
% Forward subsumptions: 262
% 
% Binary resolution: 50
% Forward superposition: 178
% Backward superposition: 94
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 13
% SAT solver unit clauses: 4
% SAT solver binary clauses: 4
% 
% Sat splits: 8
% Sat splitting refutations: 4
% 
% Memory used [KB]: 2174
% Time elapsed: 0.023 s
% ------------------------------
% ------------------------------
% Success in time 11.755 s
