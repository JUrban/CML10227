Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSoundInvariants
% (140247)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 317
% Passive clauses: 3782
% Generated clauses: 14250
% Final active clauses: 287
% Final passive clauses: 3333
% Input formulas: 37
% Initial clauses: 559
% 
% Duplicate literals: 714
% Trivial inequalities: 171
% Fw subsumption resolutions: 1658
% Fw demodulations: 648
% Bw demodulations: 1
% 
% Simple tautologies: 256
% Equational tautologies: 109
% Forward subsumptions: 5651
% 
% Binary resolution: 137
% Factoring: 2
% Forward superposition: 5021
% Backward superposition: 4477
% Self superposition: 364
% Equality factoring: 242
% Equality resolution: 53
% 
% Split clauses: 433
% Split components: 877
% SAT solver clauses: 1293
% SAT solver unit clauses: 13
% SAT solver binary clauses: 327
% 
% Sat splits: 433
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 1292
% TWLsolver calls for satisfiability: 135
% 
% Memory used [KB]: 9594
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSoundInvariants
% (140283)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 166
% Passive clauses: 1244
% Generated clauses: 9217
% Final active clauses: 162
% Final passive clauses: 487
% Input formulas: 37
% Initial clauses: 559
% 
% Duplicate literals: 407
% Trivial inequalities: 80
% Fw subsumption resolutions: 956
% Fw demodulations: 847
% Bw demodulations: 588
% Condensations: 1053
% Global subsumptions: 79
% 
% Simple tautologies: 157
% Equational tautologies: 36
% Forward subsumptions: 2968
% 
% Binary resolution: 76
% Factoring: 1
% Forward superposition: 1784
% Backward superposition: 1342
% Self superposition: 129
% Equality factoring: 76
% Equality resolution: 15
% 
% Split clauses: 84
% Split components: 194
% SAT solver clauses: 2316
% SAT solver unit clauses: 760
% SAT solver binary clauses: 406
% SAT solver learnt clauses: 166
% SAT solver learnt literals: 152
% 
% Sat splits: 84
% Sat splitting refutations: 12
% 
% TWLsolver clauses: 1984
% TWLsolver calls for satisfiability: 13387
% 
% Memory used [KB]: 10234
% Time elapsed: 0.722 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSoundInvariants
% (140319)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1162
% Passive clauses: 8942
% Generated clauses: 116113
% Final active clauses: 954
% Final passive clauses: 2644
% Input formulas: 37
% Initial clauses: 559
% Discarded non-redundant clauses: 3161
% 
% Duplicate literals: 4993
% Trivial inequalities: 369
% Fw subsumption resolutions: 3722
% Fw demodulations: 5467
% Bw demodulations: 2261
% Condensations: 21094
% Global subsumptions: 39
% 
% Simple tautologies: 510
% Equational tautologies: 325
% Forward subsumptions: 70366
% Bw demodulations to eq. taut.: 32
% 
% Unit resulting resolution: 3338
% Factoring: 2
% Forward superposition: 24034
% Backward superposition: 47120
% Self superposition: 617
% Equality factoring: 369
% Equality resolution: 156
% 
% Split clauses: 235
% Split components: 503
% SAT solver clauses: 9462
% SAT solver unit clauses: 320
% SAT solver binary clauses: 5491
% 
% Sat splits: 235
% Sat splitting refutations: 9
% 
% Memory used [KB]: 99913
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.typeSoundInvariants
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSoundInvariants
% SZS output start Proof for thm.typeSoundInvariants
fof(f2915,plain,(
  $false),
  inference(subsumption_resolution,[],[f2914,f977])).
fof(f977,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f28])).
fof(f28,axiom,(
  p(s(bool,'T_0'))),
  file('thm.typeSoundInvariants.type_v_rules|split|17','thm.bool.TRUTH')).
fof(f2914,plain,(
  ~p(s(bool,'T_0'))),
  inference(subsumption_resolution,[],[f2913,f983])).
fof(f983,plain,(
  ~sP18(sK76,sK77,'const.list.NIL_0','const.finite_map.FEMPTY_0')),
  inference(resolution,[],[f435,f561])).
fof(f561,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))) | ~sP18(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))) | sP18(X0,X1,X2,X3)) & (~sP18(X0,X1,X2,X3) | p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))))),
  inference(nnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))) <=> sP18(X0,X1,X2,X3))),
  inference(definition_folding,[],[f74,f124,f123,f122,f121,f120,f119,f118,f117,f116,f115,f114,f113,f112,f111,f110,f109,f108,f107,f106])).
fof(f106,plain,(
  ! [X40,X36,X6,X37,X38,X7,X39] : (sP0(X40,X36,X6,X37,X38,X7,X39) <=> ? [X48,X49,X50,X51,X52] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSystem.type_funs_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51))))))))),s('type.typeSystem.type_environment',X51))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52)))) & s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X40))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))) & p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X50),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f107,plain,(
  ! [X36,X6,X37,X38,X7,X40,X39] : (sP1(X36,X6,X37,X38,X7,X40,X39) <=> ? [X53,X54,X55,X56,X57,X58] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.string.char'),X55),s('type.ast.exp',X56))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X57),s('type.ast.t',X58))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X57)))) & p(s(bool,'const.typeSystem.type_e_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X55),s('type.num.num','const.num.|48|_0'),s('type.ast.t',X57),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54))))))))),s('type.typeSystem.type_environment',X54))),s('type.ast.exp',X56),s('type.ast.t',X58))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f108,plain,(
  ! [X37,X5,X36,X38,X40,X39] : (sP2(X37,X5,X36,X38,X40,X39) <=> ? [X61,X62,X63,X64,X65,X66] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64))))),s('type.list.list'('type.semanticPrimitives.v'),X62))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X65),s('type.ast.tctor','const.typeSystem.tid_exn_to_tc_1'(s('type.semanticPrimitives.tid_or_exn',X64))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X65)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X65))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.list.list'('type.string.char')),X63))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X62))),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.type_subst_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X65))))))))))),s('type.list.list'('type.ast.t'),X66)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X66))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f109,plain,(
  ! [X38,X40,X39] : (sP3(X38,X40,X39) <=> ? [X46,X47] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X46))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X47))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X47)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X47))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X46)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f110,plain,(
  ! [X38,X40,X39] : (sP4(X38,X40,X39) <=> ? [X43,X44] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X43))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X44),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X44)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X44))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X43)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f111,plain,(
  ! [X4,X36,X37,X38,X40,X39] : (sP5(X4,X36,X37,X38,X40,X39) <=> ? [X41,X42] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X41))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X42),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X42)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X41))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f112,plain,(
  ! [X40,X39] : (sP6(X40,X39) <=> ? [X71] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X71))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f113,plain,(
  ! [X40,X39] : (sP7(X40,X39) <=> ? [X70] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X70))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f114,plain,(
  ! [X40,X39] : (sP8(X40,X39) <=> ? [X69] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X69))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f115,plain,(
  ! [X40,X39] : (sP9(X40,X39) <=> ? [X68] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f116,plain,(
  ! [X40,X39] : (sP10(X40,X39) <=> ? [X67] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X67))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f117,plain,(
  ! [X5,X36,X37,X38,X40,X39] : (sP11(X5,X36,X37,X38,X40,X39) <=> ? [X59,X60] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X59))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X60),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X59))),s('type.list.list'('type.ast.t'),X60))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f118,plain,(
  ! [X4,X36,X37,X38,X40,X39,X6,X7,X5] : (sP12(X4,X36,X37,X38,X40,X39,X6,X7,X5) <=> (sP6(X40,X39) | sP7(X40,X39) | sP8(X40,X39) | sP9(X40,X39) | sP10(X40,X39) | sP2(X37,X5,X36,X38,X40,X39) | sP11(X5,X36,X37,X38,X40,X39) | sP1(X36,X6,X37,X38,X7,X40,X39) | sP0(X40,X36,X6,X37,X38,X7,X39) | sP3(X38,X40,X39) | ? [X45] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X40) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X45)))) | sP4(X38,X40,X39) | sP5(X4,X36,X37,X38,X40,X39)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f119,plain,(
  ! [X5,X27,X28,X29,X4,X31,X30] : (sP13(X5,X27,X28,X29,X4,X31,X30) <=> ? [X32,X33,X34,X35] : (s('type.list.list'('type.semanticPrimitives.v'),X30) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.list.list'('type.ast.t'),X31) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X34),s('type.list.list'('type.ast.t'),X35))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.semanticPrimitives.v',X32))),s('type.ast.t',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.ast.t'),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP13])])).
fof(f120,plain,(
  ! [X6,X17,X18,X4,X20,X19] : (sP14(X6,X17,X18,X4,X20,X19) <=> ? [X21,X22,X23,X24,X25,X26] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X21),s('type.semanticPrimitives.v',X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))) & s('type.typeSystem.tenv_val',X20) = s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X21),s('type.num.num',X26),s('type.ast.t',X24),s('type.typeSystem.tenv_val',X25))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X26))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.semanticPrimitives.v',X22))),s('type.ast.t',X24)))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))),s('type.typeSystem.tenv_val',X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP14])])).
fof(f121,plain,(
  ! [X7,X8,X9,X6,X11,X10] : (sP15(X7,X8,X9,X6,X11,X10) <=> ? [X12,X13,X14,X15,X16] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FUPDATE_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP15])])).
fof(f122,plain,(
  ! [X5,X4] : (sP16(X5,X4) <=> ? [X27,X28,X29,X30,X31] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X30) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X31) & p(s(bool,'T_0'))) | sP13(X5,X27,X28,X29,X4,X31,X30)) & ~p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X30))),s('type.list.list'('type.ast.t'),X31))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP16])])).
fof(f123,plain,(
  ! [X6,X4] : (sP17(X6,X4) <=> ? [X17,X18,X19,X20] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) & s('type.typeSystem.tenv_val','const.typeSystem.Empty_0') = s('type.typeSystem.tenv_val',X20) & p(s(bool,'T_0'))) | sP14(X6,X17,X18,X4,X20,X19)) & ~p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19))),s('type.typeSystem.tenv_val',X20))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP17])])).
fof(f124,plain,(
  ! [X0,X1,X2,X3] : (sP18(X0,X1,X2,X3) <=> ! [X4,X5,X6,X7] : (? [X36,X37,X38,X39,X40] : (sP12(X4,X36,X37,X38,X40,X39,X6,X7,X5) & ~p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.semanticPrimitives.v',X39))),s('type.ast.t',X40))))) | sP16(X5,X4) | sP17(X6,X4) | ? [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) & p(s(bool,'T_0'))) | sP15(X7,X8,X9,X6,X11,X10)) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP18])])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))) <=> ! [X4,X5,X6,X7] : (? [X36,X37,X38,X39,X40] : ((? [X71] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X71))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X70] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X70))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X69] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X69))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X68] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X67] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X67))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X61,X62,X63,X64,X65,X66] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64))))),s('type.list.list'('type.semanticPrimitives.v'),X62))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X65),s('type.ast.tctor','const.typeSystem.tid_exn_to_tc_1'(s('type.semanticPrimitives.tid_or_exn',X64))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X65)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X65))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.list.list'('type.string.char')),X63))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X62))),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.type_subst_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X65))))))))))),s('type.list.list'('type.ast.t'),X66)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X66))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64)))))) | ? [X59,X60] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X59))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X60),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X59))),s('type.list.list'('type.ast.t'),X60))))) | ? [X53,X54,X55,X56,X57,X58] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.string.char'),X55),s('type.ast.exp',X56))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X57),s('type.ast.t',X58))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X57)))) & p(s(bool,'const.typeSystem.type_e_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X55),s('type.num.num','const.num.|48|_0'),s('type.ast.t',X57),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54))))))))),s('type.typeSystem.type_environment',X54))),s('type.ast.exp',X56),s('type.ast.t',X58))))) | ? [X48,X49,X50,X51,X52] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSystem.type_funs_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51))))))))),s('type.typeSystem.type_environment',X51))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52)))) & s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X40))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))) & p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X50),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))))))))) | ? [X46,X47] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X46))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X47))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X47)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X47))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X46)))) | ? [X45] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X40) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X43))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X44),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X44)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X44))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X43)))) | ? [X41,X42] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X41))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X42),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X42)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X41)))))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.semanticPrimitives.v',X39))),s('type.ast.t',X40))))) | ? [X27,X28,X29,X30,X31] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X30) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X31) & p(s(bool,'T_0'))) | ? [X32,X33,X34,X35] : (s('type.list.list'('type.semanticPrimitives.v'),X30) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.list.list'('type.ast.t'),X31) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X34),s('type.list.list'('type.ast.t'),X35))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.semanticPrimitives.v',X32))),s('type.ast.t',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.ast.t'),X35)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X30))),s('type.list.list'('type.ast.t'),X31))))) | ? [X17,X18,X19,X20] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) & s('type.typeSystem.tenv_val','const.typeSystem.Empty_0') = s('type.typeSystem.tenv_val',X20) & p(s(bool,'T_0'))) | ? [X21,X22,X23,X24,X25,X26] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X21),s('type.semanticPrimitives.v',X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))) & s('type.typeSystem.tenv_val',X20) = s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X21),s('type.num.num',X26),s('type.ast.t',X24),s('type.typeSystem.tenv_val',X25))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X26))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.semanticPrimitives.v',X22))),s('type.ast.t',X24)))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))),s('type.typeSystem.tenv_val',X25)))))) & ~p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19))),s('type.typeSystem.tenv_val',X20))))) | ? [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) & p(s(bool,'T_0'))) | ? [X12,X13,X14,X15,X16] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FUPDATE_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16)))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))) <=> ! [X4,X5,X6,X7] : ((? [X36,X37,X38,X39,X40] : ((? [X71] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X71))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X70] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X70))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X69] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X69))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X68] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X67] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X67))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X61,X62,X63,X64,X65,X66] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64))))),s('type.list.list'('type.semanticPrimitives.v'),X62))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X65),s('type.ast.tctor','const.typeSystem.tid_exn_to_tc_1'(s('type.semanticPrimitives.tid_or_exn',X64))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X65)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X65))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.list.list'('type.string.char')),X63))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X62))),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.type_subst_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X65))))))))))),s('type.list.list'('type.ast.t'),X66)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X66))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64)))))) | ? [X59,X60] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X59))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X60),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X59))),s('type.list.list'('type.ast.t'),X60))))) | ? [X53,X54,X55,X56,X57,X58] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.string.char'),X55),s('type.ast.exp',X56))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X57),s('type.ast.t',X58))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X57)))) & p(s(bool,'const.typeSystem.type_e_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X55),s('type.num.num','const.num.|48|_0'),s('type.ast.t',X57),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54))))))))),s('type.typeSystem.type_environment',X54))),s('type.ast.exp',X56),s('type.ast.t',X58))))) | ? [X48,X49,X50,X51,X52] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSystem.type_funs_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51))))))))),s('type.typeSystem.type_environment',X51))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52)))) & s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X40))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))) & p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X50),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))))))))) | ? [X46,X47] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X46))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X47))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X47)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X47))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X46)))) | ? [X45] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X40) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X43))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X44),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X44)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X44))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X43)))) | ? [X41,X42] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X41))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X42),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X42)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X41)))))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.semanticPrimitives.v',X39))),s('type.ast.t',X40))))) | ? [X27,X28,X29,X30,X31] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X30) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X31) & p(s(bool,'T_0'))) | ? [X32,X33,X34,X35] : (s('type.list.list'('type.semanticPrimitives.v'),X30) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.list.list'('type.ast.t'),X31) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X34),s('type.list.list'('type.ast.t'),X35))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.semanticPrimitives.v',X32))),s('type.ast.t',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.ast.t'),X35)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X30))),s('type.list.list'('type.ast.t'),X31))))) | ? [X17,X18,X19,X20] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) & s('type.typeSystem.tenv_val','const.typeSystem.Empty_0') = s('type.typeSystem.tenv_val',X20) & p(s(bool,'T_0'))) | ? [X21,X22,X23,X24,X25,X26] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X21),s('type.semanticPrimitives.v',X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))) & s('type.typeSystem.tenv_val',X20) = s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X21),s('type.num.num',X26),s('type.ast.t',X24),s('type.typeSystem.tenv_val',X25))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X26))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.semanticPrimitives.v',X22))),s('type.ast.t',X24)))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))),s('type.typeSystem.tenv_val',X25)))))) & ~p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19))),s('type.typeSystem.tenv_val',X20))))) | ? [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) & p(s(bool,'T_0'))) | ? [X12,X13,X14,X15,X16] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FUPDATE_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16)))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))) <=> ! [X4,X5,X6,X7] : ((! [X36,X37,X38,X39,X40] : ((? [X71] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X71))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X70] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X70))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X69] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X69))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X68] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X68))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X67] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X67))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X40) & p(s(bool,'T_0'))) | ? [X61,X62,X63,X64,X65,X66] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64))))),s('type.list.list'('type.semanticPrimitives.v'),X62))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X65),s('type.ast.tctor','const.typeSystem.tid_exn_to_tc_1'(s('type.semanticPrimitives.tid_or_exn',X64))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X65)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X65))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.list.list'('type.string.char')),X63))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X62))),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.type_subst_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X65))))))))))),s('type.list.list'('type.ast.t'),X66)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X63),s('type.list.list'('type.ast.t'),X66))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X61),s('type.semanticPrimitives.tid_or_exn',X64)))))) | ? [X59,X60] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X59))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X60),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.semanticPrimitives.v'),X59))),s('type.list.list'('type.ast.t'),X60))))) | ? [X53,X54,X55,X56,X57,X58] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.string.char'),X55),s('type.ast.exp',X56))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X57),s('type.ast.t',X58))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54)))))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X36),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X57)))) & p(s(bool,'const.typeSystem.type_e_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X55),s('type.num.num','const.num.|48|_0'),s('type.ast.t',X57),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X54))))))))),s('type.typeSystem.type_environment',X54))),s('type.ast.exp',X56),s('type.ast.t',X58))))) | ? [X48,X49,X50,X51,X52] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51)))))) & p(s(bool,'const.typeSystem.type_funs_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X36),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X51))))))))),s('type.typeSystem.type_environment',X51))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52)))) & s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X40))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X52),s('type.list.list'('type.string.char'),X50))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))) & p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X50),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))))))))) | ? [X46,X47] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X46))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X47))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X47)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X47))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X46)))) | ? [X45] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X40) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X43))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X44),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X44)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X44))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38),s('type.num.num',X43)))) | ? [X41,X42] : (s('type.semanticPrimitives.v',X39) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X41))) & s('type.ast.t',X40) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X42),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X42)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X41)))))) => p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.semanticPrimitives.v',X39))),s('type.ast.t',X40))))) & ! [X27,X28,X29,X30,X31] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X30) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X31) & p(s(bool,'T_0'))) | ? [X32,X33,X34,X35] : (s('type.list.list'('type.semanticPrimitives.v'),X30) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.list.list'('type.ast.t'),X31) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X34),s('type.list.list'('type.ast.t'),X35))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.semanticPrimitives.v',X32))),s('type.ast.t',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.ast.t'),X35)))))) => p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X5),s('type.num.num',X27))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X28))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29))),s('type.list.list'('type.semanticPrimitives.v'),X30))),s('type.list.list'('type.ast.t'),X31))))) & ! [X17,X18,X19,X20] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) & s('type.typeSystem.tenv_val','const.typeSystem.Empty_0') = s('type.typeSystem.tenv_val',X20) & p(s(bool,'T_0'))) | ? [X21,X22,X23,X24,X25,X26] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X21),s('type.semanticPrimitives.v',X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))) & s('type.typeSystem.tenv_val',X20) = s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X21),s('type.num.num',X26),s('type.ast.t',X24),s('type.typeSystem.tenv_val',X25))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X26))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.semanticPrimitives.v',X22))),s('type.ast.t',X24)))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))),s('type.typeSystem.tenv_val',X25)))))) => p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X17))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X19))),s('type.typeSystem.tenv_val',X20))))) & ! [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) & p(s(bool,'T_0'))) | ? [X12,X13,X14,X15,X16] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FUPDATE_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X15),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16)))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11)))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X5,X14,X15,X16] : (p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X15),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16)))) <=> ! [X17,X18,X19,X20] : ((! [X21,X22,X23,X24,X25] : ((? [X26] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X26))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X25) & p(s(bool,'T_0'))) | ? [X27] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X27))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X25) & p(s(bool,'T_0'))) | ? [X28] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X28))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X25) & p(s(bool,'T_0'))) | ? [X29] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X29))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X25) & p(s(bool,'T_0'))) | ? [X29] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X25) & p(s(bool,'T_0'))) | ? [X30,X31,X32,X33,X34,X35] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X30),s('type.semanticPrimitives.tid_or_exn',X33))))),s('type.list.list'('type.semanticPrimitives.v'),X31))) & s('type.ast.t',X25) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X34),s('type.ast.tctor','const.typeSystem.tid_exn_to_tc_1'(s('type.semanticPrimitives.tid_or_exn',X33))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X21),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X34)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X34))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.list.list'('type.string.char')),X32))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X18),s('type.num.num',X21))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.list.list'('type.semanticPrimitives.v'),X31))),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.type_subst_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.ast.t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X32),s('type.list.list'('type.ast.t'),X34))))))))))),s('type.list.list'('type.ast.t'),X35)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t')),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.string.char')),X32),s('type.list.list'('type.ast.t'),X35))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X30),s('type.semanticPrimitives.tid_or_exn',X33)))))) | ? [X31,X35] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X31))) & s('type.ast.t',X25) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X18),s('type.num.num',X21))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.list.list'('type.semanticPrimitives.v'),X31))),s('type.list.list'('type.ast.t'),X35))))) | ? [X36,X37,X26,X38,X39,X40] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36),s('type.list.list'('type.string.char'),X26),s('type.ast.exp',X38))) & s('type.ast.t',X25) = s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X39),s('type.ast.t',X40))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X21),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X39)))) & p(s(bool,'const.typeSystem.type_e_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X26),s('type.num.num','const.num.|48|_0'),s('type.ast.t',X39),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X21),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X37))))))))),s('type.typeSystem.type_environment',X37))),s('type.ast.exp',X38),s('type.ast.t',X40))))) | ? [X36,X41,X26,X37,X42] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41),s('type.list.list'('type.string.char'),X26))) & p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'const.typeSystem.type_environment_c_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,'const.typeSoundInvariants.tenv_mod_ok_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.typeSystem.type_environment_m_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X36))))),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X37)))))) & p(s(bool,'const.typeSystem.type_funs_3'(s('type.typeSystem.type_environment','const.typeSystem.type_environment_v_fupd_2'(s(fun('type.typeSystem.tenv_val','type.typeSystem.tenv_val'),'const.combin.K_1'(s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X42),s('type.typeSystem.tenv_val','const.typeSystem.bind_tvar_2'(s('type.num.num',X21),s('type.typeSystem.tenv_val','const.typeSystem.type_environment_v_1'(s('type.typeSystem.type_environment',X37))))))))),s('type.typeSystem.type_environment',X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X42)))) & s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X25))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X42),s('type.list.list'('type.string.char'),X26))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41)))))) & p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X26),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.string.char'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.ast.exp','type.list.list'('type.string.char')))),'_dst_x00_0'))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41))))))))) | ? [X26,X43] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X26))) & s('type.ast.t',X25) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X43))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X43)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X43))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23),s('type.num.num',X26)))) | ? [X26] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X26))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X25) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23),s('type.num.num',X26)))) | ? [X26,X43] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X26))) & s('type.ast.t',X25) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X43),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X43)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X43))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23),s('type.num.num',X26)))) | ? [X31,X43] : (s('type.semanticPrimitives.v',X24) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X31))) & s('type.ast.t',X25) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X43),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X43)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X17),s('type.num.num',X21))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.ast.t',X43))),s('type.list.list'('type.semanticPrimitives.v'),X31)))))) => p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X17),s('type.num.num',X21))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X23))),s('type.semanticPrimitives.v',X24))),s('type.ast.t',X25))))) & ! [X44,X45,X46,X47,X48] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X47) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X48) & p(s(bool,'T_0'))) | ? [X49,X31,X43,X35] : (s('type.list.list'('type.semanticPrimitives.v'),X47) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X49),s('type.list.list'('type.semanticPrimitives.v'),X31))) & s('type.list.list'('type.ast.t'),X48) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X43),s('type.list.list'('type.ast.t'),X35))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X17),s('type.num.num',X44))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X45))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X46))),s('type.semanticPrimitives.v',X49))),s('type.ast.t',X43)))) & p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X18),s('type.num.num',X44))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X45))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X46))),s('type.list.list'('type.semanticPrimitives.v'),X31))),s('type.list.list'('type.ast.t'),X35)))))) => p(s(bool,happ(s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.ast.t'),bool))))),X18),s('type.num.num',X44))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X45))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X46))),s('type.list.list'('type.semanticPrimitives.v'),X47))),s('type.list.list'('type.ast.t'),X48))))) & ! [X50,X51,X52,X53] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X52) & s('type.typeSystem.tenv_val','const.typeSystem.Empty_0') = s('type.typeSystem.tenv_val',X53) & p(s(bool,'T_0'))) | ? [X26,X49,X36,X43,X37,X54] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X52) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X26),s('type.semanticPrimitives.v',X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X36))) & s('type.typeSystem.tenv_val',X53) = s('type.typeSystem.tenv_val','const.typeSystem.Bind_name_4'(s('type.list.list'('type.string.char'),X26),s('type.num.num',X54),s('type.ast.t',X43),s('type.typeSystem.tenv_val',X37))) & p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X17),s('type.num.num',X54))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X50))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X51))),s('type.semanticPrimitives.v',X49))),s('type.ast.t',X43)))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X50))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X51))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X36))),s('type.typeSystem.tenv_val',X37)))))) => p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X50))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X51))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X52))),s('type.typeSystem.tenv_val',X53))))) & ! [X55,X56,X57,X58] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X57) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X58) & p(s(bool,'T_0'))) | ? [X59,X36,X60,X37,X61] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X57) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X59),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X60))) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X58) = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FUPDATE_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X61),s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.list.list'('type.string.char'),X59),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X37))))) & p(s(bool,happ(s(fun('type.typeSystem.tenv_val',bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.typeSystem.tenv_val',bool)))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X56))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X55))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X36))),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X37),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) & p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X55))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X56))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X60))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X61)))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X55))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X56))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X57))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X58)))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X5))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X15))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X16))))))),
  file('thm.typeSoundInvariants.type_v_rules|split|17','thm.typeSoundInvariants.type_v|48|_def')).
fof(f435,plain,(
  ~p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK77),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0'))))),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  p(s(bool,'T_0')) & ~p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK77),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK76,sK77])],[f68])).
fof(f68,plain,(
  ? [X0,X1] : (p(s(bool,'T_0')) & ~p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0')))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : (p(s(bool,'T_0')) => p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'T_0')) => p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'T_0')) => p(s(bool,'const.typeSoundInvariants.consistent_mod_env_4'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0')))))),
  file('thm.typeSoundInvariants.type_v_rules|split|17','thm.typeSoundInvariants.type_v_rules|split|17')).
fof(f2913,plain,(
  sP18(sK76,sK77,'const.list.NIL_0','const.finite_map.FEMPTY_0') | ~p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f2889])).
fof(f2889,plain,(
  sP18(sK76,sK77,'const.list.NIL_0','const.finite_map.FEMPTY_0') | ~p(s(bool,'T_0')) | s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0')),
  inference(resolution,[],[f1025,f449])).
fof(f449,plain,(
  ( ! [X2,X0,X10,X8,X3,X1,X11,X9] : (sP18(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),sK90(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11)))) | ~p(s(bool,'T_0')) | s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10)) )),
  inference(cnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | ! [X17,X18,X19,X20] : ((sP12(X17,sK78(X20,X19,X18,X17,X3,X2,X1,X0),sK79(X20,X19,X18,X17,X3,X2,X1,X0),sK80(X20,X19,X18,X17,X3,X2,X1,X0),sK82(X20,X19,X18,X17,X3,X2,X1,X0),sK81(X20,X19,X18,X17,X3,X2,X1,X0),X19,X20,X18) & ~p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X17),s('type.num.num',sK78(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK79(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK80(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.semanticPrimitives.v',sK81(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.ast.t',sK82(X20,X19,X18,X17,X3,X2,X1,X0)))))) | sP16(X18,X17) | sP17(X19,X17) | (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK85(X20,X19,X18,X17,X3,X2,X1,X0)) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),sK86(X20,X19,X18,X17,X3,X2,X1,X0)) & p(s(bool,'T_0'))) | sP15(X20,sK83(X20,X19,X18,X17,X3,X2,X1,X0),sK84(X20,X19,X18,X17,X3,X2,X1,X0),X19,sK86(X20,X19,X18,X17,X3,X2,X1,X0),sK85(X20,X19,X18,X17,X3,X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK83(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK84(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK85(X20,X19,X18,X17,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),sK86(X20,X19,X18,X17,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))))) & ((! [X12,X13,X14,X15,X16] : (~sP12(sK87(X3,X2,X1,X0),X12,X13,X14,X16,X15,sK89(X3,X2,X1,X0),sK90(X3,X2,X1,X0),sK88(X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),sK87(X3,X2,X1,X0)),s('type.num.num',X12))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X13))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X14))),s('type.semanticPrimitives.v',X15))),s('type.ast.t',X16))))) & ~sP16(sK88(X3,X2,X1,X0),sK87(X3,X2,X1,X0)) & ~sP17(sK89(X3,X2,X1,X0),sK87(X3,X2,X1,X0)) & ! [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) | s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) | ~p(s(bool,'T_0'))) & ~sP15(sK90(X3,X2,X1,X0),X8,X9,sK89(X3,X2,X1,X0),X11,X10)) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),sK90(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),sK90(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))) | sP18(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK78,sK79,sK80,sK81,sK82,sK83,sK84,sK85,sK86,sK87,sK88,sK89,sK90])],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | ! [X17,X18,X19,X20] : (? [X25,X26,X27,X28,X29] : (sP12(X17,X25,X26,X27,X29,X28,X19,X20,X18) & ~p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X17),s('type.num.num',X25))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X26))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27))),s('type.semanticPrimitives.v',X28))),s('type.ast.t',X29))))) | sP16(X18,X17) | sP17(X19,X17) | ? [X21,X22,X23,X24] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X23) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X24) & p(s(bool,'T_0'))) | sP15(X20,X21,X22,X19,X24,X23)) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X21))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X23))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X24))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X20),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))))) & (? [X4,X5,X6,X7] : (! [X12,X13,X14,X15,X16] : (~sP12(X4,X12,X13,X14,X16,X15,X6,X7,X5) | p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X12))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X13))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X14))),s('type.semanticPrimitives.v',X15))),s('type.ast.t',X16))))) & ~sP16(X5,X4) & ~sP17(X6,X4) & ! [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) | s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) | ~p(s(bool,'T_0'))) & ~sP15(X7,X8,X9,X6,X11,X10)) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))) | sP18(X0,X1,X2,X3)))),
  inference(rectify,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | ! [X4,X5,X6,X7] : (? [X36,X37,X38,X39,X40] : (sP12(X4,X36,X37,X38,X40,X39,X6,X7,X5) & ~p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.semanticPrimitives.v',X39))),s('type.ast.t',X40))))) | sP16(X5,X4) | sP17(X6,X4) | ? [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) & s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) & p(s(bool,'T_0'))) | sP15(X7,X8,X9,X6,X11,X10)) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3)))))) & (? [X4,X5,X6,X7] : (! [X36,X37,X38,X39,X40] : (~sP12(X4,X36,X37,X38,X40,X39,X6,X7,X5) | p(s(bool,happ(s(fun('type.ast.t',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool)))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.semanticPrimitives.v',fun('type.ast.t',bool))))),X4),s('type.num.num',X36))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X37))),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X38))),s('type.semanticPrimitives.v',X39))),s('type.ast.t',X40))))) & ~sP16(X5,X4) & ~sP17(X6,X4) & ! [X8,X9,X10,X11] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10) | s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11) | ~p(s(bool,'T_0'))) & ~sP15(X7,X8,X9,X6,X11,X10)) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X10))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X11))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),X7),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))) | sP18(X0,X1,X2,X3)))),
  inference(nnf_transformation,[],[f124])).
fof(f1025,plain,(
  ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),sK90('const.finite_map.FEMPTY_0','const.list.NIL_0',sK77,sK76)),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK76))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK77))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.list.NIL_0'))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.finite_map.FEMPTY_0'))))),
  inference(resolution,[],[f983,f451])).
fof(f451,plain,(
  ( ! [X2,X0,X3,X1] : (sP18(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),bool)))),sK90(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X2))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X3))))) )),
  inference(cnf_transformation,[],[f189])).
% SZS output end Proof for thm.typeSoundInvariants
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 542
% Passive clauses: 837
% Generated clauses: 1929
% Final active clauses: 535
% Final passive clauses: 804
% Input formulas: 37
% Initial clauses: 549
% 
% Selected by SInE selection: 29
% SInE iterations: 1
% 
% Duplicate literals: 38
% Trivial inequalities: 7
% Fw subsumption resolutions: 455
% Fw demodulations: 25
% Bw demodulations: 5
% 
% Simple tautologies: 55
% Equational tautologies: 47
% Forward subsumptions: 291
% 
% Binary resolution: 1184
% Forward superposition: 129
% Backward superposition: 34
% Equality resolution: 3
% 
% Split clauses: 42
% Split components: 84
% SAT solver clauses: 45
% SAT solver unit clauses: 2
% SAT solver binary clauses: 41
% 
% Sat splits: 42
% Sat splitting refutations: 2
% 
% Memory used [KB]: 10234
% Time elapsed: 0.195 s
% ------------------------------
% ------------------------------
% Success in time 11.968 s
