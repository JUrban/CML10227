Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labSem
% SZS output start Proof for thm.labSem
fof(f1059,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1058,f46,f70,f68,f123,f45,f72,f963,f71,f964])).
fof(f964,plain,(
  $false | ($spl3 | $spl6)),
  inference(subsumption_resolution,[],[f70,f72])).
fof(f71,plain,(
  ( ! [X31] : (p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),X31))))) ) | $spl4),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  ( ! [X31] : (p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),X31))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f963,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),X0))))) ) | $spl6),
  inference(superposition,[],[f72,f66])).
fof(f66,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.labSem.state'(X1,X0),X3) = s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),sK19(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),sK20(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),sK21(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK22(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK23(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),sK24(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),sK25(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),sK26(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK27(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK28(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK29(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK30(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK31(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : s('type.labSem.state'(X1,X0),X3) = s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),sK19(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),sK20(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),sK21(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK22(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK23(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),sK24(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),sK25(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),sK26(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK27(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK28(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK29(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK30(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK31(X3,X2,X1,X0)))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.labSem.state'(X1,X0),X3) = s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X4))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X9))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : ! [X3] : ? [X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.labSem.state'(X1,X0),X3) = s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X4))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X9))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7,X8] : ! [X10] : ? [X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.labSem.state'(X7,X6),X10) = s('type.labSem.state'(X7,X6),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X7)),fun('type.num.num','type.wordSem.word_loc'(X7))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X7)),X11))),s('type.labSem.state'(X7,X6),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),X12))),s('type.labSem.state'(X7,X6),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X7),bool),fun('type.fcp.cart'(bool,X7),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X7),bool),X13))),s('type.labSem.state'(X7,X6),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.labSem.state'(X7,X6),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X15))),s('type.labSem.state'(X7,X6),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X8),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X16))),s('type.labSem.state'(X7,X8),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),X17))),s('type.labSem.state'(X7,X8),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X7)),X18))),s('type.labSem.state'(X7,X8),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.labSem.state'(X7,X8),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X20))),s('type.labSem.state'(X7,X8),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(X7,X8),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X22))),s('type.labSem.state'(X7,X8),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X23))),s('type.labSem.state'(X7,X8),'const.bool.ARB_0')))))))))))))))))))))))))))),
  file('thm.labSem.labSem_3|49|8_prove_ltb','thm.labSem.labSem_3|49|7_prove_ltb')).
fof(f72,plain,(
  ( ! [X30,X28,X26,X24,X23,X21,X19,X29,X27,X25,X22,X20,X18] : (p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),X18))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),X19))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),X20))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X22))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X23))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),X24))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),X25))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X26))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X27))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X28))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X29))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X30))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0'))))))))))))))))))))))))))))))) ) | $spl6),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X30,X28,X26,X24,X23,X21,X19,X29,X27,X25,X22,X20,X18] : (p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),X18))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),X19))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),X20))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X22))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X23))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),X24))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),X25))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X26))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X27))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X28))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X29))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X30))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0'))))))))))))))))))))))))))))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f45,plain,(
  ( ! [X30,X28,X26,X24,X23,X21,X19,X31,X29,X27,X25,X22,X20,X18] : (p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),X18))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),X19))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),X20))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X22))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X23))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),X24))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),X25))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X26))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X27))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X28))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X29))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X30))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0')))))))))))))))))))))))))))))) | p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),X31))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  (! [X31] : p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),X31)))) | ! [X18,X19,X20,X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),X18))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),X19))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),X20))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X22))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X23))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),X24))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),X25))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X26))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X27))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X28))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X29))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X30))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0'))))))))))))))))))))))))))))))) & (~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),sK4)))) | ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),sK5))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),sK7))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK9))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK10))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),sK11))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),sK12))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK13))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK14))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK15))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK17))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0')))))))))))))))))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17])],[f35])).
fof(f35,plain,(
  ? [X0,X1,X2,X3] : ((! [X31] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X31)))) | ! [X18,X19,X20,X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X18))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X19))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X20))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X22))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X23))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X24))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X25))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X26))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X27))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X28))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X29))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X30))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0'))))))))))))))))))))))))))))))) & (? [X17] : ~p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X17)))) | ? [X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16] : ~p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X4))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X9))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0'))))))))))))))))))))))))))))))))),
  inference(rectify,[],[f34])).
fof(f34,plain,(
  ? [X0,X1,X2,X3] : ((! [X4] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X4)))) | ! [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X9))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X17))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0'))))))))))))))))))))))))))))))) & (? [X4] : ~p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X4)))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : ~p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X9))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X17))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0'))))))))))))))))))))))))))))))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ? [X0,X1,X2,X3] : (! [X4] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X4)))) <~> ! [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X9))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X17))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1,X2,X3] : (! [X4] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X4)))) <=> ! [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X9))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X17))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : ! [X3] : (! [X4] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),X4)))) <=> ! [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : p(s(bool,happ(s(fun('type.labSem.state'(X1,X0),bool),X3),s('type.labSem.state'(X1,X0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X1)),fun('type.num.num','type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X1)),X5))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6))),s('type.labSem.state'(X1,X0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X1),bool),fun('type.fcp.cart'(bool,X1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X1),bool),X7))),s('type.labSem.state'(X1,X0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.labSem.state'(X1,X0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X9))),s('type.labSem.state'(X1,X0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X2),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X10))),s('type.labSem.state'(X1,X2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),X11))),s('type.labSem.state'(X1,X2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X1)),X12))),s('type.labSem.state'(X1,X2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.labSem.state'(X1,X2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X14))),s('type.labSem.state'(X1,X2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.labSem.state'(X1,X2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X16))),s('type.labSem.state'(X1,X2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X17))),s('type.labSem.state'(X1,X2),'const.bool.ARB_0')))))))))))))))))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9] : (! [X10] : p(s(bool,happ(s(fun('type.labSem.state'(X7,X6),bool),X9),s('type.labSem.state'(X7,X6),X10)))) <=> ! [X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : p(s(bool,happ(s(fun('type.labSem.state'(X7,X6),bool),X9),s('type.labSem.state'(X7,X6),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X7)),fun('type.num.num','type.wordSem.word_loc'(X7))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X7)),X11))),s('type.labSem.state'(X7,X6),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),X12))),s('type.labSem.state'(X7,X6),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X7),bool),fun('type.fcp.cart'(bool,X7),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X7),bool),X13))),s('type.labSem.state'(X7,X6),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.labSem.state'(X7,X6),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X15))),s('type.labSem.state'(X7,X6),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X8),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X16))),s('type.labSem.state'(X7,X8),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),X17))),s('type.labSem.state'(X7,X8),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X7)),X18))),s('type.labSem.state'(X7,X8),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.labSem.state'(X7,X8),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X20))),s('type.labSem.state'(X7,X8),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(X7,X8),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X22))),s('type.labSem.state'(X7,X8),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X23))),s('type.labSem.state'(X7,X8),'const.bool.ARB_0')))))))))))))))))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9] : (! [X10] : p(s(bool,happ(s(fun('type.labSem.state'(X7,X6),bool),X9),s('type.labSem.state'(X7,X6),X10)))) <=> ! [X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : p(s(bool,happ(s(fun('type.labSem.state'(X7,X6),bool),X9),s('type.labSem.state'(X7,X6),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(X7)),fun('type.num.num','type.wordSem.word_loc'(X7))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(X7)),X11))),s('type.labSem.state'(X7,X6),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),X12))),s('type.labSem.state'(X7,X6),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X7),bool),fun('type.fcp.cart'(bool,X7),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X7),bool),X13))),s('type.labSem.state'(X7,X6),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.labSem.state'(X7,X6),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X15))),s('type.labSem.state'(X7,X6),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X8),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X16))),s('type.labSem.state'(X7,X8),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),X17))),s('type.labSem.state'(X7,X8),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(X7)),X18))),s('type.labSem.state'(X7,X8),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X19))),s('type.labSem.state'(X7,X8),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,X20))),s('type.labSem.state'(X7,X8),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X21))),s('type.labSem.state'(X7,X8),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X22))),s('type.labSem.state'(X7,X8),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X23))),s('type.labSem.state'(X7,X8),'const.bool.ARB_0')))))))))))))))))))))))))))))))),
  file('thm.labSem.labSem_3|49|8_prove_ltb','thm.labSem.labSem_3|49|8_prove_ltb')).
fof(f123,plain,(
  $false | ($spl1 | $spl4)),
  inference(resolution,[],[f71,f68])).
fof(f68,plain,(
  ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),sK4)))) | $spl1),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),sK4)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f70,plain,(
  ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),sK5))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),sK7))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK9))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK10))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),sK11))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),sK12))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK13))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK14))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK15))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK17))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0')))))))))))))))))))))))))))))) | $spl3),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),sK5))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),sK7))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK9))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK10))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),sK11))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),sK12))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK13))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK14))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK15))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK17))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0')))))))))))))))))))))))))))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f46,plain,(
  ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),'const.labSem.state_regs_fupd_2'(s(fun(fun('type.num.num','type.wordSem.word_loc'(sK1)),fun('type.num.num','type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.num.num','type.wordSem.word_loc'(sK1)),sK5))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1))),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,sK1),bool),fun('type.fcp.cart'(bool,sK1),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,sK1),bool),sK7))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_pc_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_be_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK9))),s('type.labSem.state'(sK1,sK0),'const.labSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK2),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK10))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_io_regs_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),sK11))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_code_fupd_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.K_1'(s('type.list.list'('type.labLang.sec'(sK1)),sK12))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK13))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_failed_fupd_2'(s(fun(bool,bool),'const.combin.K_1'(s(bool,sK14))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_ptr_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK15))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_len_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK16))),s('type.labSem.state'(sK1,sK2),'const.labSem.state_link_reg_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK17))),s('type.labSem.state'(sK1,sK2),'const.bool.ARB_0')))))))))))))))))))))))))))))) | ~p(s(bool,happ(s(fun('type.labSem.state'(sK1,sK0),bool),sK3),s('type.labSem.state'(sK1,sK0),sK4))))),
  inference(cnf_transformation,[],[f36])).
fof(f1058,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f70,f71])).
% SZS output end Proof for thm.labSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 215
% Generated clauses: 967
% Final active clauses: 24
% Final passive clauses: 145
% Input formulas: 13
% Initial clauses: 22
% 
% Duplicate literals: 98
% Trivial inequalities: 26
% Fw subsumption resolutions: 129
% Fw demodulations: 6
% Bw demodulations: 2
% 
% Simple tautologies: 62
% Equational tautologies: 28
% Forward subsumptions: 395
% 
% Binary resolution: 58
% Factoring: 1
% Forward superposition: 199
% Backward superposition: 317
% Self superposition: 42
% Equality factoring: 50
% Equality resolution: 5
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 30
% SAT solver unit clauses: 6
% SAT solver binary clauses: 17
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 14
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 28
% TWLsolver calls for satisfiability: 15
% 
% Memory used [KB]: 2046
% Time elapsed: 0.069 s
% ------------------------------
% ------------------------------
% Success in time 0.08 s
