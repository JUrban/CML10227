Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f4590,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4589,f224,f404,f402,f400,f4013,f4551])).
fof(f4551,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f402,f226])).
fof(f226,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK12),X6)))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK14),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Pointer_2'(s('type.num.num',sK15),s('type.wordSem.word_loc'(sK12),sK16))))) | s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK17),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK12),sK18))))))) | s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK19),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Loc_2'(s('type.num.num',sK20),s('type.num.num',sK21)))))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9))))))) & ! [X5,X6] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK12),X6))))))) & ! [X2,X3,X4] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(sK12),X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X15,X16,X17] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X15),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X16),s('type.wordSem.word_loc'(X0),X17))))) | ? [X13,X14] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X13),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X14))))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X10),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X11),s('type.num.num',X12)))))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9))))))) & ! [X5,X6] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6))))))) & ! [X2,X3,X4] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(X0),X4))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X7,X8,X9] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X8),s('type.wordSem.word_loc'(X0),X9))))) | ? [X5,X6] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6))))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) & ! [X15,X16,X17] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X15),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X16),s('type.num.num',X17))))))) & ! [X13,X14] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X13),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X14))))))) & ! [X10,X11,X12] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X10),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X11),s('type.wordSem.word_loc'(X0),X12))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X7,X8,X9] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X8),s('type.wordSem.word_loc'(X0),X9))))) | ? [X5,X6] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6))))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) & (! [X15,X16,X17] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X15),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X16),s('type.num.num',X17))))))) & ! [X13,X14] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X13),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X14))))))) & ! [X10,X11,X12] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X10),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X11),s('type.wordSem.word_loc'(X0),X12)))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X7,X8,X9] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X8),s('type.wordSem.word_loc'(X0),X9))))) | ? [X5,X6] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6))))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) => (? [X15,X16,X17] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X15),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X16),s('type.num.num',X17))))))) | ? [X13,X14] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X13),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X14))))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X10),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X11),s('type.wordSem.word_loc'(X0),X12)))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X7,X8,X9] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X8),s('type.wordSem.word_loc'(X0),X9))))) | ? [X5,X6] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X5),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6))))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) => (? [X15,X16,X17] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X15),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X16),s('type.num.num',X17))))))) | ? [X13,X14] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X13),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X14))))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),X1) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X0))),'const.pair.,_2'(s('type.bvp_to_word.config',X10),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X11),s('type.wordSem.word_loc'(X0),X12)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9,X10] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Pointer_2'(s('type.num.num',X9),s('type.wordSem.word_loc'(X6),X10))))) | ? [X8,X11] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X11))))))) | ? [X8,X12,X13] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) => (? [X8,X12,X13] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X12),s('type.num.num',X13))))))) | ? [X8,X11] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X11))))))) | ? [X8,X9,X10] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Pointer_2'(s('type.num.num',X9),s('type.wordSem.word_loc'(X6),X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9,X10] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Pointer_2'(s('type.num.num',X9),s('type.wordSem.word_loc'(X6),X10))))) | ? [X8,X11] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X11))))))) | ? [X8,X12,X13] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) => (? [X8,X12,X13] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X12),s('type.num.num',X13))))))) | ? [X8,X11] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X11))))))) | ? [X8,X9,X10] : s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),X7) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(X6))),'const.pair.,_2'(s('type.bvp_to_word.config',X8),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Pointer_2'(s('type.num.num',X9),s('type.wordSem.word_loc'(X6),X10)))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|65_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_|49|65_prove_ltb')).
fof(f4013,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f400,f227])).
fof(f227,plain,(
  ( ! [X4,X2,X3] : (s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',X2),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(sK12),X4)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f400,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK14),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Pointer_2'(s('type.num.num',sK15),s('type.wordSem.word_loc'(sK12),sK16))))) | $spl0),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK14),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Pointer_2'(s('type.num.num',sK15),s('type.wordSem.word_loc'(sK12),sK16))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f402,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK17),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK12),sK18))))))) | $spl2),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK17),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK12),sK18))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f404,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK19),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Loc_2'(s('type.num.num',sK20),s('type.num.num',sK21))))))) | $spl4),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK19),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Loc_2'(s('type.num.num',sK20),s('type.num.num',sK21))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f224,plain,(
  s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK19),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Loc_2'(s('type.num.num',sK20),s('type.num.num',sK21))))))) | s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK17),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK12),sK18))))))) | s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) = s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',sK14),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Pointer_2'(s('type.num.num',sK15),s('type.wordSem.word_loc'(sK12),sK16)))))),
  inference(cnf_transformation,[],[f139])).
fof(f4589,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f404,f225])).
fof(f225,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),sK13) != s('type.pair.prod'('type.bvp_to_word.config','type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12))),'const.pair.,_2'(s('type.bvp_to_word.config',X7),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK12)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK12),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 361
% Passive clauses: 1452
% Generated clauses: 4359
% Final active clauses: 361
% Final passive clauses: 922
% Input formulas: 37
% Initial clauses: 171
% 
% Duplicate literals: 153
% Trivial inequalities: 19
% Fw subsumption resolutions: 293
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2266
% 
% Binary resolution: 2698
% Factoring: 768
% Forward superposition: 142
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 97
% Split components: 196
% SAT solver clauses: 180
% SAT solver unit clauses: 9
% SAT solver binary clauses: 35
% SAT solver learnt clauses: 1
% 
% Sat splits: 97
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 179
% TWLsolver calls for satisfiability: 151
% 
% Memory used [KB]: 2302
% Time elapsed: 0.101 s
% ------------------------------
% ------------------------------
% Success in time 0.121 s
