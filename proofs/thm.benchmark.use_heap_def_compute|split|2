Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.benchmark
% (14121)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1174
% Passive clauses: 7054
% Generated clauses: 39249
% Final active clauses: 1022
% Final passive clauses: 5253
% Input formulas: 261
% Initial clauses: 469
% 
% Duplicate literals: 280
% Trivial inequalities: 49
% Fw subsumption resolutions: 2138
% Fw demodulations: 4232
% Bw demodulations: 144
% 
% Simple tautologies: 263
% Equational tautologies: 27
% Forward subsumptions: 24934
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 7322
% Factoring: 1415
% Forward superposition: 11156
% Backward superposition: 11705
% Self superposition: 52
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 398
% Split components: 798
% SAT solver clauses: 655
% SAT solver unit clauses: 23
% SAT solver binary clauses: 98
% 
% Sat splits: 398
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 651
% TWLsolver calls for satisfiability: 455
% 
% Memory used [KB]: 19189
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.benchmark
% (14144)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Passive clauses: 155
% Generated clauses: 845
% Final passive clauses: 155
% Input formulas: 261
% Initial clauses: 469
% 
% Duplicate literals: 8
% Trivial inequalities: 1
% Fw subsumption resolutions: 5
% Fw demodulations: 6
% Condensations: 16
% Global subsumptions: 25
% 
% Simple tautologies: 82
% Equational tautologies: 2
% Forward subsumptions: 4
% 
% SAT solver clauses: 901
% SAT solver unit clauses: 654
% SAT solver binary clauses: 105
% SAT solver learnt clauses: 50
% SAT solver learnt literals: 14
% 
% TWLsolver clauses: 801
% TWLsolver calls for satisfiability: 2342
% 
% Memory used [KB]: 21875
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.benchmark
% (14174)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Passive clauses: 245
% Generated clauses: 795
% Final passive clauses: 237
% Input formulas: 261
% Initial clauses: 469
% 
% Duplicate literals: 8
% Trivial inequalities: 1
% Fw subsumption resolutions: 2
% Fw demodulations: 291
% Bw demodulations: 8
% Condensations: 16
% 
% Simple tautologies: 82
% Equational tautologies: 2
% Forward subsumptions: 85
% Fw demodulations to eq. taut.: 10
% 
% SAT solver clauses: 247
% SAT solver unit clauses: 115
% SAT solver binary clauses: 67
% 
% Memory used [KB]: 83410
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 28 next slice time: 28
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.benchmark
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.benchmark
% SZS output start Proof for thm.benchmark
fof(f26745,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f26744])).
fof(f26744,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14)))),
  inference(forward_demodulation,[],[f26743,f811])).
fof(f811,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f383])).
fof(f383,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f257])).
fof(f257,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))),
  file('thm.benchmark.use_heap_def_compute|split|2','thm.numeral.numeral_suc|split|1')).
fof(f26743,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),sK14)))),
  inference(subsumption_resolution,[],[f26609,f601])).
fof(f601,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f280])).
fof(f280,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f221])).
fof(f221,axiom,(
  ! [X22] : s('type.num.num',X22) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),
  file('thm.benchmark.use_heap_def_compute|split|2','thm.arithmetic.NUMERAL_DEF')).
fof(f26609,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),sK14))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))))))))))))))))))))),
  inference(superposition,[],[f1177,f603])).
fof(f603,plain,(
  ( ! [X0,X1] : (s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.benchmark.heap'('type.num.num'),X1))) = s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num',X0),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X1)))))))))) )),
  inference(cnf_transformation,[],[f282])).
fof(f282,plain,(
  ! [X0,X1] : s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.benchmark.heap'('type.num.num'),X1))) = s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num',X0),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X1)))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.benchmark.heap'('type.num.num'),X7))) = s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num',X6),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X7)))))))))),
  file('thm.benchmark.use_heap_def_compute|split|2','thm.benchmark.use_heap_def|split|1')).
fof(f1177,plain,(
  ( ! [X0] : (s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.num.num',X0))),s('type.benchmark.heap'('type.num.num'),sK14))))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f1176,f601])).
fof(f1176,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))) | s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.num.num',X0))),s('type.benchmark.heap'('type.num.num'),sK14)))))))))) )),
  inference(forward_demodulation,[],[f922,f601])).
fof(f922,plain,(
  ( ! [X0] : (s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.num.num',X0))),s('type.benchmark.heap'('type.num.num'),sK14))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))))))))))))))))))))) )),
  inference(superposition,[],[f837,f582])).
fof(f582,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f460])).
fof(f460,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f98])).
fof(f98,axiom,(
  ! [X6,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) <=> s('type.num.num',X6) = s('type.num.num',X36))),
  file('thm.benchmark.use_heap_def_compute|split|2','thm.numeral.numeral_distrib|split|19')).
fof(f837,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),sK14)))))))))),
  inference(forward_demodulation,[],[f836,f601])).
fof(f836,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),sK14)))))))))),
  inference(forward_demodulation,[],[f835,f601])).
fof(f835,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),sK14)))))))))),
  inference(forward_demodulation,[],[f548,f601])).
fof(f548,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),sK14)))))))))),
  inference(cnf_transformation,[],[f445])).
fof(f445,plain,(
  s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),sK14))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK13))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),sK14)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14])],[f398])).
fof(f398,plain,(
  ? [X0,X1] : s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))),s('type.benchmark.heap'('type.num.num'),X1))) != s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X1)))))))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))),s('type.benchmark.heap'('type.num.num'),X1))) = s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X1)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))),s('type.benchmark.heap'('type.num.num'),X7))) = s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X7)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))),s('type.benchmark.heap'('type.num.num'),X7))) = s('type.benchmark.heap'('type.num.num'),'const.benchmark.use_heap_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.benchmark.heap'('type.num.num'),'const.benchmark.delete_min_1'(s('type.benchmark.heap'('type.num.num'),'const.benchmark.insert_4'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))),s('type.benchmark.heap'('type.num.num'),X7)))))))))),
  file('thm.benchmark.use_heap_def_compute|split|2','thm.benchmark.use_heap_def_compute|split|2')).
% SZS output end Proof for thm.benchmark
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 408
% Passive clauses: 5593
% Generated clauses: 25688
% Final active clauses: 408
% Final passive clauses: 5123
% Input formulas: 261
% Initial clauses: 279
% 
% Selected by SInE selection: 108
% SInE iterations: 1
% 
% Duplicate literals: 54
% Trivial inequalities: 341
% Fw subsumption resolutions: 162
% Fw demodulations: 13885
% 
% Simple tautologies: 69
% Equational tautologies: 1
% Forward subsumptions: 5672
% 
% Forward superposition: 11127
% Equality resolution: 49
% 
% Split clauses: 258
% Split components: 516
% SAT solver clauses: 259
% SAT solver binary clauses: 51
% 
% Sat splits: 258
% 
% Memory used [KB]: 19317
% Time elapsed: 1.072 s
% ------------------------------
% ------------------------------
% Success in time 13.25 s
