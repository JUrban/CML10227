Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (104560)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 785
% Passive clauses: 7185
% Generated clauses: 22439
% Final active clauses: 763
% Final passive clauses: 6141
% Input formulas: 132
% Initial clauses: 314
% 
% Duplicate literals: 140
% Trivial inequalities: 71
% Fw subsumption resolutions: 1028
% Fw demodulations: 3038
% Bw demodulations: 10
% 
% Simple tautologies: 284
% Equational tautologies: 20
% Forward subsumptions: 10499
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 5102
% Factoring: 371
% Forward superposition: 5364
% Backward superposition: 6794
% Self superposition: 62
% Equality factoring: 2
% Equality resolution: 19
% 
% Split clauses: 276
% Split components: 554
% SAT solver clauses: 393
% SAT solver unit clauses: 13
% SAT solver binary clauses: 87
% 
% Sat splits: 276
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 392
% TWLsolver calls for satisfiability: 257
% 
% Memory used [KB]: 15607
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (104592)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 362
% Passive clauses: 2541
% Generated clauses: 11745
% Final active clauses: 352
% Final passive clauses: 2154
% Input formulas: 132
% Initial clauses: 314
% 
% Duplicate literals: 74
% Trivial inequalities: 2
% Fw subsumption resolutions: 303
% Fw demodulations: 1505
% Bw demodulations: 34
% Condensations: 56
% Global subsumptions: 24
% 
% Simple tautologies: 248
% Equational tautologies: 11
% Forward subsumptions: 4081
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 2011
% Factoring: 58
% Forward superposition: 2910
% Backward superposition: 1894
% Self superposition: 47
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 35
% Split components: 70
% SAT solver clauses: 3226
% SAT solver unit clauses: 365
% SAT solver binary clauses: 100
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% Sat splits: 35
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 3130
% TWLsolver calls for satisfiability: 2049
% 
% Memory used [KB]: 17398
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f237710,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f755,f543])).
fof(f543,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK10),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',sK11))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))))),s('type.patSem.state'(sK10),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK10),sK12))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',sK13))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f393])).
fof(f393,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK10),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',sK11))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))))),s('type.patSem.state'(sK10),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK10),sK12))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',sK13))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14])],[f333])).
fof(f333,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X1))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X2))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X1))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X2))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X1))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X2))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X12))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X7))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10))))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X8))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X12))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X7))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10))))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X8))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pat_1'(s('type.exhLang.pat',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|48_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49|48_prove_ltb')).
fof(f755,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK44(X2,X1,X0)),s(X1,sK45(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f506])).
fof(f506,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK44(X2,X1,X0)),s(X1,sK45(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK44,sK45])],[f275])).
fof(f275,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f274])).
fof(f274,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X20,X21] : ! [X17] : ? [X51,X52] : s('type.pair.prod'(X20,X21),X17) = s('type.pair.prod'(X20,X21),'const.pair.,_2'(s(X20,X51),s(X21,X52)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|48_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 518
% Passive clauses: 4800
% Generated clauses: 242075
% Final active clauses: 448
% Final passive clauses: 1776
% Input formulas: 132
% Initial clauses: 314
% Discarded non-redundant clauses: 79273
% 
% Duplicate literals: 7
% Trivial inequalities: 14
% Fw subsumption resolutions: 891
% Fw demodulations: 98813
% Bw demodulations: 827
% Condensations: 38
% Global subsumptions: 1
% 
% Simple tautologies: 136
% Equational tautologies: 48
% Forward subsumptions: 20574
% Fw demodulations to eq. taut.: 37494
% Bw demodulations to eq. taut.: 37
% 
% Unit resulting resolution: 129007
% Factoring: 1
% Forward superposition: 4137
% Backward superposition: 3011
% Self superposition: 67
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 19
% Split components: 38
% SAT solver clauses: 5932
% SAT solver unit clauses: 2351
% SAT solver binary clauses: 2827
% 
% Sat splits: 19
% Sat splitting refutations: 1091
% 
% Memory used [KB]: 116927
% Time elapsed: 7.206 s
% ------------------------------
% ------------------------------
% Success in time 8.56 s
