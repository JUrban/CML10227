Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.evalProps
% (70815)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 139
% Passive clauses: 1909
% Generated clauses: 17401
% Final active clauses: 132
% Final passive clauses: 1587
% Input formulas: 20
% Initial clauses: 36
% 
% Duplicate literals: 1071
% Trivial inequalities: 209
% Fw subsumption resolutions: 1879
% Fw demodulations: 1839
% Bw demodulations: 5
% 
% Simple tautologies: 374
% Equational tautologies: 31
% Forward subsumptions: 9028
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 101
% Forward superposition: 7335
% Backward superposition: 4398
% Self superposition: 146
% Equality factoring: 66
% Equality resolution: 47
% 
% Split clauses: 745
% Split components: 1509
% SAT solver clauses: 1240
% SAT solver unit clauses: 40
% SAT solver binary clauses: 246
% 
% Sat splits: 745
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1238
% TWLsolver calls for satisfiability: 159
% 
% Memory used [KB]: 12153
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.evalProps
% (70826)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 101
% Passive clauses: 541
% Generated clauses: 8060
% Final active clauses: 94
% Final passive clauses: 411
% Input formulas: 20
% Initial clauses: 36
% 
% Duplicate literals: 463
% Trivial inequalities: 90
% Fw subsumption resolutions: 294
% Fw demodulations: 568
% Bw demodulations: 31
% Condensations: 962
% Global subsumptions: 4
% 
% Simple tautologies: 139
% Equational tautologies: 25
% Forward subsumptions: 4131
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 27
% Forward superposition: 3007
% Backward superposition: 1926
% Self superposition: 68
% Equality factoring: 34
% Equality resolution: 38
% 
% Split clauses: 49
% Split components: 107
% SAT solver clauses: 884
% SAT solver unit clauses: 45
% SAT solver binary clauses: 34
% SAT solver learnt clauses: 8
% 
% Sat splits: 49
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 868
% TWLsolver calls for satisfiability: 189
% 
% Memory used [KB]: 8571
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.evalProps
% (70848)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 369
% Passive clauses: 6050
% Generated clauses: 170508
% Final active clauses: 159
% Final passive clauses: 790
% Input formulas: 20
% Initial clauses: 36
% Discarded non-redundant clauses: 17395
% 
% Duplicate literals: 5911
% Trivial inequalities: 1117
% Fw subsumption resolutions: 7758
% Fw demodulations: 35970
% Bw demodulations: 3359
% Condensations: 13775
% Global subsumptions: 318
% 
% Simple tautologies: 1284
% Equational tautologies: 669
% Forward subsumptions: 80421
% Fw demodulations to eq. taut.: 13172
% Bw demodulations to eq. taut.: 286
% 
% Unit resulting resolution: 26873
% Forward superposition: 34032
% Backward superposition: 32729
% Self superposition: 539
% Equality factoring: 303
% Equality resolution: 142
% 
% Split clauses: 282
% Split components: 572
% SAT solver clauses: 7243
% SAT solver unit clauses: 172
% SAT solver binary clauses: 1125
% 
% Sat splits: 282
% Sat splitting refutations: 309
% 
% Memory used [KB]: 74071
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f523,plain,(
  $false),
  inference(equality_resolution,[],[f421])).
fof(f421,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X15),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s(X15,X16))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X15),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X14),s(X15,X17)))) )),
  inference(superposition,[],[f380,f69])).
fof(f69,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK3(X2,X1,X0)),s(X1,sK4(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK3(X2,X1,X0)),s(X1,sK4(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X7] : ! [X14] : ? [X18,X19] : s('type.pair.prod'(X6,X7),X14) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X18),s(X7,X19)))),
  file('thm.evalProps.merge_alist_mod_env_empty','thm.pair.ABS_PAIR_THM')).
fof(f380,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(trivial_inequality_removal,[],[f379])).
fof(f379,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f378,f80])).
fof(f80,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X10] : s('type.list.list'(X6),X10) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X10)))),
  file('thm.evalProps.merge_alist_mod_env_empty','thm.list.APPEND|split|0')).
fof(f378,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0))),s('type.list.list'(sK1),X1))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f371,f80])).
fof(f371,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X0))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),'const.list.NIL_0'),s('type.list.list'(sK1),X1))))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s(X2,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),X0),s('type.list.list'(sK1),X1))),s(X2,X4)))) )),
  inference(superposition,[],[f115,f79])).
fof(f79,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X5))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X4),s('type.list.list'(X1),X5)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X5))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X4),s('type.list.list'(X1),X5)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X5))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X4),s('type.list.list'(X1),X5)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X7] : ! [X20,X21,X22,X23] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X20),s('type.list.list'(X6),X22))),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X21),s('type.list.list'(X7),X23))))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X20),s('type.list.list'(X7),X21))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X22),s('type.list.list'(X7),X23)))))),
  file('thm.evalProps.merge_alist_mod_env_empty','thm.semanticPrimitives.merge_alist_mod_env_def')).
fof(f115,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X0) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X0))) | s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),X0),s(X1,X2)))) )),
  inference(superposition,[],[f65,f66])).
fof(f66,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,X2) = s(X0,X4) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & (s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & ((s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5)) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6,X7] : ! [X14,X15,X16,X17] : (s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X14),s(X7,X15))) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X16),s(X7,X17))) <=> (s(X6,X14) = s(X6,X16) & s(X7,X15) = s(X7,X17)))),
  file('thm.evalProps.merge_alist_mod_env_empty','thm.pair.CLOSED_PAIR_EQ')).
fof(f65,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2)))),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.pair.,_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK1),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2) != s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1] : ! [X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8)))),
  file('thm.evalProps.merge_alist_mod_env_empty','thm.evalProps.merge_alist_mod_env_empty')).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 234
% Generated clauses: 355
% Final active clauses: 39
% Final passive clauses: 206
% Input formulas: 20
% Initial clauses: 35
% 
% Selected by SInE selection: 19
% SInE iterations: 1
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% Fw demodulations: 32
% 
% Simple tautologies: 11
% Forward subsumptions: 99
% 
% Forward superposition: 383
% Equality resolution: 7
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1535
% Time elapsed: 0.046 s
% ------------------------------
% ------------------------------
% Success in time 11.779 s
