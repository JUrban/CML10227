Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.PairingHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.PairingHeap
% SZS output start Proof for thm.PairingHeap
fof(f4703,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4702,f224,f401,f399,f4701])).
fof(f4701,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f401,f225])).
fof(f225,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) != s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),X4),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,X5),s('type.list.list'('type.PairingHeap.heap'(sK12)),X6))),s('type.semanticPrimitives.v',X7)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK14),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',sK15))))) | s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK16),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK17),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK18))),s('type.semanticPrimitives.v',sK19)))))) & ! [X4,X5,X6,X7] : s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) != s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),X4),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,X5),s('type.list.list'('type.PairingHeap.heap'(sK12)),X6))),s('type.semanticPrimitives.v',X7))))) & ! [X2,X3] : s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) != s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X12,X13] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X12),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X13))))) | ? [X8,X9,X10,X11] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X9),s('type.list.list'('type.PairingHeap.heap'(X0)),X10))),s('type.semanticPrimitives.v',X11)))))) & ! [X4,X5,X6,X7] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) != s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X5),s('type.list.list'('type.PairingHeap.heap'(X0)),X6))),s('type.semanticPrimitives.v',X7))))) & ! [X2,X3] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) != s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X3))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X6,X7] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X6),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X7))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X3),s('type.list.list'('type.PairingHeap.heap'(X0)),X4))),s('type.semanticPrimitives.v',X5)))))) & ! [X10,X11,X12,X13] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) != s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X10),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X11),s('type.list.list'('type.PairingHeap.heap'(X0)),X12))),s('type.semanticPrimitives.v',X13))))) & ! [X8,X9] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) != s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X6,X7] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X6),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X7))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X3),s('type.list.list'('type.PairingHeap.heap'(X0)),X4))),s('type.semanticPrimitives.v',X5)))))) & (! [X10,X11,X12,X13] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) != s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X10),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X11),s('type.list.list'('type.PairingHeap.heap'(X0)),X12))),s('type.semanticPrimitives.v',X13))))) & ! [X8,X9] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) != s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9)))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X6,X7] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X6),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X7))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X3),s('type.list.list'('type.PairingHeap.heap'(X0)),X4))),s('type.semanticPrimitives.v',X5)))))) => (? [X10,X11,X12,X13] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X10),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X11),s('type.list.list'('type.PairingHeap.heap'(X0)),X12))),s('type.semanticPrimitives.v',X13))))) | ? [X8,X9] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9)))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X6,X7] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X6),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X7))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X3),s('type.list.list'('type.PairingHeap.heap'(X0)),X4))),s('type.semanticPrimitives.v',X5)))))) => (? [X10,X11,X12,X13] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X10),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Tree_2'(s(X0,X11),s('type.list.list'('type.PairingHeap.heap'(X0)),X12))),s('type.semanticPrimitives.v',X13))))) | ? [X8,X9] : s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),X1) = s('type.pair.prod'(fun(X0,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X0),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X0),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9))))) | ? [X8,X10,X11,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X10),s('type.list.list'('type.PairingHeap.heap'(X6)),X11))),s('type.semanticPrimitives.v',X9)))))) => (? [X8,X10,X11,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X10),s('type.list.list'('type.PairingHeap.heap'(X6)),X11))),s('type.semanticPrimitives.v',X9))))) | ? [X8,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9))))) | ? [X8,X10,X11,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X10),s('type.list.list'('type.PairingHeap.heap'(X6)),X11))),s('type.semanticPrimitives.v',X9)))))) => (? [X8,X10,X11,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Tree_2'(s(X6,X10),s('type.list.list'('type.PairingHeap.heap'(X6)),X11))),s('type.semanticPrimitives.v',X9))))) | ? [X8,X9] : s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),X7) = s('type.pair.prod'(fun(X6,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s('type.pair.prod'('type.PairingHeap.heap'(X6),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(X6),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X9)))))))),
  file('thm.PairingHeap.PairingHeap_28_prove_ltb','thm.PairingHeap.PairingHeap_28_prove_ltb')).
fof(f399,plain,(
  s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK14),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',sK15))))) | $spl0),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK14),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',sK15))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f401,plain,(
  s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK16),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK17),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK18))),s('type.semanticPrimitives.v',sK19))))) | $spl2),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK16),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK17),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK18))),s('type.semanticPrimitives.v',sK19))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f224,plain,(
  s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK16),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Tree_2'(s(sK12,sK17),s('type.list.list'('type.PairingHeap.heap'(sK12)),sK18))),s('type.semanticPrimitives.v',sK19))))) | s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) = s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),sK14),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',sK15)))))),
  inference(cnf_transformation,[],[f139])).
fof(f4702,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f399,f226])).
fof(f226,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),sK13) != s('type.pair.prod'(fun(sK12,fun('type.semanticPrimitives.v',bool)),'type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v')),'const.pair.,_2'(s(fun(sK12,fun('type.semanticPrimitives.v',bool)),X2),s('type.pair.prod'('type.PairingHeap.heap'(sK12),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.PairingHeap.heap'(sK12),'const.PairingHeap.Empty_0'),s('type.semanticPrimitives.v',X3)))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.PairingHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 366
% Passive clauses: 1542
% Generated clauses: 4472
% Final active clauses: 366
% Final passive clauses: 1004
% Input formulas: 37
% Initial clauses: 170
% 
% Duplicate literals: 153
% Trivial inequalities: 21
% Fw subsumption resolutions: 292
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2289
% 
% Binary resolution: 2795
% Factoring: 769
% Forward superposition: 158
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 98
% Split components: 197
% SAT solver clauses: 182
% SAT solver unit clauses: 8
% SAT solver binary clauses: 38
% SAT solver learnt clauses: 1
% 
% Sat splits: 98
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 181
% TWLsolver calls for satisfiability: 153
% 
% Memory used [KB]: 2430
% Time elapsed: 0.075 s
% ------------------------------
% ------------------------------
% Success in time 0.065 s
