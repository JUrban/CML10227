Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exhProps
% (89398)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 693
% Passive clauses: 6161
% Generated clauses: 17414
% Final active clauses: 691
% Final passive clauses: 5029
% Input formulas: 51
% Initial clauses: 166
% 
% Duplicate literals: 498
% Trivial inequalities: 47
% Fw subsumption resolutions: 1866
% Fw demodulations: 545
% Bw demodulations: 1
% 
% Simple tautologies: 218
% Equational tautologies: 46
% Forward subsumptions: 7276
% 
% Binary resolution: 7081
% Factoring: 1304
% Forward superposition: 2597
% Backward superposition: 3062
% Self superposition: 36
% Equality factoring: 34
% Equality resolution: 15
% 
% Split clauses: 752
% Split components: 1520
% SAT solver clauses: 1011
% SAT solver unit clauses: 9
% SAT solver binary clauses: 134
% 
% Sat splits: 752
% 
% TWLsolver clauses: 1011
% TWLsolver calls for satisfiability: 368
% 
% Memory used [KB]: 8827
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exhProps
% (89426)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 378
% Passive clauses: 2285
% Generated clauses: 10098
% Final active clauses: 373
% Final passive clauses: 1883
% Input formulas: 51
% Initial clauses: 166
% 
% Duplicate literals: 203
% Trivial inequalities: 27
% Fw subsumption resolutions: 745
% Fw demodulations: 130
% Bw demodulations: 26
% Condensations: 477
% Global subsumptions: 13
% 
% Simple tautologies: 240
% Equational tautologies: 21
% Forward subsumptions: 3379
% 
% Binary resolution: 3510
% Factoring: 334
% Forward superposition: 1060
% Backward superposition: 1052
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 7
% 
% Split clauses: 40
% Split components: 80
% SAT solver clauses: 2755
% SAT solver unit clauses: 177
% SAT solver binary clauses: 72
% SAT solver learnt clauses: 26
% SAT solver learnt literals: 10
% 
% Sat splits: 40
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2703
% TWLsolver calls for satisfiability: 1535
% 
% Memory used [KB]: 11385
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exhProps
% (89450)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1569
% Passive clauses: 11146
% Generated clauses: 117839
% Final active clauses: 748
% Final passive clauses: 1157
% Input formulas: 51
% Initial clauses: 166
% Discarded non-redundant clauses: 49
% 
% Duplicate literals: 8022
% Trivial inequalities: 229
% Fw subsumption resolutions: 5012
% Fw demodulations: 8398
% Bw demodulations: 7002
% Condensations: 12661
% Global subsumptions: 270
% 
% Simple tautologies: 282
% Equational tautologies: 699
% Forward subsumptions: 68070
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 839
% 
% Unit resulting resolution: 7652
% Factoring: 4
% Forward superposition: 36964
% Backward superposition: 25021
% Self superposition: 238
% Equality factoring: 173
% Equality resolution: 8
% 
% Split clauses: 626
% Split components: 1268
% SAT solver clauses: 13312
% SAT solver unit clauses: 554
% SAT solver binary clauses: 1436
% 
% Sat splits: 626
% Sat splitting refutations: 641
% 
% Memory used [KB]: 57056
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.exhProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exhProps
% SZS output start Proof for thm.exhProps
fof(f430,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f392,f396,f394,f414,f416,f415,f428,f429])).
fof(f429,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f394,f384])).
fof(f384,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0)))) )),
  inference(subsumption_resolution,[],[f374,f369])).
fof(f369,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0')) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0] : s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0')),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0] : ~s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0')),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X11] : ~s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.No_match_0')),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.semanticPrimitives.match_result_distinct|split|0')).
fof(f374,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0)))) )),
  inference(superposition,[],[f224,f269])).
fof(f269,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) | ! [X4] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) => ! [X4] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6,X7,X8,X9] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) => ! [X10] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10))))),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.exhProps.pmatch_any_no_match|split|1')).
fof(f224,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK13)))),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK13))) & s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14])],[f117])).
fof(f117,plain,(
  ? [X0,X1,X2,X3] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) & ? [X4] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),
  inference(ennf_transformation,[],[f53])).
fof(f53,plain,(
  ~! [X0,X1,X2,X3] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) => ! [X4] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) => ! [X10] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) => ! [X10] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10))))),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.exhProps.pmatch_any_match_error|split|1')).
fof(f428,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f396,f385])).
fof(f385,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) )),
  inference(subsumption_resolution,[],[f375,f367])).
fof(f367,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1] : ~s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X11] : ! [X26] : ~s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.Match_1'(s(X11,X26)))),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.semanticPrimitives.match_result_distinct|split|2')).
fof(f375,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK15(sK13,X1,X2,sK12,sK11,sK10)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) )),
  inference(superposition,[],[f224,f268])).
fof(f268,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK15(X5,X4,X3,X2,X1,X0)))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X5))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)))) )),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) | ! [X5] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK15(X5,X4,X3,X2,X1,X0)))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X5))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) | ! [X5] : ? [X6] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X6))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X5))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))) => ! [X5] : ? [X6] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X6))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X0),s('type.list.list'('type.exhLang.pat'),X1),s('type.list.list'('type.exhSem.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X5))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X7,X8,X9,X21] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X21))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) => ! [X10] : ? [X22] : s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X22))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),X6),s('type.list.list'('type.exhLang.pat'),X7),s('type.list.list'('type.exhSem.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10))))),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.exhProps.pmatch_any_match|split|1')).
fof(f415,plain,(
  ( ! [X18] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))))) ) | $spl4),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  ( ! [X18] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f416,plain,(
  ( ! [X19] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X19)))) ) | $spl6),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  ( ! [X19] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X19)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f414,plain,(
  ( ! [X19,X18] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X19))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))))) )),
  inference(subsumption_resolution,[],[f408,f255])).
fof(f255,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1] : ~s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X11] : ! [X26] : ~s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.Match_1'(s(X11,X26)))),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.semanticPrimitives.match_result_distinct|split|1')).
fof(f408,plain,(
  ( ! [X19,X18] : (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X19))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X18)))) )),
  inference(superposition,[],[f385,f368])).
fof(f368,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK17(X1,X0)))) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1)) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK17(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17])],[f114])).
fof(f114,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X11] : ! [X27] : (s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X11),X27) | s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X11),X27) | ? [X26] : s('type.semanticPrimitives.match_result'(X11),X27) = s('type.semanticPrimitives.match_result'(X11),'const.semanticPrimitives.Match_1'(s(X11,X26))))),
  file('thm.exhProps.pmatch_any_match_error|split|1','thm.semanticPrimitives.match_result_nchotomy')).
fof(f394,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))) | $spl0),
  inference(cnf_transformation,[],[f394_D])).
fof(f394_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f396,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl2),
  inference(cnf_transformation,[],[f396_D])).
fof(f396_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f392,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)))),
  inference(trivial_inequality_removal,[],[f391])).
fof(f391,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK17('const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)))),
  inference(superposition,[],[f225,f368])).
fof(f225,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),sK10),s('type.list.list'('type.exhLang.pat'),sK11),s('type.list.list'('type.exhSem.v'),sK12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK14)))),
  inference(cnf_transformation,[],[f162])).
% SZS output end Proof for thm.exhProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 113
% Passive clauses: 14
% Generated clauses: 56
% Final active clauses: 113
% Final passive clauses: 6
% Input formulas: 51
% Initial clauses: 146
% 
% Selected by SInE selection: 43
% SInE iterations: 1
% 
% Duplicate literals: 3
% Trivial inequalities: 4
% Fw subsumption resolutions: 7
% 
% Simple tautologies: 34
% Equational tautologies: 2
% Forward subsumptions: 31
% 
% Forward superposition: 24
% Backward superposition: 16
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 5
% SAT solver unit clauses: 2
% SAT solver binary clauses: 2
% 
% Sat splits: 2
% Sat splitting refutations: 2
% 
% Memory used [KB]: 1151
% Time elapsed: 0.032 s
% ------------------------------
% ------------------------------
% Success in time 11.784 s
