Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (61886)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 147
% Passive clauses: 2596
% Generated clauses: 19657
% Final active clauses: 140
% Final passive clauses: 2279
% Input formulas: 25
% Initial clauses: 31
% 
% Duplicate literals: 916
% Trivial inequalities: 208
% Fw subsumption resolutions: 2071
% Fw demodulations: 2941
% Bw demodulations: 6
% 
% Simple tautologies: 351
% Equational tautologies: 26
% Forward subsumptions: 9471
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 136
% Forward superposition: 8014
% Backward superposition: 4925
% Self superposition: 177
% Equality factoring: 49
% Equality resolution: 37
% 
% Split clauses: 462
% Split components: 936
% SAT solver clauses: 985
% SAT solver unit clauses: 15
% SAT solver binary clauses: 209
% 
% Sat splits: 462
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 983
% TWLsolver calls for satisfiability: 167
% 
% Memory used [KB]: 18421
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% (61902)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 100
% Passive clauses: 996
% Generated clauses: 11872
% Final active clauses: 93
% Final passive clauses: 863
% Input formulas: 25
% Initial clauses: 31
% 
% Duplicate literals: 560
% Trivial inequalities: 107
% Fw subsumption resolutions: 596
% Fw demodulations: 1192
% Bw demodulations: 30
% Condensations: 996
% 
% Simple tautologies: 174
% Equational tautologies: 26
% Forward subsumptions: 5726
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 33
% Forward superposition: 4325
% Backward superposition: 2745
% Self superposition: 155
% Equality factoring: 49
% Equality resolution: 28
% 
% Split clauses: 67
% Split components: 142
% SAT solver clauses: 1522
% SAT solver unit clauses: 48
% SAT solver binary clauses: 46
% 
% Sat splits: 67
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1522
% TWLsolver calls for satisfiability: 177
% 
% Memory used [KB]: 20084
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f5885,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5882])).
fof(f5882,plain,(
  ( ! [X0] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2))))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2)))))) )),
  inference(backward_demodulation,[],[f5848,f5278])).
fof(f5278,plain,(
  ( ! [X0] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2))))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2)))))) )),
  inference(unit_resulting_resolution,[],[f76,f91])).
fof(f91,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) & (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3)))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X12,X13,X14] : (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X12),s('type.list.list'(X6),X13))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X12),s('type.list.list'(X6),X14))) <=> s('type.list.list'(X6),X13) = s('type.list.list'(X6),X14))),
  file('thm.modProps.build_rec_env_merge','thm.list.APPEND_|49||49||split|0')).
fof(f76,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2)))),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f67])).
fof(f67,plain,(
  ? [X0,X1,X2] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X1,X3,X4] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ~! [X1,X3,X4] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10)))),
  file('thm.modProps.build_rec_env_merge','thm.modProps.build_rec_env_merge')).
fof(f5848,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) )),
  inference(superposition,[],[f96,f98])).
fof(f98,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7,X16,X17] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X16),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X17))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun('type.list.list'('type.string.char'),fun('type.modLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.string.char'),fun('type.modLang.exp',fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X16),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7)))),
  file('thm.modProps.build_rec_env_merge','thm.modSem.build_rec_env_def')).
fof(f96,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'(X0,X1),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X0,fun(X1,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X0,X1))),X3)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X15] : ! [X10,X7,X9,X8] : s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X15)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X15),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X15)),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X15),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'_dst_x0x1_2'(s(fun(fun(X6,fun(X15,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.pair.prod'(X6,X15),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X6,fun(X15,'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'_dst_x000x100x100_3'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X15))),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.FOLDR_3'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X15)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),happ(s(fun(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X15),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X15)),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun('type.pair.prod'(X6,X15),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'_dst_x0x1_2'(s(fun(fun(X6,fun(X15,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),fun('type.pair.prod'(X6,X15),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.string.char'),fun(X6,fun(X15,fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))),'_dst_x000x100_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))),'const.list.CONS_0'),s(fun('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'_dst_x1x1_2'(s(fun('type.list.list'('type.string.char'),fun('type.modSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_0'),s(fun('type.list.list'('type.string.char'),'type.modSem.v'),'const.modSem.Recclosure_2'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'(X6,X15))),X7)))),
  file('thm.modProps.build_rec_env_merge','thm.modProps.modProps_|49|_prove_ltb')).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 65
% Passive clauses: 545
% Generated clauses: 5805
% Final active clauses: 55
% Final passive clauses: 402
% Input formulas: 25
% Initial clauses: 31
% 
% Duplicate literals: 293
% Trivial inequalities: 77
% Fw subsumption resolutions: 233
% Fw demodulations: 471
% Bw demodulations: 82
% Condensations: 599
% Global subsumptions: 3
% 
% Simple tautologies: 126
% Equational tautologies: 114
% Forward subsumptions: 3277
% Fw demodulations to eq. taut.: 20
% Bw demodulations to eq. taut.: 5
% 
% Unit resulting resolution: 490
% Forward superposition: 2019
% Backward superposition: 1241
% Self superposition: 118
% Equality factoring: 46
% Equality resolution: 20
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 570
% SAT solver unit clauses: 132
% SAT solver binary clauses: 174
% 
% Sat splits: 6
% Sat splitting refutations: 8
% 
% Memory used [KB]: 10106
% Time elapsed: 0.294 s
% ------------------------------
% ------------------------------
% Success in time 1.651 s
