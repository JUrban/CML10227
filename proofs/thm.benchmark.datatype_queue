Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.benchmark
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.benchmark
% SZS output start Proof for thm.benchmark
fof(f701,plain,(
  $false),
  inference(subsumption_resolution,[],[f700,f27])).
fof(f27,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.benchmark.datatype_queue',aHL_TRUTH)).
fof(f700,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f26,f31])).
fof(f31,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X6,X8)))),
  file('thm.benchmark.datatype_queue','thm.bool.DATATYPE_TAG_THM')).
fof(f26,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(sK0),fun('type.benchmark.queue'(sK0),fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)))),bool),happ(s(fun(fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)),fun(fun('type.benchmark.digit'(sK0),fun('type.benchmark.queue'(sK0),fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)))),bool)),sK1),s(fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(sK0),fun('type.benchmark.queue'(sK0),fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)))),'const.benchmark.Deep_0'))))))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(sK0),fun('type.benchmark.queue'(sK0),fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)))),bool),happ(s(fun(fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)),fun(fun('type.benchmark.digit'(sK0),fun('type.benchmark.queue'(sK0),fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)))),bool)),sK1),s(fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(sK0),fun('type.benchmark.queue'(sK0),fun('type.benchmark.digit'(sK0),'type.benchmark.queue'(sK0)))),'const.benchmark.Deep_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f22])).
fof(f22,plain,(
  ? [X0,X1] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),bool),happ(s(fun(fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)),fun(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),bool)),X1),s(fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),'const.benchmark.Deep_0'))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),bool),happ(s(fun(fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)),fun(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),bool)),X1),s(fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),'const.benchmark.Deep_0'))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),bool),happ(s(fun(fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)),fun(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),bool)),X1),s(fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(X0),fun('type.benchmark.queue'(X0),fun('type.benchmark.digit'(X0),'type.benchmark.queue'(X0)))),'const.benchmark.Deep_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(X6),fun('type.benchmark.queue'(X6),fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)))),bool),happ(s(fun(fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)),fun(fun('type.benchmark.digit'(X6),fun('type.benchmark.queue'(X6),fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)))),bool)),X7),s(fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(X6),fun('type.benchmark.queue'(X6),fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)))),'const.benchmark.Deep_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.benchmark.digit'(X6),fun('type.benchmark.queue'(X6),fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)))),bool),happ(s(fun(fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)),fun(fun('type.benchmark.digit'(X6),fun('type.benchmark.queue'(X6),fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)))),bool)),X7),s(fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)),'const.benchmark.Shallow_0'))),s(fun('type.benchmark.digit'(X6),fun('type.benchmark.queue'(X6),fun('type.benchmark.digit'(X6),'type.benchmark.queue'(X6)))),'const.benchmark.Deep_0'))))))),
  file('thm.benchmark.datatype_queue','thm.benchmark.datatype_queue')).
% SZS output end Proof for thm.benchmark
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 19
% Passive clauses: 72
% Generated clauses: 636
% Final active clauses: 17
% Final passive clauses: 43
% Input formulas: 9
% Initial clauses: 9
% 
% Duplicate literals: 98
% Trivial inequalities: 14
% Fw subsumption resolutions: 24
% Fw demodulations: 30
% 
% Simple tautologies: 37
% Equational tautologies: 17
% Forward subsumptions: 329
% 
% Binary resolution: 6
% Forward superposition: 242
% Backward superposition: 113
% Self superposition: 49
% Equality factoring: 40
% Equality resolution: 4
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 21
% SAT solver unit clauses: 4
% SAT solver binary clauses: 15
% 
% Sat splits: 12
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 21
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 767
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 0.022 s
